using System;
using System.Linq;
using System.IO;
using iTextSharp.text;
using iTextSharp.text.pdf;
using System.Text.RegularExpressions;
using System.Web.UI.WebControls;
using System.Collections.Generic;
using it = iTextSharp.text;
using System.Data;
//using ERPPrintReportDLL;

namespace DESPLWEB
{
    public class PrintPDFReport
    {
        LabDataDataContext dc;
        public static string cnStr = System.Configuration.ConfigurationManager.AppSettings["conStr"].ToString();
        string[] notes = new string[] { "The test reports and results relate to the particular specimen/sample(s) of the material as delivered/received and tested in the laboratory.", "Any test report shall not be reproduced except in full,without the written permission from Durocrete. ", "Any alteration/change in the originally printed and issued report, would render this report as INVALID. " };
        static string fontSystemPath = "C:/Windows/Fonts/Square 721 BT.ttf";
        static string foldername = "C:/temp/Veena";
        static string tollFree = "";

        public PrintPDFReport()
        {
            dc = new LabDataDataContext();
            if (tollFree == "")
            {
                if (cnStr.ToLower().Contains("mumbai") == true)
                    tollFree = " 9850500013";
                else if (cnStr.ToLower().Contains("nashik") == true)
                    tollFree = " 7720006754";
                else
                    tollFree = " Toll-Free No : 18001206465"; //180030000096
            }
        }
        public PrintPDFReport(string connection)
        {
            dc = new LabDataDataContext(connection);
            cnStr = connection;
            if (tollFree == "")
            {
                if (cnStr.ToLower().Contains("mumbai") == true)
                    tollFree = " 9850500013";
                else if (cnStr.ToLower().Contains("nashik") == true)
                    tollFree = " 7720006754";
                else
                    tollFree = " Toll-Free No : 18001206465"; //180030000096
            }
        }
        public void PrintSelectedReport(string Rectype, string RefNo, string strAction, string strTrialId, string strCubeDays, string strMFType, string strMaterialName, string strMaterialId, string strSampleName, string strPageBreak)
        {
            //PrintPDFReport rpt = new PrintPDFReport();
            ////clsPrintReport rpt = new clsPrintReport(cnStr);
            switch (Rectype)
            {
                case "AAC":
                    if (strPageBreak == "")
                        strPageBreak = "False";
                    var detail = dc.AllInwdDetails_View(RefNo, "", 0, "", 0, null, "", "", 0, false, false, true, 0, "", 0, 0, 0, 0, 0, "", 0, "AAC");
                    foreach (var aac in detail)
                    {
                        if (Convert.ToString(aac.TEST_Sr_No) == "1")//(solid.SOLIDINWD_TEST_Id) == "66")
                        {
                            AAC_CS_PDFReport(RefNo, strAction, Convert.ToBoolean(strPageBreak));
                        }
                        else if (Convert.ToString(aac.TEST_Sr_No) == "2")
                        {
                            AAC_DS_PDFReport(RefNo, strAction, Convert.ToBoolean(strPageBreak));
                        }
                        else if (Convert.ToString(aac.TEST_Sr_No) == "3")
                        {
                            AAC_DM_PDFReport(RefNo, strAction, Convert.ToBoolean(strPageBreak));
                        }
                        else if (Convert.ToString(aac.TEST_Sr_No) == "4")
                        {
                            AAC_SN_PDFReport(RefNo, strAction, Convert.ToBoolean(strPageBreak));
                        }
                    }
                    break;
                case "AGGT":
                    if (strMaterialId == "")
                        strMaterialId = "0";
                    if (strPageBreak == "")
                        strPageBreak = "False";
                    Aggregate_PDFReport(RefNo, Rectype, strMaterialName, Convert.ToInt32(strMaterialId), strAction, Convert.ToBoolean(strPageBreak));
                    break;
                case "BT-":
                    Brick_PDFReport(RefNo, strAction);
                    break;
                case "CCH":
                    CCH_PDFReport(RefNo, strAction);
                    break;
                case "GGBSCH":
                    GGBSCH_PDFReport(RefNo, strAction);
                    break;
                case "GGBS":
                    GGBS_PDFReport(RefNo, strAction);
                    break;
                case "CEMT":
                    Cement_PDFReport(RefNo, strAction);
                    break;
                case "CR":
                    Core_PDFReport(RefNo, strAction);
                    break;
                case "CT":
                    //if (strCubeDays == "")
                    //    strCubeDays = "0";
                    Cube_PDFReport(RefNo, 0, Rectype, "", strAction, "", "");
                    //rpt.Cube_PDFReport(RefNo, Convert.ToInt32(strCubeDays), Rectype, strMFType, strAction, strMaterialName, strTrialId);
                    break;
                case "FLYASH":
                    FlyAsh_PDFReport(RefNo, strAction);
                    break;
                case "SOLID":
                    var details = dc.AllInwdDetails_View(RefNo, "", 0, "", 0, null, "", "", 0, false, false, true, 0, "", 0, 0, 0, 0, 0, "", 0, "SOLID");
                    foreach (var solid in details)
                    {
                        if (Convert.ToString(solid.TEST_Sr_No) == "1")//(solid.SOLIDINWD_TEST_Id) == "66")
                        {
                            SOLID_CS_PDFReport(RefNo, strAction);
                        }
                        else if (Convert.ToString(solid.TEST_Sr_No) == "2")
                        {
                            SOLID_WA_PDFReport(RefNo, strAction);
                        }
                    }
                    break;
                case "NDT":
                    var ndtreport = dc.NDTReport_View(RefNo).ToList();
                    if (ndtreport.Count > 0)
                        NDT_SummaryReport(RefNo, strAction, strPageBreak);
                    else
                        NDT_PDFReport(RefNo, strAction, strPageBreak, null);
                    break;
                case "OT":
                    //rpt.OT_PDFReport(RefNo, Print);
                    OT_PDFReport(RefNo, strAction);
                    break;
                case "PT":
                    var PTdetails = dc.AllInwdDetails_View(RefNo, "", 0, "", 0, null, "", "", 0, false, false, true, 0, "", 0, 0, 0, 0, 0, "", 0, "PT");
                    foreach (var PTWA in PTdetails)
                    {
                        if (Convert.ToString(PTWA.TEST_Sr_No) == "1")//1
                        {
                            Pavement_CS_PDFReport(RefNo, strAction);
                        }
                        else if (Convert.ToString(PTWA.TEST_Sr_No) == "2")//2 //(Convert.ToString(PTWA.PTINWD_TEST_Id) == "63")
                        {
                            Pavement_WA_PDFReport(RefNo, strAction);
                        }
                        else if (Convert.ToString(PTWA.TEST_Sr_No) == "3")//3
                        {
                            Pavement_TS_PDFReport(RefNo, strAction);
                        }
                        else if (Convert.ToString(PTWA.TEST_Sr_No) == "4")//4
                        {
                            Pavement_FS_PDFReport(RefNo, strAction);
                        }
                    }
                    break;
                case "PILE":
                    Pile_PDFReport(RefNo, strAction);
                    break;
                case "SO":
                    if (strPageBreak == "")
                        strPageBreak = "False";
                    if (strSampleName != "")
                    {
                        Soil_PDFReport(RefNo, strSampleName, strAction, Convert.ToBoolean(strPageBreak));
                    }
                    else
                    {
                        var smp = dc.SoilSampleTest_View(RefNo, "");
                        foreach (var so in smp)
                        {
                            Soil_PDFReport(RefNo, Convert.ToString(so.SOSMPLTEST_SampleName_var), strAction, Convert.ToBoolean(strPageBreak));
                            break;
                        }
                    }
                    break;
                case "STC":
                    STC_PDFReport(RefNo, strAction);
                    break;
                case "ST":
                    ST_PDFReport(RefNo, strAction);
                    break;
                case "TILE":
                    Tile_PDFReport(RefNo, strAction);
                    break;
                case "WT":
                    WT_PDFReport(RefNo, strAction);
                    break;
                case "MF":
                    PrintHTMLReport rptHtml = new PrintHTMLReport();
                    int trailId = 0;
                    var mixd = dc.Trial_View(RefNo, true);
                    foreach (var mf in mixd)
                    {
                        trailId = mf.Trial_Id;
                    }
                    if (strMFType == "Sieve Analysis")
                        MFSieveAnalysis_PDF(RefNo, "MF", strAction);
                    else if (strMFType == "Moisture Correction")
                        MoistureCorrection_PDF(RefNo, trailId, strAction);
                    else if (strMFType == "Cover Sheet")
                        MDLCoverSheet_PDF(RefNo, trailId, strAction);
                    else if (strMFType == "Blank Trial")
                        rptHtml.TrialProportion_Html(RefNo, 0);
                    else if (strMFType == "Trial")
                        rptHtml.TrialInformation_Html(RefNo, Convert.ToInt32(strTrialId));
                    else if (strMFType == "Cube Strength")
                        Cube_PDFReport(RefNo, Convert.ToInt32(strCubeDays), "MF", "MF", strAction, "TrialCubeCompStr", strTrialId);
                    //else if (strMFType == "FinalNew" || strMFType=="Final")
                    //    MF_FinalReport(RefNo, trailId, strAction);
                    else //MDL and Final
                        MF_MDLetter_PDFReport(RefNo, trailId, "MF", strMFType, strAction);
                    break;
            }
            //if (Rectype != "OT" && strAction != "Email" && strAction.Contains("Email") == false)
            //{
            //    string strfoldername = "D:/ERPReports/";
            //    if (cnStr.ToLower().Contains("mumbai") == true)
            //        strfoldername += "Mumbai";
            //    else if (cnStr.ToLower().Contains("nashik") == true)
            //        strfoldername += "Nashik";
            //    else
            //        strfoldername += "Pune";

            //    string strFileName = Rectype + "_" + RefNo.Replace('/', '_') + ".pdf";
            //    if (Rectype == "MF")
            //    {
            //        if (strMFType == "Sieve Analysis")
            //            strFileName = "SieveAnalysis" + "_" + RefNo.Replace('/', '_') + ".pdf";
            //        else if (strMFType == "Moisture Correction")
            //            strFileName = "MoistureCorrection" + "_" + RefNo.Replace('/', '_') + ".pdf";
            //        else if (strMFType == "Cover Sheet")
            //            strFileName = "MDLCoverSheet" + "_" + RefNo.Replace('/', '_') + ".pdf";
            //        else if (strMFType == "Blank Trial")
            //            strFileName = "";
            //        else if (strMFType == "Trial")
            //            strFileName = "";
            //        else if (strMFType == "Cube Strength")
            //            strFileName = "CT" + "_" + RefNo.Replace('/', '_') + ".pdf";
            //    }
            //    string strPdfPath = @strfoldername + "/" + strFileName;
            //    if (strPdfPath != "")
            //        DownloadReport(strFileName, strPdfPath);
            //}
        }
        private void LogoToPdf(Document pdfDoc, int nablStatus)//logo use for  print action
        {
            //BaseFont customfont = BaseFont.CreateFont(fontSystemPath, BaseFont.CP1252, BaseFont.EMBEDDED);
            BaseFont customfont = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, false);
            string imageURL = "";
            Font fontL1 = new Font(customfont, 12f, Font.UNDEFINED);
            Font fontL2 = new Font(customfont, 8f, Font.UNDEFINED);
            Font fontL3 = new Font(customfont, 7, Font.BOLD);
            Font fontL4 = new Font(customfont, 14, Font.UNDEFINED);
            Font fontL5 = new Font(customfont, 7.5f, Font.UNDEFINED);
            PdfPTable tableLogo = new PdfPTable(3);
            tableLogo.WidthPercentage = 100;
            tableLogo.SetWidths(new float[] { 50, 15, 35 });

            PdfPCell cellLogo = new PdfPCell(new Phrase("\nDurocrete Engineering Services Pvt.Ltd.", fontL1));
            cellLogo.HorizontalAlignment = Element.ALIGN_LEFT;
            cellLogo.Border = PdfPCell.NO_BORDER;
            tableLogo.AddCell(cellLogo);


            if (nablStatus == 0)
            {
                cellLogo = new PdfPCell(new Phrase("", fontL1));
                cellLogo.HorizontalAlignment = Element.ALIGN_CENTER;
                cellLogo.Border = PdfPCell.NO_BORDER;
                cellLogo.Rowspan = 6;
                tableLogo.AddCell(cellLogo);
            }
            else
            {
                if (cnStr.ToLower().Contains("mumbai") == true)
                {
                    imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/nablLogoMumbai.png";
                }
                else if (cnStr.ToLower().Contains("nashik") == true)
                {
                    imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/nablLogoNashik.png";
                }
                else //if (!cnStr.ToLower().Contains("nashik"))
                    imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/nablLogoPune.png";

                iTextSharp.text.Image jpg = iTextSharp.text.Image.GetInstance(imageURL);
                //jpg.ScaleAbsolute(80, 90);
                jpg.ScaleAbsolute(72, 90);
                cellLogo = new PdfPCell(jpg);
                cellLogo.HorizontalAlignment = Element.ALIGN_CENTER;
                cellLogo.Border = PdfPCell.NO_BORDER;
                cellLogo.PaddingTop = 2;
                cellLogo.Rowspan = 6;
                tableLogo.AddCell(cellLogo);

            }

            string teststr = "\n\n\n" + "         " + "Test with the Best";
            cellLogo = new PdfPCell(new Phrase(teststr, fontL4));
            cellLogo.HorizontalAlignment = Element.ALIGN_RIGHT;
            cellLogo.VerticalAlignment = Element.ALIGN_RIGHT;
            cellLogo.Border = PdfPCell.NO_BORDER;
            cellLogo.Rowspan = 5;
            
            tableLogo.AddCell(cellLogo);
            cnStr = dc.Connection.Database.ToLower();
            if (cnStr.ToLower().Contains("mumbai") == true)
            {
                cellLogo = new PdfPCell(new Phrase("PAP-D122/125,TTC Industrial Area,Behind Jai Mata Di Weighbridge,", fontL5));
                cellLogo.HorizontalAlignment = Element.ALIGN_LEFT;
                cellLogo.Border = PdfPCell.NO_BORDER;
                tableLogo.AddCell(cellLogo);


                cellLogo = new PdfPCell(new Phrase("Turbhe,Navi Mumbai-400705.", fontL5));
                cellLogo.Border = PdfPCell.NO_BORDER;
                cellLogo.HorizontalAlignment = Element.ALIGN_LEFT;
                tableLogo.AddCell(cellLogo);


                cellLogo = new PdfPCell(new Phrase("Tel No: +91-9850500013.", fontL2));
                cellLogo.Border = PdfPCell.NO_BORDER;
                cellLogo.HorizontalAlignment = Element.ALIGN_LEFT;
                tableLogo.AddCell(cellLogo);


                cellLogo = new PdfPCell(new Phrase("Email: infomumbai@durocrete.acts-int.com", fontL2));
                cellLogo.HorizontalAlignment = Element.ALIGN_LEFT;
                cellLogo.Border = PdfPCell.NO_BORDER;
                tableLogo.AddCell(cellLogo);
            }
            else if (cnStr.ToLower().Contains("nashik") == true)
            {
                cellLogo = new PdfPCell(new Phrase("Sunil Towers,Behind KK Travels,Dwarka,Nashik-422001.", fontL2));
                cellLogo.HorizontalAlignment = Element.ALIGN_LEFT;
                cellLogo.Border = PdfPCell.NO_BORDER;
                tableLogo.AddCell(cellLogo);


                cellLogo = new PdfPCell(new Phrase("Tel No: +91-9527005478,7720006754", fontL2));
                cellLogo.Border = PdfPCell.NO_BORDER;
                cellLogo.HorizontalAlignment = Element.ALIGN_LEFT;
                tableLogo.AddCell(cellLogo);

                cellLogo = new PdfPCell(new Phrase("Email: infonashik@durocrete.acts-int.com", fontL2));
                cellLogo.HorizontalAlignment = Element.ALIGN_LEFT;
                cellLogo.Border = PdfPCell.NO_BORDER;
                cellLogo.Rowspan = 3;
                tableLogo.AddCell(cellLogo);
            }
            else
            {
                //cellLogo = new PdfPCell(new Phrase("19/1,Hingane Khurd,Vitthalwadi,Sinhgad Road,Pune-411051.", fontL2));
                //cellLogo.HorizontalAlignment = Element.ALIGN_LEFT;
                //cellLogo.Border = PdfPCell.NO_BORDER;
                //tableLogo.AddCell(cellLogo);


                //cellLogo = new PdfPCell(new Phrase("Tel No: +91-9881735302,020-24345170,24348027", fontL2));
                //cellLogo.Border = PdfPCell.NO_BORDER;
                //cellLogo.HorizontalAlignment = Element.ALIGN_LEFT;
                //tableLogo.AddCell(cellLogo);

                //cellLogo = new PdfPCell(new Phrase("Email: info@durocrete.acts-int.com", fontL2));
                //cellLogo.HorizontalAlignment = Element.ALIGN_LEFT;
                //cellLogo.Border = PdfPCell.NO_BORDER;
                //tableLogo.AddCell(cellLogo);

                cellLogo = new PdfPCell(new Phrase("Sr. No. 38/2/3, Near PARI Chowk & CNG Pump,", fontL2));
                cellLogo.HorizontalAlignment = Element.ALIGN_LEFT;
                cellLogo.Border = PdfPCell.NO_BORDER;
                tableLogo.AddCell(cellLogo);

                cellLogo = new PdfPCell(new Phrase("Opp. Venkatesh Sharvil Soc., Narhe Industrial Estate, Pune-42.", fontL2));
                cellLogo.Border = PdfPCell.NO_BORDER;
                cellLogo.HorizontalAlignment = Element.ALIGN_LEFT;
                tableLogo.AddCell(cellLogo);

                cellLogo = new PdfPCell(new Phrase("Tel No: +91-9881735302,020-24345170,24348027", fontL2));
                cellLogo.HorizontalAlignment = Element.ALIGN_LEFT;
                cellLogo.Border = PdfPCell.NO_BORDER;
                tableLogo.AddCell(cellLogo);

                cellLogo = new PdfPCell(new Phrase("Email: info@durocrete.acts-int.com", fontL2));
                cellLogo.HorizontalAlignment = Element.ALIGN_LEFT;
                cellLogo.Border = PdfPCell.NO_BORDER;
                tableLogo.AddCell(cellLogo);
            }
            //if (!cnStr.ToLower().Contains("nashik"))
            //{
            cellLogo = new PdfPCell(new Phrase("An ISO/IEC 17025:2017 NABL Accredited Laboratory", fontL3));
            cellLogo = new PdfPCell(new Phrase("", fontL3));
            cellLogo.Border = PdfPCell.NO_BORDER;
            cellLogo.HorizontalAlignment = Element.ALIGN_LEFT;
            //if (cnStr.ToLower().Contains("mumbai") == true)
            //    cellLogo.Rowspan = 1;
            //else
            //    cellLogo.Rowspan = 2;
            if (cnStr.ToLower().Contains("nashik") == true)
                cellLogo.Rowspan = 2;
            else
                cellLogo.Rowspan = 1;
            
            tableLogo.AddCell(cellLogo);
            //}

            cellLogo = new PdfPCell(new Phrase("Website : www.durocrete.in", fontL2));
            cellLogo.HorizontalAlignment = Element.ALIGN_RIGHT;
            cellLogo.VerticalAlignment = Element.ALIGN_RIGHT;
            cellLogo.Border = PdfPCell.NO_BORDER;
            tableLogo.AddCell(cellLogo);



            pdfDoc.Add(tableLogo);
        }
        private void LogoToPdfEmail(Document pdfDoc, int nablStatus) //logo use for email
        {
            PdfPTable tableLogo = new PdfPTable(1);
            tableLogo.WidthPercentage = 100;
            string imageURL = "";
            if (cnStr.ToLower().Contains("mumbai") == true)
            {
                if (nablStatus == 0)//nonnabl
                    imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoMum.png";
                else if (nablStatus == 1)
                    imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoMumNABL.png";

            }
            else if (cnStr.ToLower().Contains("nashik") == true)
            {

                if (nablStatus == 0)//nonnabl
                    imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoNashik.png";
                else if (nablStatus == 1)
                    imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoNashikNABL.png";
                //imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoMumNABL.png";
            }
            else
            {
                if (nablStatus == 0)//nonnabl
                    imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoPune.png";
                else if (nablStatus == 1)
                    imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoPuneNABL.png";
            }

            iTextSharp.text.Image jpg = iTextSharp.text.Image.GetInstance(imageURL);
            jpg.ScaleAbsolute(500, 75);
            PdfPCell cellLogo = new PdfPCell(jpg);
            // cellLogo.HorizontalAlignment = Element.ALIGN_CENTER;
            cellLogo.Border = PdfPCell.NO_BORDER;
            tableLogo.AddCell(cellLogo);

            pdfDoc.Add(tableLogo);

        }
        private void LogoToBillPdf(Document pdfDoc)//logo use for  print action
        {


            PdfPTable tableLogo = new PdfPTable(1);
            tableLogo.WidthPercentage = 100;
            string imageURL = "";

            if (cnStr.ToLower().Contains("mumbai") == true)
                imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoMum.png";
            else if (cnStr.ToLower().Contains("nashik") == true)
                imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoNashik.png";
            else
                imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoPune.png";

            iTextSharp.text.Image jpg = iTextSharp.text.Image.GetInstance(imageURL);
            jpg.ScaleAbsolute(500, 75);
            PdfPCell cellLogo = new PdfPCell(jpg);
            // cellLogo.HorizontalAlignment = Element.ALIGN_CENTER;
            cellLogo.Border = PdfPCell.NO_BORDER;
            tableLogo.AddCell(cellLogo);



            pdfDoc.Add(tableLogo);
        }
        private void LogoToPdfOld(Document pdfDoc, string Action)//logo use for  print action
        {
            int nablStatus = 0;
            string userNablStatus = getUserNABLStatus(Action);

            if (userNablStatus == "NON-NABL")
                nablStatus = 0;
            else if (userNablStatus == "NABL")
                nablStatus = 1;

            //if (nablStatus == -1)
            //{
            PdfPTable tableLogo = new PdfPTable(1);
            tableLogo.WidthPercentage = 100;
            string imageURL = "";
            if (cnStr.ToLower().Contains("mumbai") == true)
            {
                if (nablStatus == 0)//nonnabl
                    imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoMum.png";
                else if (nablStatus == 1)
                    imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoMumNABL.png";

            }
            else if (cnStr.ToLower().Contains("nashik") == true)
            {
                imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoNashik.png";
            }
            else
            {
                if (nablStatus == 0)//nonnabl
                    imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoPune.png";
                else if (nablStatus == 1)
                    imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoPuneNABL.png";
            }

            iTextSharp.text.Image jpg = iTextSharp.text.Image.GetInstance(imageURL);
            jpg.ScaleAbsolute(500, 75);
            PdfPCell cellLogo = new PdfPCell(jpg);
            // cellLogo.HorizontalAlignment = Element.ALIGN_CENTER;
            cellLogo.Border = PdfPCell.NO_BORDER;
            tableLogo.AddCell(cellLogo);

            pdfDoc.Add(tableLogo);
            //}
        }
        private void LogoToPdfOld_270121(Document pdfDoc, int nablStatus)//logo use for  print action
        {

            PdfPTable tableLogo = new PdfPTable(1);
            tableLogo.WidthPercentage = 100;
            string imageURL = "";
            if (cnStr.ToLower().Contains("mumbai") == true)
            {
                if (nablStatus == 0)//nonnabl
                    imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoMum.png";
                else if (nablStatus == 1)
                    imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoMumNABL.png";

            }
            else if (cnStr.ToLower().Contains("nashik") == true)
            {
                imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoNashik.png";
            }
            else
            {
                if (nablStatus == 0)//nonnabl
                    imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoPune.png";
                else if (nablStatus == 1)
                    imageURL = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/testLogoPuneNABL.png";
            }

            iTextSharp.text.Image jpg = iTextSharp.text.Image.GetInstance(imageURL);
            jpg.ScaleAbsolute(500, 75);
            PdfPCell cellLogo = new PdfPCell(jpg);
            // cellLogo.HorizontalAlignment = Element.ALIGN_CENTER;
            cellLogo.Border = PdfPCell.NO_BORDER;
            tableLogo.AddCell(cellLogo);

            pdfDoc.Add(tableLogo);
            //}
        }
        private void AddPasswordToPDF(string sourceFile, string outputFile, string password)
        {
            PdfReader pReader = new PdfReader(sourceFile);

            PdfEncryptor.Encrypt(pReader, new FileStream(outputFile, FileMode.Open), PdfWriter.STRENGTH128BITS, password, "", PdfWriter.AllowScreenReaders);
        }
        private string reportAuthenticateCode()
        {
            //string con = dc.Connection.ConnectionString;
            //string authCode = "00";
            //if (con == "Data Source=120.138.116.190;Initial Catalog=veenaLive;User ID=dipl;")//Password=dipl
            //    authCode = "01";//pune
            //else if (con == "Data Source=14.192.18.65;Initial Catalog=veenaMumbai;User ID=dipl;")//Password=dipl@2009
            //    authCode = "02";//mumbai
            //else if (con == "Data Source=14.192.18.65;Initial Catalog=veenaNashik;User ID=dipl;")
            //    authCode = "03";//nashik
            string authCode = "00";

            if (cnStr.ToLower().Contains("mumbai") == true)
                authCode = "02";
            else if (cnStr.ToLower().Contains("nashik") == true)
                authCode = "03";
            else
                authCode = "01";///pune
                                ///

            return authCode;
        }
        private string getUserNABLStatus(string Action)
        {
            string status = "";

            if (Action.Contains("DisplayLogoWithoutNABL"))
                status = "NON-NABL";
            else if (Action.Contains("DisplayLogoWithNABL"))
                status = "NABL";

            return status;
        }
        private int getNablLogoStatus(string RecType, string ReferenceNo)
        {
            int status = 0;

            if (RecType != "")
            {
                string recType = "", testType = "";
                string[] arr = RecType.Split(',');
                if (arr.Length == 1)
                    recType = arr[0].ToString();
                else
                {
                    recType = arr[0].ToString();
                    testType = arr[1].ToString();
                }
                string nablScope = "";
                var reslt = dc.Inward_View_NablStatus(ReferenceNo, recType, testType).ToList();
                if (reslt.Count > 0)
                {
                    nablScope = Convert.ToString(reslt.FirstOrDefault().NablScope);
                }

                if (nablScope == "F" || nablScope == "P")
                    status = 1;
                else if (nablScope == "NA")
                    status = 0;
                else if (nablScope == "" || nablScope == null)
                {
                    var rslt = dc.Material_View(RecType, "");
                    foreach (var mat in rslt)
                    {
                        status = Convert.ToInt32(mat.MATERIAL_NablPrn_bit);
                    }
                }
            }

            return status;
        }
        private string getNablULRNo()
        {
            var rslt = dc.MasterSetting_View(0);
            string nablPrefix = Convert.ToString(rslt.FirstOrDefault().MASTER_NABLPrefix_var);
            return "";
        }
        private void DownloadReport(string fileName, string pdfPath)
        {


            //System.Web.HttpContext.Current.Response.AddHeader("Content-Disposition", "inline;filename=" + fileName);
            System.Web.HttpContext.Current.Response.ClearContent();
            System.Web.HttpContext.Current.Response.ClearHeaders();
            System.Web.HttpContext.Current.Response.AddHeader("content-disposition", "attachment; filename=" + fileName);
            System.Web.HttpContext.Current.Response.ContentType = "application/pdf";
            System.Web.HttpContext.Current.Response.WriteFile(pdfPath);
            //System.Web.HttpContext.Current.Response.TransmitFile(pdfPath);
            System.Web.HttpContext.Current.Response.Flush();


            //WebClient User = new WebClient();
            //Byte[] FileBuffer = User.DownloadData(pdfPath);
            //FileInfo file = new FileInfo(pdfPath);
            //if (FileBuffer != null)
            //{
            //    System.Web.HttpContext.Current.Response.ContentType = "application/pdf";
            //    System.Web.HttpContext.Current.Response.AddHeader("content-length", FileBuffer.Length.ToString());
            //    System.Web.HttpContext.Current.Response.BinaryWrite(FileBuffer);//"<script> window.open( '" + pageurl + "','_blank' ); </script>"
            //}
            ////System.Web.HttpContext.Current.Response.Write("<SCRIPT language=javascript>var pdf=window.open('" + FileBuffer + "','PDF');pdf.moveTo(0,0);</SCRIPT>");
            //System.Web.HttpContext.Current.Response.Flush();
        }
        public bool CheckGSTFlag(DateTime BillDate)
        {
            bool gstFlag = false;
            //string[] strDate = txtDate.Text.Split('/');
            //DateTime BillDate = new DateTime(Convert.ToInt32(strDate[2]), Convert.ToInt32(strDate[1]), Convert.ToInt32(strDate[0]));
            var master = dc.GST_View(1, BillDate);
            if (master.Count() > 0)
            {
                gstFlag = true;
            }
            else
            {
                gstFlag = false;
            }
            return gstFlag;
        }
        public bool IsValidEmailAddress(string s)
        {
            if (string.IsNullOrEmpty(s))
                return false;
            else
            {
                var regex = new Regex(@"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*");
                return regex.IsMatch(s) && !s.EndsWith(".");
            }
        }

        public void AlertDetails_PDFReport(string AlertMap_EmailId_var, int type)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 20;

                Document pdfDoc = new Document(PageSize.A4, 10f, 5f, marginTop, 10f);
                var fileName = "AlertDetails_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Alerts";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);

                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1(-1);
                pdfDoc.Open();
                //bool flag = false;
                PdfPTable table1 = new PdfPTable(12);  //tbl
                PdfPCell cell1;
                table1.SplitLate = false;
                table1.SplitRows = true;
                DataTable dtAlertId;
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 6.5f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 7f, Font.BOLD);
                clsData obj = new clsData();
                int SNo = 1, SrNo = 0;
                string[] headers134 = { "Enquiry No", "Enquiry Date", "Client Name", "Site Name", "Material Type" };
                string[] headers2 = { "Enquiry No", "Enquiry Date", "Proposal No", "Proposal Date", "Client Name", "Site Name", "Material Type" };
                string[] headers789111213 = { "Enquiry No", "Enquiry Date", "Ref. No", "Record No", "Client Name", "Site Name", "Material Type" };
                string[] headers1517181920 = { "Bill No", "Bill Date", "Bill Amount", "Client Name", "Site Name", "Material Type" };

                if (type == 1)
                {
                    string[] headers = { "Cause of Escalation", "Count" };


                    table1 = new PdfPTable(2);
                    table1.WidthPercentage = 80;
                    table1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.SetTotalWidth(new float[] { 60f, 20f });


                    for (int h = 0; h < headers.Count(); h++)
                    {
                        cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                }
                int alrtIdForTable = 0, prvAlrtIdForTable = 0;
                dtAlertId = obj.getAlertIds(AlertMap_EmailId_var, type);
                for (int i = 0; i < dtAlertId.Rows.Count; i++)
                {
                    SNo = 1;
                    alrtIdForTable = Convert.ToInt32(dtAlertId.Rows[i][0].ToString());

                    var alerts = dc.AlertDetails_View_PDF(alrtIdForTable).ToList();
                    if (alerts.Count > 0)
                    {
                        SrNo++;
                        if (type == 0)
                        {
                            if (i != 0)
                                pdfDoc.Add(table1);

                            foreach (var item in alerts)
                            {
                                if (SNo == 1 && (alrtIdForTable == 1 || alrtIdForTable == 3 || alrtIdForTable == 4))
                                {
                                    paragraph = new Paragraph();
                                    paragraph.Alignment = Element.ALIGN_LEFT;
                                    paragraph.Font = fontH2;
                                    paragraph.Add(SrNo + ")" + item.Alert_Description_var);
                                    paragraph.SpacingAfter = 5;
                                    pdfDoc.Add(paragraph);

                                    table1 = new PdfPTable(5);
                                    table1.WidthPercentage = 100;
                                    table1.SpacingAfter = 5;
                                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                    table1.SetTotalWidth(new float[] { 16f, 20f, 40f, 40f, 25f });


                                    for (int h = 0; h < headers134.Count(); h++)
                                    {
                                        cell1 = new PdfPCell(new Phrase(headers134[h], fontH2));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                    }

                                }
                                else if (SNo == 1 && alrtIdForTable == 2)
                                {

                                    paragraph = new Paragraph();
                                    paragraph.Alignment = Element.ALIGN_LEFT;
                                    paragraph.Font = fontH2;
                                    paragraph.Add(SrNo + ")" + item.Alert_Description_var);
                                    paragraph.SpacingAfter = 5;
                                    pdfDoc.Add(paragraph);

                                    table1 = new PdfPTable(7);
                                    table1.WidthPercentage = 100;
                                    table1.SpacingAfter = 5;
                                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                    table1.SetTotalWidth(new float[] { 16f, 20f, 25f, 25f, 40f, 40f, 25f });


                                    for (int h = 0; h < headers2.Count(); h++)
                                    {
                                        cell1 = new PdfPCell(new Phrase(headers2[h], fontH2));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                    }

                                }
                                else if (SNo == 1 && (alrtIdForTable == 8 || alrtIdForTable == 7 || alrtIdForTable == 9 || alrtIdForTable == 11 || alrtIdForTable == 12 || alrtIdForTable == 13))
                                {

                                    paragraph = new Paragraph();
                                    paragraph.Alignment = Element.ALIGN_LEFT;
                                    paragraph.Font = fontH2;
                                    paragraph.Add(SrNo + ")" + item.Alert_Description_var);
                                    paragraph.SpacingAfter = 5;
                                    pdfDoc.Add(paragraph);

                                    table1 = new PdfPTable(7);
                                    table1.WidthPercentage = 100;
                                    table1.SpacingAfter = 5;
                                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                    table1.SetTotalWidth(new float[] { 16f, 20f, 25f, 25f, 40f, 40f, 25f });


                                    for (int h = 0; h < headers789111213.Count(); h++)
                                    {
                                        cell1 = new PdfPCell(new Phrase(headers789111213[h], fontH2));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                    }

                                }
                                else if (SNo == 1 && (alrtIdForTable == 18 || alrtIdForTable == 19 || alrtIdForTable == 20 || alrtIdForTable == 15 || alrtIdForTable == 17))
                                {

                                    paragraph = new Paragraph();
                                    paragraph.Alignment = Element.ALIGN_LEFT;
                                    paragraph.Font = fontH2;
                                    paragraph.Add(SrNo + ")" + item.Alert_Description_var);
                                    paragraph.SpacingAfter = 5;
                                    pdfDoc.Add(paragraph);


                                    table1 = new PdfPTable(6);
                                    table1.SpacingAfter = 5;
                                    table1.WidthPercentage = 100;
                                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                    table1.SetTotalWidth(new float[] { 16f, 20f, 25f, 40f, 45f, 25f });


                                    for (int h = 0; h < headers1517181920.Count(); h++)
                                    {
                                        cell1 = new PdfPCell(new Phrase(headers1517181920[h], fontH2));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                    }

                                }
                                if (alrtIdForTable == 1 || alrtIdForTable == 3 || alrtIdForTable == 4 || alrtIdForTable == 7 || alrtIdForTable == 2 || alrtIdForTable == 8 || alrtIdForTable == 9 || alrtIdForTable == 11 || alrtIdForTable == 12 || alrtIdForTable == 13)
                                {
                                    if (Convert.ToString(item.AlertDtl_EnqNo_int) != "0")
                                        cell1 = new PdfPCell(new Phrase(item.AlertDtl_EnqNo_int.ToString(), fontH3));
                                    else
                                        cell1 = new PdfPCell(new Phrase("", fontH3));
                                    table1.AddCell(cell1);
                                    if (Convert.ToString(item.AlertDtl_EnqDate_date) != "")
                                    {
                                        DateTime rDT = Convert.ToDateTime(item.AlertDtl_EnqDate_date);
                                        cell1 = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH3));
                                    }
                                    else
                                    {
                                        cell1 = new PdfPCell(new Phrase("", fontH3));
                                    }
                                    table1.AddCell(cell1);
                                }
                                if (alrtIdForTable == 2)
                                {
                                    if (Convert.ToString(item.AlertDtl_ProNo_var) != "")
                                        cell1 = new PdfPCell(new Phrase(item.AlertDtl_ProNo_var.ToString(), fontH3));
                                    else
                                        cell1 = new PdfPCell(new Phrase("", fontH3));
                                    table1.AddCell(cell1);
                                    if (Convert.ToString(item.AlertDtl_ProDate_date) != "")
                                    {
                                        DateTime rDT = Convert.ToDateTime(item.AlertDtl_ProDate_date);
                                        cell1 = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH3));
                                    }
                                    else
                                    {
                                        cell1 = new PdfPCell(new Phrase("", fontH3));
                                    }
                                    table1.AddCell(cell1);
                                }
                                if (alrtIdForTable == 15 || alrtIdForTable == 17 || alrtIdForTable == 18 || alrtIdForTable == 19 || alrtIdForTable == 20)
                                {
                                    if (Convert.ToString(item.AlertDtl_BillNo_int) != "0")
                                        cell1 = new PdfPCell(new Phrase(item.AlertDtl_BillNo_int.ToString(), fontH3));
                                    else
                                        cell1 = new PdfPCell(new Phrase("", fontH3));
                                    table1.AddCell(cell1);
                                    if (Convert.ToString(item.AlertDtl_BillDate_date) != "")
                                    {
                                        DateTime rDT = Convert.ToDateTime(item.AlertDtl_BillDate_date);
                                        cell1 = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH3));
                                    }
                                    else
                                    {
                                        cell1 = new PdfPCell(new Phrase("", fontH3));
                                    }
                                    table1.AddCell(cell1);
                                    cell1 = new PdfPCell(new Phrase(item.AlertDtl_BillAmt_dec.ToString(), fontH3));
                                    table1.AddCell(cell1);
                                }
                                if (alrtIdForTable == 8 || alrtIdForTable == 7 || alrtIdForTable == 9 || alrtIdForTable == 11 || alrtIdForTable == 12 || alrtIdForTable == 13)
                                {
                                    cell1 = new PdfPCell(new Phrase(item.AlertDtl_RefNo_var.ToString(), fontH3));
                                    if (Convert.ToString(item.AlertDtl_RefNo_var) != "")
                                        cell1 = new PdfPCell(new Phrase(item.AlertDtl_RefNo_var.ToString(), fontH3));
                                    else
                                        cell1 = new PdfPCell(new Phrase("", fontH3));
                                    table1.AddCell(cell1);
                                    if (Convert.ToString(item.AlertDtl_RecNo_int) != "0")
                                        cell1 = new PdfPCell(new Phrase(item.AlertDtl_RecNo_int.ToString(), fontH3));
                                    else
                                        cell1 = new PdfPCell(new Phrase("", fontH3));
                                    table1.AddCell(cell1);
                                }
                                cell1 = new PdfPCell(new Phrase(item.AlertDtl_CL_Name_var.ToString(), fontH3));
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(item.AlertDtl_SITE_Name_var.ToString(), fontH3));
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(item.AlertDtl_RecType_var.ToString(), fontH3));
                                table1.AddCell(cell1);
                                SNo++;
                                //if (SNo == 50)
                                //    break;
                            }
                            prvAlrtIdForTable = Convert.ToInt32(dtAlertId.Rows[i][0].ToString());

                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(SrNo + ")" + alerts.FirstOrDefault().Alert_Description_var, fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            if (alerts.FirstOrDefault().AlertDtl_EsclatnCount_int.ToString() != "" || alerts.FirstOrDefault().AlertDtl_EsclatnCount_int.ToString() != null)
                            {
                                cell1 = new PdfPCell(new Phrase(alerts.FirstOrDefault().AlertDtl_EsclatnCount_int.ToString(), fontH3));
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase("0", fontH3));
                            }
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                        }
                    }
                }

                pdfDoc.Add(table1);
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                pdfDoc.Close();

                string reportPath = @Subfoldername + "/" + fileName;
                //DownloadReport(fileName, pdfPath);

                bool sendMail = true;
                if (AlertMap_EmailId_var.Trim() == "" || AlertMap_EmailId_var.Trim().ToLower() == "na@unknown.com" ||
                         AlertMap_EmailId_var.Trim().ToLower() == "na" || AlertMap_EmailId_var.Trim().ToLower().Contains("na@") == true ||
                         AlertMap_EmailId_var.Trim().ToLower().Contains("@") == false || AlertMap_EmailId_var.Trim().ToLower().Contains(".") == false)
                {
                    sendMail = false;
                }
                if (IsValidEmailAddress(AlertMap_EmailId_var.Trim()) == false)
                {
                    sendMail = false;

                }
                if (sendMail == true)
                {
                    if (File.Exists(@reportPath))
                    {
                        clsSendMail objMail = new clsSendMail();
                        string mTo = "", mCC = "", mSubject = "", mbody = "", mReplyTo = ""; //, TestType = "";
                        //mTo = "shital.bandal@gmail.com";
                        mTo = AlertMap_EmailId_var.Trim();
                        //if (txtEmailIdCc.Text != "")
                        //mCC = txtEmailIdCc.Text.Trim();
                        //mCC = "reports.pune@durocrete.acts-int.com";
                        //mCC = "duroreports.pune@gmail.com";

                        mSubject = "";
                        mSubject = "Alerts for Services";
                        mbody = "Dear Sir/Madam,<br><br>";
                        mbody = mbody + "Please find attached " + mSubject + ".<br>";
                        mbody = mbody + "Please feel free to contact in case of any queries." + " <br><br><br>";
                        mbody = mbody + "<br>&nbsp;";
                        mbody = mbody + "<br>&nbsp;";
                        mbody = mbody + "<br>";
                        mbody = mbody + "Best Regards,";
                        mbody = mbody + "<br>&nbsp;";
                        mbody = mbody + "<br>";
                        mbody = mbody + "DUROCRETE ENGINEERING SERVICES PVT. LTD.";
                        objMail.SendMailProposal(mTo, mCC, mSubject, mbody, reportPath, mReplyTo);
                    }
                }


            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }

        public void AggregateDisposal_PDFReport(bool disposalStatus, string strFromDate, string strToDate)
        {
            Paragraph paragraph = new Paragraph();
            float marginTop = 50;
            Document pdfDoc = new Document(PageSize.A4, 55f, 45f, marginTop, 10f);
            var fileName = "AGGT_Disposal" + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
            if (!Directory.Exists(@foldername))
                Directory.CreateDirectory(@foldername);
            string Subfoldername = foldername + "/Disposal";
            if (!Directory.Exists(@Subfoldername))
                Directory.CreateDirectory(@Subfoldername);
            string Subfoldername1 = Subfoldername;

            Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
            Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
            Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.UNDEFINED);
            Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
            Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.UNDEFINED);
            Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLDITALIC);
            PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
            pdfDoc.Open();

            string tempStr = "";
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_CENTER;
            paragraph.Add("Material Storage Register (Aggregate Testing)");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            if (disposalStatus == true)
                tempStr = "Material Disposal Completed From " + strFromDate + " To " + strToDate;
            else
                tempStr = "Material Send To Disposal Bin From " + strFromDate + " To " + strToDate;
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_CENTER;
            paragraph.Add(tempStr);
            paragraph.SpacingAfter = 10;
            pdfDoc.Add(paragraph);

            PdfPTable table1 = null;

            string[] strDate = strFromDate.Split('/');
            DateTime FromDate = new DateTime(Convert.ToInt32(strDate[2]), Convert.ToInt32(strDate[1]), Convert.ToInt32(strDate[0]));
            strDate = strToDate.Split('/');
            DateTime ToDate = new DateTime(Convert.ToInt32(strDate[2]), Convert.ToInt32(strDate[1]), Convert.ToInt32(strDate[0]));

            string[] header = { "Sr.No.", "Record No.", "Quantity", "Inward Date", "Disposal Date" };
            table1 = new PdfPTable(5);
            float[] widths1 = new float[] { 7f, 10f, 10f, 10f, 10f };
            table1.SetWidths(widths1);
            table1.SpacingBefore = 5;

            PdfPCell cell1;
            for (int h = 0; h < header.Count(); h++)
            {
                cell1 = new PdfPCell(new Phrase(header[h], fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);
            }

            int srNo = 0;
            var aggtDisp = dc.DisposeMaterial_View("AGGT", FromDate, ToDate, disposalStatus);
            foreach (var aggt in aggtDisp)
            {
                #region tbldata
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;

                srNo++;
                cell1 = new PdfPCell(new Phrase(srNo.ToString(), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(aggt.AGGTINWD_RecordType_var + "-" + aggt.AGGTINWD_ReferenceNo_var, fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(aggt.AGGTINWD_Quantity_tint.ToString(), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(Convert.ToDateTime(aggt.AGGTINWD_ReceivedDate_dt).ToString("dd/MM/yyyy"), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                if (disposalStatus == true)
                    tempStr = Convert.ToDateTime(aggt.AGGTINWD_DisposedDate_dt).ToString("dd/MM/yyyy");
                else
                    tempStr = "";
                cell1 = new PdfPCell(new Phrase(tempStr, fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                #endregion
            }

            pdfDoc.Add(table1);
            pdfDoc.Close();
            string pdfPath = @Subfoldername1 + "/" + fileName;
            DownloadReport(fileName, pdfPath);

        }
        public void CementDisposal_PDFReport(bool disposalStatus, string strFromDate, string strToDate)
        {
            Paragraph paragraph = new Paragraph();
            float marginTop = 50;
            Document pdfDoc = new Document(PageSize.A4, 55f, 45f, marginTop, 10f);
            var fileName = "CEMT_Disposal" + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
            if (!Directory.Exists(@foldername))
                Directory.CreateDirectory(@foldername);
            string Subfoldername = foldername + "/Disposal";
            if (!Directory.Exists(@Subfoldername))
                Directory.CreateDirectory(@Subfoldername);
            string Subfoldername1 = Subfoldername;

            Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
            Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
            Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.UNDEFINED);
            Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
            Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.UNDEFINED);
            Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLDITALIC);
            PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
            pdfDoc.Open();

            string tempStr = "";
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_CENTER;
            paragraph.Add("Material Storage Register (Cement Testing)");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            if (disposalStatus == true)
                tempStr = "Material Disposal Completed From " + strFromDate + " To " + strToDate;
            else
                tempStr = "Material Send To Disposal Bin From " + strFromDate + " To " + strToDate;
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_CENTER;
            paragraph.Add(tempStr);
            paragraph.SpacingAfter = 10;
            pdfDoc.Add(paragraph);

            PdfPTable table1 = null;

            string[] strDate = strFromDate.Split('/');
            DateTime FromDate = new DateTime(Convert.ToInt32(strDate[2]), Convert.ToInt32(strDate[1]), Convert.ToInt32(strDate[0]));
            strDate = strToDate.Split('/');
            DateTime ToDate = new DateTime(Convert.ToInt32(strDate[2]), Convert.ToInt32(strDate[1]), Convert.ToInt32(strDate[0]));

            string[] header = { "Sr.No.", "Record No.", "Quantity", "Inward Date", "Disposal Date" };
            table1 = new PdfPTable(5);
            float[] widths1 = new float[] { 7f, 10f, 10f, 10f, 10f };
            table1.SetWidths(widths1);
            table1.SpacingBefore = 5;

            PdfPCell cell1;
            for (int h = 0; h < header.Count(); h++)
            {
                cell1 = new PdfPCell(new Phrase(header[h], fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);
            }

            int srNo = 0;
            var cemtDisp = dc.DisposeMaterial_View("CEMT", FromDate, ToDate, disposalStatus);
            foreach (var cemt in cemtDisp)
            {
                #region tbldata
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;

                srNo++;
                cell1 = new PdfPCell(new Phrase(srNo.ToString(), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(cemt.CEMTINWD_RecordType_var + "-" + cemt.CEMTINWD_ReferenceNo_var, fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(cemt.CEMTINWD_Quantity_tint.ToString(), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(Convert.ToDateTime(cemt.CEMTINWD_ReceivedDate_dt).ToString("dd/MM/yyyy"), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                if (disposalStatus == true)
                    tempStr = Convert.ToDateTime(cemt.CEMTINWD_DisposedDate_dt).ToString("dd/MM/yyyy");
                else
                    tempStr = "";
                cell1 = new PdfPCell(new Phrase(tempStr, fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                #endregion
            }

            pdfDoc.Add(table1);
            pdfDoc.Close();
            string pdfPath = @Subfoldername1 + "/" + fileName;
            DownloadReport(fileName, pdfPath);

        }
        public void SteelDisposal_PDFReport(bool disposalStatus, string strFromDate, string strToDate)
        {
            Paragraph paragraph = new Paragraph();
            float marginTop = 50;
            Document pdfDoc = new Document(PageSize.A4, 55f, 45f, marginTop, 10f);
            var fileName = "ST_Disposal" + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
            if (!Directory.Exists(@foldername))
                Directory.CreateDirectory(@foldername);
            string Subfoldername = foldername + "/Disposal";
            if (!Directory.Exists(@Subfoldername))
                Directory.CreateDirectory(@Subfoldername);
            string Subfoldername1 = Subfoldername;

            Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
            Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
            Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.UNDEFINED);
            Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
            Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.UNDEFINED);
            Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLDITALIC);
            PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
            pdfDoc.Open();

            string tempStr = "";
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_CENTER;
            paragraph.Add("Material Storage Register (Steel Testing)");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            if (disposalStatus == true)
                tempStr = "Disposal Completed From " + strFromDate + " To " + strToDate;
            else
                tempStr = "Pending for Disposal From " + strFromDate + " To " + strToDate;
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_CENTER;
            paragraph.Add(tempStr);
            paragraph.SpacingAfter = 10;
            pdfDoc.Add(paragraph);

            PdfPTable table1 = null;

            string[] strDate = strFromDate.Split('/');
            DateTime FromDate = new DateTime(Convert.ToInt32(strDate[2]), Convert.ToInt32(strDate[1]), Convert.ToInt32(strDate[0]));
            strDate = strToDate.Split('/');
            DateTime ToDate = new DateTime(Convert.ToInt32(strDate[2]), Convert.ToInt32(strDate[1]), Convert.ToInt32(strDate[0]));

            string[] header = { "Sr.No.", "Record No.", "Qty.", "Inward Date", "Testing Date", "Send Date to Disposal", "Disposed Date", "Remark" };
            table1 = new PdfPTable(8);
            float[] widths1 = new float[] { 7f, 10f, 10f, 10f, 10f, 10f, 10f, 15f };
            table1.SetWidths(widths1);
            table1.SpacingBefore = 5;

            PdfPCell cell1;
            for (int h = 0; h < header.Count(); h++)
            {
                cell1 = new PdfPCell(new Phrase(header[h], fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);
            }

            int srNo = 0;
            decimal nTot = 0, mTot = 0, mrTot = 0;
            var stDisp = dc.DisposeMaterial_View("ST", FromDate, ToDate, disposalStatus);
            foreach (var st in stDisp)
            {
                #region tbldata
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;

                srNo++;
                cell1 = new PdfPCell(new Phrase(srNo.ToString(), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(st.STINWD_RecordType_var + "-" + st.STINWD_ReferenceNo_var, fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                //Quantity
                decimal mWt = 0, mLen = 0, mQty = 0;
                var stDetail = dc.SteelDetailInward_Update(st.STINWD_ReferenceNo_var, 0, "", 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, "", "", 0, 0, "", "", "", "", "", "", false, true, false);
                foreach (var stdtl in stDetail)
                {
                    if (stdtl.STDETAIL_WtMeter_dec != null)
                        mWt = mWt + Convert.ToDecimal(stdtl.STDETAIL_WtMeter_dec);
                    else if (stdtl.STDETAIL_weight_dec != null && stdtl.STDETAIL_Length_dec != null)
                        mWt = mWt + Convert.ToDecimal(Convert.ToDecimal(stdtl.STDETAIL_weight_dec / stdtl.STDETAIL_Length_dec).ToString("0.000"));

                }
                if (st.STINWD_Diameter_tint > 20)
                    mLen = Convert.ToDecimal(1.6);
                else
                    mLen = Convert.ToDecimal(1.4);

                bool breakTemp = false;
                var chk = dc.AllInward_View("ST", 0, st.STINWD_ReferenceNo_var);
                foreach (var ch in chk)
                {
                    int TestId = Convert.ToInt32(ch.STTEST_TEST_Id);
                    var sp = dc.Test_View(0, TestId, "", 0, 0, 0);
                    foreach (var b in sp)
                    {
                        if (b.TEST_Sr_No == 3 || b.TEST_Sr_No == 5)
                        {
                            mLen = mLen - Convert.ToDecimal(0.4);
                            breakTemp = true;
                            break;
                        }
                    }
                    if (breakTemp == true)
                        break;
                }
                mQty = mWt * mLen;
                if (mQty < 0)
                    mQty = 0;
                mQty = Convert.ToDecimal(Convert.ToDecimal(mQty).ToString("0.000"));
                nTot = nTot + mQty;
                cell1 = new PdfPCell(new Phrase(mQty.ToString(), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);
                ////

                cell1 = new PdfPCell(new Phrase(Convert.ToDateTime(st.STINWD_ReceivedDate_dt).ToString("dd/MM/yyyy"), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                if (st.STINWD_TestedDate_dt != null)
                    tempStr = Convert.ToDateTime(st.STINWD_TestedDate_dt).ToString("dd/MM/yyyy");
                else
                    tempStr = "";
                cell1 = new PdfPCell(new Phrase(tempStr, fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                if (st.STINWD_SentToDisposalBinDate_dt != null)
                    tempStr = Convert.ToDateTime(st.STINWD_SentToDisposalBinDate_dt).ToString("dd/MM/yyyy");
                else
                    tempStr = "";
                cell1 = new PdfPCell(new Phrase(tempStr, fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                if (disposalStatus == true)
                    tempStr = Convert.ToDateTime(st.STINWD_DisposedDate_dt).ToString("dd/MM/yyyy");
                else
                    tempStr = "";
                cell1 = new PdfPCell(new Phrase(tempStr, fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                if (st.STINWD_DisposalRemark_var != null && st.STINWD_DisposalRemark_var != "")
                    mrTot = mrTot + mQty;
                else
                    mTot = mTot + mQty;

                cell1 = new PdfPCell(new Phrase(st.STINWD_DisposalRemark_var, fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.AddCell(cell1);

                #endregion
            }

            cell1 = new PdfPCell(new Phrase("Disposal Qty (kg)", fontH1));
            cell1.Colspan = 2;
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase(nTot.ToString(), fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase("", fontH1));
            cell1.Colspan = 5;
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase("Returned to Client(kg)", fontH1));
            cell1.Colspan = 2;
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase(mrTot.ToString(), fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase("", fontH1));
            cell1.Colspan = 5;
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);

            pdfDoc.Add(table1);
            pdfDoc.Close();
            string pdfPath = @Subfoldername1 + "/" + fileName;
            DownloadReport(fileName, pdfPath);

        }
        public void MixDesignDisposal_PDFReport(bool disposalStatus, string strFromDate, string strToDate)
        {
            Paragraph paragraph = new Paragraph();
            float marginTop = 50;
            Document pdfDoc = new Document(PageSize.A4, 55f, 45f, marginTop, 10f);
            var fileName = "MF_Disposal" + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
            if (!Directory.Exists(@foldername))
                Directory.CreateDirectory(@foldername);
            string Subfoldername = foldername + "/Disposal";
            if (!Directory.Exists(@Subfoldername))
                Directory.CreateDirectory(@Subfoldername);
            string Subfoldername1 = Subfoldername;

            Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
            Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
            Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.UNDEFINED);
            Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
            Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.UNDEFINED);
            Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLDITALIC);
            PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
            pdfDoc.Open();

            string tempStr = "";
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_CENTER;
            paragraph.Add("Material Storage Register (Mix Design)");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            if (disposalStatus == true)
                tempStr = "Disposal Completed From " + strFromDate + " To " + strToDate;
            else
                tempStr = "Pending for Disposal From " + strFromDate + " To " + strToDate;
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_CENTER;
            paragraph.Add(tempStr);
            paragraph.SpacingAfter = 10;
            pdfDoc.Add(paragraph);

            PdfPTable table1 = null;

            string[] strDate = strFromDate.Split('/');
            DateTime FromDate = new DateTime(Convert.ToInt32(strDate[2]), Convert.ToInt32(strDate[1]), Convert.ToInt32(strDate[0]));
            strDate = strToDate.Split('/');
            DateTime ToDate = new DateTime(Convert.ToInt32(strDate[2]), Convert.ToInt32(strDate[1]), Convert.ToInt32(strDate[0]));

            string[] header = { "Sr.No.", "Received Date", "Record Type", "Record No.", "Material Recd. With Qty.", "Disposed Date" };
            table1 = new PdfPTable(6);
            float[] widths1 = new float[] { 7f, 12f, 10f, 10f, 40f, 10f };
            table1.SetWidths(widths1);
            table1.SpacingBefore = 5;

            PdfPCell cell1;
            for (int h = 0; h < header.Count(); h++)
            {
                cell1 = new PdfPCell(new Phrase(header[h], fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);
            }

            int srNo = 0;
            var mfDisp = dc.DisposeMaterial_View("MF", FromDate, ToDate, disposalStatus);
            foreach (var mf in mfDisp)
            {
                #region tbldata
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;

                srNo++;
                cell1 = new PdfPCell(new Phrase(srNo.ToString(), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(Convert.ToDateTime(mf.MFINWD_ReceivedDate_dt).ToString("dd/MM/yyyy"), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(mf.MFINWD_RecordType_var, fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(mf.MFINWD_ReferenceNo_var, fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                string strMaterialQty = "";
                var material = dc.MaterialDetail_View(0, mf.MFINWD_ReferenceNo_var, 0, "", null, null, "");
                foreach (var mat in material)
                {
                    strMaterialQty = strMaterialQty + mat.Material_List + " - " + mat.MaterialDetail_Quantity + " , ";
                }
                cell1 = new PdfPCell(new Phrase(strMaterialQty, fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.AddCell(cell1);

                if (disposalStatus == true)
                    tempStr = Convert.ToDateTime(mf.MFINWD_DisposedDate_dt).ToString("dd/MM/yyyy");
                else
                    tempStr = "";
                cell1 = new PdfPCell(new Phrase(tempStr, fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                #endregion
            }

            pdfDoc.Add(table1);
            pdfDoc.Close();
            string pdfPath = @Subfoldername1 + "/" + fileName;
            DownloadReport(fileName, pdfPath);

        }

        internal void AppEnqTestRequestFormPrint(List<string> lstEnqNo)
        {
            Paragraph paragraph = new Paragraph();
            float marginTop = 50;
            Document pdfDoc = new Document(PageSize.A4, 55f, 45f, marginTop, 10f);
            var fileName = "TestRequestDetail_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
            if (!Directory.Exists(@foldername))
                Directory.CreateDirectory(@foldername);
            string Subfoldername = foldername + "/EnquiryWithTestRequest";
            if (!Directory.Exists(@Subfoldername))
                Directory.CreateDirectory(@Subfoldername);
            string Subfoldername1 = Subfoldername;

            Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
            Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
            Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.UNDEFINED);
            Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
            Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.UNDEFINED);
            Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 7.5f, Font.BOLD);
            PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
            pdfDoc.Open();

            string tempStr = "";
            PdfPTable MaindataTable = new PdfPTable(6);  //tbl
            MaindataTable.WidthPercentage = 100;
            float[] widths = new float[] { 20f, 1f, 45f, 18f, 1f, 20f };

            PdfPTable table1 = new PdfPTable(6);  //tbl
            table1.WidthPercentage = 100;


            string[] headerCommon = { "Sr.No.", "Test Name", "Make", "Supplier", "Material Specification/Grade", "Description", "No of Specimen", "Idmark" };
            string[] headerSteel = { "Sr.No.", "Test Name", "Diameter Selection", "Make", "Supplier", "Material Specification/Grade", "Description\n(Challan No)", "No of Bars", "Idmark" };
            string[] headerCube = { "Sr.No.", "Test Name", "Grade", "Casting Date Of Pour", "Description Of Work\n(Footing,Column,Slab etc)", "Location of Work", "Make/Suppiler\n(RMC)", "No of Specimen", "Testing Schedule", "Idmark" };
            string[] headerMixDesign = { "Sr.No.", "Test Name", "Type Of Design", "Grade", "Material Combination Required", "Slump(mm)", "Retention Period", "Flow(mm)", "Nature Of Work", "Material" };
            float[] widthsCommon = new float[] { 8f, 30f, 12f, 13f, 20f, 13f, 10f, 10f };
            float[] widthsSteel = new float[] { 8f, 30f, 12f, 10f, 11f, 23f, 15f, 11f, 20f };
            float[] widthsCube = new float[] { 8f, 30f, 11f, 15f, 25f, 17f, 17f, 12f, 12f, 10f };
            float[] widthsMixDesign = new float[] { 8f, 30f, 13f, 11f, 20f, 12f, 13f, 12f, 15f, 15f};
            for (int c = 0; c < lstEnqNo.Count; c++)
            {
                if (c != 0)
                {
                    pdfDoc.NewPage();
                }
                PdfPCell Cust_Namecell; PdfPCell cell1;
                int i = 0, j = 0, prvEnquiryNo = 0; string prvMaterialName = "", testName = ""; //SrNo = 1,
                var res = dc.AppEnquiry_View_ForPrint(Convert.ToInt32(lstEnqNo[c])).ToList();
                if (res.Count > 0)
                {
                    bool flag = false;
                    foreach (var item in res)
                    {
                        if (Convert.ToString(item.EnquiryNo) == "" || Convert.ToString(item.EnquiryNo) == "null")
                            continue;
                        testName = "";
                        if ((item.MATERIAL_Name_var != prvMaterialName && prvMaterialName != ""))
                        {
                            pdfDoc.Add(table1);
                            i = 0;
                            pdfDoc.NewPage();
                        }
                        #region common header
                        if (i == 0)
                        {

                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle;
                            paragraph.Add("Test Request Details");
                            paragraph.SpacingAfter = 5;
                            pdfDoc.Add(paragraph);

                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Add(tempStr);
                            paragraph.SpacingAfter = 10;
                            pdfDoc.Add(paragraph);


                            MaindataTable = new PdfPTable(6);  //tbl
                            MaindataTable.WidthPercentage = 100;
                            MaindataTable.SetWidths(widths);

                            Cust_Namecell = new PdfPCell(new Phrase("Client Name", fontH2));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(item.CL_Name_var), fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            Cust_Namecell.Colspan = 4;
                            MaindataTable.AddCell(Cust_Namecell);

                            Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH2));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(item.SITE_Name_var), fontH1));
                            Cust_Namecell.Colspan = 4;
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);

                            Cust_Namecell = new PdfPCell(new Phrase("Contact Person", fontH2));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(item.ENQ_contact_person), fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase("Contact No", fontH2));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(item.ENQ_contact_number), fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);

                            Cust_Namecell = new PdfPCell(new Phrase("Enquiry Date", fontH2));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            if (Convert.ToString(item.ENQ_Date_dt) != "" && Convert.ToString(item.ENQ_Date_dt) != null)
                                Cust_Namecell = new PdfPCell(new Phrase(Convert.ToDateTime(item.ENQ_Date_dt).ToString("dd/MM/yyyy"), fontH1));
                            else
                                Cust_Namecell = new PdfPCell(new Phrase("-"));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            Cust_Namecell.Colspan = 4;
                            MaindataTable.AddCell(Cust_Namecell);
                            pdfDoc.Add(MaindataTable);

                        }
                        #endregion

                        if (i == 0 || (item.MATERIAL_Name_var != prvMaterialName && prvMaterialName != ""))
                        {


                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_LEFT;
                            paragraph.Font = fontH2;
                            // paragraph.Add(SrNo + ") " + Convert.ToString(item.MATERIAL_Name_var) + "                   Enquiry No - " + Convert.ToString(item.EnquiryNo));
                            paragraph.Add("1) " + Convert.ToString(item.MATERIAL_Name_var) + "                   Enquiry No - " + Convert.ToString(item.EnquiryNo));
                            paragraph.SpacingAfter = 3;
                            pdfDoc.Add(paragraph);
                            //SrNo++;
                            if (Convert.ToString(item.MATERIAL_Name_var) == "Cube Testing")
                            {
                                table1 = new PdfPTable(10);
                                table1.WidthPercentage = 100;
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SetTotalWidth(widthsCube);

                                for (int h = 0; h < headerCube.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headerCube[h], fontH4));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                            }
                            else if (Convert.ToString(item.MATERIAL_Name_var) == "Steel Testing")
                            {
                                table1 = new PdfPTable(9);
                                table1.WidthPercentage = 100;
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SetTotalWidth(widthsSteel);

                                for (int h = 0; h < headerSteel.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headerSteel[h], fontH4));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                            }
                            else if (Convert.ToString(item.MATERIAL_Name_var) == "Mix Design")
                            {
                                table1 = new PdfPTable(10);
                                table1.WidthPercentage = 100;
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SetTotalWidth(widthsMixDesign);

                                for (int h = 0; h < headerMixDesign.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headerMixDesign[h], fontH4));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }
                            }
                            else
                            {
                                table1 = new PdfPTable(8);
                                table1.WidthPercentage = 100;
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SetTotalWidth(widthsCommon);

                                for (int h = 0; h < headerCommon.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headerCommon[h], fontH4));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }
                            }
                            j = 1;
                        }

                        var test = dc.TestRequestDetails_View_ForPrint(Convert.ToInt32(item.id));
                        if (Convert.ToString(item.MATERIAL_Name_var) == "Cube Testing")
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(j), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            foreach (var testNm in test)
                            {
                                testName += Convert.ToString(testNm.test_name) + ",";
                            }
                            cell1 = new PdfPCell(new Phrase(testName.ToString().TrimEnd(','), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(item.grade.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            if (Convert.ToString(item.casting_dt) != "" && Convert.ToString(item.casting_dt) != null)
                                cell1 = new PdfPCell(new Phrase(item.casting_dt.ToString(), fontH1));
                            else
                                cell1 = new PdfPCell(new Phrase("-"));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.description), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.Location_of_pour), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.make), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.no_of_specimen), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.schedule), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.Idmark1), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                        }
                        else if (Convert.ToString(item.MATERIAL_Name_var) == "Steel Testing")
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(j), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            foreach (var testNm in test)
                            {
                                testName += Convert.ToString(testNm.test_name) + ",";
                            }
                            cell1 = new PdfPCell(new Phrase(testName.ToString().TrimEnd(','), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.diameter), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.make), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.supplier), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.specification), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.description), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.count_r), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.Idmark1), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                        }
                        else if (Convert.ToString(item.MATERIAL_Name_var) == "Mix Design")
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(j), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            foreach (var testNm in test)
                            {
                                testName += Convert.ToString(testNm.test_name) + ",";
                            }
                            cell1 = new PdfPCell(new Phrase(testName.ToString().TrimEnd(','), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.material_type), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.grade), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.material_combination), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.slump), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.retention_period), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.flow), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.Nature_of_work), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            string strMaterial = "";
                            var rslt = dc.mix_design_material_View(Convert.ToInt32(item.id));
                            foreach (var lg in rslt)
                            {
                                if (!strMaterial.Contains(lg.materialName))
                                {
                                    strMaterial += lg.materialName;
                                    if (lg.Quantity != "")
                                        strMaterial += "-" + lg.Quantity;
                                    strMaterial += ",";
                                }
                            }
                            cell1 = new PdfPCell(new Phrase(strMaterial.TrimEnd(','), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(j), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            foreach (var testNm in test)
                            {
                                testName += Convert.ToString(testNm.test_name) + ",";
                            }
                            cell1 = new PdfPCell(new Phrase(testName.ToString().TrimEnd(','), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.make), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.supplier), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.specification), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.description), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.specimen), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(item.Idmark1), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                        }
                        i++; j++;
                        prvMaterialName = Convert.ToString(item.MATERIAL_Name_var);
                        prvEnquiryNo = Convert.ToInt32(item.EnquiryNo);
                        flag = true;
                    }

                    if (flag)
                    {
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.SpacingAfter = 8;
                        pdfDoc.Add(table1);
                    }
                }
            }
            pdfDoc.Close();
            string pdfPath = @Subfoldername1 + "/" + fileName;
            DownloadReport(fileName, pdfPath);

        }

        #region Bill
        public void Bill_PDFPrint(string BillNo, bool duplicateBillFlg, string Action)
        {
            DateTime BillDate = DateTime.Now;
            var b = dc.Bill_View(BillNo, 0, 0, "", 0, false, false, null, null);
            foreach (var bl in b)
            {
                BillDate = Convert.ToDateTime(bl.BILL_Date_dt);
            }
            if (CheckGSTFlag(BillDate) == false)
            {
                Bill_PDFPrint_WithSerTax(BillNo, duplicateBillFlg, Action);
            }
            else
            {
                Bill_PDFPrint_WithGST(BillNo, duplicateBillFlg, Action);
            }
        }
        private void Bill_PDFPrint_WithSerTax(string BillNo, bool duplicateBillFlg, string Action)
        {
            decimal billTotal = 0;

            Paragraph paragraph = new Paragraph();
            float marginTop = 100;
            if (Action.Contains("DisplayLogo") == true || Action.Contains("Email") == true)
            {
                marginTop = 0;
            }
            Document pdfDoc = new Document(PageSize.A4, 55f, 45f, marginTop, 10f);
            var fileName = "Bill_" + BillNo + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
            if (!Directory.Exists(@foldername))
                Directory.CreateDirectory(@foldername);
            string Subfoldername = foldername + "/Bill";
            if (!Directory.Exists(@Subfoldername))
                Directory.CreateDirectory(@Subfoldername);
            string Subfoldername1 = Subfoldername;
            if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
            {
                fileName = "Bill_" + BillNo + ".pdf";
                Subfoldername1 = foldername;
            }
            Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
            Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
            Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.UNDEFINED);
            Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
            Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.UNDEFINED);
            Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLDITALIC);
            PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
            writer.PageEvent = new classPdfFooter1();
            pdfDoc.Open();

            PdfPTable table1 = null;
            pdfDoc.Open();
            PdfPTable MaindataTable = new PdfPTable(6);
            MaindataTable.WidthPercentage = 100;
            MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
            if (Action.Contains("Display") == true || Action.Contains("Email") == true)
            {
                int logoid = 0;
                //if (Action.Contains("DisplayLogoWithNABL"))
                //{
                //logoid = 1;
                //}
                //else if (Action.Contains("DisplayLogoWithoutNABL"))
                //{
                ///  logoid = 6;//withoutnabl
                //}

                var data = dc.Sign_View(logoid);
                foreach (var g in data)
                {
                    byte[] imageBytes = g.UserSign.ToArray();
                    MemoryStream mxs1 = new MemoryStream(imageBytes);
                    iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                    PdfPTable tableSign = new PdfPTable(1);
                    tableSign.WidthPercentage = 100;
                    PdfPCell cell = new PdfPCell(image);
                    cell.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell.Border = PdfPCell.NO_BORDER;
                    tableSign.AddCell(cell);
                    pdfDoc.Add(tableSign);
                    break;
                }
            }
            int billApproveBy = 0;
            string tempStr = "";
            string result = "";
            var b = dc.Bill_View(BillNo, 0, 0, "", 0, false, false, null, null);
            foreach (var bill in b)
            {
                if (bill.BILL_ApproveStatus_bit == false)
                {
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    if (Action != "Print" && Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    pdfDoc.Add(paragraph);
                }
                else if (bill.BILL_ApprovedBy_int != null)
                {
                    billApproveBy = Convert.ToInt32(bill.BILL_ApprovedBy_int);
                }

                tempStr = "Tax Invoice";
                if (bill.SITE_RABillStatus_bit == true && bill.BILL_RecordType_var == "GT")
                {
                    int rabillcnt = 0;
                    var rabill = dc.Bill_View_RABill(bill.BILL_RecordNo_int);
                    foreach (var rab in rabill)
                    {
                        rabillcnt++;
                        if (rab.BILL_Id == bill.BILL_Id)
                        {
                            break;
                        }
                    }
                    tempStr = "Tax Invoice (RA Bill " + rabillcnt + ")";
                }
                if (bill.BILL_Status_bit == true)
                {
                    tempStr = "Tax Invoice(Cancelled)";
                }
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Add(tempStr);
                paragraph.SpacingAfter = 20;
                pdfDoc.Add(paragraph);

                if (duplicateBillFlg == true)
                {
                    var blackListText = FontFactory.GetFont("italic", 8);
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = blackListText;
                    paragraph.Add("DUPLICATE COPY");
                    paragraph.SpacingAfter = 20;
                    pdfDoc.Add(paragraph);
                }

                float[] widths = new float[] { 12f, 1f, 33f, 15f, 1f, 20f };
                MaindataTable.SetWidths(widths);

                PdfPCell Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                Cust_Namecell.Rowspan = 2;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                Cust_Namecell.Rowspan = 2;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(bill.CL_Name_var, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                Cust_Namecell.Rowspan = 2;
                MaindataTable.AddCell(Cust_Namecell);

                Cust_Namecell = new PdfPCell(new Phrase("Service Tax Reg. No.", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("AABCD2992CSD003", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                Cust_Namecell = new PdfPCell(new Phrase("Service Tax Category", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("Technical Testing and Analysis", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                Cust_Namecell.Rowspan = 2;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                Cust_Namecell.Rowspan = 2;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(bill.CL_OfficeAddress_var, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                Cust_Namecell.Rowspan = 2;
                MaindataTable.AddCell(Cust_Namecell);

                Cust_Namecell = new PdfPCell(new Phrase("Premises Code", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("710704A001", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                Cust_Namecell = new PdfPCell(new Phrase("PAN No.", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("AABCD2992C", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                Cust_Namecell.Rowspan = 2;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                Cust_Namecell.Rowspan = 2;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(bill.SITE_Name_var, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                Cust_Namecell.Rowspan = 2;
                MaindataTable.AddCell(Cust_Namecell);

                Cust_Namecell = new PdfPCell(new Phrase("Tax Invoice No.", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("DT - " + bill.BILL_Id.ToString(), fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                Cust_Namecell = new PdfPCell(new Phrase("Date", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(Convert.ToDateTime(bill.BILL_Date_dt).ToString("dd/MM/yyyy"), fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                string workOrderNo = "";
                if (bill.BILL_WorkOrderNo_var != null && bill.BILL_WorkOrderNo_var != "" && bill.BILL_WorkOrderNo_var != "NA" && bill.BILL_WorkOrderNo_var != "0" && bill.BILL_WorkOrderNo_var != "-")
                {
                    workOrderNo = bill.BILL_WorkOrderNo_var;
                }
                else if (bill.WorkOrderNo != null && bill.WorkOrderNo != "" && bill.WorkOrderNo != "NA" && bill.WorkOrderNo != "0" && bill.WorkOrderNo != "-")
                {
                    workOrderNo = bill.WorkOrderNo;
                }
                if (workOrderNo != "")
                {
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 3;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase(workOrderNo, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 3;
                    MaindataTable.AddCell(Cust_Namecell);
                }
                pdfDoc.Add(MaindataTable);

                string[] header = { "Sr.No.", "Particular", "Quantity", "Rate", "Amount" };
                table1 = new PdfPTable(5);
                float[] widths1 = new float[] { 7f, 43f, 10f, 10f, 12f };
                table1.SetWidths(widths1);
                table1.SpacingBefore = 5;

                PdfPCell cell1;
                for (int h = 0; h < header.Count(); h++)
                {
                    cell1 = new PdfPCell(new Phrase(header[h], fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }

                #region tbldata
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                var bd = dc.BillDetail_View(BillNo);
                foreach (var billd in bd)
                {
                    cell1 = new PdfPCell(new Phrase(billd.BILLD_SrNo_int.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(billd.BILLD_TEST_Name_var, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(billd.BILLD_Quantity_int.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(billd.BILLD_Rate_num).ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(billd.BILLD_Amt_num).ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);

                    billTotal = billTotal + Convert.ToDecimal(billd.BILLD_Amt_num);
                }

                cell1 = new PdfPCell(new Phrase("Subtotal", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                cell1.Colspan = 4;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase(billTotal.ToString("0.00"), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                table1.AddCell(cell1);

                if (bill.BILL_DiscountAmt_num > 0)
                {
                    cell1 = new PdfPCell(new Phrase("Discount " + bill.BILL_Discount_num + " %", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = 4;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill.BILL_DiscountAmt_num).ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);
                }
                cell1 = new PdfPCell(new Phrase("Service Tax " + bill.BILL_SerTax_num + " %", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                cell1.Colspan = 4;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill.BILL_SerTaxAmt_num).ToString("0.00"), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Swachh Bharat Cess " + bill.BILL_SwachhBharatTax_num + " %", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                cell1.Colspan = 4;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill.BILL_SwachhBharatTaxAmt_num).ToString("0.00"), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Krishi Kalyan Cess " + bill.BILL_KisanKrishiTax_num + " %", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                cell1.Colspan = 4;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill.BILL_KisanKrishiTaxAmt_num).ToString("0.00"), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Round Off", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                cell1.Colspan = 4;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill.BILL_RoundOffAmt_num).ToString("0.00"), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Net Total", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                cell1.Colspan = 4;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill.BILL_NetAmt_num).ToString("0.00"), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                table1.AddCell(cell1);

                result = "   " + CnvtAmttoWords(Convert.ToInt32(bill.BILL_NetAmt_num)).ToString() + " " + "Only.";

                pdfDoc.Add(table1);
                #endregion
            }
            paragraph = new Paragraph();
            paragraph.Font = fontH1;
            paragraph.Add("Amount in Words : " + " " + result);
            pdfDoc.Add(paragraph);
            paragraph = new Paragraph();

            paragraph = new Paragraph();
            paragraph.Font = fontH4;
            paragraph.Add("Please issue the Cheque/D.D. in the name of Durocrete Engineering Services Pvt. Ltd..");
            pdfDoc.Add(paragraph);
            paragraph = new Paragraph();

            paragraph = new Paragraph();
            paragraph.Font = fontH2;
            paragraph.Add("For all technical queries contact on (020)24348027.");
            pdfDoc.Add(paragraph);
            paragraph = new Paragraph();

            PdfPTable MaindataTable1 = null;
            MaindataTable1 = new PdfPTable(2); //tbl
            MaindataTable1.SpacingBefore = 5;
            MaindataTable1.WidthPercentage = 100;
            PdfPCell cellbottom = null;
            cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH2));
            cellbottom.Border = PdfPCell.NO_BORDER;
            MaindataTable1.AddCell(cellbottom);

            cellbottom = new PdfPCell(new Paragraph("Receiver's Signature", fontH2));
            cellbottom.Border = PdfPCell.NO_BORDER;
            cellbottom.HorizontalAlignment = Element.ALIGN_RIGHT;
            MaindataTable1.AddCell(cellbottom);
            pdfDoc.Add(MaindataTable1);

            ///////////////////////////////
            #region Signature
            bool sign = false;
            if (billApproveBy > 0)
            {
                var data = dc.Sign_View(billApproveBy);
                foreach (var g in data)
                {
                    byte[] imageBytes = g.UserSign.ToArray();
                    MemoryStream mxs1 = new MemoryStream(imageBytes);
                    iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                    table1 = new PdfPTable(1);
                    table1.WidthPercentage = 100;
                    table1.SetWidths(new float[] { 1.7f });
                    PdfPCell cell = new PdfPCell(image);
                    cell.FixedHeight = 25;
                    cell.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell);

                    pdfDoc.Add(table1);
                    sign = true;
                    break;
                }
                var user = dc.User_View(billApproveBy, 0, "", "", "");
                foreach (var u in user)
                {
                    pdfDoc.Add(new Paragraph(u.USER_Name_var, fontH1));
                    if (u.USER_Designation_var != null)
                    {
                        pdfDoc.Add(new Paragraph("(" + u.USER_Designation_var.Replace("(", "").Replace(")", "") + ")", fontH1));
                    }
                }
            }
            #endregion
            if (sign == false)
            {
                pdfDoc.Add(new Paragraph(" ", fontH1));
                pdfDoc.Add(new Paragraph(" ", fontH1));
            }

            ////////////////

            paragraph = new Paragraph();
            paragraph.Font = fontH1;
            paragraph.Add("All our invoices are payable immediately, Delay of payment beyond 30 days from the date of billing shall attract an interest of 2% per month on the outstanding amount.");
            pdfDoc.Add(paragraph);
            paragraph = new Paragraph();

            //paragraph = new Paragraph();
            //paragraph.Font = fontH1;
            //paragraph.Add("CIN - U28939PN1999PTC014212.");
            //pdfDoc.Add(paragraph);
            //paragraph = new Paragraph();

            //paragraph = new Paragraph();
            //paragraph.Font = fontH3;
            //paragraph.Add("Regd.Add - 1160/5, Gharpure Colony Shivaji Nagar,Pune 411005,Maharashtra India.");
            //pdfDoc.Add(paragraph);
            paragraph = new Paragraph();
            pdfDoc.Close();
            if (Action != "Email" && Action.Contains("Email") == false)
            {
                string pdfPath = @Subfoldername1 + "/" + fileName;
                DownloadReport(fileName, pdfPath);
            }

        }
        private void Bill_PDFPrint_WithGST(string BillNo, bool duplicateBillFlg, string Action)
        {
            decimal billTotal = 0, actualTotal = 0;
            int routeId = 0; //nablStatus = 0, //billing by defalut non nabl

            clsData obj = new clsData();
            Paragraph paragraph = new Paragraph();
            float marginTop = 100;
            if (Action.Contains("DisplayLogo") == true || Action.Contains("Email") == true || Action.Contains("Print") == true)
            {
                marginTop = 21;
            }
            Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
            var fileName = "Bill_" + BillNo + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
            if (!Directory.Exists(@foldername))
                Directory.CreateDirectory(@foldername);
            string Subfoldername = foldername + "/Bill";
            if (!Directory.Exists(@Subfoldername))
                Directory.CreateDirectory(@Subfoldername);
            string Subfoldername1 = Subfoldername;
            if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
            {
                fileName = "Bill_" + BillNo + ".pdf";
                Subfoldername1 = foldername;
            }
            Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
            Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
            Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.UNDEFINED);
            Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
            Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.UNDEFINED);
            Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLDITALIC);
            Font fontH5 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD);

            PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
            writer.PageEvent = new classPdfFooter1();
            pdfDoc.Open();

            PdfPTable table1 = null;
            pdfDoc.Open();

            PdfPTable MaindataTable = new PdfPTable(6);
            MaindataTable.WidthPercentage = 100;
            MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;

            //if (Action.Contains("Print") == true)
            //    LogoToPdf(pdfDoc, 0);
            //else if (Action.Contains("Automail") == true)
            //    LogoToPdfEmail(pdfDoc, 0);
            //else if (Action.Contains("Display") == true || Action.Contains("Email") == true)
            //    LogoToPdfOld(pdfDoc, Action);

            //else if (Action.Contains("Display") == true || Action.Contains("Email") == true)
            //    oldLogoToPdf(pdfDoc, "DisplayLogoWithoutNABL");

            ////if (Action.Contains("Display") == true || Action.Contains("Email") == true || Action.Contains("Print") == true)
            ////    LogoToBillPdf(pdfDoc);
            //if (Action.Contains("Email") == true)
            //    LogoToBillPdf(pdfDoc);
            //else if (Action.Contains("Print") == true)
            //    LogoToPdf(pdfDoc, 0);

            if (Action.Contains("Print") == true)
                LogoToPdf(pdfDoc, 0);
            else
                LogoToBillPdf(pdfDoc);

            var phrase = new Phrase();
            int billApproveBy = 0;
            string tempStr = "";
            string result = "";
            bool monthlyBillFlag = false, discountedRateFlag = false, starNoteFlag = false;
            int colspan = 5;
            //  paragraph.Add(" "); pdfDoc.Add(paragraph);

            var b = dc.Bill_View(BillNo, 0, 0, "", 0, false, false, null, null);
            var bd = dc.BillDetail_View(BillNo).ToList();
            foreach (var bill in b)
            {
                routeId = Convert.ToInt32(bill.SITE_Route_Id);
                if (bill.BILL_ApproveStatus_bit == true)
                {
                    paragraph.Alignment = Element.ALIGN_RIGHT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 2;
                    if (duplicateBillFlg == true)
                        paragraph.Add("DUPLICATE");
                    else
                        paragraph.Add("ORIGINAL");

                    pdfDoc.Add(paragraph);
                }
                else if (bill.BILL_ApproveStatus_bit == false)
                {
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //if (Action != "Print" && Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                    //{
                    paragraph.Font = fontH1;
                    paragraph.Add("Office Copy");
                    //}
                    paragraph.SpacingBefore = 2;
                    pdfDoc.Add(paragraph);
                }

                if (bill.SITE_SEZStatus_bit == true)
                {
                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.Add("Supply of Services to SEZ Unit without payment of IGST");
                    pdfDoc.Add(paragraph);
                }

                if (bill.BILL_ApprovedBy_int != null)
                {
                    billApproveBy = Convert.ToInt32(bill.BILL_ApprovedBy_int);
                }

                tempStr = "Tax Invoice";
                if (bill.SITE_RABillStatus_bit == true && bill.BILL_RecordType_var == "GT")
                {
                    int rabillcnt = 0;
                    var rabill = dc.Bill_View_RABill(bill.BILL_RecordNo_int);
                    foreach (var rab in rabill)
                    {
                        rabillcnt++;
                        if (rab.BILL_Id == bill.BILL_Id)
                        {
                            break;
                        }
                    }
                    tempStr = "Tax Invoice (RA Bill " + rabillcnt + ")";
                }
                if (bill.BILL_Status_bit == true)
                {
                    tempStr = "Tax Invoice(Cancelled)";
                }
                else if (bill.BILL_ApproveStatus_bit == false)
                {
                    tempStr = "Tax Invoice(Yet to approve)";
                }
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_RIGHT;
                paragraph.Font = fontH1;
                paragraph.SpacingBefore = 2;
                //paragraph.Add("DUPLICATE");
                paragraph.Add(" ");
                pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Add(tempStr);
                paragraph.SpacingAfter = 2;
                pdfDoc.Add(paragraph);

                //if (duplicateBillFlg == true)
                //{
                //    var blackListText = FontFactory.GetFont("italic", 8);
                //    paragraph = new Paragraph();
                //    paragraph.Alignment = Element.ALIGN_CENTER;
                //    paragraph.Font = blackListText;
                //    paragraph.Add("DUPLICATE COPY");
                //    paragraph.SpacingAfter = 20;
                //    pdfDoc.Add(paragraph);
                //}
                string routeName = obj.getRouteName(routeId);

                if (routeName == "")
                    routeName = "NA";
                float[] widths = new float[] { 12f, 1f, 30f, 12f, 1f, 30f };
                MaindataTable.SetWidths(widths);
                PdfPCell Cust_Namecell = new PdfPCell();

                Cust_Namecell = new PdfPCell(new Phrase("Tax Invoice No.", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                //Cust_Namecell = new PdfPCell(new Phrase("DT - " + bill.BILL_Id.ToString(), fontH1));
                Cust_Namecell = new PdfPCell(new Phrase(bill.BILL_Id.ToString(), fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("Route", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(routeName.ToString(), fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(Convert.ToDateTime(bill.BILL_Date_dt).ToString("dd/MM/yyyy"), fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                phrase = new Phrase();
                phrase.Add(new Chunk("GST No. of Service Provider : ", fontH2));
                phrase.Add(new Chunk("27AABCD2992C2ZS", fontH1));
                Cust_Namecell = new PdfPCell(phrase);
                Cust_Namecell.Colspan = 3;
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                if (bill.BILL_RecordType_var == "Monthly")
                {
                    monthlyBillFlag = true;
                    Cust_Namecell = new PdfPCell(new Phrase("Billing Period", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(bill.BILL_BillingPeriod_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                }
                else if (bill.BILL_RecordNo_int > 0)
                {
                    string strRecNo = bill.BILL_RecordNo_int.ToString();
                    if (bill.BILL_RecordType_var == "OT")
                    {
                        var otherInward = dc.AllInward_View("OT", bill.BILL_RecordNo_int, "");
                        foreach (var n in otherInward)
                        {
                            if (n.OTINWD_InterBranchRefNo_var != null && n.OTINWD_InterBranchRefNo_var != "")
                                strRecNo = n.OTINWD_InterBranchRefNo_var;
                        }
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                }
                else
                {
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH2));
                    Cust_Namecell.Colspan = 3;
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                }

                phrase = new Phrase();
                phrase.Add(new Chunk("PAN No. : ", fontH2));
                phrase.Add(new Chunk("AABCD2992C     ", fontH1));
                phrase.Add(new Chunk("MSMED No.: ", fontH2));
                phrase.Add(new Chunk("MH26F0020876     ", fontH1));
                Cust_Namecell = new PdfPCell(phrase);
                Cust_Namecell.Colspan = 3;
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                string workOrderNo = "";
                if (bill.BILL_WorkOrderNo_var != null && bill.BILL_WorkOrderNo_var != "" && bill.BILL_WorkOrderNo_var != "NA" && bill.BILL_WorkOrderNo_var != "0" && bill.BILL_WorkOrderNo_var != "-")
                {
                    workOrderNo = bill.BILL_WorkOrderNo_var;
                }
                else if (bill.WorkOrderNo != null && bill.WorkOrderNo != "" && bill.WorkOrderNo != "NA" && bill.WorkOrderNo != "0" && bill.WorkOrderNo != "-")
                {
                    workOrderNo = bill.WorkOrderNo;
                }

                if (workOrderNo != "")
                {
                    Cust_Namecell = new PdfPCell(new Phrase("Work Order No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(workOrderNo, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("", fontH2));
                    Cust_Namecell.Colspan = 3;
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                }

                Cust_Namecell = new PdfPCell(new Phrase("Billed to", fontH2));
                Cust_Namecell.Colspan = 3;
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("Place of Work", fontH2));
                Cust_Namecell.Colspan = 3;
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                Cust_Namecell = new PdfPCell(new Phrase("Name", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(bill.CL_Name_var, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                Cust_Namecell = new PdfPCell(new Phrase("Name", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(bill.CL_Name_var, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                Cust_Namecell = new PdfPCell(new Phrase("Address", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(bill.CL_OfficeAddress_var, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                Cust_Namecell = new PdfPCell(new Phrase("Address", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(bill.SITE_Name_var + " " + bill.SITE_Address_var, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                Cust_Namecell = new PdfPCell(new Phrase("State", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(bill.CL_State_var, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                Cust_Namecell = new PdfPCell(new Phrase("State", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(bill.SITE_State_var, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                Cust_Namecell = new PdfPCell(new Phrase("City", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(bill.CL_City_var + " - " + bill.CL_Pin_int, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                Cust_Namecell = new PdfPCell(new Phrase("City", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(bill.SITE_City_var + " - " + bill.SITE_Pincode_int, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                string clientGSTNo = "NA", siteGSTNo = "NA";
                if (bill.BILL_CL_GSTNo_var != null && bill.BILL_CL_GSTNo_var != "")
                {
                    clientGSTNo = bill.BILL_CL_GSTNo_var;
                }
                else
                {
                    clientGSTNo = "Unregistered";
                }
                if (bill.BILL_SITE_GSTNo_var != null && bill.BILL_SITE_GSTNo_var != "")
                {
                    siteGSTNo = bill.BILL_SITE_GSTNo_var;
                }
                else
                {
                    siteGSTNo = "Unregistered";
                }
                Cust_Namecell = new PdfPCell(new Phrase("GSTIN", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(clientGSTNo, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                Cust_Namecell = new PdfPCell(new Phrase("GSTIN", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(siteGSTNo, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                if (bill.reportClientName != null && bill.reportClientName != "")
                {
                    Cust_Namecell = new PdfPCell(new Phrase("Report for", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(bill.reportClientName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Site", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(bill.reportSiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                }
                MaindataTable.SpacingAfter = 2;

                pdfDoc.Add(MaindataTable);
                if (monthlyBillFlag == false)
                {
                    foreach (var bdd in bd)
                    {
                        //if (bdd.BILLD_ActualRate_num != null && bdd.BILLD_ActualRate_num > 0)
                        if (bdd.BILLD_ActualRate_num != null && bdd.BILLD_ActualRate_num > 0 && bdd.BILLD_Rate_num != bdd.BILLD_ActualRate_num)
                        {
                            discountedRateFlag = true;
                            colspan = 7;
                        }
                    }
                }
                string[] header;
                float[] widths1;
                //if (monthlyBillFlag == true)
                //{
                //    header = new string[] { "Sr.No.", "Particular", "SAC Code", "Reference No.", "Received Date", "Amount" };
                //}
                //else
                //{
                //    header = new string[] { "Sr.No.", "Particular", "SAC Code", "Quantity", "Rate", "Amount" };
                //}
                //table1 = new PdfPTable(6);
                //float[] widths1 = new float[] { 7f, 43f, 10f, 10f, 10f, 10f };
                if (monthlyBillFlag == true)
                {
                    header = new string[] { "Sr.No.", "Particular", "SAC Code", "Reference No.", "Received Date", "Amount" };
                    widths1 = new float[] { 7f, 43f, 10f, 10f, 10f, 10f };
                    table1 = new PdfPTable(6);
                }
                else if (discountedRateFlag == true)
                {
                    //header = new string[] { "Sr.No.", "Particular", "SAC Code", "Quantity", "Rate", "Discount (%)", "Discounted Rate", "Amount" };
                    header = new string[] { "Sr.No.", "Particular", "SAC Code", "Quantity", "Rate", "Amount", "Discount (%)", "Discounted Amount" };
                    widths1 = new float[] { 7f, 43f, 10f, 10f, 10f, 10f, 10f, 11f };
                    table1 = new PdfPTable(8);
                }
                else
                {
                    header = new string[] { "Sr.No.", "Particular", "SAC Code", "Quantity", "Rate", "Amount" };
                    widths1 = new float[] { 7f, 43f, 10f, 10f, 10f, 10f };
                    table1 = new PdfPTable(6);
                }

                table1.SetWidths(widths1);
                table1.SpacingBefore = 5;

                PdfPCell cell1;
                for (int h = 0; h < header.Count(); h++)
                {
                    cell1 = new PdfPCell(new Phrase(header[h], fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }

                #region tbldata
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                //var bd = dc.BillDetail_View(BillNo);
                foreach (var billd in bd)
                {
                    cell1 = new PdfPCell(new Phrase(billd.BILLD_SrNo_int.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(billd.BILLD_TEST_Name_var, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(billd.BILLD_SACCode_var, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    if (monthlyBillFlag == true)
                    {
                        if (billd.InterBranchRefNo_var != null && billd.InterBranchRefNo_var != "")
                            cell1 = new PdfPCell(new Phrase(billd.InterBranchRefNo_var, fontH1));
                        else
                            cell1 = new PdfPCell(new Phrase(billd.BILLD_ReferenceNo_int.ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToDateTime(billd.BILLD_ReceivedDate_dt).ToString("dd/MM/yyyy"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        table1.AddCell(cell1);
                    }
                    else if (discountedRateFlag == true)
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(billd.BILLD_Quantity_int).ToString("0.##"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(billd.BILLD_ActualRate_num).ToString("0.00"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        table1.AddCell(cell1);

                        decimal actualAmount = 0;
                        actualAmount = Convert.ToDecimal(billd.BILLD_Quantity_int) * Convert.ToDecimal(billd.BILLD_ActualRate_num);
                        cell1 = new PdfPCell(new Phrase(actualAmount.ToString("0.00"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        table1.AddCell(cell1);

                        actualTotal += actualAmount;

                        if (billd.BILLD_AppDiscStatus_bit == true)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(billd.BILLD_DiscountPer_num).ToString("0.##") + "*", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            starNoteFlag = true;
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(billd.BILLD_DiscountPer_num).ToString("0.##"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }

                        //cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(billd.BILLD_Rate_num).ToString("0.00"), fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        //table1.AddCell(cell1);
                    }
                    else
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(billd.BILLD_Quantity_int).ToString("0.##"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(billd.BILLD_Rate_num).ToString("0.00"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        table1.AddCell(cell1);
                    }
                    cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(billd.BILLD_Amt_num).ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);

                    billTotal = billTotal + Convert.ToDecimal(billd.BILLD_Amt_num);
                }
                if (discountedRateFlag == true)
                {
                    cell1 = new PdfPCell(new Phrase("Total", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = 5;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(actualTotal.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(billTotal.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = colspan + 1;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Gross Amount", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = colspan;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(actualTotal.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Discount", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = colspan;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase((actualTotal - billTotal).ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Net Amount", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = colspan;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(billTotal.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);
                }
                else if (bill.BILL_DiscountAmt_num > 0)
                {
                    cell1 = new PdfPCell(new Phrase("Subtotal", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = colspan;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(billTotal.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);
                    string strPerDiscount = "";
                    if (bill.BILL_DiscountPerStatus_bit == true)
                        strPerDiscount = " % ";
                    cell1 = new PdfPCell(new Phrase("Discount " + bill.BILL_Discount_num + strPerDiscount, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = colspan;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill.BILL_DiscountAmt_num).ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Net Amount", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = colspan;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase((billTotal - Convert.ToDecimal(bill.BILL_DiscountAmt_num)).ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);
                }
                else
                {
                    cell1 = new PdfPCell(new Phrase("Net Amount", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = colspan;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(billTotal.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);
                }
                if (bill.BILL_CGST_num != null && bill.BILL_CGST_num != 0)
                {
                    cell1 = new PdfPCell(new Phrase("CGST " + bill.BILL_CGST_num + " % ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = colspan;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill.BILL_CGSTAmt_num).ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);
                }
                if (bill.BILL_SGST_num != null && bill.BILL_SGST_num != 0)
                {
                    cell1 = new PdfPCell(new Phrase("SGST " + bill.BILL_SGST_num + " % ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = colspan;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill.BILL_SGSTAmt_num).ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);
                }
                if (bill.BILL_IGST_num != null && bill.BILL_IGST_num != 0)
                {
                    cell1 = new PdfPCell(new Phrase("IGST " + bill.BILL_IGST_num + " % ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = colspan;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill.BILL_IGSTAmt_num).ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);
                }
                if (bill.SITE_SEZStatus_bit == true)
                {
                    cell1 = new PdfPCell(new Phrase("IGST ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = colspan;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("0.00", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Duties & Taxes are exempted against supply of Materials and Services for SEZ, vide LUT ARN NO AD270421000990H Dt 1st April 2021", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = colspan;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);
                }
                if (Convert.ToDecimal(bill.BILL_RoundOffAmt_num) != 0)
                {
                    cell1 = new PdfPCell(new Phrase("Round Off", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = colspan;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill.BILL_RoundOffAmt_num).ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);
                }
                cell1 = new PdfPCell(new Phrase("Total Invoice Value", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                cell1.Colspan = colspan;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill.BILL_NetAmt_num).ToString("0.00"), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                table1.AddCell(cell1);

                decimal tempNetBalance = 0;
                tempNetBalance = Convert.ToDecimal(bill.BILL_NetAmt_num);
                if (bill.BILL_AdvancePaid_num != null && Convert.ToDecimal(bill.BILL_AdvancePaid_num) > 0)
                {
                    cell1 = new PdfPCell(new Phrase("Less Advance Paid", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = colspan;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill.BILL_AdvancePaid_num).ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);

                    tempNetBalance = tempNetBalance - Convert.ToDecimal(bill.BILL_AdvancePaid_num);
                    cell1 = new PdfPCell(new Phrase("Net Balance Payable", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = colspan;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(tempNetBalance.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    table1.AddCell(cell1);
                }
                result = "   " + CnvtAmttoWords(Convert.ToInt32(tempNetBalance)).ToString() + " " + "Only.";

                pdfDoc.Add(table1);
                #endregion
            }
            paragraph = new Paragraph();
            paragraph.Font = fontH1;
            paragraph.Add("Amount in Words : " + " " + result);
            pdfDoc.Add(paragraph);
            paragraph = new Paragraph();

            table1 = new PdfPTable(4);
            table1.SpacingBefore = 5;
            //#region tbldata
            table1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.WidthPercentage = 100;

            PdfPCell cell2 = new PdfPCell(new Phrase("Tax is payable on Reverse Charge.", fontH1));
            cell2.Colspan = 4;
            cell2.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell2);

            cell2 = new PdfPCell(new Phrase("Taxes", fontH1));
            cell2.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell2);
            cell2 = new PdfPCell(new Phrase("Rate of Tax", fontH1));
            cell2.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell2);
            cell2 = new PdfPCell(new Phrase("Taxable Value", fontH1));
            cell2.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell2);
            cell2 = new PdfPCell(new Phrase("Tax Amount", fontH1));
            cell2.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell2);

            cell2 = new PdfPCell(new Phrase("-", fontH1));
            cell2.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell2);
            cell2 = new PdfPCell(new Phrase("-", fontH1));
            cell2.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell2);
            cell2 = new PdfPCell(new Phrase("-", fontH1));
            cell2.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell2);
            cell2 = new PdfPCell(new Phrase("-", fontH1));
            cell2.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell2);
            pdfDoc.Add(table1);

            //paragraph = new Paragraph();
            //paragraph.Font = fontH1;
            //paragraph.Add("Complaint/s against this invoice if any shall be made within 7 days from the date of invoice. Subject to Pune Jurisdiction");
            //pdfDoc.Add(paragraph);

            table1 = new PdfPTable(3);
            MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
            table1.SpacingBefore = 5;
            table1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.WidthPercentage = 100;

            cell2 = new PdfPCell(new Phrase("Notes : ", fontH2));
            cell2.Colspan = 3;
            cell2.HorizontalAlignment = Element.ALIGN_LEFT;
            cell2.Border = PdfPCell.NO_BORDER;
            table1.AddCell(cell2);

            cell2 = new PdfPCell(new Phrase("1) Discount given are not applicable if payment is received after 120 days and rates will be applicable as per the price list and interest rate of 2% per month will be charged from the date of billing thereafter.", fontH1));
            cell2.Colspan = 3;
            cell2.HorizontalAlignment = Element.ALIGN_LEFT;
            cell2.Border = PdfPCell.NO_BORDER;
            table1.AddCell(cell2);

            cell2 = new PdfPCell(new Phrase("2) The outstanding days will be calculated from the date of bill.", fontH1));
            cell2.Colspan = 3;
            cell2.HorizontalAlignment = Element.ALIGN_LEFT;
            cell2.Border = PdfPCell.NO_BORDER;
            table1.AddCell(cell2);
            string cnStr = System.Configuration.ConfigurationManager.AppSettings["conStr"].ToString();
            // new added on 24/09
            string mnote3 = "";
            if (cnStr.ToLower().Contains("mumbai") == true)
            {
                mnote3 = "3) Complaint/s against invoice if any shall be made within 7 days from the date of invoice to infomumbai@durocrete.acts-int.com and accounts@durocrete.acts-int.com , Contact Number :  91300 07635.";
            }
            else if (cnStr.ToLower().Contains("nashik") == true)
            {
                mnote3 = "3) Complaint/s against invoice if any shall be made within 7 days from the date of invoice to madhavi.s@durocrete.acts-int.com and accounts@durocrete.acts-int.com , Contact Number : 83088 44919.";

            }
            else
            {
                mnote3 = "3) Complaint/s against invoice if any shall be made within 7 days from the date of invoice to billing@durocrete.acts-int.com and accounts@durocrete.acts-int.com , Contact Number : 86248 56822 / 02024345170(Extn: 206)";

            }

            cell2 = new PdfPCell(new Phrase(mnote3, fontH2));
            cell2.Colspan = 3;
            cell2.HorizontalAlignment = Element.ALIGN_LEFT; cell2.Border = PdfPCell.NO_BORDER;
            table1.AddCell(cell2);

            if (starNoteFlag == true)
            {
                cell2 = new PdfPCell(new Phrase("4) * includes additional 5 % discount for placing enquiry through Durocrete App.", fontH1));
                cell2.Colspan = 3;
                cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
            }

            ///


            phrase = new Phrase();
            phrase.Add(new Chunk("Subject to Pune Jurisdiction", fontH1));
            cell2 = new PdfPCell(phrase);
            cell2.Colspan = 3;
            cell2.HorizontalAlignment = Element.ALIGN_LEFT;
            cell2.Border = PdfPCell.NO_BORDER;
            table1.AddCell(cell2);

            phrase = new Phrase();
            phrase.Add(new Chunk("For NEFT/RTGS :        ", fontH2));
            phrase.Add(new Chunk("Beneficiary Name : ", fontH2));
            phrase.Add(new Chunk("Durocrete Engineering Services Pvt. Ltd.             ", fontH1));
            cell2 = new PdfPCell(phrase);
            cell2.Colspan = 2;
            cell2.HorizontalAlignment = Element.ALIGN_LEFT;
            cell2.Border = PdfPCell.NO_BORDER;
            table1.AddCell(cell2);

            phrase = new Phrase();
            phrase.Add(new Chunk("Bank Name : ", fontH2));
            phrase.Add(new Chunk("HDFC Bank Ltd.", fontH1));
            cell2 = new PdfPCell(phrase);
            cell2.HorizontalAlignment = Element.ALIGN_LEFT;
            cell2.Border = PdfPCell.NO_BORDER;
            table1.AddCell(cell2);

            if (cnStr.ToLower().Contains("mumbai") == true)
            {
                phrase = new Phrase();
                phrase.Add(new Chunk("Branch : ", fontH2));
                phrase.Add(new Chunk("Vashi, Navi Mumbai          ", fontH1));
                cell2 = new PdfPCell(phrase);
                cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);

                phrase = new Phrase();
                phrase.Add(new Chunk("IFSC Code : ", fontH2));
                phrase.Add(new Chunk("HDFC0000540                    ", fontH1));
                cell2 = new PdfPCell(phrase);
                cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);

                phrase = new Phrase();
                phrase.Add(new Chunk("Account No : ", fontH2));
                phrase.Add(new Chunk("05402000024568", fontH1));
                cell2 = new PdfPCell(phrase);
                cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);

            }
            else if (cnStr.ToLower().Contains("nashik") == true)
            {
                phrase = new Phrase();
                phrase.Add(new Chunk("Branch : ", fontH2));
                phrase.Add(new Chunk("Bhandarkar Road, Pune       ", fontH1));
                cell2 = new PdfPCell(phrase);
                cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);

                phrase = new Phrase();
                phrase.Add(new Chunk("IFSC Code : ", fontH2));
                phrase.Add(new Chunk("HDFC0000007                    ", fontH1));
                cell2 = new PdfPCell(phrase);
                cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);

                phrase = new Phrase();
                phrase.Add(new Chunk("Account No : ", fontH2));
                phrase.Add(new Chunk("50200023762951", fontH1));
                cell2 = new PdfPCell(phrase);
                cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
            }
            else
            {
                phrase = new Phrase();
                phrase.Add(new Chunk("Branch : ", fontH2));
                phrase.Add(new Chunk("Hingane Khurd, Pune          ", fontH1));
                cell2 = new PdfPCell(phrase);
                cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);

                phrase = new Phrase();
                phrase.Add(new Chunk("IFSC Code : ", fontH2));
                phrase.Add(new Chunk("HDFC0000825                    ", fontH1));
                cell2 = new PdfPCell(phrase);
                cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);

                phrase = new Phrase();
                phrase.Add(new Chunk("Account No : ", fontH2));
                phrase.Add(new Chunk("08252000000218", fontH1));
                cell2 = new PdfPCell(phrase);
                cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
            }
            string tmpString = "";
            tmpString = "Declaration :  I / we certify that our registration certificate under the GST Act, 2017 is in force on the date on which the supply of goods specified in this Tax Invoice is made by " +
                "me/us & the transaction of supply covered by this Tax Invoice had been effected by me/us & it shall be accounted for in the turnover of supplies while filing of " +
                "return & the due tax if any payable on the supplies has been paid or shall be paid. Further certified that the particulars given above are true and correct & the " +
                "amount indicated represents the prices the actually charged and that there is no flow if additional consideration directly or indirectly from the buyer. Interest @ 18% " +
                "p.a. charged on all A/c outstanding more than one month after invoice has been rendered.";

            phrase = new Phrase();
            phrase.Add(new Chunk("Declaration : ", fontH5));
            phrase.Add(new Chunk(tmpString, fontH3));
            cell2 = new PdfPCell(phrase);
            cell2.Colspan = 3;
            cell2.HorizontalAlignment = Element.ALIGN_LEFT;
            cell2.Border = PdfPCell.NO_BORDER;
            table1.AddCell(cell2);
            pdfDoc.Add(table1);

            PdfPTable MaindataTable1 = null;
            MaindataTable1 = new PdfPTable(2); //tbl
            MaindataTable1.SpacingBefore = 5;
            MaindataTable1.WidthPercentage = 100;
            PdfPCell cellbottom = null;
            cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH2));
            cellbottom.Border = PdfPCell.NO_BORDER;
            MaindataTable1.AddCell(cellbottom);

            cellbottom = new PdfPCell(new Paragraph("Receiver's Signature", fontH2));
            cellbottom.Border = PdfPCell.NO_BORDER;
            cellbottom.HorizontalAlignment = Element.ALIGN_RIGHT;
            MaindataTable1.AddCell(cellbottom);

            pdfDoc.Add(MaindataTable1);

            ///////////////////////////////
            #region Signature
            bool sign = false;
            if (billApproveBy > 0)
            {
                var data = dc.Sign_View(billApproveBy);
                foreach (var g in data)
                {
                    byte[] imageBytes = g.UserSign.ToArray();
                    MemoryStream mxs1 = new MemoryStream(imageBytes);
                    iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                    table1 = new PdfPTable(1);
                    table1.WidthPercentage = 100;
                    table1.SetWidths(new float[] { 1.7f });
                    PdfPCell cell = new PdfPCell(image);
                    cell.FixedHeight = 25;
                    cell.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell);

                    pdfDoc.Add(table1);
                    sign = true;
                    break;
                }
                if (sign == false)
                {
                    pdfDoc.Add(new Paragraph(" ", fontH1));
                    pdfDoc.Add(new Paragraph(" ", fontH1));
                }
                var user = dc.User_View(billApproveBy, 0, "", "", "");
                foreach (var u in user)
                {
                    pdfDoc.Add(new Paragraph(u.USER_Name_var, fontH1));
                    if (u.USER_Designation_var != null)
                    {
                        pdfDoc.Add(new Paragraph("(" + u.USER_Designation_var.Replace("(", "").Replace(")", "") + ")", fontH1));
                    }
                }
            }
            #endregion

            if (monthlyBillFlag == true)
            {
                pdfDoc.NewPage();
                LogoToBillPdf(pdfDoc);

                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Add("Tax Invoice Detail");
                paragraph.SpacingAfter = 2;
                pdfDoc.Add(paragraph);

                string[] header2;
                float[] widths2;
                header2 = new string[] { "Sr.No.", "Particular", "SAC Code", "Quantity", "Rate", "Amount", "Discount (%)", "Discounted Amount" };
                widths2 = new float[] { 7f, 30f, 10f, 10f, 10f, 10f, 10f, 10f };
                table1 = new PdfPTable(8);

                table1.SetWidths(widths2);
                table1.SpacingBefore = 5;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;

                PdfPCell cell1;
                for (int h = 0; h < header2.Count(); h++)
                {
                    cell1 = new PdfPCell(new Phrase(header2[h], fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }

                decimal billTotal2 = 0, actualTotal2 = 0;
                string prevRefNo = "";
                bool starNoteFlag2 = false;
                var bd2 = dc.BillDetailMonthly_View(BillNo);
                foreach (var bill2 in bd2)
                {
                    if (prevRefNo != bill2.MBILLD_ReferenceNo_int.ToString())
                    {
                        cell1 = new PdfPCell(new Phrase("", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        if (bill2.InterBranchRefNo_var != null && bill2.InterBranchRefNo_var != "")
                            cell1 = new PdfPCell(new Phrase("Reference No. : " + bill2.InterBranchRefNo_var + " - Received Date : " + Convert.ToDateTime(bill2.MBILLD_ReceivedDate_dt).ToString("dd/MM/yyyy") + " (" + bill2.MBILLD_Description_var + " )", fontH2));
                        else
                            cell1 = new PdfPCell(new Phrase("Reference No. : " + bill2.MBILLD_ReferenceNo_int.ToString() + " - Received Date : " + Convert.ToDateTime(bill2.MBILLD_ReceivedDate_dt).ToString("dd/MM/yyyy") + " (" + bill2.MBILLD_Description_var + " )", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Colspan = 7;
                        table1.AddCell(cell1);
                        // Description 

                        //cell1 = new PdfPCell(new Phrase("", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);

                        //cell1 = new PdfPCell(new Phrase(bill2.MBILLD_Description_var, fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Colspan = 7;
                        //table1.AddCell(cell1);


                    }

                    cell1 = new PdfPCell(new Phrase(bill2.MBILLD_SrNo_int.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(bill2.MBILLD_TEST_Name_var, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(bill2.MBILLD_SACCode_var, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill2.MBILLD_Quantity_int).ToString("0.##"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    if (bill2.MBILLD_ActualRate_num != null && bill2.MBILLD_ActualRate_num > 0)
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill2.MBILLD_ActualRate_num).ToString("0.00"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        table1.AddCell(cell1);

                        decimal actualAmount = 0;
                        actualAmount = Convert.ToDecimal(bill2.MBILLD_Quantity_int) * Convert.ToDecimal(bill2.MBILLD_ActualRate_num);
                        cell1 = new PdfPCell(new Phrase(actualAmount.ToString("0.00"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        table1.AddCell(cell1);

                        actualTotal2 += actualAmount;

                        if (bill2.MBILLD_AppDiscStatus_bit == true)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill2.MBILLD_DiscountPer_num).ToString("0.##") + "*", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            starNoteFlag2 = true;
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill2.MBILLD_DiscountPer_num).ToString("0.##"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }

                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill2.MBILLD_Amt_num).ToString("0.00"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        table1.AddCell(cell1);
                    }
                    else
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill2.MBILLD_Rate_num).ToString("0.00"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill2.MBILLD_Amt_num).ToString("0.00"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("0", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(bill2.MBILLD_Amt_num).ToString("0.00"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        table1.AddCell(cell1);
                    }

                    prevRefNo = bill2.MBILLD_ReferenceNo_int.ToString();
                    billTotal2 = billTotal2 + Convert.ToDecimal(bill2.MBILLD_Amt_num);
                }

                cell1 = new PdfPCell(new Phrase("Total Amount", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                cell1.Colspan = 5;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(actualTotal2.ToString("0.00"), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(billTotal2.ToString("0.00"), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                table1.AddCell(cell1);

                pdfDoc.Add(table1);

                if (starNoteFlag2 == true)
                {
                    table1 = new PdfPTable(3);
                    MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                    table1.SpacingBefore = 5;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;

                    cell2 = new PdfPCell(new Phrase("Notes : ", fontH2));
                    cell2.Colspan = 3;
                    cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);

                    cell2 = new PdfPCell(new Phrase("1) * includes additional 5 % discount for placing enquiry through Durocrete App.", fontH1));
                    cell2.Colspan = 3;
                    cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);

                    pdfDoc.Add(table1);
                }
            }

            pdfDoc.Close();
            if ((Action != "Email" && Action.Contains("Email") == false) || Action == "DisplayLogoEmail")
            {
                string pdfPath = @Subfoldername1 + "/" + fileName;
                DownloadReport(fileName, pdfPath);
            }

        }

        #endregion

        #region Other
        public void OT_PDFReport(string ReferenceNo, string Action)
        {
            string filename = "";
            // Get the file from the database
            var q = dc.OtherReport_View(ReferenceNo).ToList();
            foreach (var quote in q)
            {
                filename = (string)quote.OTRPT_FileName_var;
                string contentType = (string)quote.OTRPT_FileContentType_var;
                //Byte[] data = (Byte[])quote.OTRPT_FileData_varb.ToArray();
                //if (Action == "Email" || Action.Contains("Email") == true)
                //{
                //    FileStream fs = new FileStream(@foldername + "/" + filename, FileMode.Create);
                //    fs.Write(data, 0, data.Length);
                //    fs.Close();
                //}
                //else
                //{
                //    // Send the file to the browser
                //    System.Web.HttpContext.Current.Response.AddHeader("Content-type", contentType);
                //    System.Web.HttpContext.Current.Response.AddHeader("Content-Disposition", "attachment; filename=" + filename);
                //    System.Web.HttpContext.Current.Response.BinaryWrite(data);
                //    System.Web.HttpContext.Current.Response.Flush();
                //    System.Web.HttpContext.Current.Response.End();
                //}
                string filePath = "D:/OtherReportFiles/";
                if (cnStr.ToLower().Contains("mumbai") == true)
                    filePath += "Mumbai/";
                else if (cnStr.ToLower().Contains("nashik") == true)
                    filePath += "Nashik/";
                else if (cnStr.ToLower().Contains("metro") == true)
                    filePath += "Metro/";
                else
                    filePath += "Pune/";

                filePath += filename;
                if (File.Exists(@filePath))
                {
                    //if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                    if (Action == "Email" || Action.Contains("Email") == true)
                    {
                        File.Copy(filePath, @foldername + "/" + filename);
                    }
                    //else if (Action == "Automail") // uncomment this for report service
                    //{
                    //    string newFileName = "OT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    //    File.Copy(filePath, @foldername + "/" + newFileName, true);
                    //    DownloadReport(newFileName, @foldername + "/" + newFileName);
                    //}
                    else if (Action != "Email" && Action.Contains("Email") == false)
                    {
                        System.Web.HttpContext.Current.Response.Clear();
                        //System.Web.HttpContext.Current.Response.ContentType = "application/octet-stream";
                        System.Web.HttpContext.Current.Response.AddHeader("Content-type", contentType);
                        System.Web.HttpContext.Current.Response.AppendHeader("content-disposition", "attachment; filename=" + filePath);
                        System.Web.HttpContext.Current.Response.WriteFile(filePath);
                        System.Web.HttpContext.Current.Response.Flush();
                        System.Web.HttpContext.Current.Response.End();
                    }
                }
            }
            if (filename == "")
            {
                var OtherInwad = dc.ReportStatus_View("Other Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var Odetails in OtherInwad)
                {
                    if (Odetails.OTINWD_EnteredDate_dt < DateTime.ParseExact("13/02/2017", "dd/MM/yyyy", null))
                    {
                        OT_PDFReport_13022017(ReferenceNo, Action);
                        filename = "old report";
                    }
                    break;
                }
            }
            if (filename == "")
            {
                #region for RefNo
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;

                if (Action == "Print" || Action == "Automail" || Action == "Display")
                    nablStatus = getNablLogoStatus("OT", ReferenceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "OT_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Other";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "OT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();
                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                PdfPTable table2 = new PdfPTable(7);
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;

                bool RemotelyAppv = false;
                string Witnessby = string.Empty;

                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);
                Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.BOLD);

                #region data
                int TestId = 0;
                bool gypsumFlag = false;
                int Approveby = 0;
                string supersedeNote = "", CustName = "", SiteName = "", Address = "";
                var oInwd = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, false, 0, "", 0, 0, 0, 0, 0, "", 0, "OT").ToList();
                var OtherInwad = dc.ReportStatus_View("Other Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var Odetails in OtherInwad)
                {
                    if (Odetails.OTINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(Odetails.OTINWD_ApprovedBy_tint);
                    }
                    if (Odetails.INWD_RptSITE_Id != null && Odetails.INWD_RptCL_Id != null)
                    {
                        CustName = Odetails.RptCL_Name_var;
                        SiteName = Odetails.RptST_Name_var;
                        Address = Odetails.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = Odetails.CL_Name_var;
                        SiteName = Odetails.SITE_Name_var;
                        Address = Odetails.CL_OfficeAddress_var;
                    }

                    SiteRouteId = Convert.ToInt32(Odetails.SITE_Route_Id);
                    #region Header
                    string strHeading = "";
                    int rptStatus = 0;
                    var otInwd = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, false, 0, "", 0, 0, 0, 0, 0, "", 0, "OT").ToList();
                    var count = otInwd.Count();
                    for (int i = 0; i < count; i++)
                    {
                        rptStatus = Convert.ToInt32(otInwd[i].OTINWD_Status_tint);
                        nablStatus = 0;
                        if (otInwd[i].OTINWD_NablScope_var != null)
                        {
                            if (otInwd[i].OTINWD_NablScope_var.ToString() == "F"
                                || otInwd[i].OTINWD_NablScope_var.ToString() == "P")
                            {
                                nablStatus = 1;
                            }
                        }
                        #region old test id
                        //if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 109)
                        //{
                        //    strHeading = "Autoclaved aerated cellular concrete products compressive";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 110)
                        //{
                        //    strHeading = "Autoclaved aerated cellular concrete products Density";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 111)
                        //{
                        //    strHeading = "Chemical Admixture";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 112)
                        //{
                        //    strHeading = "Concrete Beam Flexural Strength";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 113)
                        //{
                        //    strHeading = "Chemical Testing of slag";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 114)
                        //{
                        //    strHeading = "Coarse Aggregate";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 115)
                        //{
                        //    strHeading = "Concrete Chloride";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 116)
                        //{
                        //    strHeading = "Chemical resistance of ceramic Tiles";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 117)
                        //{
                        //    strHeading = "Compressive Strength of Joining Mortar T9 Block Fix";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 118)
                        //{
                        //    strHeading = "Door Shutter";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 119)
                        //{
                        //    strHeading = "Deletarious Material";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 120)
                        //{
                        //    strHeading = "Door Frame Wood";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 121)
                        //{
                        //    strHeading = "Fuel Ash";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 122)
                        //{
                        //    strHeading = "Fine Aggregate";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 123)
                        //{
                        //    strHeading = "Gypsum";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 124)
                        //{
                        //    strHeading = "Gypsum Chemical";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 125)
                        //{
                        //    strHeading = "Grout Cube Compressive Strength";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 126)
                        //{
                        //    strHeading = "Ground granulated blast furnance slag + cement";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 127)
                        //{
                        //    strHeading = "Natural Building Stone";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 128)
                        //{
                        //    strHeading = "P.O.P Cube Compressive Strength";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 129)
                        //{
                        //    strHeading = "Plywood Test";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 130)
                        //{
                        //    strHeading = "Powder Coating Thickness";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 131)
                        //{
                        //    strHeading = "Reinforcement Splice Bar";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 132)
                        //{
                        //    strHeading = "Structural Steel Tensile";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 133)
                        //{
                        //    strHeading = "Steel Chemical";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 134)
                        //{
                        //    strHeading = "Silica Fume";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 135)
                        //{
                        //    strHeading = "Wood Sample";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 683)
                        //{
                        //    strHeading = "Rock Core Compressive Strength";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 684)
                        //{
                        //    strHeading = "Evaluation Test of Jointing Mortar";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 685)
                        //{
                        //    strHeading = "Rebar Scanning";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 688)
                        //{
                        //    strHeading = "Water (Drinking Purpose)";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 690)
                        //{
                        //    strHeading = "Evaluation Test of Cementitious Mortar";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 501)
                        //{
                        //    strHeading = "Evaluation Test of Tile Adhesive";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 691)
                        //{
                        //    strHeading = "Concrete Carbonation Test";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 692)
                        //{
                        //    strHeading = "Half Cell Potentiometer";
                        //}
                        //else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 139 ||
                        //    Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 0)
                        //{
                        //    strHeading = "Other New Test";
                        //}
                        //else
                        //{
                        //    strHeading = "Other Testing";
                        //}
                        #endregion
                        if (otInwd[i].OTINWD_RptTitle_var != null)
                        {
                            if (otInwd[i].OTINWD_RptTitle_var != "")
                            {
                                strHeading = otInwd[i].OTINWD_RptTitle_var.ToString();
                            }
                        }
                        if (strHeading == "")
                        {
                            if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 1) //15-123)
                            {
                                strHeading = "Gypsum";
                                gypsumFlag = true;
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 2) //16-124)
                            {
                                strHeading = "Gypsum Chemical";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 3) //18-126)
                            {
                                strHeading = "Ground granulated blast furnance slag + cement";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 4) //21-129)
                            {
                                strHeading = "Plywood Test";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 5) //29-683)
                            {
                                strHeading = "Rock Core Compressive Strength";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 6) //30-684)
                            {
                                strHeading = "Evaluation Test of Jointing Mortar";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 7) //31-685)
                            {
                                strHeading = "Rebar Scanning";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 8) //32-689)
                            {
                                strHeading = "Water (Drinking Purpose)";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 9) //33-690)
                            {
                                strHeading = "Evaluation Test of Cementitious Mortar";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 10) //34-501)
                            {
                                strHeading = "Evaluation Test of Tile Adhesive";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 11) //35-691)
                            {
                                strHeading = "Concrete Carbonation Test";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 12) //36-692)
                            {
                                strHeading = "Half Cell Potentiometer";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 13) //23-131)
                            {
                                strHeading = "Reinforcement Splice Bar";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 14) //36-692)
                            {
                                strHeading = "Chemical Admixture";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 15) //3-111)
                            {
                                strHeading = "Deleterious Material";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 16) //37-383)
                            {
                                strHeading = "Laminated Door Shutter";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 17) //10-118)
                            {
                                strHeading = "Steel Chemical";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 18) //25-133)
                            {
                                strHeading = "Evaluation Test of Tile Adhesive";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 19) //25-133)
                            {
                                strHeading = "Coupler Chemical";
                            }

                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 20) //25-133)
                            {
                                strHeading = "Pull Off Test";
                            }

                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 21) //25-133)
                            {
                                strHeading = "Half Cell Potentiometer";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 22) //25-133)
                            {
                                strHeading = "Concrete Carbonation Test";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 23) //25-133)
                            {
                                strHeading = "PT Strand Cable";
                            }

                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 24) //25-133)
                            {
                                strHeading = "GGBS- Chemical";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 25) //25-133)
                            {
                                strHeading = "Fly Ash Chemical";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 26) //26-133)
                            {
                                strHeading = "Beam Flexural Strength";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 27) //26-133)
                            {
                                strHeading = "Concrete Water Permeability Test";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 28) //26-133)
                            {
                                strHeading = "Silica Fume";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 29) //26-133)
                            {
                                strHeading = "Sieve Analysis of Readymix Plaster";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 30) //26-133)
                            {
                                strHeading = "CELLULAR LIGHT WEIGHT CONCRETE BLOCKS DENSITY TEST";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 31) //26-133)
                            {
                                strHeading = "CELLULAR LIGHT WEIGHT CONCRETE BLOCKS WATER ABSORPTION TEST";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 32) //26-133)
                            {
                                strHeading = "CELLULAR LIGHT WEIGHT CONCRETE BLOCKS COMPRESSIVE TEST";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 34) //26-133)
                            {
                                strHeading = "Modulus of Elasticity of Concrete using Extensometer";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 35)
                            {
                                strHeading = "Water Permeability Test";
                            }
                            else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 36)
                            {
                                strHeading = "RAPID CHLORIDE PENETRATION TEST";
                            }
                            else
                            {
                                strHeading = "Other Testing";
                            }

                        }
                    }

                    if (Action.Contains("Print") == true)
                        LogoToPdf(pdfDoc, nablStatus);
                    else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                        LogoToPdfEmail(pdfDoc, nablStatus);
                    else if (Action.Contains("Display") == true)
                        LogoToPdfOld_270121(pdfDoc, nablStatus);

                    //float[] widths = new float[] { 18f, 1f, 52f, 15f, 1f, 15f };
                    float[] widths = new float[] { 15f, 1f, 57f, 18f, 1f, 16f };
                    MaindataTable.SetWidths(widths);

                    if (gypsumFlag == true)
                    {
                        paragraph.Alignment = Element.ALIGN_CENTER;
                        if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                        {
                            paragraph.Font = fontTitle1;
                            paragraph.Add("Test Report - Gypsum");
                        }
                        else
                        {
                            paragraph.Font = fontH1;
                            paragraph.Add("Office Copy - Gypsum");
                        }
                        //paragraph.SpacingAfter = ;
                        pdfDoc.Add(paragraph);
                    }
                    else
                    {
                        paragraph = new Paragraph();
                        paragraph.Alignment = Element.ALIGN_CENTER;
                        //paragraph.Add(" ");
                        //pdfDoc.Add(paragraph);

                        if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                        {
                            paragraph.Font = fontTitle1;
                            paragraph.Add("Test Report");
                        }
                        else
                        {
                            paragraph.Font = fontH1;
                            paragraph.Add("Office Copy");
                        }
                        //paragraph.SpacingAfter = 2;
                        pdfDoc.Add(paragraph);

                        paragraph = new Paragraph();
                        paragraph.Alignment = Element.ALIGN_CENTER;
                        paragraph.Font = fontTitle;
                        paragraph.SpacingAfter = 1;
                        paragraph.Add(strHeading);
                        if (rptStatus < 6 || Action != "Print")
                        {
                            //paragraph.SpacingAfter = 20;
                        }
                        paragraph.SpacingAfter = 1;
                        pdfDoc.Add(paragraph);
                    }
                    #endregion
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    if (gypsumFlag == false)
                        MaindataTable.SpacingBefore = 1;

                    if (Odetails.OTINWD_WitnessBy_var != null && Odetails.OTINWD_WitnessBy_var != string.Empty)
                    {
                        Witnessby = Odetails.OTINWD_WitnessBy_var;
                    }
                    if (Odetails.OTINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("OT", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("OT - " + Odetails.OTINWD_SetOfRecord_var, fontH1));
                    string strRecNo = Odetails.OTINWD_SetOfRecord_var;
                    if (Odetails.OTINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (Odetails.OTINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (Odetails.OTINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(Odetails.OTINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + Odetails.OTINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Odetails.OTINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (Odetails.SITE_MonthlyBillingStatus_bit == true && Odetails.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (Odetails.OTINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(Odetails.OTINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(Odetails.INWD_BILL_Id), fontH1));
                    }

                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Odetails.OTINWD_SupplierName_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (Odetails.INWD_ReceivedDate_dt != null)
                    {
                        DateTime rDT = Convert.ToDateTime(Odetails.INWD_ReceivedDate_dt);
                        string receiptDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(receiptDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(Odetails.CONT_Name_var + " - " + Odetails.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (Odetails.OTINWD_TestedDate_dt != null)
                    {
                        DateTime rDT = Convert.ToDateTime(Odetails.OTINWD_TestedDate_dt);
                        string receiptDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(receiptDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("-" + System.DateTime.Now.ToString("dd/MM/yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }

                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    if (Odetails.OTINWD_RemoteApproved == true && Odetails.OTINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }

                    if (Odetails.INWD_RptSITE_Id != null && Odetails.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(Odetails.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //if (Odetails.OTINWD_IssueDate_dt != null)
                    //{
                    //    DateTime iDT = Convert.ToDateTime(Odetails.OTINWD_IssueDate_dt);
                    //    string issuedt = iDT.ToString("dd-MMM-yyyy");
                    //    Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    //}
                    if (Odetails.OTINWD_ApprovedDate_dt != null)
                    {
                        DateTime iDT = Convert.ToDateTime(Odetails.OTINWD_ApprovedDate_dt);
                        string issuedt = iDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }

                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    foreach (var OT in oInwd)
                    {
                        if (OT.OTINWD_ReportForTestId_int == 36)
                        {
                            string[] strVal = OT.OTDETAIL_DetailTest_var.Split('$');
                            strVal = strVal[2].Split('|');
                            strVal = strVal[0].Split('~');

                            Cust_Namecell = new PdfPCell(new Phrase("Diameter of sample : " + strVal[0], fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            Cust_Namecell.Colspan = 7;
                            MaindataTable.AddCell(Cust_Namecell);

                            Cust_Namecell = new PdfPCell(new Phrase("Temperature During Test : " + strVal[1], fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            Cust_Namecell.Colspan = 7;
                            MaindataTable.AddCell(Cust_Namecell);
                        }
                    }
                    if (Odetails.INWD_RptSITE_Id != null && Odetails.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(Odetails.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(Odetails.OTINWD_ULRNo_var) != "" && Convert.ToString(Odetails.OTINWD_ULRNo_var) != null)
                    {
                        if (Convert.ToInt32(Odetails.OTINWD_ReportForTestId_int) == 14)
                            Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Chemical" + "    " + "Group : " + "Admixture", fontH1));
                        else
                            Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No - " + Convert.ToString(Odetails.OTINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //

                    //MaindataTable.SpacingAfter = 2;
                    pdfDoc.Add(MaindataTable);
                    TestId = Convert.ToInt32(Odetails.OTINWD_ReportForTestId_int);
                }
                #endregion
                //if (gypsumFlag == false)
                //    pdfDoc.Add(Chunk.NEWLINE);
                //   pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));

                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 1;
                pdfDoc.Add(paragraph);
                PdfPCell cell1;

                int flagTable = 0, tblCount = 0;
                int j = 0, grdCnt = 0;
                int SrNo = 0;
                string[] OtherDeatils, grdRow, grdCol, GridCheckedStatus = null;
                DateTime ApproveDt = new DateTime();
                //var oInwd = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, false, 0, "", 0, 0, 0, 0, 0, "", 0, "OT").ToList();

                foreach (var OT in oInwd)
                {
                    if (Convert.ToString(OT.OTINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(OT.OTINWD_ApprovedDate_dt);
                    }

                    # region 1-15-123
                    if (OT.OTINWD_ReportForTestId_int == 1)
                    {
                        flagTable = 1;
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                tblCount++;
                                table1 = new PdfPTable(4);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 30f, 20f, 20f });

                                string[] headers = { "Sr no.", "Test", "Unit", "Test Result" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                //table1.SpacingBefore = 15;
                                pdfDoc.Add(table1);
                            }
                            else if (grdCnt == 2 && (GridCheckedStatus == null || GridCheckedStatus[1] == "1"))
                            {
                                tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("Requirement as per IS 2547(Part-1) - 1976, RA-2002, Amend No.2 'Specification For Gypsum Building Plaster.'");
                                pdfDoc.Add(paragraph);

                                table2 = new PdfPTable(7);
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 10f, 30f, 20f, 20f, 20f, 20f, 20f });
                                string[] headers = { "Sr no.", "Test", "Unit", "Plaster of paris", "Type A (short time setting)", "Type B (Long time setting)", "Anhydrous Gypsum plaster", "Keene's Plaster" };
                                //for (int h = 0; h < headers.Count(); h++)
                                //{
                                cell1 = new PdfPCell(new Phrase(headers[0], fontH2));
                                cell1.Rowspan = 2;
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table2.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(headers[1], fontH2));
                                cell1.Rowspan = 2;
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table2.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(headers[2], fontH2));
                                cell1.Rowspan = 2;
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table2.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(headers[3], fontH2));
                                cell1.Colspan = 2;
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table2.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(headers[6], fontH2));
                                cell1.Rowspan = 2;
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table2.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(headers[7], fontH2));
                                cell1.Rowspan = 2;
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table2.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(headers[4], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table2.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(headers[5], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table2.AddCell(cell1);

                                //}
                                SrNo = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                table2.SpacingBefore = 1;
                                pdfDoc.Add(table2);
                            }
                            else if (grdCnt == 3 && (GridCheckedStatus == null || GridCheckedStatus[2] == "1"))
                            {
                                tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("Requirement as per IS 2547(Part-2) - 1976, RA-2002, 'Specification For Gypsum Building Plaster.'");
                                pdfDoc.Add(paragraph);

                                table2 = new PdfPTable(7);
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 10f, 30f, 20f, 20f, 20f, 20f, 20f });
                                string[] headers = { "Sr no.", "Test", "Unit", "Undercoat Plaster(Type A)", "Browning Plaster", "Metal Lathing Plaster", "Bonding Plaster", "Final Coat Plaster(Type B) \n Finish Plaster" };
                                //for (int h = 0; h < headers.Count(); h++)
                                //{
                                cell1 = new PdfPCell(new Phrase(headers[0], fontH2));
                                cell1.Rowspan = 2;
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table2.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(headers[1], fontH2));
                                cell1.Rowspan = 2;
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table2.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(headers[2], fontH2));
                                cell1.Rowspan = 2;
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table2.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(headers[3], fontH2));
                                cell1.Colspan = 3;
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table2.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(headers[7], fontH2));
                                cell1.Rowspan = 2;
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table2.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(headers[4], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table2.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(headers[5], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table2.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(headers[6], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table2.AddCell(cell1);
                                //}
                                SrNo = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                table2.SpacingBefore = 1;
                                pdfDoc.Add(table2);
                            }
                        }
                    }
                    # endregion
                    # region 2-16-124
                    else if (OT.OTINWD_ReportForTestId_int == 2)
                    {
                        flagTable = 2;
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("A) Chemical Analysis : ");
                                pdfDoc.Add(paragraph);

                                table1 = new PdfPTable(4);
                                table1.WidthPercentage = 100;
                                table1.SpacingBefore = 1;
                                table1.SetTotalWidth(new float[] { 6f, 30f, 20f, 20f });

                                string[] headers = { "Sr no.", "Test", "Unit", "Test Result" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SpacingAfter = 5;
                                pdfDoc.Add(table1);
                            }
                            else if (grdCnt == 2 && (GridCheckedStatus == null || GridCheckedStatus[1] == "1"))
                            {
                                tblCount++;

                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("B) Specifications : IS 2547(Part 1) -1976 : 'Specification For Gypsum Building Plaster.'");
                                paragraph.SpacingAfter = 1;
                                pdfDoc.Add(paragraph);

                                table2 = new PdfPTable(7);
                                table1.SpacingBefore = 1;
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 10f, 30f, 20f, 20f, 20f, 20f, 20f });
                                string[] headers = { "Sr no.", "Test", "Unit", "Plaster of paris", "Retarded Hemihydrate Gypsum plaster", "Anhydrous Gypsum Plaster", "Keene's Plaster" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }
                                SrNo = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table2);
                            }
                        }
                    }
                    # endregion
                    # region 5-29-683
                    else if (OT.OTINWD_ReportForTestId_int == 5)
                    {
                        flagTable = 5;

                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                tblCount++;
                                table1 = new PdfPTable(10);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 8f, 22f, 10f, 10f, 10f, 12f, 10f, 10f, 17f, 10f });

                                string[] headers = { "Sr no.", "ID Mark", "Diameter of Core (cm)", "Length of Sample (cm)", "Oven Dry Weight (gm)", "Area of cross section (cm²)", "Load at failure (kN)", "Comp. Strength (Kg/cm²)", "Corrective Compressive Strength(Kg/cm²)", "Remarks" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SpacingAfter = 15;
                                pdfDoc.Add(table1);
                            }
                            else if (grdCnt == 2 && (GridCheckedStatus == null || GridCheckedStatus[1] == "1"))
                            {
                                tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("Classification of Rock Based on Compressive Strength");
                                pdfDoc.Add(paragraph);

                                table2 = new PdfPTable(3);
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 8f, 30f, 20f });
                                string[] headers = { "Sr no.", "Strength in N/mm²", "Classification of Rock" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }
                                SrNo = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                table2.SpacingBefore = 1;
                                pdfDoc.Add(table2);
                            }
                        }
                    }
                    # endregion
                    #region 6-30-684
                    else if (OT.OTINWD_ReportForTestId_int == 6)
                    {
                        flagTable = 6;
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++; tblCount++;
                            SrNo = 0;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("1) Compressive strength 28 days");
                                pdfDoc.Add(paragraph);

                                table1 = new PdfPTable(12);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 10f, 5f, 2f, 5f, 2f, 5f, 8f, 12f, 8f, 10f, 12f });

                                string[] headers = { "Sr no.", "Age", "Size of specimen", "Weight", "Cross Sectional Area", "Load", "Comp. Strength", "Avg. Comp. Strength" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (h == 0)
                                        cell1.Rowspan = 2;
                                    else if (h == 2)
                                        cell1.Colspan = 5;
                                    table1.AddCell(cell1);
                                }

                                string[] headers1 = { "(Day)", "(mm)", "(g)", "(mm²)", "(kN)", "(N/mm²)", "(N/mm²)" };
                                for (int h = 0; h < headers1.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers1[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;

                                    if (h == 1)
                                        cell1.Colspan = 5;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                        int colno = 1;
                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                                if (colno == 2 || colno == 3)
                                                {
                                                    cell1 = new PdfPCell(new Phrase("X", fontH1));
                                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                    table1.AddCell(cell1);
                                                }
                                                colno++;
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SpacingAfter = 1;
                                table1.SpacingBefore = 1;
                                pdfDoc.Add(table1);
                            }
                            else if (grdCnt == 2 && (GridCheckedStatus == null || GridCheckedStatus[1] == "1"))
                            {
                                SrNo = 0; tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("2) Splitting tensile strength 28 days");
                                pdfDoc.Add(paragraph);

                                table2 = new PdfPTable(11);
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 6f, 10f, 5f, 2f, 5f, 2f, 5f, 10f, 10f, 10f, 10f });

                                string[] headers = { "Sr no.", "Id Mark", "Size of specimen", "Load", "Minimum splitting tensile strength", "Maximum splitting tensile strength", "Observation" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (h == 0 || h == 1 || h == 6)
                                        cell1.Rowspan = 2;
                                    else if (h == 2)
                                        cell1.Colspan = 5;
                                    table2.AddCell(cell1);
                                }

                                string[] headers1 = { "(mm)", "(kN)", "(MPa)", "(MPa)" };
                                for (int h = 0; h < headers1.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers1[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;

                                    if (h == 0)
                                        cell1.Colspan = 5;
                                    table2.AddCell(cell1);
                                }
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);
                                        int colno = 1;
                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                                if (colno == 2 || colno == 3)
                                                {
                                                    cell1 = new PdfPCell(new Phrase("X", fontH1));
                                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                    table2.AddCell(cell1);
                                                }
                                                colno++;
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                table2.SpacingBefore = 2;
                                table2.SpacingAfter = 1;
                                pdfDoc.Add(table2);
                            }
                            else if (grdCnt == 3 && (GridCheckedStatus == null || GridCheckedStatus[2] == "1"))
                            {
                                SrNo = 0; tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("Pull off test 28 days test on light weight block");
                                pdfDoc.Add(paragraph);

                                table2 = new PdfPTable(7);
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 10f, 20f, 20f, 20f, 20f, 20f, 20f });
                                string[] headers = { "Sr no.", "Area contact", "Load sustained", "Bond strength", "Average Bond strength", "Observation", "Specified BS - 1881 (Part 207) : 1993" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (h == 0 || h == 5 || h == 6)
                                        cell1.Rowspan = 2;
                                    table2.AddCell(cell1);
                                }
                                string[] headers1 = { "(mm²)", "(N)", "(N/mm²)", "(N/mm²)" };
                                for (int h = 0; h < headers1.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers1[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                table2.SpacingBefore = 1;
                                pdfDoc.Add(table2);
                            }
                        }
                    }
                    # endregion
                    #region 7-31-685
                    else if (OT.OTINWD_ReportForTestId_int == 7)
                    {
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            SrNo = 0;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH1;
                                paragraph.SetLeading(0.0f, 1.2f);
                                paragraph.Add("Dear Sir, \nThis is with reference to the mentioned subject we have carried out the rebar location test on thecolumn identified by you. \nThe results of the tests are as below.");
                                pdfDoc.Add(paragraph);

                                table1 = new PdfPTable(7);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 20f, 10f, 10f, 10f, 10f, 10f });

                                string[] headers = { "Sr. No.", "Description of Member", "Main Bar in Lenght", "Diameter of Bar (mm)*", "Stirrups@ Spacing", "Diameter of Stirrups (mm)*", "Avearage Cover (mm)#" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                        int colno = 1;
                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                                colno++;
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SpacingBefore = 1;
                                pdfDoc.Add(table1);
                            }

                        }
                    }
                    # endregion
                    # region 8-32-689
                    else if (OT.OTINWD_ReportForTestId_int == 8)
                    {
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                table1 = new PdfPTable(5);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 30f, 10f, 10f, 20f });

                                string[] headers = { "Sr no.", "Test Parameter", "Result", "Unit", "Desirable Limits IS 10500:2012" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table1);
                            }

                        }
                    }
                    # endregion
                    # region 3-18-126
                    else if (OT.OTINWD_ReportForTestId_int == 3)
                    {
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                table1 = new PdfPTable(5);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 30f, 10f, 10f, 20f });

                                string[] headers = { "Sr no.", "Test Parameter", "Result", "Unit", "Method of testing" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table1);
                            }

                        }
                    }
                    # endregion
                    # region 9-33-690
                    else if (OT.OTINWD_ReportForTestId_int == 9)
                    {
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("Pull off test 7 days");
                                pdfDoc.Add(paragraph);

                                table1 = new PdfPTable(7);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 10f, 10f, 10f, 10f, 10f, 10f });

                                string[] headers = { "Sr no.", "Area Contact (mm²)", "Load Sustained (N)", "Bond Strength (N/mm²)", "Average Bond Strength (N/mm²)", "Observation", "Specified BS - 1881 (Part 207) : 1993" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SpacingBefore = 1;
                                pdfDoc.Add(table1);
                            }

                        }
                    }
                    # endregion
                    # region 4-21-129
                    else if (OT.OTINWD_ReportForTestId_int == 4)
                    {
                        flagTable = 4;
                        int srNo = 1;
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++; tblCount++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add(srNo + ") Determination of Density & Moisture Content");
                                pdfDoc.Add(paragraph);
                                srNo++;
                                table1 = new PdfPTable(5);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 20f, 20f, 10f, 10f });

                                string[] headers = { "Sr no.", "Id Mark", "Test Parameter", "Test Results", "Unit" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table2.SpacingBefore = 1;
                                table2.SpacingAfter = 1;
                                pdfDoc.Add(table1);
                            }
                            else if (grdCnt == 2 && (GridCheckedStatus == null || GridCheckedStatus[1] == "1"))
                            {
                                tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add(srNo + ") Test for Water Resistance");
                                pdfDoc.Add(paragraph);
                                srNo++;
                                table2 = new PdfPTable(5);
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 6f, 20f, 20f, 10f, 10f });

                                string[] headers = { "Sr no.", "Id Mark", "Test Parameter", "Test Results", "Unit" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }
                                SrNo = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                table2.SpacingBefore = 1;
                                table2.SpacingAfter = 1;
                                pdfDoc.Add(table2);
                            }
                            else if (grdCnt == 3 && (GridCheckedStatus == null || GridCheckedStatus[2] == "1"))
                            {
                                tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add(srNo + ") Determination Nail & Screw Holiding Power");
                                pdfDoc.Add(paragraph);

                                table2 = new PdfPTable(5);
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 6f, 20f, 20f, 10f, 10f });

                                string[] headers = { "Sr no.", "Id Mark", "Test Parameter", "Test Results", "Unit" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }
                                SrNo = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                table2.SpacingBefore = 1;
                                pdfDoc.Add(table2);
                            }
                        }
                    }
                    # endregion
                    # region 10-34-501
                    else if (OT.OTINWD_ReportForTestId_int == 10)
                    {
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                table1 = new PdfPTable(5);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 30f, 10f, 10f, 30f });

                                string[] headers = { "Sr no.", "Particular Test", "Result", "Unit", "Specified Limit" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table1);
                            }

                        }
                    }
                    # endregion
                    # region 11-35-691
                    else if (OT.OTINWD_ReportForTestId_int == 11)
                    {
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                table1 = new PdfPTable(3);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 30f, 30f });

                                string[] headers = { "Sr no.", "Sample Description", "Depth of Carbonation (mm)" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table1);
                            }

                        }
                    }
                    # endregion
                    # region 12-36-692
                    else if (OT.OTINWD_ReportForTestId_int == 12)
                    {
                        flagTable = 12;
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++; tblCount++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("Half Cell Potentiometer readings are generally interpreted as follows :");
                                pdfDoc.Add(paragraph);

                                table1 = new PdfPTable(3);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 30f, 30f });

                                string[] headers = { "Sr no.", "Half Cell Potential readings (mv)", "Conclusion" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SpacingBefore = 1;
                                table1.SpacingAfter = 1;
                                pdfDoc.Add(table1);
                            }
                            else if (grdCnt == 2 && (GridCheckedStatus == null || GridCheckedStatus[1] == "1"))
                            {
                                tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("Half cell readings obtained at site");
                                pdfDoc.Add(paragraph);

                                table2 = new PdfPTable(6);
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 6f, 20f, 10f, 10f, 10f, 10f });

                                string[] headers = { "Sr no.", "Description / Id Mark", "Average Half cell Potentiometer readings (mv)", "Temp. at the time of testing", "Temp. Coefficient (mv)", "Corrected average Potentiometer readings (mv)" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }
                                SrNo = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                table2.SpacingBefore = 1;
                                pdfDoc.Add(table2);
                            }

                        }
                    }
                    # endregion
                    #region 13-23-131
                    else if (OT.OTINWD_ReportForTestId_int == 13)
                    {
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            SrNo = 0;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {

                                table1 = new PdfPTable(5);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 10f, 15f, 10f, 10f });

                                string[] headers = { "Sr. No.", "Diameter of Bar     (mm)", "ID Mark", "Ultimate Load         (KN)", "Ultimate Tensile    (Stress N/mm²)" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                        int colno = 1;
                                        foreach (string colData in grdCol)
                                        {

                                            if (colData != "")
                                            {
                                                if (colno != 4)
                                                {
                                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                    table1.AddCell(cell1);
                                                }
                                                colno++;
                                            }
                                        }
                                    }

                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table1);
                            }

                        }
                    }
                    # endregion
                    #region 14-3-111
                    if (OT.OTINWD_ReportForTestId_int == 14)
                    {
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                table1 = new PdfPTable(4);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 30f, 20f, 20f });

                                string[] headers = { "Sr no.", "Name of Test", "Unit", "Test Result" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table1);
                            }

                        }
                    }
                    # endregion
                    #region 15-37-383
                    if (OT.OTINWD_ReportForTestId_int == 15)
                    {
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                table1 = new PdfPTable(5);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 30f, 20f, 20f, 20f });

                                string[] headers = { "Sr no.", "Contaminent", "Unit", "Result", "Specified limits \n as per IS 383" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table1);
                            }

                        }
                    }
                    # endregion
                    #region 16-10-118
                    else if (OT.OTINWD_ReportForTestId_int == 16)
                    {
                        flagTable = 16;
                        int srNo = 1;
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add(srNo + ") Glue Adhesion Test");
                                pdfDoc.Add(paragraph);
                                srNo++;
                                table1 = new PdfPTable(5);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 20f, 20f, 10f, 10f });

                                string[] headers = { "Sr no.", "Id Mark", "Sample", "Obeservation", "Remark" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SpacingBefore = 1;
                                table1.SpacingAfter = 1;
                                pdfDoc.Add(table1);
                            }
                            else if (grdCnt == 2 && (GridCheckedStatus == null || GridCheckedStatus[1] == "1"))
                            {
                                tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add(srNo + ") Knife Test");
                                pdfDoc.Add(paragraph);
                                srNo++;
                                table2 = new PdfPTable(5);
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 6f, 20f, 20f, 10f, 10f });

                                string[] headers = { "Sr no.", "Id Mark", "Sample", "Obeservation", "Remark" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }
                                SrNo = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                table2.SpacingBefore = 1;
                                table2.SpacingAfter = 1;
                                pdfDoc.Add(table2);
                            }
                            else if (grdCnt == 3 && (GridCheckedStatus == null || GridCheckedStatus[2] == "1"))
                            {
                                tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add(srNo + ") Screw Holding Power");
                                pdfDoc.Add(paragraph);
                                srNo++;

                                table2 = new PdfPTable(5);
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 6f, 20f, 20f, 10f, 10f });

                                string[] headers = { "Sr no.", "Id Mark", "Sample", "Obeservation", "Remark" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }
                                SrNo = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                table2.SpacingBefore = 2;
                                table2.SpacingAfter = 2;
                                pdfDoc.Add(table2);
                            }
                            else if (grdCnt == 4 && (GridCheckedStatus == null || GridCheckedStatus[3] == "1"))
                            {
                                tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add(srNo + ") Shock Resistance Test");
                                pdfDoc.Add(paragraph);
                                srNo++;
                                table2 = new PdfPTable(5);
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 6f, 20f, 20f, 10f, 10f });

                                string[] headers = { "Sr no.", "Id Mark", "Sample", "Obeservation", "Remark" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }
                                SrNo = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                table2.SpacingBefore = 2;
                                table2.SpacingAfter = 2;
                                pdfDoc.Add(table2);
                            }
                            else if (grdCnt == 5 && (GridCheckedStatus == null || GridCheckedStatus[4] == "1"))
                            {
                                tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add(srNo + ") End Immersion Test");
                                pdfDoc.Add(paragraph);
                                srNo++;
                                table2 = new PdfPTable(5);
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 6f, 20f, 20f, 10f, 10f });

                                string[] headers = { "Sr no.", "Id Mark", "Sample", "Obeservation", "Remark" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }
                                SrNo = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                table2.SpacingBefore = 2;
                                table2.SpacingAfter = 2;
                                pdfDoc.Add(table2);
                            }
                            else if (grdCnt == 6 && (GridCheckedStatus == null || GridCheckedStatus[5] == "1"))
                            {
                                tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add(srNo + ") Slamming Test");
                                pdfDoc.Add(paragraph);
                                srNo++;
                                table2 = new PdfPTable(5);
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 6f, 20f, 20f, 10f, 10f });

                                string[] headers = { "Sr no.", "Id Mark", "Sample", "Obeservation", "Remark" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }
                                SrNo = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                table2.SpacingBefore = 2;
                                pdfDoc.Add(table2);
                            }
                            else if (grdCnt == 7 && (GridCheckedStatus == null || GridCheckedStatus[6] == "1"))
                            {
                                tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add(srNo + ") Misuse  Test");
                                pdfDoc.Add(paragraph);

                                table2 = new PdfPTable(5);
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 6f, 20f, 20f, 10f, 10f });

                                string[] headers = { "Sr no.", "Id Mark", "Sample", "Obeservation", "Remark" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }
                                SrNo = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                table2.SpacingBefore = 2;
                                pdfDoc.Add(table2);
                            }
                        }
                    }
                    #endregion
                    #region 17-25-133
                    if (OT.OTINWD_ReportForTestId_int == 17)
                    {
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        //foreach (string grdDeatils in OtherDeatils)
                        //{

                        //  grdCnt++;
                        // if (grdCnt == 1)
                        //  {
                        if (GridCheckedStatus == null || GridCheckedStatus[0] == "1")
                        {
                            table1 = new PdfPTable(10);
                            table1.WidthPercentage = 100;
                            table1.SetTotalWidth(new float[] { 6f, 30f, 20f, 10f, 10f, 10f, 10f, 10f, 10f, 10f });

                            string[] headers = { "Sr no.", "ID Mark", "Size", "Observed values of elements", "C", "Mn", "Cr", "Ni", "Si", "S", "P", "%" };
                            for (int h = 0; h < headers.Count(); h++)
                            {
                                if (h == 0 || h == 1)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.Rowspan = 3;
                                    table1.AddCell(cell1);
                                }
                                else if (h == 2)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.Rowspan = 2;
                                    table1.AddCell(cell1);

                                }
                                else if (h == 3)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.Colspan = 7;
                                    table1.AddCell(cell1);
                                }
                                else if (h != 11)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }
                                else
                                {
                                    cell1 = new PdfPCell(new Phrase("(thk)mm", fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                    for (int i = 0; i < 7; i++)
                                    {
                                        cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                    }

                                }
                            }
                            //int c = 0;
                            grdRow = OtherDeatils[0].Split('|');
                            //foreach (string rowData in grdRow)
                            //{
                            for (int k = 0; k < grdRow.Count(); k++)
                            {
                                if (grdRow[k] != "")
                                {
                                    grdCol = grdRow[k].Split('~');

                                    //string arr = "";
                                    //foreach (string colData in grdCol)
                                    //{

                                    SrNo++;
                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.Rowspan = 3;
                                    table1.AddCell(cell1);
                                    for (int i = 0; i < grdCol.Count(); i++)
                                    {
                                        if (grdCol[i] != "")
                                        {

                                            cell1 = new PdfPCell(new Phrase(Convert.ToString(grdCol[i]), fontH1));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            cell1.Rowspan = 1;
                                            if (i == 0 || i == 1)
                                                cell1.Rowspan = 3;

                                            table1.AddCell(cell1);

                                        }

                                    }
                                    cell1 = new PdfPCell(new Phrase("Specified Composition", fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.Colspan = 7;
                                    table1.AddCell(cell1);
                                    string[] grdCol1 = OtherDeatils[1].Split('~');
                                    for (int i = 2; i <= 8; i++)
                                    {
                                        if (grdCol1[i] != "")
                                        {

                                            cell1 = new PdfPCell(new Phrase(Convert.ToString(grdCol1[i]), fontH1));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            table1.AddCell(cell1);

                                        }

                                    }
                                }

                            }
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            pdfDoc.Add(table1);
                            //  }
                            // }
                        }
                    }
                    # endregion
                    #region 18-34-501
                    if (OT.OTINWD_ReportForTestId_int == 18)
                    {
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                table1 = new PdfPTable(6);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 30f, 20f, 15f, 10f, 30f });

                                string[] headers = { "Sr no.", "Particular Test", "Result", "Unit", "Specified limits \n as per (IS 15477:2004)" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    if (h == 1)
                                    {
                                        cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        cell1.Colspan = 2;
                                        table1.AddCell(cell1);
                                    }
                                    else
                                    {
                                        cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                    }
                                }
                                int c = 0;
                                grdRow = grdDeatils.Split('|');
                                //foreach (string rowData in grdRow)
                                //{
                                for (int k = 0; k < grdRow.Count(); k++)
                                {
                                    if (grdRow[k] != "")
                                    {
                                        grdCol = grdRow[k].Split('~');
                                        if (k != 7 && k != 8 && k != 9)
                                        {
                                            SrNo++;
                                            cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            if (k == 6)
                                            {
                                                cell1.Rowspan = 4;
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                            }
                                            table1.AddCell(cell1);

                                        }

                                        string arr = "";
                                        //foreach (string colData in grdCol)
                                        //{
                                        for (int i = 0; i < grdCol.Count(); i++)
                                        {
                                            if (grdCol[i] != "")
                                            {
                                                if (grdCol[i].Contains("Shear strength"))
                                                {
                                                    arr = grdCol[i].Replace("Shear strength", "");
                                                    if (c == 0)
                                                    {
                                                        cell1 = new PdfPCell(new Phrase("Shear strength", fontH1));
                                                        cell1.Rowspan = 4;
                                                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                                        cell1.Colspan = 1;
                                                        table1.AddCell(cell1);
                                                    }

                                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(arr), fontH1));
                                                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                                    cell1.Colspan = 1;
                                                    table1.AddCell(cell1);
                                                    c++;
                                                }
                                                else
                                                {
                                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(grdCol[i]), fontH1));
                                                    if (i == 1)
                                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                    else
                                                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;

                                                    if (i == 0)
                                                        cell1.Colspan = 2;
                                                    table1.AddCell(cell1);
                                                }
                                            }

                                        }
                                    }

                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table1);
                            }
                        }
                    }
                    # endregion
                    #region 19-37-383
                    else if (OT.OTINWD_ReportForTestId_int == 19)
                    {
                        flagTable = 2;
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("A) Chemical Analysis : ");
                                pdfDoc.Add(paragraph);

                                table1 = new PdfPTable(8);
                                table1.WidthPercentage = 100;
                                table1.SpacingBefore = 1;
                                table1.SetTotalWidth(new float[] { 6f, 12f, 10f, 12f, 10f, 14f, 10f, 10f });

                                string[] headers = { "Sr no.", "Dia Of Coupler(mm)", "Carbon(%)", "Manganese(%)", "Sulphur(%)", "Phosphorous(%)", "Silicon(%)", "Compliance" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SpacingAfter = 5;
                                pdfDoc.Add(table1);
                            }

                            else if (grdCnt == 2 && (GridCheckedStatus == null || GridCheckedStatus[1] == "1"))
                            {
                                tblCount++;

                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("B)Specified Limits For 080A42 (EN-8D)");
                                paragraph.SpacingAfter = 1;
                                pdfDoc.Add(paragraph);

                                table2 = new PdfPTable(8);
                                table1.SpacingBefore = 1;
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 10f, 30f, 17f, 22f, 20f, 24f, 18f, 17f });
                                string[] headers = { "Sr no.", "", "Carbon(%)", "Manganese(%)", "Sulphur(%)", "Phosphorous(%)", "Silicon(%)", "Compliance" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }
                                SrNo = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table2);
                            }

                            else if (grdCnt == 3 && (GridCheckedStatus == null || GridCheckedStatus[2] == "1"))
                            {
                                tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("C)Specified Limits For 080A40 (EN-8)");
                                paragraph.SpacingAfter = 1;
                                pdfDoc.Add(paragraph);

                                table2 = new PdfPTable(7);
                                table1.SpacingBefore = 1;
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 10f, 30f, 20f, 20f, 20f, 20f, 20f });
                                string[] headers = { "Sr no.", "", "Carbon(%)", "Manganese(%)", "Sulphur(%)", "Phosphorous(%)", "Silicon(%)" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }
                                SrNo = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table2);
                            }

                        }
                    }
                    #endregion
                    # region 20-18-126
                    else if (OT.OTINWD_ReportForTestId_int == 20)
                    {
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                table1 = new PdfPTable(5);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 30f, 10f, 10f, 20f });

                                string[] headers = { "Sr no.", "Description", "Unit", "Test Result", "Observation" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table1);
                            }

                        }
                    }
                    # endregion
                    # region 21-16-124
                    else if (OT.OTINWD_ReportForTestId_int == 21)
                    {
                        flagTable = 2;
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add(" Half Cell Potentiometer readings are generally interpreted as follows:");
                                pdfDoc.Add(paragraph);

                                table1 = new PdfPTable(3);
                                table1.WidthPercentage = 100;
                                table1.SpacingBefore = 5;
                                table1.SetTotalWidth(new float[] { 6f, 30f, 20f });

                                string[] headers = { "Sr. No.", "Half Cell potential Readings (mv)", "Conclusion" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SpacingAfter = 5;
                                pdfDoc.Add(table1);
                            }
                            else if (grdCnt == 2 && (GridCheckedStatus == null || GridCheckedStatus[1] == "1"))
                            {
                                tblCount++;

                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("Half cell readings obtained at site:");
                                paragraph.SpacingAfter = 1;
                                pdfDoc.Add(paragraph);

                                table2 = new PdfPTable(6);
                                table2.SpacingBefore = 5;
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 10f, 30f, 20f, 20f, 20f, 20f });
                                string[] headers = { "Sr. No.", "Description / ID Mark", "Average Half cell Potentiometer readings ", "Temp. at the time of testing ", "Temp. Coefficient ", "Corrected average Potentiometer Reading " };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (h == 0 || h == 1)
                                        cell1.Rowspan = 2;
                                    table2.AddCell(cell1);
                                }
                                string[] headers1 = { "(mv)", "(0C)", "(mv)", "(mv)" };
                                for (int h = 0; h < headers1.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers1[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }
                                SrNo = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');

                                        if (grdCol[0] == "1")
                                        {
                                            cell1 = new PdfPCell(new Phrase(Convert.ToString(grdCol[1]), fontH2));
                                            cell1.Colspan = 6;
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            table2.AddCell(cell1);
                                        }
                                        else
                                        {
                                            SrNo++;
                                            cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            table2.AddCell(cell1);

                                            cell1 = new PdfPCell(new Phrase(Convert.ToString(grdCol[1]), fontH1));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            table2.AddCell(cell1);

                                            cell1 = new PdfPCell(new Phrase(Convert.ToString(grdCol[2]), fontH1));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            table2.AddCell(cell1);

                                            cell1 = new PdfPCell(new Phrase(Convert.ToString(grdCol[3]), fontH1));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            table2.AddCell(cell1);

                                            cell1 = new PdfPCell(new Phrase(Convert.ToString(grdCol[4]), fontH1));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            table2.AddCell(cell1);

                                            cell1 = new PdfPCell(new Phrase(Convert.ToString(grdCol[5]), fontH1));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            table2.AddCell(cell1);

                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table2);
                            }
                        }
                    }
                    #endregion
                    # region 22-18-126
                    else if (OT.OTINWD_ReportForTestId_int == 22)
                    {
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        var Count = OtherDeatils.Count();
                        paragraph = new Paragraph();
                        paragraph.Alignment = Element.ALIGN_LEFT;
                        paragraph.Font = fontH2;
                        paragraph.Add("Carbonation readings obtained at site: ");
                        pdfDoc.Add(paragraph);

                        table1 = new PdfPTable(4);
                        table1.SpacingBefore = 5;
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 20f, 15f, 15f });

                        string[] headers = { "Sr. No.", "Description / ID Mark", "Depth Of  Carbonation ", "Concrete Cover " };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            if (h == 0 || h == 1)
                                cell1.Rowspan = 2;
                            table1.AddCell(cell1);
                        }

                        string[] headers1 = { "(mm)", "(mm)" };
                        for (int h = 0; h < headers1.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers1[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }

                        for (int i = 0; i < Count; i++)
                        {
                            foreach (string grdDeatils in OtherDeatils)
                            {
                                grdCnt++;
                                if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                                {
                                    grdRow = grdDeatils.Split('|');
                                    foreach (string rowData in grdRow)
                                    {
                                        if (rowData != "")
                                        {
                                            grdCol = rowData.Split('~');
                                            if (grdCol[0] == "1")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(grdCol[1]), fontH2));
                                                cell1.Colspan = 4;
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                            else
                                            {
                                                SrNo++;
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);

                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(grdCol[1]), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);

                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(grdCol[2]), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);

                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(grdCol[3]), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        table1.SpacingAfter = 3;
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdfDoc.Add(table1);
                    }

                    #endregion
                    #region 23-18-126
                    else if (OT.OTINWD_ReportForTestId_int == 23)
                    {
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                table1 = new PdfPTable(6);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 15f, 12f, 12f, 12f, 12f });

                                string[] headers = { "Sr. No.", "Nominal Dia ", " ID Mark", "C/s Area ", "Elongation", "Breaking  Load " };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (h == 0 || h == 2)
                                        cell1.Rowspan = 2;
                                    table1.AddCell(cell1);
                                }

                                string[] headers1 = { "(mm)", "(mm²)", "(%)", "(N)" };
                                for (int h = 0; h < headers1.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers1[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }

                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table1);
                            }

                        }

                        paragraph = new Paragraph();
                        paragraph.Alignment = Element.ALIGN_LEFT;
                        paragraph.Font = fontH2;
                        paragraph.Add("Compliance :");
                        pdfDoc.Add(paragraph);

                        paragraph = new Paragraph();
                        paragraph.Alignment = Element.ALIGN_LEFT;
                        paragraph.Font = fontH2;
                        paragraph.Add("1) Sample satisfies the criteria as per IS 14268-2017 for the test(s) conducted.");
                        pdfDoc.Add(paragraph);

                    }
                    # endregion
                    #region 24-18-126
                    else if (OT.OTINWD_ReportForTestId_int == 24)
                    {
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {

                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("A) Chemical Analysis:-");
                                pdfDoc.Add(paragraph);

                                table1 = new PdfPTable(6);
                                table1.SpacingBefore = 5;
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 30f, 7f, 10f, 15f, 10f });

                                //string[] headers = { "Sr. No.", "Test Parameters", "Unit", "Results", "Requirement As per IS 12089:1987", "Compliance" };
                                string[] headers = { "Sr. No.", "Test Parameters", "Unit", "Results", "Requirement As per IS 16714-2018", "Compliance" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');

                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {

                                            if (colData != "")
                                            {


                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                // cell1.Colspan = 4;
                                                table1.AddCell(cell1);

                                            }
                                        }

                                    }
                                }



                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table1);
                            }

                        }

                        paragraph = new Paragraph();
                        paragraph.Alignment = Element.ALIGN_LEFT;
                        paragraph.Font = fontH2;
                        paragraph.Add("Compliance :");
                        pdfDoc.Add(paragraph);

                        paragraph = new Paragraph();
                        paragraph.Alignment = Element.ALIGN_LEFT;
                        paragraph.Font = fontH1;
                        //paragraph.Add("1) This sample satisfy the criteria required as per IS  12089-1987.");
                        paragraph.Add("1) This sample satisfy the criteria required as per IS  16714-2018.");
                        pdfDoc.Add(paragraph);

                    }
                    # endregion
                    # region 25-16-124
                    else if (OT.OTINWD_ReportForTestId_int == 25)
                    {
                        flagTable = 2;
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                tblCount++;
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("A) Chemical Analysis : ");
                                pdfDoc.Add(paragraph);

                                table1 = new PdfPTable(4);
                                table1.WidthPercentage = 100;
                                table1.SpacingBefore = 1;
                                table1.SetTotalWidth(new float[] { 6f, 30f, 20f, 20f });

                                string[] headers = { "Sr no.", "Test", "Unit", "Test Result" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SpacingAfter = 5;
                                pdfDoc.Add(table1);
                            }
                            else if (grdCnt == 2 && (GridCheckedStatus == null || GridCheckedStatus[1] == "1"))
                            {
                                tblCount++;

                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("B) Specifications:- IS 3812 (Part-1) : 2003 'Specification For Fuel Ash Sample'");
                                paragraph.SpacingAfter = 1;
                                pdfDoc.Add(paragraph);

                                table2 = new PdfPTable(5);
                                table1.SpacingBefore = 1;
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 10f, 30f, 20f, 20f, 20f });
                                string[] headers = { "Sr no.", "Test", "Unit", "Siliceous Pulverized Fuel Ash", "Calcareous Pulverized Fuel Ash" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }
                                SrNo = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table2);
                            }
                        }
                    }
                    # endregion
                    #region 26-30-684
                    else if (OT.OTINWD_ReportForTestId_int == 26)
                    {
                        flagTable = 6;
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');

                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');

                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++; tblCount++;
                            SrNo = 0;


                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                table1 = new PdfPTable(9);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 7f, 10f, 8f, 15f, 12f, 12f, 10f, 10f, 12f });

                                string[] headers = { "Sr. No.", "ID Mark", "Age", "Size of specimen (mm)", "Load", " Flexural Strength ", "Avg. Flexural Strength" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (h == 1)
                                        cell1.Rowspan = 2;
                                    if (h == 0)
                                        cell1.Rowspan = 2;
                                    else if (h == 3)
                                        cell1.Colspan = 3;
                                    table1.AddCell(cell1);
                                }

                                string[] headers1 = { "(Day)", "Span Length", "Width", "Thickness", "(KN)", "(N/mm²)", "(N/mm²)" };

                                for (int h = 0; h < headers1.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers1[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    //if (h == 6)
                                    // cell1.Rowspan =5;
                                    table1.AddCell(cell1);
                                }


                                grdRow = grdDeatils.Split('|');
                                var count = grdRow.Count();
                                int b = 0;
                                bool col = true;
                                foreach (string rowData in grdRow)
                                {

                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                        int colno = 0;

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {

                                                foreach (string colData1 in grdCol)
                                                {

                                                    if (colno == 0 || colno == 1 || colno == 2 || colno == 3 || colno == 4 || colno == 5 || colno == 6)
                                                    {
                                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(colData1), fontH1));
                                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                        table1.AddCell(cell1);
                                                    }

                                                    if (colno == 7 && col == true)
                                                    {
                                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(colData1), fontH1));
                                                        cell1.Rowspan = grdRow.Count();
                                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                                        table1.AddCell(cell1);
                                                        col = false;

                                                    }

                                                    colno++;
                                                }
                                            }

                                            break;
                                        }
                                    }
                                }

                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SpacingAfter = 8;
                                //table1.SpacingBefore = 1;
                                pdfDoc.Add(table1);
                            }

                        }
                    }
                    #endregion
                    #region 27-30-684
                    else if (OT.OTINWD_ReportForTestId_int == 27)
                    {
                        flagTable = 6;
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');

                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');

                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++; tblCount++;
                            SrNo = 0;


                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {

                                table1 = new PdfPTable(8);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 10f, 10f, 10f, 10f, 10f, 12f, 15f, 12f });

                                string[] headers = { "Sr. No.", "Sample ID", "Dimensions of Specimen", "Depth of Penetration ", " Avg. Depth of Penetration  ", "At Pressure for 72 ± 2 Hrs" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;

                                    if (h == 0)
                                        cell1.Rowspan = 3;
                                    if (h == 1)
                                        cell1.Rowspan = 3;
                                    if (h == 2)
                                        cell1.Colspan = 3;
                                    if (h == 3)
                                        cell1.Rowspan = 2;
                                    if (h == 4)
                                        cell1.Rowspan = 2;
                                    if (h == 5)
                                        cell1.Rowspan = 2;

                                    table1.AddCell(cell1);
                                }

                                string[] headers1 = { "Length ", "Breadth", "Height" };

                                for (int h = 0; h < headers1.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers1[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    //if (h == 6)
                                    // cell1.Rowspan =5;
                                    table1.AddCell(cell1);
                                }
                                string[] headers2 = { "(mm)", "(mm)", "(mm)", "(mm)", "(mm)", " (Kg/cm²)" };

                                for (int h = 0; h < headers2.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers2[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    //if (h == 6)
                                    // cell1.Rowspan =5;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                var count = grdRow.Count();
                                int b = 0;
                                bool col = true;
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                        //int colno = 1;

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                foreach (string colData1 in grdCol)
                                                {
                                                    ////   if (colData1 != "")
                                                    //{
                                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(colData1), fontH1));
                                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                    table1.AddCell(cell1);

                                                    //    //colno++;
                                                    //}

                                                    //if (colno == 6 && col == true)
                                                    //{
                                                    //    cell1 = new PdfPCell(new Phrase(Convert.ToString(colData1), fontH1));
                                                    //    cell1.Rowspan = grdRow.Count();
                                                    //    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                    //    cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                                    //    table1.AddCell(cell1);
                                                    //    col = false;
                                                    //}
                                                    //else if (colno != 6)
                                                    //{
                                                    //    cell1 = new PdfPCell(new Phrase(Convert.ToString(colData1), fontH1));
                                                    //    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                    //    table1.AddCell(cell1);
                                                    //}

                                                    //colno++;
                                                }

                                            }
                                            break;

                                        }

                                    }

                                }

                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SpacingAfter = 1;
                                table1.SpacingBefore = 1;
                                pdfDoc.Add(table1);
                            }

                        }
                    }
                    # endregion
                    #region 28-18-126
                    else if (OT.OTINWD_ReportForTestId_int == 28)
                    {
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                table1 = new PdfPTable(4);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 30f, 10f, 30f });

                                string[] headers = { "Sr. No.", "Test Parameters", "Result (%)", "Specified Limits as per IS 15388-2003" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table1);
                            }

                        }

                    }
                    # endregion
                    #region 29-18-126
                    else if (OT.OTINWD_ReportForTestId_int == 29)
                    {
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("Sieve Analysis");
                                paragraph.SpacingAfter = 1;
                                pdfDoc.Add(paragraph);

                                table1 = new PdfPTable(6);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 12f, 12f, 12f, 12f, 12f });

                                string[] headers = { "Sr. No.", "Sieve Sizes", "Wt. Retained ", "Wt. Retain ", "Cumu. Wt. Retain ", "Cumu. Passing " };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (h == 0 || h == 1)
                                        cell1.Rowspan = 2;
                                    table1.AddCell(cell1);
                                }
                                string[] headers1 = { "(g)", "(%)", "(%)", "(%)" };
                                for (int h = 0; h < headers1.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers1[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                foreach (string colData1 in grdCol)
                                                {
                                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(colData1), fontH1));
                                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                    table1.AddCell(cell1);
                                                }
                                            }
                                            break;
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table1);
                            }

                        }

                    }
                    # endregion
                    #region 30-30-684
                    else if (OT.OTINWD_ReportForTestId_int == 30)
                    {
                        flagTable = 6;
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');

                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');

                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++; tblCount++;
                            SrNo = 0;


                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {

                                table1 = new PdfPTable(8);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 10f, 10f, 10f, 12f, 15f, 12f, 15f, 10f });

                                string[] headers = { "Sr. No.", "ID Mark", "Size of specimen (cm)", "Weight(kg)", " Density (kg/m3)", "Avg. Density (kg/m3)" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (h == 1)
                                        cell1.Rowspan = 2;
                                    if (h == 0)
                                        cell1.Rowspan = 2;
                                    else if (h == 2)
                                        cell1.Colspan = 3;
                                    if (h == 3)
                                        cell1.Rowspan = 2;
                                    if (h == 4)
                                        cell1.Rowspan = 2;
                                    if (h == 5)
                                        cell1.Rowspan = 2;

                                    table1.AddCell(cell1);
                                }

                                string[] headers1 = { "Length", "Breadth", "Height" };

                                for (int h = 0; h < headers1.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers1[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    //if (h == 6)
                                    // cell1.Rowspan =5;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                var count = grdRow.Count();
                                int b = 0;
                                bool col = true;


                                foreach (string rowData in grdRow)
                                {

                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                        int colno = 0;

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                foreach (string colData1 in grdCol)
                                                {

                                                    if (colno == 0 || colno == 1 || colno == 2 || colno == 3 || colno == 4 || colno == 5)
                                                    {
                                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(colData1), fontH1));
                                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                        table1.AddCell(cell1);
                                                    }

                                                    if (colno == 6 && col == true)
                                                    {
                                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(colData1), fontH1));
                                                        cell1.Rowspan = grdRow.Count();
                                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                                        table1.AddCell(cell1);
                                                        col = false;

                                                    }

                                                    colno++;
                                                }
                                            }

                                            break;
                                        }
                                    }
                                }

                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SpacingAfter = 8;
                                //    table1.SpacingBefore = 1;
                                pdfDoc.Add(table1);
                            }

                        }
                    }
                    #endregion
                    #region 31-18-126
                    else if (OT.OTINWD_ReportForTestId_int == 31)
                    {
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                table1 = new PdfPTable(6);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 30f, 10f, 10f, 10f, 10f });

                                string[] headers = { "Sr no.", "ID Mark", "Wet Weight (Kg)", "Dry Weight (Kg)", "Water Absorption (%)", "Avg.Water Absorption(%) " };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                var count = grdRow.Count();
                                int b = 0;
                                bool col = true;


                                foreach (string rowData in grdRow)
                                {

                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                        int colno = 0;

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                foreach (string colData1 in grdCol)
                                                {

                                                    if (colno == 0 || colno == 1 || colno == 2 || colno == 3)
                                                    {
                                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(colData1), fontH1));
                                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                        table1.AddCell(cell1);
                                                    }

                                                    if (colno == 4 && col == true)
                                                    {
                                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(colData1), fontH1));
                                                        cell1.Rowspan = grdRow.Count();
                                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                                        table1.AddCell(cell1);
                                                        col = false;

                                                    }

                                                    colno++;
                                                }
                                            }

                                            break;
                                        }
                                    }
                                }

                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SpacingAfter = 8;
                                //    table1.SpacingBefore = 1;
                                pdfDoc.Add(table1);
                            }

                        }
                    }
                    # endregion
                    #region 32-30-684
                    else if (OT.OTINWD_ReportForTestId_int == 32)
                    {
                        flagTable = 6;
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');

                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');

                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++; tblCount++;
                            SrNo = 0;


                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {

                                table1 = new PdfPTable(9);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 7f, 10f, 7f, 7f, 7f, 12f, 10f, 12f, 13f });

                                string[] headers = { "Sr. No.", "ID Mark", "Size of specimen  (mm)", "Cross sectional area (mm²)", "Load (kN)", "Compressive strength (N/mm²)", "Avg. Compressive strength (N/mm²)" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (h == 1)
                                        cell1.Rowspan = 2;
                                    if (h == 0)
                                        cell1.Rowspan = 2;
                                    else if (h == 2)
                                        cell1.Colspan = 3;
                                    if (h == 3)
                                        cell1.Rowspan = 2;
                                    if (h == 4)
                                        cell1.Rowspan = 2;
                                    if (h == 5)
                                        cell1.Rowspan = 2;
                                    if (h == 6)
                                        cell1.Rowspan = 2;

                                    table1.AddCell(cell1);
                                }

                                string[] headers1 = { "Length", "Breadth", "Height" };

                                for (int h = 0; h < headers1.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers1[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    //if (h == 6)
                                    // cell1.Rowspan =5;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                var count = grdRow.Count();
                                int b = 0;
                                bool col = true;


                                foreach (string rowData in grdRow)
                                {

                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                        int colno = 0;

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                foreach (string colData1 in grdCol)
                                                {

                                                    if (colno == 0 || colno == 1 || colno == 2 || colno == 3 || colno == 4 || colno == 5 || colno == 6)
                                                    {
                                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(colData1), fontH1));
                                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                        table1.AddCell(cell1);
                                                    }

                                                    if (colno == 7 && col == true)
                                                    {
                                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(colData1), fontH1));
                                                        cell1.Rowspan = grdRow.Count();
                                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                                        table1.AddCell(cell1);
                                                        col = false;

                                                    }

                                                    colno++;
                                                }
                                            }

                                            break;
                                        }
                                    }
                                }

                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SpacingAfter = 8;
                                //    table1.SpacingBefore = 1;
                                pdfDoc.Add(table1);
                            }

                        }
                    }
                    #endregion
                    # region 34
                    else if (OT.OTINWD_ReportForTestId_int == 34)
                    {
                        string strAvg = "";
                        flagTable = 1;
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                tblCount++;
                                table1 = new PdfPTable(7);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 30f, 10f, 10f, 10f, 2f, 25f, 10f });
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        if (rowData.Contains("The Average Modulus of Elasticity of the sample") == true)
                                        {
                                            strAvg = rowData;
                                        }
                                        else
                                        {
                                            grdCol = rowData.Split('~');
                                            int colNo = 1;
                                            foreach (string colData in grdCol)
                                            {
                                                if (colData != "" || colNo == 5)
                                                {
                                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                                    table1.AddCell(cell1);
                                                }
                                                colNo++;
                                            }
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SpacingBefore = 10;
                                pdfDoc.Add(table1);
                            }
                            else if (grdCnt == 2 && (GridCheckedStatus == null || GridCheckedStatus[1] == "1"))
                            {
                                tblCount++;
                                //paragraph = new Paragraph();
                                //paragraph.Alignment = Element.ALIGN_LEFT;
                                //paragraph.Font = fontH2;
                                //paragraph.Add("Observation and readings");
                                //pdfDoc.Add(paragraph);

                                table2 = new PdfPTable(9);
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 10f, 10f, 10f, 10f, 10f, 10f, 10f, 10f, 10f });
                                string[] headers = { "Load Applied", "Area", "Stress", "Loading Cycle 1", "Loading Cycle 2", "% Diffrence", "Average MOE" };
                                string[] headers1 = { "(KN)", "(mm²)", "(N/mm²)", "Dial Read", "strain", "Dial Read", "strain", "(Gpa)" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (h == 3 || h == 4)
                                        cell1.Colspan = 2;
                                    else if (h == 5)
                                        cell1.Rowspan = 2;
                                    table2.AddCell(cell1);
                                }
                                for (int h = 0; h < headers1.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers1[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }

                                cell1 = new PdfPCell(new Phrase("Cylinder I", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Colspan = 9;
                                table2.AddCell(cell1);

                                int i = 0;
                                int lastRow = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        int coln = 0;
                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "" && colData != " ")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                if (i == 0 && coln == 8)
                                                {
                                                    cell1.Rowspan = grdRow.Count();
                                                    i++;
                                                }
                                                if (colData == "Modulus of Elasticity")
                                                {
                                                    cell1.Colspan = 3;
                                                    lastRow = 1;
                                                }
                                                else if (lastRow == 1)
                                                {
                                                    cell1.Colspan = 2;
                                                    lastRow++;
                                                }
                                                else if (lastRow == 2)
                                                {
                                                    cell1.Colspan = 2;
                                                    lastRow++;
                                                    table2.AddCell(cell1);
                                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(" "), fontH1));
                                                }
                                                table2.AddCell(cell1);
                                                coln++;
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                table2.SpacingBefore = 20;
                                pdfDoc.Add(table2);

                                pdfDoc.NewPage();
                                if (Action.Contains("Print") == true)
                                    LogoToPdf(pdfDoc, nablStatus);
                                else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                                    LogoToPdfEmail(pdfDoc, nablStatus);
                                else if (Action.Contains("Display") == true)
                                    LogoToPdfOld_270121(pdfDoc, nablStatus);
                            }
                            else if (grdCnt == 3 && (GridCheckedStatus == null || GridCheckedStatus[2] == "1"))
                            {
                                tblCount++;
                                table2 = new PdfPTable(9);
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 10f, 10f, 10f, 10f, 10f, 10f, 10f, 10f, 10f });
                                string[] headers = { "Load Applied", "Area", "Stress", "Loading Cycle 1", "Loading Cycle 2", "% Diffrence", "Average MOE" };
                                string[] headers1 = { "(KN)", "(mm²)", "(N/mm²)", "Dial Read", "strain", "Dial Read", "strain", "(Gpa)" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (h == 3 || h == 4)
                                        cell1.Colspan = 2;
                                    else if (h == 5)
                                        cell1.Rowspan = 2;
                                    table2.AddCell(cell1);
                                }
                                for (int h = 0; h < headers1.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers1[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }

                                cell1 = new PdfPCell(new Phrase("Cylinder II", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Colspan = 9;
                                table2.AddCell(cell1);

                                int i = 0;
                                int lastRow = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        int coln = 0;
                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "" && colData != " ")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                if (i == 0 && coln == 8)
                                                {
                                                    cell1.Rowspan = grdRow.Count();
                                                    i++;
                                                }
                                                if (colData == "Modulus of Elasticity")
                                                {
                                                    cell1.Colspan = 3;
                                                    lastRow = 1;
                                                }
                                                else if (lastRow == 1)
                                                {
                                                    cell1.Colspan = 2;
                                                    lastRow++;
                                                }
                                                else if (lastRow == 2)
                                                {
                                                    cell1.Colspan = 2;
                                                    lastRow++;
                                                    table2.AddCell(cell1);
                                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(" "), fontH1));
                                                }
                                                table2.AddCell(cell1);
                                                coln++;
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                table2.SpacingBefore = 20;
                                pdfDoc.Add(table2);

                            }
                            else if (grdCnt == 4 && (GridCheckedStatus == null || GridCheckedStatus[3] == "1"))
                            {
                                tblCount++;
                                table2 = new PdfPTable(9);
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 10f, 10f, 10f, 10f, 10f, 10f, 10f, 10f, 10f });
                                string[] headers = { "Load Applied", "Area", "Stress", "Loading Cycle 1", "Loading Cycle 2", "% Diffrence", "Average MOE" };
                                string[] headers1 = { "(KN)", "(mm²)", "(N/mm²)", "Dial Read", "strain", "Dial Read", "strain", "(Gpa)" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (h == 3 || h == 4)
                                        cell1.Colspan = 2;
                                    else if (h == 5)
                                        cell1.Rowspan = 2;
                                    table2.AddCell(cell1);
                                }
                                for (int h = 0; h < headers1.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers1[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }

                                cell1 = new PdfPCell(new Phrase("Cylinder III", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Colspan = 9;
                                table2.AddCell(cell1);

                                int i = 0;
                                int lastRow = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        int coln = 0;
                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "" && colData != " ")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                if (i == 0 && coln == 8)
                                                {
                                                    cell1.Rowspan = grdRow.Count();
                                                    i++;
                                                }
                                                if (colData == "Modulus of Elasticity")
                                                {
                                                    cell1.Colspan = 3;
                                                    lastRow = 1;
                                                }
                                                else if (lastRow == 1)
                                                {
                                                    cell1.Colspan = 2;
                                                    lastRow++;
                                                }
                                                else if (lastRow == 2)
                                                {
                                                    cell1.Colspan = 2;
                                                    lastRow++;
                                                    table2.AddCell(cell1);
                                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(" "), fontH1));
                                                }
                                                table2.AddCell(cell1);
                                                coln++;
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                table2.SpacingBefore = 20;
                                pdfDoc.Add(table2);

                            }

                        }
                        if (strAvg != "")
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_LEFT;
                            paragraph.Font = fontTitle;
                            paragraph.Add(strAvg);
                            paragraph.SpacingAfter = 5;
                            paragraph.SpacingBefore = 5;
                            pdfDoc.Add(paragraph);
                        }
                    }
                    # endregion
                    # region 35
                    if (OT.OTINWD_ReportForTestId_int == 35)
                    {
                        flagTable = 1;
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                tblCount++;
                                table1 = new PdfPTable(6);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 20f, 15f, 25f, 10f, 10f });

                                string[] headers = { "Sr no.", "Sample ID & Dimension", "Age of Specimen", "Maximum Water Penetration Depth", "Average", "Compliance" };
                                string[] headers1 = { "(Days)", "(mm)" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (h == 0 || h == 1 || h == 4 || h == 5)
                                        cell1.Rowspan = 2;
                                    table1.AddCell(cell1);
                                }
                                for (int h = 0; h < headers1.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers1[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        //if (SrNo == grdRow.Length - 1)
                                        //    cell1 = new PdfPCell(new Phrase("", fontH1));
                                        //else
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                        int colNo = 0;
                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "" && colData != " ")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                cell1.VerticalAlignment = Element.ALIGN_CENTER;
                                                if (SrNo == 1 && (colNo == 3 || colNo == 4))
                                                    cell1.Rowspan = grdRow.Count();
                                                table1.AddCell(cell1);
                                            }
                                            colNo++;
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                //table1.SpacingBefore = 15;
                                pdfDoc.Add(table1);
                            }
                        }
                    }
                    # endregion
                    # region 36
                    if (OT.OTINWD_ReportForTestId_int == 36)
                    {
                        flagTable = 1;
                        if (Convert.ToString(OT.OTTEST_GridCheckedStatus_var) != null)
                            GridCheckedStatus = Convert.ToString(OT.OTTEST_GridCheckedStatus_var).Split('|');
                        OtherDeatils = OT.OTDETAIL_DetailTest_var.Split('$');
                        foreach (string grdDeatils in OtherDeatils)
                        {
                            grdCnt++;
                            if (grdCnt == 1 && (GridCheckedStatus == null || GridCheckedStatus[0] == "1"))
                            {
                                tblCount++;
                                table1 = new PdfPTable(6);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 6f, 15f, 20f, 20f, 20f, 20f });

                                string[] headers = { "Sr. No.", "ID", "Charge Passed", "Corrected Charge Passed", "Average Charge Passed", "Chloride Ion Penetrability" };
                                string[] headers1 = { "(Coulombs)", "(Coulombs)", "(Coulombs)" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (h == 0 || h == 1 || h == 5)
                                        cell1.Rowspan = 2;
                                    table1.AddCell(cell1);
                                }
                                for (int h = 0; h < headers1.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers1[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }

                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                        int colNo = 0;
                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "" && colData != " ")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                cell1.VerticalAlignment = Element.ALIGN_CENTER;
                                                if (SrNo == 1 && (colNo == 3 || colNo == 4))
                                                    cell1.Rowspan = grdRow.Count();
                                                table1.AddCell(cell1);
                                            }
                                            colNo++;
                                        }
                                    }
                                }
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SpacingBefore = 10;
                                table1.SpacingAfter = 10;
                                pdfDoc.Add(table1);
                            }
                            else if (grdCnt == 2 && (GridCheckedStatus == null || GridCheckedStatus[1] == "1"))
                            {
                                tblCount++;

                                paragraph = new Paragraph();
                                paragraph.Alignment = Element.ALIGN_LEFT;
                                paragraph.Font = fontH2;
                                paragraph.Add("Requirements - Chloride Ion Penetrability based on charge passed as per ASTM - C 1202-19");
                                paragraph.SpacingAfter = 1;
                                pdfDoc.Add(paragraph);

                                table2 = new PdfPTable(3);
                                table2.SpacingBefore = 10;
                                table2.WidthPercentage = 100;
                                table2.SetTotalWidth(new float[] { 10f, 30f, 30f });
                                string[] headers = { "Sr. No.", "Charge Passed in (Coulombs)", "Chloride Ion Penetration" };
                                for (int h = 0; h < headers.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table2.AddCell(cell1);
                                }
                                SrNo = 0;
                                grdRow = grdDeatils.Split('|');
                                foreach (string rowData in grdRow)
                                {
                                    if (rowData != "")
                                    {
                                        grdCol = rowData.Split('~');
                                        SrNo++;
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table2.AddCell(cell1);

                                        foreach (string colData in grdCol)
                                        {
                                            if (colData != "")
                                            {
                                                cell1 = new PdfPCell(new Phrase(Convert.ToString(colData), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table2.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                                table2.HorizontalAlignment = Element.ALIGN_LEFT;
                                pdfDoc.Add(table2);
                            }
                        }
                    }
                    # endregion
                    j++;

                }
                #endregion

                if ((flagTable == 1 && tblCount == 3) || (flagTable == 6 && tblCount == 3) || (flagTable == 4 && tblCount == 3) || (flagTable == 16 && tblCount == 7))
                {
                    pdfDoc.NewPage();
                    if (Action.Contains("Print") == true)
                        LogoToPdf(pdfDoc, nablStatus);
                    else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                        LogoToPdfEmail(pdfDoc, nablStatus);
                    else if (Action.Contains("Display") == true)
                        LogoToPdfOld_270121(pdfDoc, nablStatus);

                }
                //table1.SpacingBefore=2;
                #region iscode/Remark             

                table1 = new PdfPTable(2);
                table1.SpacingAfter = 1;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;

                serial_no = 0;
                var re = dc.AllRemark_View("", ReferenceNo, 0, "OT").ToList();
                if (re.Count > 0)
                {
                    foreach (var r in re)
                    {
                        if (r.OTDetail_RemarkType_var == "Reference")
                        {
                            var remark = dc.AllRemark_View("", "", Convert.ToInt32(r.OTDetail_RemarkId_int), "OT");
                            foreach (var remk in remark)
                            {
                                if (serial_no == 0)
                                {
                                    //pdfDoc.Add(new Paragraph("Remarks :", fontH2));
                                    cell2 = new PdfPCell(new Phrase("References :", fontH2));
                                    cell2.Colspan = 2;
                                    cell2.Border = PdfPCell.NO_BORDER;
                                    table1.AddCell(cell2);
                                }
                                serial_no++;
                                //pdfDoc.Add(new Paragraph(serial_no + ")" + remk.OT_Remark_var.ToString(), fontH1));
                                cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                                cell2 = new PdfPCell(new Phrase(remk.OT_Remark_var, fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                serial_no = 0;
                if (re.Count > 0)
                {
                    foreach (var r in re)
                    {
                        if (r.OTDetail_RemarkType_var == "Remark")
                        {
                            var remark = dc.AllRemark_View("", "", Convert.ToInt32(r.OTDetail_RemarkId_int), "OT");
                            foreach (var remk in remark)
                            {
                                if (serial_no == 0)
                                {
                                    cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                                    cell2.Colspan = 2;
                                    cell2.Border = PdfPCell.NO_BORDER;
                                    table1.AddCell(cell2);
                                }
                                serial_no++;
                                cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                                cell2 = new PdfPCell(new Phrase(remk.OT_Remark_var, fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                if (supersedeNote != "")
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);
                #endregion

                if ((flagTable == 1 && tblCount == 2) || (flagTable == 2 && tblCount == 2) || (flagTable == 5 && tblCount == 2) || (flagTable == 6 && tblCount == 3) || (flagTable == 16 && tblCount == 6))
                {
                    pdfDoc.NewPage();
                    if (Action.Contains("Print") == true)
                        LogoToPdf(pdfDoc, nablStatus);
                    else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                        LogoToPdfEmail(pdfDoc, nablStatus);
                    else if (Action.Contains("Display") == true)
                        //LogoToPdfOld(pdfDoc, Action);
                        LogoToPdfOld_270121(pdfDoc, nablStatus);
                }

                #region notes
                table1 = new PdfPTable(2);
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                // cell2.FixedHeight = 15f;
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);

                //var oInwd1 = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, false, 0, "", 0, 0, 0, 0, 0, "", 0, "OT").ToList();
                //foreach (var OT in oInwd1)
                //{
                //if (OT.OTINWD_ReportForTestId_int == 21) //25-133)
                //{
                //    cell2 = new PdfPCell(new Phrase("1) The average reading is greater than -200 mV, which is indicative of having less than  5 % chance of start of  corrosion activity in the RCC Members.", fontH3));
                //    cell2.Colspan = 2;
                //    cell2.Border = PdfPCell.NO_BORDER;
                //    table1.AddCell(cell2);

                //    cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                //    cell2.Border = PdfPCell.NO_BORDER;
                //    table1.AddCell(cell2);
                //    cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                //    cell2.Border = PdfPCell.NO_BORDER;
                //    table1.AddCell(cell2);

                //    cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                //    cell2.Border = PdfPCell.NO_BORDER;
                //    table1.AddCell(cell2);
                //    cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                //    cell2.Border = PdfPCell.NO_BORDER;
                //    table1.AddCell(cell2);

                //    cell2 = new PdfPCell(new Phrase("4) ", fontH3));
                //    cell2.Border = PdfPCell.NO_BORDER;
                //    table1.AddCell(cell2);
                //    cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                //    cell2.Border = PdfPCell.NO_BORDER;
                //    table1.AddCell(cell2);
                //}
                //else
                //{

                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);

                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);

                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                //}
                //}
                table1.SpacingAfter = 2;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);
                #endregion

                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);

                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL"  && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 1;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("Other Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
                    foreach (var r in RecNo)
                    {
                        if (r.OTINWD_ApprovedBy_tint != null && r.OTINWD_ApprovedBy_tint.ToString() != "" && r.OTINWD_ApprovedBy_tint > 0)
                        {
                            var U = dc.User_View(r.OTINWD_ApprovedBy_tint, -1, "", "", "");
                            foreach (var r1 in U)
                            {

                                pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                                if (r1.USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Email")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }
                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingAfter = 2;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (r.OTINWD_CheckedBy_tint != null && r.OTINWD_CheckedBy_tint.ToString() != "" && r.OTINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(r.OTINWD_CheckedBy_tint, -1, "", "", "");
                            foreach (var loginusr in lgin)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by : " + loginusr.USER_Name_var.ToString(), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact (020)24348027.");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
            }

        }
        public void OT_PDFReport_13022017(string ReferenceNo, string Action)
        {
            string filename = "";
            // Get the file from the database
            var q = dc.OtherReport_View(ReferenceNo);
            foreach (var quote in q)
            {
                filename = (string)quote.OTRPT_FileName_var;
                string contentType = (string)quote.OTRPT_FileContentType_var;
                //Byte[] data = (Byte[])quote.OTRPT_FileData_varb.ToArray();
                //if (Action == "Email" || Action.Contains("Email") == true)
                //{
                //    FileStream fs = new FileStream(@foldername + "/" + filename, FileMode.Create);
                //    fs.Write(data, 0, data.Length);
                //    fs.Close();
                //}
                //else
                //{
                //    // Send the file to the browser
                //    System.Web.HttpContext.Current.Response.AddHeader("Content-type", contentType);
                //    System.Web.HttpContext.Current.Response.AddHeader("Content-Disposition", "attachment; filename=" + filename);
                //    System.Web.HttpContext.Current.Response.BinaryWrite(data);
                //    System.Web.HttpContext.Current.Response.Flush();
                //    System.Web.HttpContext.Current.Response.End();
                //}

                string filePath = "D:/OtherReportFiles/";
                if (cnStr.ToLower().Contains("mumbai") == true)
                    filePath += "Mumbai/";
                else if (cnStr.ToLower().Contains("nashik") == true)
                    filePath += "Nashik/";
                else if (cnStr.ToLower().Contains("metro") == true)
                    filePath += "Metro/";
                else
                    filePath += "Pune/";

                filePath += filename;
                if (File.Exists(@filePath))
                {
                    if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                    {
                        File.Copy(filePath, @foldername + "/" + filename);
                    }
                    else
                    {
                        System.Web.HttpContext.Current.Response.Clear();
                        //System.Web.HttpContext.Current.Response.ContentType = "application/octet-stream";
                        System.Web.HttpContext.Current.Response.AddHeader("Content-type", contentType);
                        System.Web.HttpContext.Current.Response.AppendHeader("content-disposition", "attachment; filename=" + filePath);
                        System.Web.HttpContext.Current.Response.WriteFile(filePath);
                        System.Web.HttpContext.Current.Response.Flush();
                        System.Web.HttpContext.Current.Response.End();
                    }
                }
            }
            if (filename == "")
            {
                #region for RefNo
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("OT", ReferenceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 45f, marginTop, 10f);
                var fileName = "OT_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Other";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "OT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;

                bool RemotelyAppv = false;
                string Witnessby = string.Empty;


                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.UNDEFINED);
                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                float[] widths = new float[] { 18f, 1f, 52f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);

                #region data
                int TestId = 0;

                int Approveby = 0;
                string supersedeNote = "";
                var OtherInwad = dc.ReportStatus_View("Other Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var Odetails in OtherInwad)
                {
                    if (Odetails.OTINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(Odetails.OTINWD_ApprovedBy_tint);
                    }


                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //if (Odetails.OTINWD_Status_tint == 4 || Odetails.OTINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    pdfDoc.Add(paragraph);

                    #region Header
                    var otInwd = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, false, 0, "", 0, 0, 0, 0, 0, "", 0, "OT").ToList();
                    var count = otInwd.Count();
                    for (int i = 0; i < count; i++)
                    {
                        if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 109)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Autoclaved aerated cellular concrete products compressive");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 110)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Autoclaved aerated cellular concrete products Density");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 111)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Chemical Admixture");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 112)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Concrete Beam Flexural Strength");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 113)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Chemical Testing of slag");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 114)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Coarse Aggregate");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 115)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Concrete Chloride");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 116)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Chemical resistance of ceramic Tiles");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 117)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Compressive Strength of Joining Mortar T9 Block Fix");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 118)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Door Shutter");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 119)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Deletarious Material");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 120)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Door Frame Wood");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 121)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Fuel Ash");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 122)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Fine Aggregate");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 123)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Gypsum");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 124)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Gypsum Chemical");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 125)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Grout Cube Compressive Strength");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 126)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Ground granulated blast furnance slag + cement");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 127)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Natural Building Stone");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 128)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("P.O.P Cube Compressive Strength");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);


                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 129)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Plywood");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 130)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Powder Coating Thickness");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 131)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Reinforcement Splice Bar");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 132)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Structural Steel Tensile");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 133)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Steel Chemical");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 134)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Silica Fume");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 135)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Wood Sample");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);


                        }
                        else if (Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 139 || Convert.ToInt32(otInwd[i].OTINWD_ReportForTestId_int) == 0)
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Other New Test");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }
                        else
                        {
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_CENTER;
                            paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                            paragraph.Add("Other Testing");
                            if (otInwd[i].OTINWD_Status_tint < 6 || Action != "Print")
                            {
                                paragraph.SpacingAfter = 5;
                            }
                            pdfDoc.Add(paragraph);

                        }

                    }
                    #endregion

                    SiteRouteId = Convert.ToInt32(Odetails.SITE_Route_Id);

                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    if (Odetails.OTINWD_WitnessBy_var != null && Odetails.OTINWD_WitnessBy_var != string.Empty)
                    {
                        Witnessby = Odetails.OTINWD_WitnessBy_var;
                    }
                    if (Odetails.OTINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }

                    //if (Odetails.OTINWD_WitnessBy_var != null && Odetails.OTINWD_WitnessBy_var != string.Empty)
                    //{
                    //    Witnessby = Odetails.OTINWD_WitnessBy_var;
                    //}
                    //if (Odetails.OTINWD_Status_tint >= 6 && Action == "Print")
                    //{
                    //    var blackListText = FontFactory.GetFont("italic", 8);
                    //    paragraph = new Paragraph();
                    //    paragraph.Alignment = Element.ALIGN_CENTER;
                    //    paragraph.Font = blackListText;
                    //    paragraph.Add("DUPLICATE COPY");
                    //    paragraph.SpacingAfter =2;
                    //    pdfDoc.Add(paragraph);
                    //}

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Odetails.CL_Name_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Odetails.CL_OfficeAddress_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("OT", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Odetails.SITE_Name_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string strRecNo = Odetails.OTINWD_SetOfRecord_var;
                    if (Odetails.OTINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (Odetails.OTINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (Odetails.OTINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(Odetails.OTINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + Odetails.OTINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Odetails.OTINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (Odetails.SITE_MonthlyBillingStatus_bit == true && Odetails.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (Odetails.OTINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(Odetails.OTINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(Odetails.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Odetails.OTINWD_SupplierName_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (Odetails.INWD_ReceivedDate_dt != null)
                    {
                        DateTime rDT = Convert.ToDateTime(Odetails.INWD_ReceivedDate_dt);
                        string receiptDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(receiptDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 3;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (Odetails.OTINWD_TestedDate_dt != null)
                    {
                        DateTime rDT = Convert.ToDateTime(Odetails.OTINWD_TestedDate_dt);
                        string receiptDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(receiptDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("-" + System.DateTime.Now.ToString("dd/MM/yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 3;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    //if (Odetails.OTINWD_IssueDate_dt != null)
                    //{
                    //    DateTime iDT = Convert.ToDateTime(Odetails.OTINWD_IssueDate_dt);
                    //    string issuedt = iDT.ToString("dd-MMM-yyyy");
                    //    Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    //}
                    if (Odetails.OTINWD_ApprovedDate_dt != null)
                    {
                        DateTime iDT = Convert.ToDateTime(Odetails.OTINWD_ApprovedDate_dt);
                        string issuedt = iDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    //ULR
                    if (Convert.ToString(Odetails.OTINWD_ULRNo_var) != "" && Convert.ToString(Odetails.OTINWD_ULRNo_var) != null)
                    {
                        if (Convert.ToInt32(Odetails.OTINWD_ReportForTestId_int) == 14)
                            Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Chemical" + "    " + "Group : " + "Admixture", fontH1));
                        else
                            Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No - " + Convert.ToString(Odetails.OTINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //

                    //MaindataTable.SpacingAfter = 2;
                    pdfDoc.Add(MaindataTable);
                    TestId = Convert.ToInt32(Odetails.OTINWD_ReportForTestId_int);

                    if (Odetails.OTINWD_RemoteApproved == true && Odetails.OTINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }

                }
                #endregion

                //pdfDoc.Add(Chunk.NEWLINE);
                //table1.SpacingBefore = 10;
                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 12;
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));
                //table1.SpacingBefore = 5;
                //pdfDoc.Add(new Paragraph(" ", fontH2));
                PdfPCell cell1;

                int j = 0;
                int SrNo = 0;
                string OtherDeatils = "";
                DateTime ApproveDt = new DateTime();
                var oInwd = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, false, 0, "", 0, 0, 0, 0, 0, "", 0, "OT").ToList();
                //var OTcount = oInwd.Count();
                foreach (var OT in oInwd)
                {
                    if (Convert.ToString(OT.OTINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(OT.OTINWD_ApprovedDate_dt);
                    }
                    if (OT.OTINWD_ReportForTestId_int == 127)
                    {
                        table1 = new PdfPTable(4);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 30f, 20f, 20f });

                        string[] headers = { "Sr no.", "Name Of The Test", "Unit", "Result" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                    string[] Line1;
                    OtherDeatils = OT.OTDETAIL_DetailTest_var.ToString();
                    Line1 = OtherDeatils.Split('$');
                    if (OT.OTINWD_ReportForTestId_int == 127)
                    {
                        string[] testdetails = OtherDeatils.Split('`');
                        foreach (string test in testdetails)
                        {
                            Line1 = test.Split('$');
                        }
                    }

                    if (OT.OTINWD_ReportForTestId_int == 127)
                    {
                        string[] testdetails = OtherDeatils.Split('`');
                        foreach (string test in testdetails)
                        {
                            string[] Testrow = test.Split('$');
                            foreach (string txtrow in Testrow)
                            {
                                if (txtrow != "")
                                {
                                    SrNo++;
                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);

                                    string[] TestDispaly = txtrow.Split('~');
                                    foreach (string test1 in TestDispaly)
                                    {
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(test1), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                    }
                                }
                            }
                            pdfDoc.Add(table1);
                            table1.SpacingBefore = 10;
                            break;
                        }
                    }
                    if (OT.OTINWD_ReportForTestId_int == 109)
                    {
                        table1 = new PdfPTable(9);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 20f, 10f, 10f, 10f, 20f, 10f, 20f, 20f });
                        string[] headers = { "Sr no.", "ID Mark", "Size of Specimen (mm)", "Cross Sectional Area ", "Reading ", "Comp. Strength ", "Avg. Comp Strength " };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            if (h == 2)
                            {
                                cell1.Colspan = 3;
                            }
                            else
                            {
                                cell1.Rowspan = 2;
                            }
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase("Length", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Breadth", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Height", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }

                    else if (OT.OTINWD_ReportForTestId_int == 110)
                    {
                        table1 = new PdfPTable(7);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 30f, 10f, 10f, 10f, 10f, 10f });
                        string[] headers = { "Sr no.", "ID Mark", "Size of specimen (mm)", "Weight", "Density" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            if (h == 2)
                            {
                                cell1.Colspan = 3;
                            }
                            else
                            {
                                cell1.Rowspan = 2;
                            }
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase("Length", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Breadth", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Height", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                    }
                    else if (OT.OTINWD_ReportForTestId_int == 111)
                    {
                        table1 = new PdfPTable(4);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 60f, 20f, 30f });

                        string[] headers = { "Sr no.", "Name of Test", "Unit", "Test Result" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                    else if (OT.OTINWD_ReportForTestId_int == 112)
                    {
                        table1 = new PdfPTable(8);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 10f, 10f, 10f, 10f, 10f, 10f, 30f });
                        string[] headers = { "Sr no.", "ID Mark", "Day", "Size \n 1 mm x b mm x d mm", "Load", "Flexural Strength(Modulus of rupture fb)  " };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            if (h == 3)
                            {
                                cell1.Colspan = 3;
                            }
                            else
                            {
                                cell1.Rowspan = 2;
                            }
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase("Length", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Breadth", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Height", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }


                    else if (OT.OTINWD_ReportForTestId_int == 112)
                    {
                        table1 = new PdfPTable(8);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 10f, 10f, 10f, 10f, 10f, 10f, 30f });
                        string[] headers = { "Sr no.", "ID Mark", "Day", "Length", "Breadth", "Height", "Load", "Flexural Strength(Modulus of rupture fb) " };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                    else if (OT.OTINWD_ReportForTestId_int == 113)
                    {
                        table1 = new PdfPTable(6);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 50f, 20f, 20f, 30f, 30f });
                        string[] headers = { "Sr no.", "Test", "Unit", "Results", "Requirement As per BS6699:1992 ", "Compliance" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }

                    }
                    else if (OT.OTINWD_ReportForTestId_int == 114)
                    {
                        table1 = new PdfPTable(8);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 10f, 12f, 30f, 30f, 30f, 30f, 30f });


                        string[] headers = { "Sr no.", "Sieve Size", "Grading of original Sample(%)", "Weight of test fraction before test(gm)", "Weight of test fraction Retained after 5th cycle(gm)", "% passing after test(Actual Loss)(%)", "Weight average (Corrected % Loss)" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            if (h == 1)
                            {
                                cell1.Colspan = 2;
                            }
                            else
                            {
                                cell1.Rowspan = 2;
                            }
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase("Passing", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Retained", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                    }
                    else if (OT.OTINWD_ReportForTestId_int == 115)
                    {
                        table1 = new PdfPTable(3);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 50f, 20f });
                        string[] headers = { "Sr no.", "Name of Test", "Result" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }

                    else if (OT.OTINWD_ReportForTestId_int == 116)
                    {
                        table1 = new PdfPTable(6);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 20f, 30f, 30f, 30f, 30f });
                        string[] headers = { "Sr no.", "Sample Description", "Name of The Test", "Test Solution", "Visible Changes", "Classes of Resistance" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                    else if (OT.OTINWD_ReportForTestId_int == 117)
                    {
                        table1 = new PdfPTable(4);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 30f, 20f, 20f });
                        string[] headers = { "Sr no.", "Name Of The Test", "Result", "Unit" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }

                    }
                    else if (OT.OTINWD_ReportForTestId_int == 118)
                    {
                        table1 = new PdfPTable(5);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 10f, 30f, 20f, 30f });
                        string[] headers = { "Sr no.", "Id Mark", "Name Of The Test", "Sample", "Observation/Remark" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                    else if (OT.OTINWD_ReportForTestId_int == 119)
                    {
                        table1 = new PdfPTable(8);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 30f, 12f, 15f, 10f, 10f, 10f, 10f });
                        cell1 = new PdfPCell(new Phrase("Sr No.", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        cell1.Rowspan = 3;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Contaminent", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        cell1.Rowspan = 3;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Unit", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        cell1.Rowspan = 3;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Result", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        cell1.Rowspan = 3;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Specified Limit as per IS 383", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_TOP;
                        cell1.Colspan = 4;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Fine Aggregate Percenatge By Weight,Max", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Coarse Aggregate Percenatge By Weight,Max", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Uncrushed", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Crushed", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Uncrushed", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Crushed", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else if (OT.OTINWD_ReportForTestId_int == 120)
                    {
                        table1 = new PdfPTable(7);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 10f, 15f, 20f, 30f, 30f, 30f });
                        string[] headers = { "Sr no.", "Density", "Sample ID", "Average Density", "Moisture Content", "Average Moisture Content", "Moisture Content (%)Max" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                    else if (OT.OTINWD_ReportForTestId_int == 121)
                    {
                        table1 = new PdfPTable(6);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 30f, 10f, 30f, 30f, 30f });
                        string[] headers = { "Sr no.", "Test", "Unit", "Test Results", "Siliceous Pulverized Fuel Ash", "Calcareous Pulverized Fuel Ash" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                    else if (OT.OTINWD_ReportForTestId_int == 122)
                    {
                        table1 = new PdfPTable(8);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 15f, 15f, 30f, 30f, 30f, 30f, 30f });
                        string[] headers = { "Sr no.", "Sieve Size", "Grading of original Sample(%)", "Weight of test fraction before test(gm)", "Weight of test fraction Retained after 5th cycle(gm)", "% passing after test(Actual Loss)(%)", "Weight average (Corrected % Loss)" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            if (h == 1)
                            {
                                cell1.Colspan = 2;
                            }
                            else
                            {
                                cell1.Rowspan = 2;
                            }
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase("Passing", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Retained", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }

                    else if (OT.OTINWD_ReportForTestId_int == 123)
                    {
                        table1 = new PdfPTable(5);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 30f, 20f, 20f, 20f });
                        string[] headers = { "Sr No.", "Name Of The Test", "Result", "Specified Limit", "Reference" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                    else if (OT.OTINWD_ReportForTestId_int == 124)
                    {
                        table1 = new PdfPTable(4);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 30f, 20f, 20f });
                        string[] headers = { "Sr No.", "Name Of The Test", "Test Result", "Specified Limit" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                    else if (OT.OTINWD_ReportForTestId_int == 125)
                    {
                        table1 = new PdfPTable(12);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 10f, 6f, 10f, 10f, 10f, 10f, 10f, 10f, 10f, 10f, 10f });
                        string[] headers = { "Sr No.", "Id Mark", "Age", "Size of specimen (mm)", "Weight", "Cross Sectional Area", "Density", "Load", "Comp. Strength", "Avg. Comp. Strength" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            if (h == 3)
                            {
                                cell1.Colspan = 3;
                            }
                            else
                            {
                                cell1.Rowspan = 2;
                            }
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase("Length", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Width", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Height", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else if (OT.OTINWD_ReportForTestId_int == 126)
                    {
                        table1 = new PdfPTable(6);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 30f, 20f, 30f, 20f, 30f });
                        string[] headers = { "Sr No", "Name Of The Test", "Result", "Specified Limit", "Unit", "Method of Testing " };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                    else if (OT.OTINWD_ReportForTestId_int == 127)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH2));
                        table1 = new PdfPTable(11);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 10f, 10f, 10f, 10f, 10f, 20f, 20f, 10f, 20f, 10f });
                        string[] headers = { "SrNo", "Id Mark", "Dimensions", "Weight   (kg)", "Cross Sectional Area (mm)²", "Density(kg/Cum)", "Load   (kN)", "Comp. Strength (Kg/cm²)", "Test" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            if (h == 2)
                            {
                                cell1.Colspan = 3;
                            }
                            else
                            {
                                cell1.Rowspan = 2;
                            }
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase("Length", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Breadth", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Height", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else if (OT.OTINWD_ReportForTestId_int == 128)
                    {
                        table1 = new PdfPTable(12);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 15f, 6f, 10f, 10f, 10f, 12f, 15f, 12f, 12f, 20f, 20f });
                        string[] headers = { "Sr No.", "Id Mark", "Age", "Size of Specimen(mm)", "Weight", "Cross Sectional Area", "Density", "Load", "Comp. Strength ", "Avg. Comp. Strength" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            if (h == 0 || h == 1)
                            {
                                cell1.Rowspan = 2;
                            }
                            if (h == 3)
                            {
                                cell1.Colspan = 3;
                            }
                            table1.AddCell(cell1);
                        }
                        string[] header = { "Day", "Length", "Breadth", "Height", "(Kg )", "(mm²)", "(kg/m³)", "(kN)", "(N/mm²)", "(N/mm²)" };
                        for (int h = 0; h < header.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(header[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                    else if (OT.OTINWD_ReportForTestId_int == 129)
                    {
                        table1 = new PdfPTable(4);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 10f, 30f, 30f });
                        string[] headers = { "Sr No.", "Id Mark", "Name Of The Test", "Observation/Remark" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }

                    else if (OT.OTINWD_ReportForTestId_int == 130)
                    {
                        table1 = new PdfPTable(3);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 30f, 60f });
                        string[] headers = { "Sr No.", "Sample ID", "Avg Thk Of coating(micron)" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }

                    }

                    else if (OT.OTINWD_ReportForTestId_int == 131)
                    {
                        table1 = new PdfPTable(5);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 20f, 20f, 20f, 20f });
                        string[] headers = { "Sr No.", "Id Mark", "Dia Of Bar \n (mm)", "Ultimate Load \n (kN)", "Ultimate Tensile Stress \n (N/mm²)" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                    else if (OT.OTINWD_ReportForTestId_int == 132)
                    {
                        table1 = new PdfPTable(6);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 20f, 30f, 20f, 20f, 20f });
                        string[] headers = { "Sr No.", "Id Mark", "Cross Sectional Area", "Elongation", "Yield Stress", "Ultimate Tensile Stress" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.VerticalAlignment = Element.ALIGN_TOP;
                            if (h == 0 || h == 1)
                            {
                                cell1.Rowspan = 2;
                            }
                            table1.AddCell(cell1);
                        }
                        string[] header = { "mm²", "% ", "N/mm²", "N/mm²" };
                        for (int h = 0; h < header.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(header[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                    else if (OT.OTINWD_ReportForTestId_int == 133)
                    {
                        table1 = new PdfPTable(7);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 20f, 20f, 20f, 20f, 20f, 20f });
                        string[] headers = { "Sr No.", "Dia Of Bar", "Carbon", "Manganese", "Sulphur", "Phosphorous", "Silicon" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }

                    }
                    else if (OT.OTINWD_ReportForTestId_int == 134)
                    {
                        table1 = new PdfPTable(6);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 30f, 20f, 20f, 30f, 20f });
                        string[] headers = { "Sr No.", "Test Parameters", "Unit", "Results", "Requirements As Per IS 15388:2003", "Compliance" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                    else if (OT.OTINWD_ReportForTestId_int == 135)
                    {
                        table1 = new PdfPTable(5);
                        table1.WidthPercentage = 100;
                        table1.SetTotalWidth(new float[] { 6f, 30f, 20f, 20f, 30f });
                        string[] headers = { "Sr No.", "Id Mark", "Name Of The Test", "Unit", "Result Obtained" };
                        for (int h = 0; h < headers.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                    else if (OT.OTINWD_ReportForTestId_int == 139 || OT.OTINWD_ReportForTestId_int == 0)
                    {
                        int h = 1;
                        // table1 = new PdfPTable(2);
                        // table1.WidthPercentage = 100;
                        //table1.SetTotalWidth(new float[] { 6f, 30f, 20f, 20f, 30f });
                        var OTtest = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, false, 0, "", 0, 0, 0, 0, 0, "", 0, "OT");
                        foreach (var t in OTtest)
                        {
                            string[] lines = t.OTDETAIL_DetailTest_var.Split('!');
                            foreach (string line in lines)
                            {
                                if (line != "")
                                {
                                    SrNo++;
                                    string[] headerline = line.Split('~');
                                    foreach (string header in headerline)
                                    {
                                        if (header != "")
                                        {
                                            if (SrNo == 1)
                                            {
                                                h++;
                                            }
                                        }
                                    }
                                }
                            }
                            SrNo = 0;
                            table1 = new PdfPTable(h);
                            table1.WidthPercentage = 100;
                            foreach (string line in lines)
                            {
                                if (line != "")
                                {
                                    if (SrNo == 0)
                                    {
                                        table1.WidthPercentage = 100;
                                        cell1 = new PdfPCell(new Phrase("Sr No.", fontH2));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                    }
                                    else
                                    {
                                        cell1 = new PdfPCell(new Phrase(SrNo.ToString(), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                    }
                                    SrNo++;
                                    string[] line3 = line.Split('~');
                                    foreach (string resline in line3)
                                    {
                                        if (resline != "")
                                        {
                                            if (SrNo == 1)
                                            {
                                                cell1 = new PdfPCell(new Phrase(resline.ToString(), fontH2));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                            else
                                            {
                                                cell1 = new PdfPCell(new Phrase(resline.ToString(), fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                table1.AddCell(cell1);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        SrNo = 0;
                    }
                    if (OT.OTINWD_ReportForTestId_int != 139 && OT.OTINWD_ReportForTestId_int != 0)
                    {
                        SrNo = 0;
                        foreach (string line2 in Line1)
                        {
                            int k = 0;
                            k++;
                            if (line2 != "" && OT.OTINWD_ReportForTestId_int != 114 && OT.OTINWD_ReportForTestId_int != 122 && OT.OTINWD_ReportForTestId_int != 133)
                            {
                                SrNo++;
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            string[] lines = line2.Split('~');
                            foreach (string line in lines)
                            {
                                if (line != "")
                                {
                                    if (OT.OTINWD_ReportForTestId_int == 114)
                                    {
                                        if (line.ToString() == "!")
                                        {
                                            k = 0;
                                            if (k == 0)
                                            {

                                                cell1 = new PdfPCell(new Phrase("Total", fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                cell1.Colspan = 3;
                                                table1.AddCell(cell1);

                                                k++;
                                            }
                                            string lineex = OtherDeatils.Substring(OtherDeatils.LastIndexOf('!') + 1);
                                            string[] lineexf = lineex.Split('~');
                                            foreach (string linefd in lineexf)
                                            {
                                                if (linefd != "")
                                                {
                                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(linefd), fontH1));
                                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                    table1.AddCell(cell1);
                                                }
                                            }
                                            break;
                                        }
                                        if (k == 1)
                                        {
                                            SrNo++;
                                            cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            table1.AddCell(cell1);

                                        }
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(line), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                        k++;
                                        if (k == 7)
                                        {
                                            k = 0;
                                        }

                                    }

                                    else if (OT.OTINWD_ReportForTestId_int == 122)
                                    {
                                        if (line.ToString() == "!")
                                        {
                                            k = 0;
                                            if (k == 0)
                                            {
                                                cell1 = new PdfPCell(new Phrase("Total", fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                cell1.Colspan = 3;
                                                table1.AddCell(cell1);
                                                k++;
                                            }
                                            string lineex = OtherDeatils.Substring(OtherDeatils.LastIndexOf('!') + 1);
                                            string[] lineexf = lineex.Split('~');
                                            foreach (string linefd in lineexf)
                                            {
                                                if (linefd != "")
                                                {

                                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(linefd), fontH1));
                                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                    table1.AddCell(cell1);
                                                }
                                            }
                                            break;
                                        }
                                        if (k == 1)
                                        {
                                            SrNo++;
                                            cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            table1.AddCell(cell1);

                                        }
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(line), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        k++;
                                        if (k == 7)
                                        {
                                            k = 0;
                                        }
                                    }
                                    else if (OT.OTINWD_ReportForTestId_int == 133)
                                    {
                                        if (line.ToString() == "!")
                                        {
                                            k = 0;
                                            if (k == 0)
                                            {
                                                cell1 = new PdfPCell(new Phrase("Total", fontH1));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                cell1.Colspan = 2;
                                                table1.AddCell(cell1);
                                                k++;
                                            }
                                            string lineex = OtherDeatils.Substring(OtherDeatils.LastIndexOf('!') + 1);
                                            string[] lineexf = lineex.Split('~');
                                            foreach (string linefd in lineexf)
                                            {
                                                if (linefd != "")
                                                {
                                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(linefd), fontH1));
                                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                                    table1.AddCell(cell1);
                                                }
                                            }
                                            break;
                                        }
                                        if (k == 1)
                                        {
                                            SrNo++;
                                            cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            table1.AddCell(cell1);
                                        }
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(line), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                        k++;
                                        if (k == 6)
                                        {
                                            k = 0;
                                        }
                                    }
                                    else
                                    {
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(line), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                    }
                                }
                            }
                        }
                    }
                    j++;
                }
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SpacingAfter = 8;
                pdfDoc.Add(table1);
                #endregion

                //table1.SpacingBefore = 10;
                #region iscode/Remark
                table1 = new PdfPTable(2);
                table1.SpacingAfter = 5;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                DateTime? dtTesting = null;
                var iscd = dc.ISCode_View(0, "", "OT", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                            cell2 = new PdfPCell(new Phrase("References/Notes :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                serial_no = 0;
                var re = dc.AllRemark_View("", ReferenceNo, 0, "OT").ToList();
                if (re.Count > 0)
                {
                    foreach (var r in re)
                    {
                        var remark = dc.AllRemark_View("", "", Convert.ToInt32(r.OTDetail_RemarkId_int), "OT");
                        foreach (var remk in remark)
                        {
                            if (serial_no == 0)
                            {
                                //pdfDoc.Add(new Paragraph("Remarks :", fontH2));
                                cell2 = new PdfPCell(new Phrase("References/Remarks :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(serial_no + ")" + remk.OT_Remark_var.ToString(), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remk.OT_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("References/Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);
                #endregion

                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 5;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("Other Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
                    foreach (var r in RecNo)
                    {
                        if (r.OTINWD_ApprovedBy_tint != null && r.OTINWD_ApprovedBy_tint.ToString() != "" && r.OTINWD_ApprovedBy_tint > 0)
                        {
                            var U = dc.User_View(r.OTINWD_ApprovedBy_tint, -1, "", "", "");
                            foreach (var r1 in U)
                            {

                                pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                                if (r1.USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Email")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }
                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (r.OTINWD_CheckedBy_tint != null && r.OTINWD_CheckedBy_tint.ToString() != "" && r.OTINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(r.OTINWD_CheckedBy_tint, -1, "", "", "");
                            foreach (var loginusr in lgin)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by : " + loginusr.USER_Name_var.ToString(), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact (020)24348027.");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);


                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
            }
        }
        #endregion

        public void LabEquipmentLabel_PDFReport(string EqupID, string IDMarkVar, string Print)
        {
            if (Print == "1" && EqupID != "")
            {
                #region PrintLabel Report
                try
                {
                    Paragraph paragraph = new Paragraph();
                    Document pdfDoc = new Document(PageSize.A4, 30f, 30f, 100f, 0f);
                    var fileName = "LabEquipmentLabel" + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                    if (!Directory.Exists(@foldername))
                        Directory.CreateDirectory(@foldername);
                    string Subfoldername = foldername + "/LabEquipmentLabel";
                    if (!Directory.Exists(@Subfoldername))
                        Directory.CreateDirectory(@Subfoldername);
                    string Subfoldername1 = Subfoldername;
                    PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                    pdfDoc.Open();

                    PdfPTable table1 = null;
                    PdfPTable MaindataTable = new PdfPTable(2);
                    MaindataTable.WidthPercentage = 100;
                    MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;


                    Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
                    Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
                    Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.UNDEFINED);
                    Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
                    Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.UNDEFINED);

                    float[] widths = new float[] { 30f, 30f };
                    MaindataTable.SetWidths(widths);
                    string[] header = { "Make", "ID No.", "Sr.No." };
                    PdfPCell cell1;

                    string strIds = EqupID.ToString();
                    int cntLable = 0;
                    var equipData = dc.Equipment_View(0).ToList();
                    for (int i = 0; i < equipData.Count; i++)
                    {
                        if (strIds.Contains("," + equipData[i].EQP_InternalIdMark_var + ",") == true)
                        {
                            cntLable++;
                            table1 = new PdfPTable(2);
                            float[] width = new float[] { 20f, 40f };
                            table1.SetWidths(width);
                            table1.SpacingBefore = 5;
                            table1.WidthPercentage = 100;


                            for (int j = 0; j < header.Length; j++)
                            {
                                if (j == 0)
                                {
                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(equipData[i].EQP_Name_var), fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.Colspan = 2;
                                    cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                    cell1.Border = Rectangle.TOP_BORDER | Rectangle.LEFT_BORDER | Rectangle.RIGHT_BORDER;
                                    table1.AddCell(cell1);


                                    cell1 = new PdfPCell(new Phrase(header[0], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                    cell1.Border = Rectangle.LEFT_BORDER;
                                    table1.AddCell(cell1);


                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(equipData[i].EQP_Make_var), fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                    cell1.Border = Rectangle.RIGHT_BORDER;
                                    table1.AddCell(cell1);

                                }

                                if (j == 1)
                                {
                                    cell1 = new PdfPCell(new Phrase(header[1], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                    cell1.Border = Rectangle.LEFT_BORDER;
                                    table1.AddCell(cell1);

                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(equipData[i].EQP_InternalIdMark_var), fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                    cell1.Border = Rectangle.RIGHT_BORDER;
                                    table1.AddCell(cell1);
                                }

                                if (j == 2)
                                {

                                    cell1 = new PdfPCell(new Phrase(header[2], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                    cell1.Border = Rectangle.BOTTOM_BORDER | Rectangle.LEFT_BORDER;
                                    table1.AddCell(cell1);

                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(equipData[i].EQP_SerialNo_var), fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                    cell1.Border = Rectangle.BOTTOM_BORDER | Rectangle.RIGHT_BORDER;
                                    table1.AddCell(cell1);
                                }
                            }
                            MaindataTable.AddCell(table1);

                        }
                    }

                    if (cntLable % 2 > 0)
                    {
                        table1 = new PdfPTable(2);

                        cell1 = new PdfPCell(new Phrase("", fontH2));
                        cell1.Colspan = 2;
                        cell1.Border = Rectangle.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("", fontH2));
                        cell1.Border = Rectangle.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("", fontH1));
                        cell1.Border = Rectangle.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("", fontH2));
                        cell1.Border = Rectangle.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("", fontH1));
                        cell1.Border = Rectangle.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("", fontH2));
                        cell1.Border = Rectangle.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("", fontH1));
                        cell1.Border = Rectangle.NO_BORDER;
                        table1.AddCell(cell1);

                        MaindataTable.AddCell(table1);
                    }

                    pdfDoc.Add(MaindataTable);


                    var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = blackListTextFont;
                    paragraph.Add("--End of Report--");
                    pdfDoc.Add(paragraph);
                    pdfDoc.Close();

                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);

                }
                catch
                {

                }

                #endregion
            }
            if (Print == "2")
            {
                #region LabEquipment list
                try
                {

                    Paragraph paragraph = new Paragraph();
                    Document pdfDoc = new Document(PageSize.A4, 55f, 45f, 100f, 0f);
                    var fileName = "LabEquipment" + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                    if (!Directory.Exists(@foldername))
                        Directory.CreateDirectory(@foldername);
                    string Subfoldername = foldername + "/LabEquipment";
                    if (!Directory.Exists(@Subfoldername))
                        Directory.CreateDirectory(@Subfoldername);
                    string Subfoldername1 = Subfoldername;
                    PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                    pdfDoc.Open();

                    PdfPTable table1 = null;
                    pdfDoc.Open();
                    PdfPTable MaindataTable = new PdfPTable(4);
                    MaindataTable.WidthPercentage = 100;
                    MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Add("LIST OF EQUIPMENTS");
                    pdfDoc.Add(paragraph);
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.SpacingAfter = 20;
                    pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
                    Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
                    Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.UNDEFINED);
                    Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
                    Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.UNDEFINED);
                    pdfDoc.Add(MaindataTable);
                    #region Headers for table.

                    string[] headers = { "Sr. No.", "Equipment", "Section", "Internal ID Mark", "Calibration Status", "Serial No.", "Make", "Certificate", "Least Count", "Recd On", "Range", "Status" };


                    #endregion

                    #region pdf code
                    string status = "";
                    table1 = new PdfPTable(12);
                    float[] widthsCR = new float[] { 10f, 35f, 20f, 35f, 35f, 25f, 20f, 30f, 20f, 25f, 20f, 20f };
                    table1.SetWidths(widthsCR);
                    table1.SpacingBefore = 5;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;
                    PdfPCell cell1;
                    for (int h = 0; h < headers.Count(); h++)
                    {
                        cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }

                    var equipmentData = dc.Equipment_View(0).ToList();
                    var count = equipmentData.Count();

                    for (int j = 0; j < count; j++)
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(j + 1), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToString(equipmentData[j].EQP_Name_var), fontH1));
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToString(equipmentData[j].EQP_Section_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToString(equipmentData[j].EQP_InternalIdMark_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToString(equipmentData[j].EQP_CalibStatus_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToString(equipmentData[j].EQP_SerialNo_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToString(equipmentData[j].EQP_Make_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToString(equipmentData[j].EQP_Certificate_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToString(equipmentData[j].EQP_LeastCount_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        table1.AddCell(cell1);
                        //try
                        //{
                        DateTime recdDT = Convert.ToDateTime(equipmentData[j].EQP_RecdOnDate_dt);
                        string RecdOnDt = recdDT.ToString("dd-MMM-yyyy");
                        cell1 = new PdfPCell(new Phrase(RecdOnDt, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        //}
                        //catch (Exception ex)
                        //{
                        //    cell1 = new PdfPCell(new Phrase("-", fontH1));
                        //    table1.AddCell(cell1);
                        //}

                        cell1 = new PdfPCell(new Phrase(Convert.ToString(equipmentData[j].EQP_Range_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        table1.AddCell(cell1);

                        if (Convert.ToInt32(equipmentData[j].EQP_Status_bit) == 1)
                            status = "Active";
                        else
                            status = "Deactive";

                        cell1 = new PdfPCell(new Phrase(Convert.ToString(status), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                        table1.AddCell(cell1);
                    }
                    pdfDoc.Add(table1);
                    pdfDoc.Close();

                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                    #endregion
                }
                catch
                {
                }

                #endregion
            }
            if (Print == "3")
            {
                #region LabEquip Calibration due on report

                try
                {

                    Paragraph paragraph = new Paragraph();
                    Document pdfDoc = new Document(PageSize.A4, 30f, 30f, 100f, 0f);
                    var fileName = "CalibrationDueList" + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                    if (!Directory.Exists(@foldername))
                        Directory.CreateDirectory(@foldername);
                    string Subfoldername = foldername + "/CalibrationList";
                    if (!Directory.Exists(@Subfoldername))
                        Directory.CreateDirectory(@Subfoldername);
                    string Subfoldername1 = Subfoldername;
                    PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                    pdfDoc.Open();

                    PdfPTable table1 = null;
                    PdfPTable MaindataTable = new PdfPTable(4);
                    MaindataTable.WidthPercentage = 100;
                    MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Add("Calibration Due List");
                    pdfDoc.Add(paragraph);
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.SpacingAfter = 20;
                    pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
                    Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
                    Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.UNDEFINED);
                    Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
                    Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.UNDEFINED);
                    pdfDoc.Add(MaindataTable);
                    #region Headers for table.

                    string[] headers = { "Sr. No.", "Internal ID Mark", "Equipment Name", "Calibration Due On" };

                    #endregion

                    #region pdf code

                    table1 = new PdfPTable(4);
                    float[] widthsCR = new float[] { 10f, 40f, 50f, 35f };
                    table1.SetWidths(widthsCR);
                    table1.SpacingBefore = 5;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;
                    PdfPCell cell1;
                    for (int h = 0; h < headers.Count(); h++)
                    {
                        cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }

                    var equipmentData = dc.Equipment_View(-1).ToList();
                    var count = equipmentData.Count();
                    int srNoCount = 1;
                    for (int j = 0; j < count; j++)
                    {
                        var equipDetails = dc.EquipmentDetail_View(equipmentData[j].EQP_InternalIdMark_var, 0).ToList();
                        if (equipDetails.Count() != 0)
                        {
                            if (equipDetails.LastOrDefault().EQPD_CalibDueOnDate_dt >= DateTime.Now.Date && equipDetails.LastOrDefault().EQPD_CalibDueOnDate_dt <= DateTime.Now.Date.AddDays(30))
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(srNoCount), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(equipmentData[j].EQP_InternalIdMark_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(equipmentData[j].EQP_Name_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                table1.AddCell(cell1);

                                //try
                                //{
                                DateTime calibDueOnDT = Convert.ToDateTime(equipDetails.LastOrDefault().EQPD_CalibDueOnDate_dt);
                                string CalibDueOnDT = calibDueOnDT.ToString("dd-MM-yyyy");
                                cell1 = new PdfPCell(new Phrase(CalibDueOnDT, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                //}
                                //catch (Exception ex)
                                //{
                                //    cell1 = new PdfPCell(new Phrase("-", fontH1));
                                //    table1.AddCell(cell1);
                                //}

                                srNoCount++;
                            }
                        }
                    }
                    pdfDoc.Add(table1);
                    pdfDoc.Close();

                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);

                    #endregion
                }
                catch
                {
                }
                #endregion
            }
            if (Print == "4")
            {
                #region LabEquip CalibExpired
                try
                {

                    Paragraph paragraph = new Paragraph();
                    Document pdfDoc = new Document(PageSize.A4, 30f, 30f, 100f, 0f);
                    var fileName = "CalibrationExpiredList" + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                    if (!Directory.Exists(@foldername))
                        Directory.CreateDirectory(@foldername);

                    string Subfoldername = foldername + "/CalibrationList";
                    if (!Directory.Exists(@Subfoldername))
                        Directory.CreateDirectory(@Subfoldername);
                    string Subfoldername1 = Subfoldername;

                    PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                    pdfDoc.Open();

                    PdfPTable table1 = null;

                    PdfPTable MaindataTable = new PdfPTable(4);
                    MaindataTable.WidthPercentage = 100;
                    MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Add("Calibration Expired List");
                    pdfDoc.Add(paragraph);
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.SpacingAfter = 20;
                    pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
                    Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
                    Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.UNDEFINED);
                    Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
                    Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.UNDEFINED);
                    pdfDoc.Add(MaindataTable);
                    #region Headers for table.

                    string[] headers = { "Sr. No.", "Internal ID Mark", "Equipment Name", "Calibration Due On" };

                    #endregion

                    #region pdf code

                    table1 = new PdfPTable(4);
                    float[] widthsCR = new float[] { 10f, 40f, 50f, 35f };
                    table1.SetWidths(widthsCR);
                    table1.SpacingBefore = 5;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;
                    PdfPCell cell1;
                    for (int h = 0; h < headers.Count(); h++)
                    {
                        cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }

                    var equipmentData = dc.Equipment_View(0).ToList();
                    var count = equipmentData.Count();
                    int srNoCount = 1;
                    for (int j = 0; j < count; j++)
                    {
                        var equipDetails = dc.EquipmentDetail_View(equipmentData[j].EQP_InternalIdMark_var, 0).ToList();
                        if (equipDetails.Count() != 0)
                        {
                            if (equipDetails.LastOrDefault().EQPD_CalibDueOnDate_dt < DateTime.Now.Date)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(srNoCount), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(equipmentData[j].EQP_InternalIdMark_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(equipmentData[j].EQP_Name_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
                                table1.AddCell(cell1);

                                //try
                                //{
                                DateTime calibDueOnDT = Convert.ToDateTime(equipDetails.LastOrDefault().EQPD_CalibDueOnDate_dt);
                                string CalibDueOnDT = calibDueOnDT.ToString("dd-MM-yyyy");
                                cell1 = new PdfPCell(new Phrase(CalibDueOnDT, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                //}
                                //catch (Exception ex)
                                //{
                                //    cell1 = new PdfPCell(new Phrase("-", fontH1));
                                //    table1.AddCell(cell1);
                                //}
                                srNoCount++;
                            }
                        }
                    }
                    pdfDoc.Add(table1);
                    pdfDoc.Close();

                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                    #endregion
                }
                catch
                {
                }
                #endregion
            }
            if (Print == "5")
            {
                #region LabEquip History Sheet
                try
                {
                    int eqpID = Convert.ToInt32(EqupID); // temporary set 
                    string IdmarkVarName = IDMarkVar.ToString();
                    Paragraph paragraph = new Paragraph();
                    Document pdfDoc = new Document(PageSize.A4, 30f, 30f, 30f, 0f);
                    var fileName = "EquipmentHistorySheet" + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                    if (!Directory.Exists(@foldername))
                        Directory.CreateDirectory(@foldername);

                    string Subfoldername = foldername + "/EquipmentHistorySheet";
                    if (!Directory.Exists(@Subfoldername))
                        Directory.CreateDirectory(@Subfoldername);
                    string Subfoldername1 = Subfoldername;

                    PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                    pdfDoc.Open();

                    PdfPTable table1 = null;
                    PdfPTable MaindataTable = new PdfPTable(1);
                    MaindataTable.WidthPercentage = 100;
                    MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                    paragraph.Alignment = Element.ALIGN_CENTER;

                    paragraph.Add("Durocrete Engineering Services Pvt.Ltd.");
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.SpacingAfter = 5;
                    pdfDoc.Add(paragraph);
                    paragraph = new Paragraph();
                    if (dc.Connection.ConnectionString.ToLower().Contains("veenalive"))
                    {
                        paragraph.Add("19/1 Hingane Khurd, Vithalwadi, Sinhgad Road, Pune-411051");
                    }
                    else if (dc.Connection.ConnectionString.ToLower().Contains("veenamumbai"))
                    {
                        paragraph.Add("PAP-D122/125,TTC Industrial Area,Behind Jai Mata Di Weighbridge, Turbhe,Navi Mumbai-400705.");
                    }
                    else if (dc.Connection.ConnectionString.ToLower().Contains("veenanashik"))
                    {
                        paragraph.Add("Sunil Towers,Behind KK Travels,Dwarka,Nashik-422001.");
                    }
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.SpacingAfter = 10;
                    paragraph.Font.Size = 9;
                    pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
                    Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
                    Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.UNDEFINED);
                    Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
                    Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.UNDEFINED);
                    Font fontH5 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
                    Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 15, Font.BOLD);
                    Font fontH6 = new Font(Font.FontFamily.TIMES_ROMAN, 13, Font.BOLD);
                    Font fontH7 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.UNDEFINED);

                    PdfPCell cell1;
                    cell1 = new PdfPCell(new Phrase("Equipment History Sheet", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1.VerticalAlignment = Element.ALIGN_TOP;
                    cell1.Border = Rectangle.BOX;
                    cell1.BorderWidth = 1;
                    MaindataTable.AddCell(cell1);
                    pdfDoc.Add(MaindataTable);


                    table1 = new PdfPTable(1);
                    table1.WidthPercentage = 100;
                    table1.SpacingAfter = 3;
                    table1.SpacingBefore = 3;
                    table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                    cell1 = new PdfPCell(new Phrase("GENERAL DETAILS", fontH6));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);
                    pdfDoc.Add(table1);

                    #region  GERNERAL DETAILS details
                    #region HeadersGD for table.

                    string[] HeadersGD = { "Machine :", "Department :", "Make :", "ID Mark / Serial no. of Equipment :", "Date of Purchase :", "Range :", "Least Count :" };


                    table1 = new PdfPTable(2);
                    float[] widthsGD = new float[] { 40f, 70f };
                    table1.SetWidths(widthsGD);
                    table1.SpacingAfter = 3;
                    table1.SpacingBefore = 3;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;


                    //string InternalIdMark_var = "";
                    var equipmentData = dc.Equipment_View(eqpID).ToList();
                    for (int j = 0; j < HeadersGD.Length; j++)
                    {
                        if (j == 0)
                        {
                            cell1 = new PdfPCell(new Phrase(HeadersGD[0], fontH2));
                            cell1.Border = Rectangle.TOP_BORDER | Rectangle.LEFT_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(equipmentData[0].EQP_Name_var, fontH2));
                            cell1.Border = Rectangle.TOP_BORDER | Rectangle.RIGHT_BORDER;
                            table1.AddCell(cell1);
                        }
                        if (j == 1)
                        {
                            cell1 = new PdfPCell(new Phrase(HeadersGD[1], fontH2));
                            cell1.Border = Rectangle.LEFT_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(equipmentData[0].EQP_Section_var, fontH4));
                            cell1.Border = Rectangle.RIGHT_BORDER;
                            table1.AddCell(cell1);
                        }
                        if (j == 2)
                        {
                            cell1 = new PdfPCell(new Phrase(HeadersGD[2], fontH2));
                            cell1.Border = Rectangle.LEFT_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(equipmentData[0].EQP_Make_var, fontH4));
                            cell1.Border = Rectangle.RIGHT_BORDER;
                            table1.AddCell(cell1);
                        }
                        if (j == 3)
                        {
                            cell1 = new PdfPCell(new Phrase(HeadersGD[3], fontH2));
                            cell1.Border = Rectangle.LEFT_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(equipmentData[0].EQP_InternalIdMark_var, fontH2));
                            cell1.Border = Rectangle.RIGHT_BORDER;
                            table1.AddCell(cell1);
                        }

                        if (j == 4)
                        {
                            cell1 = new PdfPCell(new Phrase(HeadersGD[4], fontH2));
                            cell1.Border = Rectangle.LEFT_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("", fontH4));
                            cell1.Border = Rectangle.RIGHT_BORDER;
                            table1.AddCell(cell1);
                        }

                        if (j == 5)
                        {
                            cell1 = new PdfPCell(new Phrase(HeadersGD[5], fontH2));
                            cell1.Border = Rectangle.LEFT_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(equipmentData[0].EQP_Range_var, fontH4));
                            cell1.Border = Rectangle.RIGHT_BORDER;
                            table1.AddCell(cell1);
                        }

                        if (j == 6)
                        {
                            cell1 = new PdfPCell(new Phrase(HeadersGD[6], fontH2));
                            cell1.Border = Rectangle.BOTTOM_BORDER | Rectangle.LEFT_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(equipmentData[0].EQP_LeastCount_var, fontH4));
                            cell1.Border = Rectangle.BOTTOM_BORDER | Rectangle.RIGHT_BORDER;
                            table1.AddCell(cell1);
                        }
                    }
                    pdfDoc.Add(table1);
                    #endregion
                    #endregion

                    table1 = new PdfPTable(1);
                    table1.WidthPercentage = 100;
                    table1.SpacingAfter = 3;
                    table1.SpacingBefore = 3;
                    table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                    cell1 = new PdfPCell(new Phrase("LUBRICATION DETAILS", fontH6));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);
                    pdfDoc.Add(table1);

                    #region  LUBRICATION DETAILS details
                    #region HeadersLD for table.

                    string[] HeadersLD = { "Oil / Grease :", "Make :", "Number (if any) :" };


                    table1 = new PdfPTable(4);
                    float[] widthsCR = new float[] { 20f, 30f, 20f, 30f };
                    table1.SetWidths(widthsCR);
                    table1.SpacingAfter = 3;
                    table1.SpacingBefore = 3;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;


                    //string InternalIdMark_var = "";

                    for (int j = 0; j < HeadersLD.Length - 1; j++)
                    {
                        if (j == 0)
                        {
                            cell1 = new PdfPCell(new Phrase(HeadersLD[0], fontH2));
                            cell1.Border = Rectangle.TOP_BORDER | Rectangle.LEFT_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("", fontH2));
                            cell1.Border = Rectangle.TOP_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("", fontH2));
                            cell1.Border = Rectangle.TOP_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("", fontH2));
                            cell1.Border = Rectangle.TOP_BORDER | Rectangle.RIGHT_BORDER;
                            table1.AddCell(cell1);


                        }
                        if (j == 1)
                        {
                            cell1 = new PdfPCell(new Phrase(HeadersLD[1], fontH2));
                            cell1.Border = Rectangle.BOTTOM_BORDER | Rectangle.LEFT_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("", fontH2));
                            cell1.Border = Rectangle.BOTTOM_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(HeadersLD[2], fontH2));
                            cell1.Border = Rectangle.BOTTOM_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("", fontH2));
                            cell1.Border = Rectangle.BOTTOM_BORDER | Rectangle.RIGHT_BORDER;
                            table1.AddCell(cell1);
                        }
                    }
                    pdfDoc.Add(table1);
                    #endregion
                    #endregion


                    table1 = new PdfPTable(1);
                    table1.WidthPercentage = 100;
                    table1.SpacingAfter = 3;
                    table1.SpacingBefore = 3;

                    cell1 = new PdfPCell(new Phrase("CALIBRATION DETAILS", fontH6));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);
                    pdfDoc.Add(table1);

                    #region  CALIBRATION DETAILS details
                    #region HeaderscD for table.

                    string[] HeadersCD = { "Calibration Date :", "Calibration Agency :", "Calibration Due Date :", "Calibration Traceability :" };


                    table1 = new PdfPTable(4);
                    float[] widthsCD = new float[] { 23f, 22f, 27f, 28f };
                    table1.SetWidths(widthsCD);
                    table1.SpacingAfter = 3;
                    table1.SpacingBefore = 3;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;


                    //string InternalIdMark_var = "";
                    var euipDetlData = dc.EquipmentDetail_View(IdmarkVarName, 0).ToList();

                    for (int j = 0; j < 2; j++)
                    {
                        if (j == 0)
                        {
                            cell1 = new PdfPCell(new Phrase(HeadersCD[0], fontH2));
                            cell1.Border = Rectangle.TOP_BORDER | Rectangle.LEFT_BORDER;
                            table1.AddCell(cell1);

                            //try
                            //{
                            DateTime calibrationDT = Convert.ToDateTime(euipDetlData[0].EQPD_LastCalibDate_dt);
                            string CalibrationDT = calibrationDT.ToString("dd-MM-yyyy");
                            cell1 = new PdfPCell(new Phrase(CalibrationDT, fontH4));
                            cell1.Border = Rectangle.TOP_BORDER;
                            table1.AddCell(cell1);
                            //}
                            //catch (Exception ex)
                            //{
                            //    cell1 = new PdfPCell(new Phrase("-", fontH1));
                            //    cell1.Border = Rectangle.TOP_BORDER;
                            //    table1.AddCell(cell1);
                            //}

                            cell1 = new PdfPCell(new Phrase(HeadersCD[1], fontH2));
                            cell1.Border = Rectangle.TOP_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(euipDetlData[0].EQPD_Agency_var, fontH4));
                            cell1.Border = Rectangle.TOP_BORDER | Rectangle.RIGHT_BORDER;
                            table1.AddCell(cell1);

                        }
                        if (j == 1)
                        {
                            cell1 = new PdfPCell(new Phrase(HeadersCD[2], fontH2));
                            cell1.Border = Rectangle.BOTTOM_BORDER | Rectangle.LEFT_BORDER;
                            table1.AddCell(cell1);

                            //try
                            //{
                            DateTime calibrationDueDT = Convert.ToDateTime(euipDetlData[0].EQPD_CalibDueOnDate_dt);
                            string CalibrationDueDT = calibrationDueDT.ToString("dd-MM-yyyy");
                            cell1 = new PdfPCell(new Phrase(CalibrationDueDT, fontH4));
                            cell1.Border = Rectangle.BOTTOM_BORDER;
                            table1.AddCell(cell1);
                            //}
                            //catch (Exception ex)
                            //{
                            //    cell1 = new PdfPCell(new Phrase("-", fontH1));
                            //    cell1.Border = Rectangle.BOTTOM_BORDER;
                            //    table1.AddCell(cell1);
                            //}

                            cell1 = new PdfPCell(new Phrase(HeadersCD[3], fontH2));
                            cell1.Border = Rectangle.BOTTOM_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("", fontH4));
                            cell1.Border = Rectangle.BOTTOM_BORDER | Rectangle.RIGHT_BORDER;
                            table1.AddCell(cell1);
                        }
                    }
                    pdfDoc.Add(table1);
                    #endregion
                    #endregion

                    table1 = new PdfPTable(1);
                    table1.WidthPercentage = 100;
                    table1.SpacingAfter = 3;
                    table1.SpacingBefore = 3;
                    table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                    cell1 = new PdfPCell(new Phrase("MACHINE MAINTENANCE LOG", fontH6));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);
                    pdfDoc.Add(table1);


                    #region MACHINE MAINTENANCE LOG details

                    table1 = new PdfPTable(8);
                    #region HeadersMM for table.
                    string[] HeadersMM = { "Sr No.", "Date", "MAJOR / ROUTINE REPAIR", "Agency", "Done by", "Verified by", "Checked by", "Remark" };
                    for (int h = 0; h < HeadersMM.Count(); h++)
                    {
                        cell1 = new PdfPCell(new Phrase(HeadersMM[h], fontH5));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }

                    float[] widthsMM = new float[] { 9f, 15f, 35f, 20f, 20f, 20f, 20f, 20f };
                    table1.SetWidths(widthsMM);
                    table1.SpacingAfter = 3;
                    table1.SpacingBefore = 3;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;

                    //string InternalIdMark_var = "";
                    for (int j = 0; j < 10; j++)
                    {

                        cell1 = new PdfPCell(new Phrase((j + 1).ToString(), fontH5));
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("", fontH5));
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("", fontH5));
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("", fontH5));
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("", fontH5));
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("", fontH5));
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("", fontH5));
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("", fontH5));
                        table1.AddCell(cell1);
                    }
                    pdfDoc.Add(table1);


                    table1 = new PdfPTable(4);
                    float[] widthsDE = new float[] { 40f, 35f, 20f, 20f };
                    table1.SetWidths(widthsDE);
                    table1.SpacingAfter = 3;
                    table1.SpacingBefore = 10;

                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;

                    for (int j = 0; j < 4; j++)
                    {
                        if (j == 0)
                        {
                            cell1 = new PdfPCell(new Phrase("Durocrete Engineering Services Pvt. Ltd.", fontH5));
                            cell1.Colspan = 4;
                            table1.AddCell(cell1);
                        }
                        if (j == 1)
                        {
                            cell1 = new PdfPCell(new Phrase("Doc No. Duroqd3/46", fontH7));
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Document- Equipment History Sheet", fontH7));
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Issue No : 1", fontH7));
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Date :", fontH7));
                            table1.AddCell(cell1);
                        }

                        if (j == 2)
                        {
                            cell1 = new PdfPCell(new Phrase("Copy No :1", fontH7));
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Amendment No. : Nil", fontH7));
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Amendment Date :", fontH7));
                            cell1.Colspan = 2;
                            table1.AddCell(cell1);
                        }

                        if (j == 3)
                        {
                            cell1 = new PdfPCell(new Phrase("Approved By :", fontH7));
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Issued By :", fontH7));
                            cell1.Colspan = 3;
                            table1.AddCell(cell1);
                        }
                    }

                    pdfDoc.Add(table1);
                    #endregion
                    #endregion



                    pdfDoc.Close();

                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);

                }
                catch
                {

                }
                #endregion
            }

        }

        #region Accounts
        public void AdvanceReceipt_PDF(string receiptNo)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                Document pdfDoc = new Document(PageSize.A4, 55f, 45f, 100f, 0f);
                var fileName = "AdvanceReceipt" + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/CashReceipt";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(4);
                MaindataTable.WidthPercentage = 100;
                MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Add("Cash Receipt");
                pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.UNDEFINED);

                #region data

                float[] widths = new float[] { 15f, 55f, 15f, 15f };
                MaindataTable.SetWidths(widths);
                string AdjustAmt = string.Empty;
                string BillNo = string.Empty;
                var AdvReceipt = dc.Advance_View(null, null, Convert.ToInt32(receiptNo), "", true);
                foreach (var adv in AdvReceipt)
                {
                    PdfPCell Cust_Namecell = new PdfPCell(new Phrase("Receipt No. ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": " + adv.ReceiptNo, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (adv.ReceiptDate != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Date : " + Convert.ToDateTime(adv.ReceiptDate).ToString("dd-MMM-yyyy"), fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Date : -", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Received with thank's from Shri. / M/s ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": " + Convert.ToString(adv.LedgerName_Description), fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Address ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": " + Convert.ToString(adv.clientAddress), fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Amount Received ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": Rs. " + (Math.Abs(Convert.ToDecimal(adv.ReceiptAmount)).ToString("0.00")) + "/-", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("(" + CnvtAmttoWords(Convert.ToInt32(Math.Abs(Convert.ToDecimal(adv.ReceiptAmount)))) + " " + "Only" + ")", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    AdjustAmt = (Math.Abs(Convert.ToDecimal(adv.ReceiptAmount))).ToString("0.00");
                    BillNo = "On A/c";
                    break;
                }
                pdfDoc.Add(MaindataTable);

                #endregion
                pdfDoc.Add(Chunk.NEWLINE);
                pdfDoc.Add(new Paragraph(" Payment Against :", fontH2));
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                pdfDoc.Add(new Paragraph(" ", fontH2));
                table1.HorizontalAlignment = Element.ALIGN_LEFT;

                #region tbldata

                PdfPCell cell1;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                pdfDoc.Add(table1);
                table1 = new PdfPTable(2);
                table1.WidthPercentage = 50;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SetTotalWidth(new float[] { 15f, 15f });
                string[] header = { "Bill/Debit Note", "Amount" };
                for (int h = 0; h < header.Count(); h++)
                {
                    cell1 = new PdfPCell(new Phrase(header[h], fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }

                if (BillNo != string.Empty)
                {
                    cell1 = new PdfPCell(new Phrase(BillNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                else
                {
                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                if (AdjustAmt != string.Empty)
                {
                    cell1 = new PdfPCell(new Phrase(AdjustAmt, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                else
                {
                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                pdfDoc.Add(table1);

                #endregion

                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                pdfDoc.Add(new Paragraph(" ", fontH1));
                pdfDoc.Add(new Paragraph(" ", fontH1));
                pdfDoc.Add(new Paragraph("Received By", fontH1));
                pdfDoc.Add(new Paragraph(" ", fontH1));
                pdfDoc.Add(new Paragraph(" ", fontH1));
                pdfDoc.Add(new Paragraph("CIN - U28939PN1999PTC014212", fontH1));
                pdfDoc.Add(new Paragraph("REGD.Add-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                string pdfPath = @Subfoldername1 + "/" + fileName;
                DownloadReport(fileName, pdfPath);
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void Journal_PDF(string DBNoteNo)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                Document pdfDoc = new Document(PageSize.A4, 55f, 45f, 100f, 0f);
                var fileName = "Journal" + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Journal";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                pdfDoc.Open();

                PdfPTable table1 = new PdfPTable(7);
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(4);
                MaindataTable.WidthPercentage = 100;
                MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Add("CREDIT NOTE");
                pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 7.5f, Font.UNDEFINED);
                #region data

                float[] widths = new float[] { 15f, 55f, 15f, 15f };
                MaindataTable.SetWidths(widths);
                string AdjustAmt = string.Empty;
                string BillNo = string.Empty;
                int SrNo = 0;
                int Clid = 0;
                var JOurnal = dc.Journal_View(DBNoteNo, false, true, false);
                foreach (var Credit in JOurnal)
                {
                    if (SrNo == 0)
                    {
                        PdfPCell Cust_Namecell = new PdfPCell(new Phrase("CR No. ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": " + Convert.ToString(Credit.Journal_NoteNo_var), fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("CR Date ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": " + Convert.ToDateTime(Credit.Journal_Date_dt).ToString("dd/MM/yyyy"), fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("To, ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("Customer Name  ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": " + Credit.CL_Name_var.ToString(), fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("Customer Address", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": " + Credit.CL_OfficeAddress_var.ToString(), fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Clid = Convert.ToInt32(Credit.Journal_ClientId_int);
                    }
                    SrNo++;
                }
                pdfDoc.Add(MaindataTable);

                #endregion
                pdfDoc.Add(Chunk.NEWLINE);
                pdfDoc.Add(new Paragraph(" We are issuing credit note for the bills raised by us for the following bill(s), (if any).", fontH2));
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                pdfDoc.Add(new Paragraph(" ", fontH2));
                table1.HorizontalAlignment = Element.ALIGN_LEFT;

                #region tbldata

                PdfPCell cell1;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                pdfDoc.Add(table1);
                table1 = new PdfPTable(6);
                table1.WidthPercentage = 100;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;

                var Crdt = dc.Journal_View(DBNoteNo, false, true, false);
                SrNo = 0; string testName = "", recType = "";
                decimal Total_OriginalAmt = 0, Total_ServiceTax = 0, TotalCredit = 0;
                clsData obj = new clsData();
                decimal ServiceTax = 0, OriginalAmount = 0, CreditTogiven = 0;
                foreach (var c in Crdt)
                {
                    if (SrNo == 0)
                    {
                        table1.SetTotalWidth(new float[] { 10f, 10f, 15f, 10f, 10f, 10f });
                        string[] header = { "Date", "Bill No.", "Original Amount", "Service Tax", "Credit to be given", "Test" };
                        for (int h = 0; h < header.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(header[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        for (int h = 0; h < header.Count(); h++)
                        {
                            if (h == 3)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(12) + "%", fontH1));//c.BILL_SerTaxAmt_num
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase("", fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                        }
                        for (int h = 0; h < header.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(" ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                    cell1 = new PdfPCell(new Phrase(Convert.ToDateTime(c.Journal_Date_dt).ToString("dd/MM/yyyy"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(Convert.ToString(c.JournalDetail_BillNo_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    ServiceTax = Convert.ToDecimal(c.BILL_SerTaxAmt_num);
                    CreditTogiven = Convert.ToDecimal(Math.Abs(Convert.ToDecimal(c.JournalDetail_Amount_dec)));

                    ServiceTax = (CreditTogiven / (100 + 12)) * 12;
                    OriginalAmount = CreditTogiven - ServiceTax;

                    cell1 = new PdfPCell(new Phrase(Convert.ToInt32(OriginalAmount).ToString(), fontH1));
                    Total_OriginalAmt += OriginalAmount;
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(Convert.ToInt32(ServiceTax).ToString(), fontH1));
                    Total_ServiceTax += ServiceTax;
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(Convert.ToInt32(CreditTogiven).ToString(), fontH1));
                    TotalCredit += CreditTogiven;
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    if (Convert.ToString(c.BILL_RecordType_var) == "---")
                        recType = "CT";
                    else
                        recType = Convert.ToString(c.BILL_RecordType_var);
                    testName = obj.getInwardTypeName(recType);
                    cell1 = new PdfPCell(new Phrase(testName.Replace("Testing", ""), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    SrNo++;
                }
                cell1 = new PdfPCell(new Phrase("Total Amount", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                cell1.Colspan = 2;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(Convert.ToInt32(Total_OriginalAmt).ToString(), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(Convert.ToInt32(Total_ServiceTax).ToString(), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(Convert.ToInt32(TotalCredit).ToString(), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);
                pdfDoc.Add(table1);

                #endregion

                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                pdfDoc.Add(new Paragraph(" ", fontH1));
                pdfDoc.Add(new Paragraph("For Durocrete Engineering Services Pvt. Ltd", fontH1));
                pdfDoc.Add(new Paragraph(" ", fontH1));
                pdfDoc.Add(new Paragraph("Authorized Sign", fontH1));
                pdfDoc.Close();
                string pdfPath = @Subfoldername1 + "/" + fileName;
                DownloadReport(fileName, pdfPath);
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void Journal_PDF_GST(string DBNoteNo)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                Document pdfDoc = new Document(PageSize.A4, 55f, 45f, 100f, 0f);
                var fileName = "Journal" + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Journal";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                pdfDoc.Open();


                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 8.5f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 7.5f, Font.UNDEFINED);

                PdfPTable table1 = new PdfPTable(7);
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(4);
                MaindataTable.WidthPercentage = 100;
                MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = fontTitle;
                paragraph.SpacingAfter = 25;
                paragraph.Add("ISD Invoice / ISD Credit Note Under Rule 9(1) of Tax Invoice, Credit and Debit Note Rule");
                pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                #region data

                float[] widths = new float[] { 15f, 55f, 15f, 15f };
                MaindataTable.SetWidths(widths);
                string AdjustAmt = string.Empty;
                string BillNo = string.Empty, gstNo = "NA", stateCode = "NA";
                int SrNo = 0; string testName = "", recType = "";
                clsData obj = new clsData();
                int Clid = 0;
                PdfPCell Cust_Namecell;
                //var JOurnal = dc.Journal_View(DBNoteNo, false, true, false);
                var JOurnal = dc.JournalDetail_View_Bill(DBNoteNo);
                foreach (var Credit in JOurnal)
                {
                    if (SrNo == 0)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Details of Input Service Distributor : ", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("Name ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": Durocrete Engineering Services Pvt Ltd.", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("State ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": Maharashtra", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("GSTIN No ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": 27AABCD2992C2ZS", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);


                        Cust_Namecell = new PdfPCell(new Phrase("Details of Recipient to whom Credit is distributed : ", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("CR No. ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": " + Convert.ToString(Credit.Journal_NoteNo_var), fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("CR Date ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": " + Convert.ToDateTime(Credit.Journal_Date_dt).ToString("dd/MM/yyyy"), fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);


                        Cust_Namecell = new PdfPCell(new Phrase("Customer Name  ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": " + Credit.CL_Name_var.ToString(), fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("Customer Address", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": " + Credit.CL_OfficeAddress_var.ToString(), fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        //Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        //MaindataTable.AddCell(Cust_Namecell);
                        //Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        //MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("State ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": " + Credit.CL_State_var.ToString(), fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        var st = dc.States_View_Code(Credit.CL_State_var.ToString()).ToList();
                        if (st.Count > 0)
                        {
                            stateCode = st.FirstOrDefault().State_code.ToString();
                        }
                        Cust_Namecell = new PdfPCell(new Phrase("State Code ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": " + stateCode, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("GSTIN No ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        if (Convert.ToString(Credit.CL_GstNo_var) != "" && Convert.ToString(Credit.CL_GstNo_var) != null)
                            Cust_Namecell = new PdfPCell(new Phrase(": " + Credit.CL_GstNo_var.ToString(), fontH1));
                        else
                            Cust_Namecell = new PdfPCell(new Phrase(": " + gstNo, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Clid = Convert.ToInt32(Credit.Journal_ClientId_int);
                    }
                    SrNo++;
                }
                pdfDoc.Add(MaindataTable);

                #endregion
                pdfDoc.Add(Chunk.NEWLINE);
                pdfDoc.Add(new Paragraph(" We are issuing credit note for the bills raised by us for the following bill(s), (if any).", fontH2));
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                pdfDoc.Add(new Paragraph(" ", fontH2));
                table1.HorizontalAlignment = Element.ALIGN_LEFT;

                #region tbldata

                PdfPCell cell1;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                pdfDoc.Add(table1);
                table1 = new PdfPTable(8);
                table1.WidthPercentage = 100;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;

                //var Crdt = dc.Journal_View(DBNoteNo, false, true, false);
                var Crdt = dc.JournalDetail_View_Bill(DBNoteNo);
                SrNo = 0;
                decimal Total_OriginalAmt = 0, Total_Cgst = 0, Total_Sgst = 0, Total_Igst = 0, TotalCredit = 0;
                decimal cGst = 0, sGst = 0, iGst = 0, OriginalAmount = 0, CreditTogiven = 0;


                string cgst = "", sgst = "", igst = "";
                var gstRslt = dc.GST_View(0, null).ToList();
                if (gstRslt.Count > 0)
                {
                    cgst = "(" + gstRslt.FirstOrDefault().GST_CGST_dec.ToString() + ")";
                    sgst = "(" + gstRslt.FirstOrDefault().GST_SGST_dec.ToString() + ")";
                    igst = "(" + gstRslt.FirstOrDefault().GST_IGST_dec.ToString() + ")";
                }

                foreach (var c in Crdt)
                {
                    if (c.JournalDetail_Amount_dec < 0)
                    {
                        if (SrNo == 0)
                        {
                            table1.SetTotalWidth(new float[] { 10f, 15f, 15f, 11.5f, 11.5f, 11.5f, 16f, 16f });
                            string[] header = { "Date", "Bill No.", "Original Amount", "CGST", "SGST", "IGST", "Credit to be given", "Test" };
                            for (int h = 0; h < header.Count(); h++)
                            {
                                if (h == 3)
                                {
                                    cell1 = new PdfPCell(new Phrase(header[h] + cgst, fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }
                                else if (h == 4)
                                {
                                    cell1 = new PdfPCell(new Phrase(header[h] + sgst, fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }
                                else if (h == 5)
                                {
                                    cell1 = new PdfPCell(new Phrase(header[h] + igst, fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }
                                else
                                {
                                    cell1 = new PdfPCell(new Phrase(header[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }
                            }

                            for (int h = 0; h < header.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                        }
                        if (c.BILL_Date_dt != null)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDateTime(c.BILL_Date_dt).ToString("dd/MM/yyyy"), fontH1));
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDateTime(c.Journal_Date_dt).ToString("dd/MM/yyyy"), fontH1));
                        }
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToString(c.JournalDetail_BillNo_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cGst = Convert.ToDecimal(c.BILL_CGSTAmt_num);
                        sGst = Convert.ToDecimal(c.BILL_SGSTAmt_num);
                        iGst = Convert.ToDecimal(c.BILL_IGSTAmt_num);
                        CreditTogiven = Convert.ToDecimal(Math.Abs(Convert.ToDecimal(c.JournalDetail_Amount_dec)));

                        OriginalAmount = Math.Round((CreditTogiven * 100) / 118);
                        if (cGst > 0)
                            cGst = Math.Round(OriginalAmount * Convert.ToDecimal(0.09));//(CreditTogiven / (100 + 9)) * 9;
                        if (sGst > 0)
                            sGst = Math.Round(OriginalAmount * Convert.ToDecimal(0.09));// (CreditTogiven / (100 + 9)) * 9;
                        if (iGst > 0)
                            iGst = Math.Round(OriginalAmount * Convert.ToDecimal(0.18));//(CreditTogiven / (100 + 18)) * 18;
                                                                                        // OriginalAmount = CreditTogiven - cGst - sGst - iGst;


                        cell1 = new PdfPCell(new Phrase(Convert.ToInt32(OriginalAmount).ToString(), fontH1));
                        Total_OriginalAmt += OriginalAmount;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToInt32(cGst).ToString(), fontH1));
                        Total_Cgst += cGst;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToInt32(sGst).ToString(), fontH1));
                        Total_Sgst += sGst;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToInt32(iGst).ToString(), fontH1));
                        Total_Igst += iGst;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToInt32(CreditTogiven).ToString(), fontH1));
                        TotalCredit += CreditTogiven;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        if (c.BILL_RecordType_var != null)
                        {
                            if (Convert.ToString(c.BILL_RecordType_var) == "---")
                                recType = "CT";
                            else
                                recType = Convert.ToString(c.BILL_RecordType_var);
                        }
                        else
                        {
                            recType = "";
                        }
                        testName = obj.getInwardTypeName(recType);
                        cell1 = new PdfPCell(new Phrase(testName.Replace("Testing", ""), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        SrNo++;
                    }
                }
                cell1 = new PdfPCell(new Phrase("Total Amount", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                cell1.Colspan = 2;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(Convert.ToInt32(Total_OriginalAmt).ToString(), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(Convert.ToInt32(Total_Cgst).ToString(), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(Convert.ToInt32(Total_Sgst).ToString(), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(Convert.ToInt32(Total_Igst).ToString(), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(Convert.ToInt32(TotalCredit).ToString(), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);
                pdfDoc.Add(table1);

                #endregion

                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                pdfDoc.Add(new Paragraph(" ", fontH1));
                pdfDoc.Add(new Paragraph("For Durocrete Engineering Services Pvt. Ltd", fontH1));
                pdfDoc.Add(new Paragraph(" ", fontH1));
                pdfDoc.Add(new Paragraph("Authorized Sign", fontH1));
                pdfDoc.Close();
                string pdfPath = @Subfoldername1 + "/" + fileName;
                DownloadReport(fileName, pdfPath);
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void AdvanceReceipt_PDF_GST(string receiptNo)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                Document pdfDoc = new Document(PageSize.A4, 55f, 45f, 100f, 0f);
                var fileName = "AdvanceReceipt" + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/CashReceipt";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);
                table1.WidthPercentage = 90;
                pdfDoc.Open();

                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.UNDEFINED);

                var AdvReceipt = dc.Advance_View(null, null, Convert.ToInt32(receiptNo), "", true).ToList();

                int payType = 0;
                PdfPTable MaindataTable = new PdfPTable(4);
                MaindataTable.WidthPercentage = 100;
                MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = fontTitle1;
                paragraph.Add("Receipt Voucher");
                pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = fontTitle;
                if (AdvReceipt.Count > 0)
                {
                    if (Convert.ToInt32(AdvReceipt.FirstOrDefault().PaymentMode) == 1)
                    {
                        paragraph.Add("By Cheque");
                        payType = 1;
                    }
                    else
                        paragraph.Add("By Cash");
                }
                pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = fontTitle;
                paragraph.Add("Tax Invoice Under Section 31(3) of CGST ACT 2017");
                paragraph.SpacingAfter = 25;
                pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                PdfPCell Cust_Namecell;

                #region data
                string chqNo = "", chqDt = "", chqBank = "", chqBranch = "";

                float[] widths = new float[] { 15f, 55f, 15f, 15f };
                MaindataTable.SetWidths(widths);
                string AdjustAmt = string.Empty, stateCode = "-", gstNo = "NA", clName = "", address = "", state = "", stateName = "";
                string BillNo = string.Empty;
                foreach (var adv in AdvReceipt)
                {
                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Details : ", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 4;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Name ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": Durocrete Engineering Services Pvt Ltd.", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("State ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": Maharashtra", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("GSTIN No ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": 27AABCD2992C2ZS", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Recipient Details : ", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 4;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Receipt No. ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": " + adv.ReceiptNo, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Date ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (adv.ReceiptDate != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(": " + Convert.ToDateTime(adv.ReceiptDate).ToString("dd-MMM-yyyy"), fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(": -", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Colspan = 2;
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    string clNm = Convert.ToString(adv.LedgerName_Description).Replace("Advance From ", "");
                    var rslt = dc.Client_View(0, 0, clNm, "").ToList();
                    if (rslt.Count > 0)
                    {
                        foreach (var result in rslt)
                        {
                            clName = Convert.ToString(result.CL_Name_var);
                            address = Convert.ToString(result.CL_OfficeAddress_var);
                            state = Convert.ToString(result.CL_State_var);
                            stateName = Convert.ToString(result.CL_State_var);
                        }
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Name ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (clName != "")
                        Cust_Namecell = new PdfPCell(new Phrase(": " + Convert.ToString(clName), fontH1));
                    else
                        Cust_Namecell = new PdfPCell(new Phrase(": " + Convert.ToString(adv.LedgerName_Description).Replace("Advance From ", ""), fontH1));

                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Address ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (address != "")
                        Cust_Namecell = new PdfPCell(new Phrase(": " + Convert.ToString(address), fontH1));
                    else
                    {
                        if (Convert.ToString(adv.clientAddress) != "")
                            Cust_Namecell = new PdfPCell(new Phrase(": " + Convert.ToString(adv.clientAddress), fontH1));
                        else
                            Cust_Namecell = new PdfPCell(new Phrase(": -", fontH1));

                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 3;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("State ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (state != "")
                        Cust_Namecell = new PdfPCell(new Phrase(": " + Convert.ToString(state), fontH1));
                    else
                    {
                        if (Convert.ToString(adv.CL_State_var) != "")
                            Cust_Namecell = new PdfPCell(new Phrase(": " + Convert.ToString(adv.CL_State_var), fontH1));
                        else
                            Cust_Namecell = new PdfPCell(new Phrase(": -", fontH1));

                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (stateName == "")
                    {
                        var st = dc.States_View_Code(Convert.ToString(adv.CL_State_var)).ToList();
                        if (st.Count > 0)
                        {
                            stateCode = st.FirstOrDefault().State_code.ToString();
                        }
                    }
                    else
                    {
                        var st = dc.States_View_Code(Convert.ToString(stateName)).ToList();
                        if (st.Count > 0)
                        {
                            stateCode = st.FirstOrDefault().State_code.ToString();
                        }
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("State Code ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": " + stateCode, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("GSTIN No ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (Convert.ToString(adv.CL_GstNo_var) != "" && Convert.ToString(adv.CL_GstNo_var) != null)
                        Cust_Namecell = new PdfPCell(new Phrase(": " + Convert.ToString(adv.CL_GstNo_var), fontH1));
                    else
                        Cust_Namecell = new PdfPCell(new Phrase(": " + gstNo, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    Cust_Namecell = new PdfPCell(new Phrase("Amount Received ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": Rs. " + (Math.Abs(Convert.ToDecimal(adv.ReceiptAmount)).ToString("0.00")) + "/-", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("(" + CnvtAmttoWords(Convert.ToInt32(Math.Abs(Convert.ToDecimal(adv.ReceiptAmount)))) + " " + "Only" + ")", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (Convert.ToString(adv.ChqDetail) != "" && Convert.ToString(adv.ChqDetail) != null)
                    {
                        string[] chkDtl = Convert.ToString(adv.ChqDetail).Split('|');
                        chqNo = Convert.ToString(chkDtl[0]);
                        chqBank = Convert.ToString(chkDtl[1]);
                        chqBranch = Convert.ToString(chkDtl[3]);
                        if (chkDtl[2] != null)
                        {
                            chqDt = Convert.ToDateTime(chkDtl[2]).ToString("dd-MMM-yyyy");
                        }
                    }
                    AdjustAmt = (Math.Abs(Convert.ToDecimal(adv.ReceiptAmount))).ToString("0.00");
                    BillNo = "On A/c";
                    break;
                }
                pdfDoc.Add(MaindataTable);

                #endregion
                PdfPCell cell1;

                #region
                if (payType == 1)
                {
                    pdfDoc.Add(new Paragraph(" Cheque Details :", fontH2));
                    table1 = new PdfPTable(4);
                    table1.WidthPercentage = 100;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SpacingBefore = 10;
                    table1.SpacingAfter = 5;
                    table1.SetTotalWidth(new float[] { 15f, 15f, 40f, 35f });
                    string[] header1 = { "Cheque No", "Cheque Date", "Bank Name", "Branch Name" };
                    for (int h = 0; h < header1.Count(); h++)
                    {
                        cell1 = new PdfPCell(new Phrase(header1[h], fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    cell1 = new PdfPCell(new Phrase(chqNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(chqDt, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(chqBank, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(chqBranch, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    pdfDoc.Add(table1);
                }
                #endregion

                //pdfDoc.Add(Chunk.NEWLINE);
                pdfDoc.Add(new Paragraph(" Payment Against :", fontH2));

                #region tbldata

                table1 = new PdfPTable(2);
                table1.WidthPercentage = 50;
                table1.SpacingBefore = 10;
                table1.SpacingAfter = 50;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SetTotalWidth(new float[] { 15f, 15f });
                string[] header = { "Bill/Debit Note", "Amount" };
                for (int h = 0; h < header.Count(); h++)
                {
                    cell1 = new PdfPCell(new Phrase(header[h], fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }

                if (BillNo != string.Empty)
                {
                    cell1 = new PdfPCell(new Phrase(BillNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                else
                {
                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                if (AdjustAmt != string.Empty)
                {
                    cell1 = new PdfPCell(new Phrase(AdjustAmt, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                else
                {
                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                pdfDoc.Add(table1);

                #endregion

                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                pdfDoc.Add(new Paragraph(" ", fontH1));
                pdfDoc.Add(new Paragraph(" ", fontH1));
                pdfDoc.Add(new Paragraph("Received By", fontH1));
                pdfDoc.Add(new Paragraph(" ", fontH1));
                pdfDoc.Add(new Paragraph(" ", fontH1));
                pdfDoc.Add(new Paragraph("CIN - U28939PN1999PTC014212", fontH1));
                pdfDoc.Add(new Paragraph("REGD.Add-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                string pdfPath = @Subfoldername1 + "/" + fileName;
                DownloadReport(fileName, pdfPath);
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }



        }
        public void CashReceipt_PDF(int RecptNo)
        {
            try
            {
                Document pdfDoc = new Document(PageSize.A4, 55f, 45f, 100f, 0f);
                var fileName = "CashReceipt" + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/CashReceipt";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(4);
                MaindataTable.WidthPercentage = 100;
                MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                int payType = 0;
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.UNDEFINED);

                Paragraph paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = fontTitle1;
                paragraph.Add("Receipt");
                pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = fontTitle;
                var CASH_Receipt = dc.CashReportView(0, RecptNo).ToList();
                if (CASH_Receipt.Count > 0)
                {
                    if (Convert.ToInt32(CASH_Receipt.FirstOrDefault().Cash_PaymentType_bit) == 1)
                    {
                        paragraph.Add("By Cheque");
                        payType = 1;
                    }
                    else
                        paragraph.Add("By Cash");
                }
                pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                #region data

                float[] widths = new float[] { 30f, 55f, 10f, 15f };
                MaindataTable.SetWidths(widths);
                string AdjustAmt = string.Empty;
                string BillNo = string.Empty, chqNo = "", chqDt = "", chqBank = "", chqBranch = "";
                int clientId = 0;//1 for cheque
                foreach (var cash in CASH_Receipt)
                {
                    PdfPCell Cust_Namecell = new PdfPCell(new Phrase("Receipt No. ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": " + cash.CashDetail_ReceiptNo, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (cash.CashDetail_Date_date != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(": " + Convert.ToDateTime(cash.CashDetail_Date_date).ToString("dd-MMM-yyyy"), fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(": -", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Received with thank's from Shri./ M/s ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": " + Convert.ToString(cash.CL_Name_var), fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Address ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": " + Convert.ToString(cash.CL_OfficeAddress_var), fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 3;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Amount Received ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase(": " + (Math.Abs(Convert.ToDecimal(cash.CashDetail_Amount_money)).ToString("0.00")), fontH1));
                    Cust_Namecell = new PdfPCell(new Phrase(": " + (Math.Abs(Convert.ToDecimal(cash.Cash_Amount_num)).ToString("0.00")), fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 3;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("(" + CnvtAmttoWords(Convert.ToInt32(Math.Abs(Convert.ToDecimal(cash.CashDetail_Amount_money)))) + " " + "Only" + ")", fontH1));
                    Cust_Namecell = new PdfPCell(new Phrase("  (" + CnvtAmttoWords(Convert.ToInt32(Math.Abs(Convert.ToDecimal(cash.Cash_Amount_num)))) + " " + "Only" + ")", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    //if (Convert.ToString(cash.CashDetail_Amount_money) != string.Empty)
                    //{
                    //    AdjustAmt = (Math.Abs(Convert.ToDecimal(cash.CashDetail_Amount_money))).ToString("0.00");
                    //}
                    //if (Convert.ToString(cash.CashDetail_BillNo_int) != string.Empty)
                    //{
                    //    BillNo = cash.CashDetail_BillNo_int;
                    //}
                    chqNo = Convert.ToString(cash.Cash_ChequeNo_int);
                    chqBank = Convert.ToString(cash.Cash_BankName_var);
                    chqBranch = Convert.ToString(cash.Cash_Branch_var);
                    if (cash.Cash_ChqDate_date != null)
                    {
                        chqDt = Convert.ToDateTime(cash.Cash_ChqDate_date).ToString("dd-MMM-yyyy");
                    }

                    clientId = Convert.ToInt32(cash.Cash_ClientId_int);
                    break;
                }
                pdfDoc.Add(MaindataTable);
                PdfPCell cell1;
                #region
                if (payType == 1)
                {
                    pdfDoc.Add(new Paragraph(" Cheque Details :", fontH2));
                    table1 = new PdfPTable(4);
                    table1.WidthPercentage = 100;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SpacingBefore = 10;
                    table1.SpacingAfter = 5;
                    table1.SetTotalWidth(new float[] { 15f, 15f, 40f, 35f });
                    string[] header1 = { "Cheque No", "Cheque Date", "Bank Name", "Branch Name" };
                    for (int h = 0; h < header1.Count(); h++)
                    {
                        cell1 = new PdfPCell(new Phrase(header1[h], fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    cell1 = new PdfPCell(new Phrase(chqNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(chqDt, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(chqBank, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(chqBranch, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    pdfDoc.Add(table1);
                }
                #endregion
                #endregion
                // pdfDoc.Add(Chunk.NEWLINE);
                pdfDoc.Add(new Paragraph(" Payment Against :", fontH2));
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(new Paragraph(" ", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;

                #region tbldata


                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(table1);
                table1 = new PdfPTable(2);
                table1.WidthPercentage = 50;
                table1.SpacingBefore = 10;
                table1.SpacingAfter = 50;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SetTotalWidth(new float[] { 15f, 15f });
                string[] header = { " Bill/Debit Note", "Amount" };
                for (int h = 0; h < header.Count(); h++)
                {
                    cell1 = new PdfPCell(new Phrase(header[h], fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                var receipt = dc.CashDetail_View_Receipt(RecptNo, "", clientId);
                foreach (var rcpt in receipt)
                {
                    if (rcpt.CashDetail_BillNo_int != "")
                    {
                        cell1 = new PdfPCell(new Phrase(rcpt.CashDetail_BillNo_int, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else
                    {
                        cell1 = new PdfPCell(new Phrase("On A/c", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    cell1 = new PdfPCell(new Phrase(Math.Abs(Convert.ToDecimal(rcpt.CashDetail_Amount_money)).ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                pdfDoc.Add(table1);

                #endregion



                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                pdfDoc.Add(new Paragraph(" ", fontH1));
                pdfDoc.Add(new Paragraph(" ", fontH1));
                pdfDoc.Add(new Paragraph("Received By", fontH1));
                pdfDoc.Add(new Paragraph(" ", fontH1));
                pdfDoc.Add(new Paragraph(" ", fontH1));
                pdfDoc.Add(new Paragraph("CIN - U28939PN1999PTC014212", fontH1));
                pdfDoc.Add(new Paragraph("REGD.Add-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                string pdfPath = @Subfoldername1 + "/" + fileName;
                DownloadReport(fileName, pdfPath);
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        #endregion

        public string CnvtAmttoWords(int number)
        {
            if (number == 0)
                return "Zero";
            if (number < 0)
                return "minus " + CnvtAmttoWords(Math.Abs(number));
            string words = "";
            if ((number / 10000000) > 0)
            {
                words += CnvtAmttoWords(number / 10000000) + " Crore ";
                number %= 10000000;
            }
            if ((number / 100000) > 0)
            {
                words += CnvtAmttoWords(number / 100000) + " Lakh ";
                number %= 100000;
            }
            if ((number / 1000) > 0)
            {
                words += CnvtAmttoWords(number / 1000) + " Thousand ";
                number %= 1000;
            }
            if ((number / 100) > 0)
            {
                words += CnvtAmttoWords(number / 100) + " Hundred ";
                number %= 100;
            }
            if (number > 0)
            {
                if (words != "")
                    words += "and ";
                var unitsMap = new[] { "Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen" };
                var tensMap = new[] { "Zero", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety" };

                if (number < 20)
                    words += unitsMap[number];
                else
                {
                    words += tensMap[number / 10];
                    if ((number % 10) > 0)
                        words += " " + unitsMap[number % 10];
                }
            }
            return words;
        }
        public static void CombineMultiplePDFs(string[] fileNames, string outFile)
        {
            // step 1: creation of a document-object
            Document document = new Document();
            //create newFileStream object which will be disposed at the end
            using (FileStream newFileStream = new FileStream(outFile, FileMode.Create))
            {
                // step 2: we create a writer that listens to the document
                PdfCopy writer = new PdfCopy(document, newFileStream);
                if (writer == null)
                {
                    return;
                }

                // step 3: we open the document
                document.Open();

                foreach (string fileName in fileNames)
                {
                    // we create a reader for a certain document
                    PdfReader reader = new PdfReader(fileName);
                    reader.ConsolidateNamedDestinations();

                    // step 4: we add content
                    for (int i = 1; i <= reader.NumberOfPages; i++)
                    {
                        PdfImportedPage page = writer.GetImportedPage(reader, i);
                        writer.AddPage(page);
                    }

                    PRAcroForm form = reader.AcroForm;
                    if (form != null)
                    {
                        writer.CopyAcroForm(reader);
                    }

                    reader.Close();
                }

                // step 5: we close the document and writer
                writer.Close();
                document.Close();
            }//disposes the newFileStream object
        }

        public string compl_to_grade(string average, string brickType) //brick
        {
            string tGrade = "---";
            double avg = 0;
            if (average != "***")
            {
                avg = Convert.ToDouble(average);

                if (avg <= 3.5 ||
                        (avg > 35 && brickType.Contains("burnt clay") == true) ||
                        (avg > 30 && brickType.Contains("fuel ash") == true))
                    tGrade = "---";
                else if (avg >= 3.5 && avg < 5)
                    tGrade = "3.5";
                else if (avg >= 5 && avg < 7.5)
                    tGrade = "5";
                else if (avg >= 7.5 && avg < 10)
                    tGrade = "7.5";
                else if (avg >= 10 && avg < 12.5)
                    tGrade = "10";
                else if (avg >= 12.5 && avg < 15)
                    tGrade = "12.5";
                else if (avg >= 15 && avg < 17.5)
                    tGrade = "15";
                else if (avg >= 17.5 && avg < 20)
                    tGrade = "17.5";
                else if (avg >= 20 && avg < 25)
                    tGrade = "20";
                else if (avg >= 25 && avg < 30)
                    tGrade = "25";
                else if (avg >= 30 && avg < 35)
                    tGrade = "30";
                else if (avg == 35)
                    tGrade = "35";

            }
            return tGrade;
        }

        public string getTestNameToDisplay(string testName) // cch
        {
            if (testName.Contains("SiO2") == true)
                testName = testName.Replace("SiO2", "SiO<Sub>2</Sub>");
            if (testName.Contains("SO3") == true)
                testName = testName.Replace("SO3", "SO<Sub>3</Sub>");
            if (testName.Contains("Al2O3") == true)
                testName = testName.Replace("Al2O3", "Al<Sub>2</Sub>O<Sub>3</Sub>");
            if (testName.Contains("Fe2O3") == true)
                testName = testName.Replace("Fe2O3", "Fe<Sub>2</Sub>O<Sub>3</Sub>");
            if (testName.Contains("C3A") == true)
                testName = testName.Replace("C3A", "C<Sub>3</Sub>A");
            if (testName.Contains("CaCO3") == true)
                testName = testName.Replace("CaCO3", "CaCO<Sub>3</Sub>");
            if (testName.Contains("SO4") == true)
                testName = testName.Replace("SO4", "SO<Sub>4</Sub>");
            if (testName.Contains("Alkalinity") == true)
                testName = testName + " (ml of 0.02N H<Sub>2</Sub>SO<Sub>4</Sub> Consumed to neutralize 100ml of water using mixed indicator)";
            if (testName.Contains("Acidity") == true)
                testName = testName + " (ml of 0.02N NaOH Consumed to neutralize 100ml of water using phenolphthalein as indicator)";
            return testName;
        }

        public string compl_notes_hollowBlock(string average, string age, decimal minStrength) //Solid
        {
            #region comp

            int flgCompl = 0, Age = 0;
            string tGrade = "", Complaince_Note = "";
            double avg = 0;
            double indCompStr = 0;
            if (average != "***")
            {
                avg = Convert.ToDouble(average);
            }

            if (age != "NA")
            {
                Age = Convert.ToInt32(age);
            }
            if (average != "***" && Age >= 28)
            {
                if (avg >= 3.5)
                {
                    flgCompl = 1;

                    if (avg >= 15)
                    {
                        indCompStr = 12;
                        tGrade = "A(15.0)";
                    }
                    else if (avg >= 12.5)
                    {
                        indCompStr = 10;
                        tGrade = "A(12.5)";
                    }
                    else if (avg >= 10)
                    {
                        indCompStr = 8;
                        tGrade = "A(10)";
                    }
                    else if (avg >= 8.5)
                    {
                        indCompStr = 7;
                        tGrade = "A(8.5)";
                    }
                    else if (avg >= 7)
                    {
                        indCompStr = 5.6;
                        tGrade = "A(7.0)";
                    }
                    else if (avg >= 5.5)
                    {
                        indCompStr = 4.4;
                        tGrade = "A(5.5)";
                    }

                    else if (avg >= 4.5)
                    {
                        indCompStr = 3.6;
                        tGrade = "A(4.5)";
                    }
                    else if (avg >= 3.5)
                    {
                        indCompStr = 2.8;
                        tGrade = "A(3.5)";
                    }
                    else
                    {
                        indCompStr = 0;
                        tGrade = "";
                        flgCompl = 3;
                    }
                }
            }
            else
            {
                flgCompl = 3;
            }

            if (flgCompl > 0)
            {
                if (flgCompl == 1 && Convert.ToDouble(minStrength) < indCompStr && indCompStr > 0)
                {
                    flgCompl = 2;
                }
                if (flgCompl == 1)
                {
                    Complaince_Note = "Tested sample comply to the " + tGrade + " grade of Solid Masonary Units.";
                }
                else if (flgCompl == 2)
                {
                    Complaince_Note = "Tested sample does not comply to the " + tGrade + " grade of Solid Masonary Units.";
                }
                else if (flgCompl == 3)
                {
                    Complaince_Note = "Tested sample does not comply to any grade of Masonary Units";
                }
            }

            #endregion

            return Complaince_Note;
        }

        public string compl_notes_solidBlock(string average, decimal minStrength) //Solid
        {
            #region comp

            int flgCompl = 0;
            string tGrade = "", Complaince_Note = "";
            double avg = 0;
            double indCompStr = 0;
            if (average != "***")
            {
                avg = Convert.ToDouble(average);

                if (avg > 4.0 && avg < 5.0)
                {
                    flgCompl = 1;
                    indCompStr = 3.20;
                    tGrade = "C(4.0)";
                }
                else if (avg > 5.0)
                {
                    flgCompl = 1;
                    indCompStr = 4.0;
                    tGrade = "C(5.0)";
                }
                else
                {
                    indCompStr = 0;
                    tGrade = "";
                    flgCompl = 3;
                }

            }
            else
            {
                flgCompl = 3;
            }

            if (flgCompl > 0)
            {
                if (flgCompl == 1 && Convert.ToDouble(minStrength) < indCompStr && indCompStr > 0)
                {
                    flgCompl = 2;
                }
                if (flgCompl == 1)
                {
                    Complaince_Note = "Tested sample confirms to the " + tGrade + " grade of  Masonary Units.";
                }
                else if (flgCompl == 2)
                {
                    Complaince_Note = "Tested sample does not comply to the " + tGrade + " grade of  Masonary Units.";
                }
                else if (flgCompl == 3)
                {
                    Complaince_Note = "Tested sample does not comply to any grade of Masonary Units";
                }
            }

            #endregion

            return Complaince_Note;
        }

        #region MF
        string FormatNumber<T>(T number, int maxDecimals = 4) //MF - Moisture correction
        {
            string x = Regex.Replace(String.Format("{0:n" + maxDecimals + "}", number), @"[" + System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator + "]?0+$", "");
            if (x == "")
                x = "0";
            return x;
        }
        protected DataTable LoadAllInAGGTData(string ReferenceNo, int TrialId)
        {
            DataTable dtTable = new DataTable();
            DataRow drRow = null;
            dtTable.Columns.Add(new DataColumn("SieveSize", typeof(string)));
            dtTable.Columns.Add(new DataColumn("NaturalSand", typeof(string)));
            dtTable.Columns.Add(new DataColumn("CrushedSand", typeof(string)));
            dtTable.Columns.Add(new DataColumn("StoneDust", typeof(string)));
            dtTable.Columns.Add(new DataColumn("Grit", typeof(string)));
            dtTable.Columns.Add(new DataColumn("10mm", typeof(string)));
            dtTable.Columns.Add(new DataColumn("20mm", typeof(string)));
            dtTable.Columns.Add(new DataColumn("40mm", typeof(string)));
            dtTable.Columns.Add(new DataColumn("MixAggregate", typeof(string)));
            dtTable.Columns.Add(new DataColumn("NaturalSandPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("CrushedSandPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("StoneDustPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("GritPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("10mmPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("20mmPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("40mmPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("MixAggregatePer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("CombinedPassing", typeof(string)));
            dtTable.Columns.Add(new DataColumn("Passing(IS:383)", typeof(string)));

            //for (int i = 1; i <= 16; i++)
            //{
            //    grdAllInAGGT.Columns[i].Visible = false;
            //}
            string[] strSieveSize = { "40 mm", "25 mm", "20 mm", "16 mm", "12.5 mm", "10 mm", "4.75 mm", "2.36 mm", "1.18 mm", "600 micron", "300 micron", "150 micron", "75 micron", "Pan" };
            decimal[,] strValues = new decimal[14, 17];
            string[] strHeaderText = new string[19];
            var data = dc.TrialDetail_View(ReferenceNo, TrialId);
            foreach (var t in data)
            {
                string strMaterialName = t.TrialDetail_MaterialName;
                //for (int i = 0; i <= grdTrail.Rows.Count - 1; i++)
                //{
                //Label lbl_MaterialName = (Label)grdTrail.Rows[i].Cells[0].FindControl("lbl_MaterialName");
                if ((strMaterialName.Contains("Natural Sand") == true || strMaterialName.Contains("Crushed Sand") == true ||
                    strMaterialName.Contains("Stone Dust") == true || strMaterialName.Contains("Grit") == true ||
                        strMaterialName.Contains("Mix Aggregate") == true || strMaterialName.Contains("10 mm") == true ||
                        strMaterialName.Contains("20 mm") == true || strMaterialName.Contains("40 mm") == true))
                {


                    int MaterialId = Convert.ToInt32(t.Material_Id);
                    double Trail = 0;
                    double SpGrav = 0;
                    double volume = 0;
                    bool flgFound = false;
                    if (double.TryParse(t.TrialDetail_Weight.ToString(), out Trail) &&
                            double.TryParse(t.TrialDetail_SpecificGravity.ToString(), out SpGrav) && double.TryParse(t.TrialDetail_Volume.ToString(), out volume))
                    {
                        if (strMaterialName.Contains("Natural Sand") == true)
                        {

                            strHeaderText[9] = "Natural Sand( " + Trail + " %)";
                            var aggtTest = dc.AggregateAllTestView(ReferenceNo, MaterialId, "AGGTSA");
                            foreach (var agtest in aggtTest)
                            {
                                for (int j = 0; j < 14; j++)
                                {
                                    if (strSieveSize[j] == agtest.AGGTSA_SeiveSize_var)
                                    {
                                        strValues[j, 0] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec);
                                        strValues[j, 8] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                        flgFound = true;
                                        break;
                                    }
                                    else if (flgFound == false && strValues[j, 0] == 0)
                                    {
                                        strValues[j, 0] = 100;
                                        strValues[j, 8] = (strValues[j, 0] * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                    }
                                }
                            }
                        }
                        else if (strMaterialName.Contains("Crushed Sand") == true)
                        {
                            //grdAllInAGGT.Columns[10].HeaderText = "Crushed Sand( " + Trail + " %)";
                            //grdAllInAGGT.Columns[2].Visible = true;
                            //grdAllInAGGT.Columns[10].Visible = true;
                            strHeaderText[10] = "Crushed Sand( " + Trail + " %)";
                            var aggtTest = dc.AggregateAllTestView(ReferenceNo, MaterialId, "AGGTSA");
                            foreach (var agtest in aggtTest)
                            {
                                for (int j = 0; j < 14; j++)
                                {
                                    if (strSieveSize[j] == agtest.AGGTSA_SeiveSize_var)
                                    {
                                        strValues[j, 1] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec);
                                        strValues[j, 9] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                        flgFound = true;
                                        break;
                                    }
                                    else if (flgFound == false && strValues[j, 1] == 0)
                                    {
                                        strValues[j, 1] = 100;
                                        strValues[j, 9] = (strValues[j, 1] * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                    }
                                }
                            }
                        }
                        else if (strMaterialName.Contains("Stone Dust") == true)
                        {
                            //grdAllInAGGT.Columns[11].HeaderText = "Stone Dust( " + Trail + " %)";
                            //grdAllInAGGT.Columns[3].Visible = true;
                            //grdAllInAGGT.Columns[11].Visible = true;
                            strHeaderText[11] = "Stone Dust( " + Trail + " %)";
                            var aggtTest = dc.AggregateAllTestView(ReferenceNo, MaterialId, "AGGTSA");
                            foreach (var agtest in aggtTest)
                            {
                                for (int j = 0; j < 14; j++)
                                {
                                    if (strSieveSize[j] == agtest.AGGTSA_SeiveSize_var)
                                    {
                                        strValues[j, 2] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec);
                                        strValues[j, 10] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                        flgFound = true;
                                        break;
                                    }
                                    else if (flgFound == false && strValues[j, 2] == 0)
                                    {
                                        strValues[j, 2] = 100;
                                        strValues[j, 10] = (strValues[j, 2] * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                    }
                                }
                            }
                        }
                        else if (strMaterialName.Contains("Grit") == true)
                        {
                            //grdAllInAGGT.Columns[12].HeaderText = "Grit( " + Trail + " %)";
                            //grdAllInAGGT.Columns[4].Visible = true;
                            //grdAllInAGGT.Columns[12].Visible = true;
                            strHeaderText[12] = "Grit( " + Trail + " %)";
                            var aggtTest = dc.AggregateAllTestView(ReferenceNo, MaterialId, "AGGTSA");
                            foreach (var agtest in aggtTest)
                            {
                                for (int j = 0; j < 14; j++)
                                {
                                    if (strSieveSize[j] == agtest.AGGTSA_SeiveSize_var)
                                    {
                                        strValues[j, 3] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec);
                                        strValues[j, 11] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                        flgFound = true;
                                        break;
                                    }
                                    else if (flgFound == false && strValues[j, 3] == 0)
                                    {
                                        strValues[j, 3] = 100;
                                        strValues[j, 11] = (strValues[j, 3] * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                    }
                                }
                            }
                        }
                        else if (strMaterialName.Contains("10 mm") == true)
                        {
                            //grdAllInAGGT.Columns[13].HeaderText = "10 mm( " + Trail + " %)";
                            //grdAllInAGGT.Columns[5].Visible = true;
                            //grdAllInAGGT.Columns[13].Visible = true;
                            strHeaderText[13] = "10 mm( " + Trail + " %)";
                            var aggtTest = dc.AggregateAllTestView(ReferenceNo, MaterialId, "AGGTSA");
                            foreach (var agtest in aggtTest)
                            {
                                for (int j = 0; j < 14; j++)
                                {
                                    if (strSieveSize[j] == agtest.AGGTSA_SeiveSize_var)
                                    {
                                        strValues[j, 4] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec);
                                        strValues[j, 12] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                        flgFound = true;
                                        break;
                                    }
                                    else if (flgFound == false && strValues[j, 4] == 0)
                                    {
                                        strValues[j, 4] = 100;
                                        strValues[j, 12] = (strValues[j, 4] * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                    }
                                }
                            }
                        }
                        else if (strMaterialName.Contains("20 mm") == true)
                        {
                            //grdAllInAGGT.Columns[14].HeaderText = "20 mm( " + Trail + " %)";
                            //grdAllInAGGT.Columns[6].Visible = true;
                            //grdAllInAGGT.Columns[14].Visible = true;
                            strHeaderText[14] = "20 mm( " + Trail + " %)";
                            var aggtTest = dc.AggregateAllTestView(ReferenceNo, MaterialId, "AGGTSA");
                            foreach (var agtest in aggtTest)
                            {
                                for (int j = 0; j < 14; j++)
                                {
                                    if (strSieveSize[j] == agtest.AGGTSA_SeiveSize_var)
                                    {
                                        strValues[j, 5] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec);
                                        strValues[j, 13] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                        flgFound = true;
                                        break;
                                    }
                                    else if (flgFound == false && strValues[j, 5] == 0)
                                    {
                                        strValues[j, 5] = 100;
                                        strValues[j, 13] = (strValues[j, 5] * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                    }
                                }
                            }
                        }
                        else if (strMaterialName.Contains("40 mm") == true)
                        {
                            //grdAllInAGGT.Columns[15].HeaderText = "40 mm( " + Trail + " %)";
                            //grdAllInAGGT.Columns[7].Visible = true;
                            //grdAllInAGGT.Columns[15].Visible = true;
                            strHeaderText[15] = "40 mm( " + Trail + " %)";
                            var aggtTest = dc.AggregateAllTestView(ReferenceNo, MaterialId, "AGGTSA");
                            foreach (var agtest in aggtTest)
                            {
                                for (int j = 0; j < 14; j++)
                                {
                                    if (strSieveSize[j] == agtest.AGGTSA_SeiveSize_var)
                                    {
                                        strValues[j, 6] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec);
                                        strValues[j, 14] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                        flgFound = true;
                                        break;
                                    }
                                    else if (flgFound == false && strValues[j, 6] == 0)
                                    {
                                        strValues[j, 6] = 100;
                                        strValues[j, 14] = (strValues[j, 6] * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                    }
                                }
                            }
                        }
                        else if (strMaterialName.Contains("Mix Aggregate") == true)
                        {
                            //grdAllInAGGT.Columns[16].HeaderText = "Mix Aggregate( " + Trail + " %)";
                            //grdAllInAGGT.Columns[8].Visible = true;
                            //grdAllInAGGT.Columns[16].Visible = true;
                            strHeaderText[16] = "Mix Aggregate( " + Trail + " %)";
                            var aggtTest = dc.AggregateAllTestView(ReferenceNo, MaterialId, "AGGTSA");
                            foreach (var agtest in aggtTest)
                            {
                                for (int j = 0; j < 14; j++)
                                {
                                    if (strSieveSize[j] == agtest.AGGTSA_SeiveSize_var)
                                    {
                                        strValues[j, 7] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec);
                                        strValues[j, 15] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                        flgFound = true;
                                        break;
                                    }
                                    else if (flgFound == false && strValues[j, 7] == 0)
                                    {
                                        strValues[j, 7] = 100;
                                        strValues[j, 15] = (strValues[j, 7] * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                    }
                                }
                            }
                        }

                    }
                }
            }
            //
            for (int i = 0; i < 14; i++)
            {
                if (i == 0)
                {
                    drRow = dtTable.NewRow();
                    drRow["SieveSize"] = "Sieve Size";
                    if (strHeaderText[9] != "" && strHeaderText[9] != null)
                        drRow["NaturalSand"] = "Natural Sand";
                    if (strHeaderText[10] != "" && strHeaderText[10] != null)
                        drRow["CrushedSand"] = "Crushed Sand";
                    if (strHeaderText[11] != "" && strHeaderText[11] != null)
                        drRow["StoneDust"] = "Stone Dust";
                    if (strHeaderText[12] != "" && strHeaderText[12] != null)
                        drRow["Grit"] = "Grit";
                    if (strHeaderText[13] != "" && strHeaderText[13] != null)
                        drRow["10mm"] = "10 mm";
                    if (strHeaderText[14] != "" && strHeaderText[14] != null)
                        drRow["20mm"] = "20 mm";
                    if (strHeaderText[15] != "" && strHeaderText[15] != null)
                        drRow["40mm"] = "40 mm";
                    if (strHeaderText[16] != "" && strHeaderText[16] != null)
                        drRow["MixAggregate"] = "Mix Aggregate";

                    drRow["NaturalSandPer"] = strHeaderText[9];
                    drRow["CrushedSandPer"] = strHeaderText[10];
                    drRow["StoneDustPer"] = strHeaderText[11];
                    drRow["GritPer"] = strHeaderText[12];
                    drRow["10mmPer"] = strHeaderText[13];
                    drRow["20mmPer"] = strHeaderText[14];
                    drRow["40mmPer"] = strHeaderText[15];
                    drRow["MixAggregatePer"] = strHeaderText[16];

                    drRow["CombinedPassing"] = "% Combined Passing";
                    drRow["Passing(IS:383)"] = "% Passing(IS:383)";
                    dtTable.Rows.Add(drRow);
                }
                drRow = dtTable.NewRow();
                drRow["SieveSize"] = strSieveSize[i];
                drRow["NaturalSand"] = strValues[i, 0];
                drRow["CrushedSand"] = strValues[i, 1];
                drRow["StoneDust"] = strValues[i, 2];
                drRow["Grit"] = strValues[i, 3];
                drRow["10mm"] = strValues[i, 4];
                drRow["20mm"] = strValues[i, 5];
                drRow["40mm"] = strValues[i, 6];
                drRow["MixAggregate"] = strValues[i, 7];

                drRow["NaturalSandPer"] = strValues[i, 8].ToString("0.00");
                drRow["CrushedSandPer"] = strValues[i, 9].ToString("0.00");
                drRow["StoneDustPer"] = strValues[i, 10].ToString("0.00");
                drRow["GritPer"] = strValues[i, 11].ToString("0.00");
                drRow["10mmPer"] = strValues[i, 12].ToString("0.00");
                drRow["20mmPer"] = strValues[i, 13].ToString("0.00");
                drRow["40mmPer"] = strValues[i, 14].ToString("0.00");
                drRow["MixAggregatePer"] = strValues[i, 15].ToString("0.00");

                drRow["CombinedPassing"] = strValues[i, 16].ToString("0.00");
                if (strSieveSize[i] == "20 mm")
                    drRow["Passing(IS:383)"] = "95-100";
                else if (strSieveSize[i] == "4.75 mm")
                    drRow["Passing(IS:383)"] = "30-50";
                else if (strSieveSize[i] == "600 micron")
                    drRow["Passing(IS:383)"] = "10-35";
                else if (strSieveSize[i] == "150 micron")
                    drRow["Passing(IS:383)"] = "0-6";
                else
                    drRow["Passing(IS:383)"] = "---";
                dtTable.Rows.Add(drRow);

            }
            return dtTable;
        }
        protected DataTable LoadAllInAGGTData_Coarse(string ReferenceNo, int TrialId)
        {
            DataTable dtTable = new DataTable();
            DataRow drRow = null;
            dtTable.Columns.Add(new DataColumn("SieveSize", typeof(string)));
            dtTable.Columns.Add(new DataColumn("NaturalSand", typeof(string)));
            dtTable.Columns.Add(new DataColumn("CrushedSand", typeof(string)));
            dtTable.Columns.Add(new DataColumn("StoneDust", typeof(string)));
            dtTable.Columns.Add(new DataColumn("Grit", typeof(string)));
            dtTable.Columns.Add(new DataColumn("10mm", typeof(string)));
            dtTable.Columns.Add(new DataColumn("20mm", typeof(string)));
            dtTable.Columns.Add(new DataColumn("40mm", typeof(string)));
            dtTable.Columns.Add(new DataColumn("MixAggregate", typeof(string)));
            dtTable.Columns.Add(new DataColumn("NaturalSandPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("CrushedSandPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("StoneDustPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("GritPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("10mmPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("20mmPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("40mmPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("MixAggregatePer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("CombinedPassing", typeof(string)));
            dtTable.Columns.Add(new DataColumn("Passing(IS:383)", typeof(string)));

            string[] strSieveSize = { "40 mm", "25 mm", "20 mm", "16 mm", "12.5 mm", "10 mm", "4.75 mm", "2.36 mm", "1.18 mm", "600 micron", "300 micron", "150 micron", "75 micron", "Pan" };
            decimal[,] strValues = new decimal[14, 17];
            string[] strHeaderText = new string[19];
            string[] strSieveSizeFlag = new string[14];

            string[] strRefNo1 = ReferenceNo.Split('/');
            string[] strRefNo2 = strRefNo1[1].Split('-');
            string refNo = "";

            var data = dc.TrialDetail_View(ReferenceNo, TrialId);
            foreach (var t in data)
            {
                string strMaterialName = t.TrialDetail_MaterialName;
                if (strMaterialName.Contains("10 mm") == true ||
                        strMaterialName.Contains("20 mm") == true || strMaterialName.Contains("40 mm") == true)
                {

                    int MaterialId = Convert.ToInt32(t.Material_Id);
                    var aggtSieveSize = dc.AggregateAllTestView(ReferenceNo, MaterialId, "AGGTSA").ToList();

                    refNo = ReferenceNo;
                    if (aggtSieveSize.Count == 0 && refNo != strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1")
                    {
                        refNo = strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1";
                        var seiveAnalysis1 = dc.AggregateAllTestView(refNo, MaterialId, "AGGTSA").ToList();
                        aggtSieveSize = seiveAnalysis1;
                    }

                    for (int j = 0; j < 14; j++)
                    {
                        bool sizeFound = false;
                        foreach (var agtest in aggtSieveSize)
                        {
                            if (strSieveSize[j] == agtest.AGGTSA_SeiveSize_var)
                            {
                                sizeFound = true;
                                break;
                            }
                        }
                        if (sizeFound == false)
                        {
                            strSieveSize[j] = "";
                        }
                    }
                    double Trail = 0;
                    double SpGrav = 0;
                    double volume = 0;
                    bool flgFound = false;
                    if (double.TryParse(t.TrialDetail_Weight.ToString(), out Trail) &&
                            double.TryParse(t.TrialDetail_SpecificGravity.ToString(), out SpGrav) && double.TryParse(t.TrialDetail_Volume.ToString(), out volume))
                    {
                        if (strMaterialName.Contains("10 mm") == true)
                        {
                            strHeaderText[13] = "10 mm( " + Trail + " %)";
                            var aggtTest = dc.AggregateAllTestView(ReferenceNo, MaterialId, "AGGTSA").ToList();

                            refNo = ReferenceNo;
                            if (aggtTest.Count == 0 && refNo != strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1")
                            {
                                refNo = strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1";
                                var seiveAnalysis1 = dc.AggregateAllTestView(refNo, MaterialId, "AGGTSA").ToList();
                                aggtTest = seiveAnalysis1;
                            }

                            foreach (var agtest in aggtTest)
                            {
                                for (int j = 0; j < 14; j++)
                                {
                                    if (strSieveSize[j] == agtest.AGGTSA_SeiveSize_var)
                                    {
                                        strValues[j, 4] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec);
                                        strValues[j, 12] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                        flgFound = true;
                                        break;
                                    }
                                    else if (flgFound == false && strValues[j, 4] == 0 && strSieveSize[j] != "")
                                    {
                                        strValues[j, 4] = 100;
                                        strValues[j, 12] = (strValues[j, 4] * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                    }
                                }
                            }
                        }
                        else if (strMaterialName.Contains("20 mm") == true)
                        {
                            strHeaderText[14] = "20 mm( " + Trail + " %)";
                            var aggtTest = dc.AggregateAllTestView(ReferenceNo, MaterialId, "AGGTSA").ToList();

                            refNo = ReferenceNo;
                            if (aggtTest.Count == 0 && refNo != strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1")
                            {
                                refNo = strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1";
                                var seiveAnalysis1 = dc.AggregateAllTestView(refNo, MaterialId, "AGGTSA").ToList();
                                aggtTest = seiveAnalysis1;
                            }

                            foreach (var agtest in aggtTest)
                            {
                                for (int j = 0; j < 14; j++)
                                {
                                    if (strSieveSize[j] == agtest.AGGTSA_SeiveSize_var)
                                    {
                                        strValues[j, 5] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec);
                                        strValues[j, 13] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                        flgFound = true;
                                        break;
                                    }
                                    else if (flgFound == false && strValues[j, 5] == 0 && strSieveSize[j] != "")
                                    {
                                        strValues[j, 5] = 100;
                                        strValues[j, 13] = (strValues[j, 5] * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                    }
                                }
                            }
                        }
                        else if (strMaterialName.Contains("40 mm") == true)
                        {
                            strHeaderText[15] = "40 mm( " + Trail + " %)";
                            var aggtTest = dc.AggregateAllTestView(ReferenceNo, MaterialId, "AGGTSA").ToList();

                            refNo = ReferenceNo;
                            if (aggtTest.Count == 0 && refNo != strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1")
                            {
                                refNo = strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1";
                                var seiveAnalysis1 = dc.AggregateAllTestView(refNo, MaterialId, "AGGTSA").ToList();
                                aggtTest = seiveAnalysis1;
                            }

                            foreach (var agtest in aggtTest)
                            {
                                for (int j = 0; j < 14; j++)
                                {
                                    if (strSieveSize[j] == agtest.AGGTSA_SeiveSize_var)
                                    {
                                        strValues[j, 6] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec);
                                        strValues[j, 14] = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                        flgFound = true;
                                        break;
                                    }
                                    else if (flgFound == false && strValues[j, 6] == 0 && strSieveSize[j] != "")
                                    {
                                        strValues[j, 6] = 100;
                                        strValues[j, 14] = (strValues[j, 6] * Convert.ToDecimal(Trail)) / Convert.ToDecimal(100);
                                        strValues[j, 16] = strValues[j, 9] + strValues[j, 10] + strValues[j, 11] + strValues[j, 12] + strValues[j, 13] + strValues[j, 14] + strValues[j, 15];
                                    }
                                }
                            }
                        }

                    }
                }
            }
            //
            for (int i = 0; i < 14; i++)
            {
                if (i == 0)
                {
                    drRow = dtTable.NewRow();
                    drRow["SieveSize"] = "Sieve Size";
                    if (strHeaderText[13] != "" && strHeaderText[13] != null)
                        drRow["10mm"] = "10 mm";
                    if (strHeaderText[14] != "" && strHeaderText[14] != null)
                        drRow["20mm"] = "20 mm";
                    if (strHeaderText[15] != "" && strHeaderText[15] != null)
                        drRow["40mm"] = "40 mm";

                    drRow["10mmPer"] = strHeaderText[13];
                    drRow["20mmPer"] = strHeaderText[14];
                    drRow["40mmPer"] = strHeaderText[15];

                    drRow["CombinedPassing"] = "% Combined Passing";
                    drRow["Passing(IS:383)"] = "% Passing(IS:383)";
                    dtTable.Rows.Add(drRow);
                }
                if (strSieveSize[i] != "")
                {
                    drRow = dtTable.NewRow();
                    drRow["SieveSize"] = strSieveSize[i];
                    drRow["10mm"] = strValues[i, 4];
                    drRow["20mm"] = strValues[i, 5];
                    drRow["40mm"] = strValues[i, 6];
                    drRow["10mmPer"] = strValues[i, 12].ToString("0.00");
                    drRow["20mmPer"] = strValues[i, 13].ToString("0.00");
                    drRow["40mmPer"] = strValues[i, 14].ToString("0.00");

                    drRow["CombinedPassing"] = strValues[i, 16].ToString("0.00");
                    if (strSieveSize[i] == "20 mm")
                        drRow["Passing(IS:383)"] = "95-100";
                    else if (strSieveSize[i] == "4.75 mm")
                        drRow["Passing(IS:383)"] = "30-50";
                    else if (strSieveSize[i] == "600 micron")
                        drRow["Passing(IS:383)"] = "10-35";
                    else if (strSieveSize[i] == "150 micron")
                        drRow["Passing(IS:383)"] = "0-6";
                    else
                        drRow["Passing(IS:383)"] = "---";
                    dtTable.Rows.Add(drRow);
                }

            }
            return dtTable;
        }
        protected DataTable LoadAllInAGGTData_Fine(string ReferenceNo, int TrialId)
        {
            DataTable dtTable = new DataTable();
            DataRow drRow = null;
            dtTable.Columns.Add(new DataColumn("SieveSize", typeof(string)));
            dtTable.Columns.Add(new DataColumn("NaturalSand", typeof(string)));
            dtTable.Columns.Add(new DataColumn("CrushedSand", typeof(string)));
            dtTable.Columns.Add(new DataColumn("StoneDust", typeof(string)));
            dtTable.Columns.Add(new DataColumn("Grit", typeof(string)));
            dtTable.Columns.Add(new DataColumn("10mm", typeof(string)));
            dtTable.Columns.Add(new DataColumn("20mm", typeof(string)));
            dtTable.Columns.Add(new DataColumn("40mm", typeof(string)));
            dtTable.Columns.Add(new DataColumn("MixAggregate", typeof(string)));
            dtTable.Columns.Add(new DataColumn("NaturalSandPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("CrushedSandPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("StoneDustPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("GritPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("10mmPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("20mmPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("40mmPer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("MixAggregatePer", typeof(string)));
            dtTable.Columns.Add(new DataColumn("CombinedPassing", typeof(string)));
            dtTable.Columns.Add(new DataColumn("Passing(IS:383)", typeof(string)));

            string[] strSieveSize = { "40 mm", "25 mm", "20 mm", "16 mm", "12.5 mm", "10 mm", "4.75 mm", "2.36 mm", "1.18 mm", "600 micron", "300 micron", "150 micron", "75 micron", "Pan" };
            decimal[,] strValues = new decimal[14, 17];
            string[] strHeaderText = new string[19];
            string[] strSieveSizeFlag = new string[14];

            string[] strRefNo1 = ReferenceNo.Split('/');
            string[] strRefNo2 = strRefNo1[1].Split('-');
            string refNo = "";

            var data = dc.TrialDetail_View(ReferenceNo, TrialId);
            foreach (var t in data)
            {
                string strMaterialName = t.TrialDetail_MaterialName;
                if (strMaterialName.Contains("Natural Sand") == true || strMaterialName.Contains("Crushed Sand") == true ||
                    strMaterialName.Contains("Stone Dust") == true || strMaterialName.Contains("Grit") == true ||
                        strMaterialName.Contains("Mix Aggregate") == true)
                {

                    int MaterialId = Convert.ToInt32(t.Material_Id);
                    var aggtSieveSize = dc.AggregateAllTestView(ReferenceNo, MaterialId, "AGGTSA").ToList();

                    refNo = ReferenceNo;
                    if (aggtSieveSize.Count == 0 && refNo != strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1")
                    {
                        refNo = strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1";
                        var seiveAnalysis1 = dc.AggregateAllTestView(refNo, MaterialId, "AGGTSA").ToList();
                        aggtSieveSize = seiveAnalysis1;
                    }

                    for (int j = 0; j < 14; j++)
                    {
                        bool sizeFound = false;
                        foreach (var agtest in aggtSieveSize)
                        {
                            if (strSieveSize[j] == agtest.AGGTSA_SeiveSize_var)
                            {
                                sizeFound = true;
                                break;
                            }
                        }
                        if (sizeFound == false)
                        {
                            strSieveSize[j] = "";
                        }
                    }
                    double Trail = 0;
                    double SpGrav = 0;
                    double volume = 0;
                    decimal val = 0;
                    bool flgFound = false;
                    if (double.TryParse(t.TrialDetail_Weight.ToString(), out Trail) &&
                            double.TryParse(t.TrialDetail_SpecificGravity.ToString(), out SpGrav) && double.TryParse(t.TrialDetail_Volume.ToString(), out volume))
                    {
                        if (strMaterialName.Contains("Natural Sand") == true)
                        {
                            strHeaderText[9] = "Natural Sand( " + Trail + " %)";
                            var aggtTest = dc.AggregateAllTestView(ReferenceNo, MaterialId, "AGGTSA").ToList();

                            refNo = ReferenceNo;
                            if (aggtTest.Count == 0 && refNo != strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1")
                            {
                                refNo = strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1";
                                var seiveAnalysis1 = dc.AggregateAllTestView(refNo, MaterialId, "AGGTSA").ToList();
                                aggtTest = seiveAnalysis1;
                            }

                            foreach (var agtest in aggtTest)
                            {
                                for (int j = 0; j < 14; j++)
                                {
                                    if (strSieveSize[j] == agtest.AGGTSA_SeiveSize_var)
                                    {
                                        val = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec);
                                        if (val > 100)
                                            val = Convert.ToDecimal(100.00);
                                        else if (val < 0)
                                            val = Convert.ToDecimal(0.00);
                                        strValues[j, 0] = val;
                                        flgFound = true;
                                        break;
                                    }
                                }
                            }
                        }
                        else if (strMaterialName.Contains("Crushed Sand") == true)
                        {
                            strHeaderText[10] = "Crushed Sand( " + Trail + " %)";
                            var aggtTest = dc.AggregateAllTestView(ReferenceNo, MaterialId, "AGGTSA").ToList();

                            refNo = ReferenceNo;
                            if (aggtTest.Count == 0 && refNo != strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1")
                            {
                                refNo = strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1";
                                var seiveAnalysis1 = dc.AggregateAllTestView(refNo, MaterialId, "AGGTSA").ToList();
                                aggtTest = seiveAnalysis1;
                            }

                            foreach (var agtest in aggtTest)
                            {
                                for (int j = 0; j < 14; j++)
                                {
                                    if (strSieveSize[j] == agtest.AGGTSA_SeiveSize_var)
                                    {
                                        val = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec);
                                        if (val > 100)
                                            val = Convert.ToDecimal(100.00);
                                        else if (val < 0)
                                            val = Convert.ToDecimal(0.00);
                                        strValues[j, 1] = val;
                                        flgFound = true;
                                        break;
                                    }
                                }
                            }
                        }
                        else if (strMaterialName.Contains("Stone Dust") == true)
                        {
                            strHeaderText[11] = "Stone Dust( " + Trail + " %)";
                            var aggtTest = dc.AggregateAllTestView(ReferenceNo, MaterialId, "AGGTSA").ToList();

                            refNo = ReferenceNo;
                            if (aggtTest.Count == 0 && refNo != strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1")
                            {
                                refNo = strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1";
                                var seiveAnalysis1 = dc.AggregateAllTestView(refNo, MaterialId, "AGGTSA").ToList();
                                aggtTest = seiveAnalysis1;
                            }

                            foreach (var agtest in aggtTest)
                            {
                                for (int j = 0; j < 14; j++)
                                {
                                    if (strSieveSize[j] == agtest.AGGTSA_SeiveSize_var)
                                    {
                                        val = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec);
                                        if (val > 100)
                                            val = Convert.ToDecimal(100.00);
                                        else if (val < 0)
                                            val = Convert.ToDecimal(0.00);
                                        strValues[j, 2] = val;
                                        flgFound = true;
                                        break;
                                    }
                                }
                            }
                        }
                        else if (strMaterialName.Contains("Grit") == true)
                        {
                            strHeaderText[12] = "Grit( " + Trail + " %)";
                            var aggtTest = dc.AggregateAllTestView(ReferenceNo, MaterialId, "AGGTSA").ToList();

                            refNo = ReferenceNo;
                            if (aggtTest.Count == 0 && refNo != strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1")
                            {
                                refNo = strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1";
                                var seiveAnalysis1 = dc.AggregateAllTestView(refNo, MaterialId, "AGGTSA").ToList();
                                aggtTest = seiveAnalysis1;
                            }

                            foreach (var agtest in aggtTest)
                            {
                                for (int j = 0; j < 14; j++)
                                {
                                    if (strSieveSize[j] == agtest.AGGTSA_SeiveSize_var)
                                    {
                                        val = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec);
                                        if (val > 100)
                                            val = Convert.ToDecimal(100.00);
                                        else if (val < 0)
                                            val = Convert.ToDecimal(0.00);
                                        strValues[j, 3] = val;
                                        flgFound = true;
                                        break;
                                    }
                                }
                            }
                        }
                        else if (strMaterialName.Contains("Mix Aggregate") == true)
                        {
                            strHeaderText[16] = "Mix Aggregate( " + Trail + " %)";
                            var aggtTest = dc.AggregateAllTestView(ReferenceNo, MaterialId, "AGGTSA").ToList();

                            refNo = ReferenceNo;
                            if (aggtTest.Count == 0 && refNo != strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1")
                            {
                                refNo = strRefNo1[0] + "/" + strRefNo2[0] + "-" + "1";
                                var seiveAnalysis1 = dc.AggregateAllTestView(refNo, MaterialId, "AGGTSA").ToList();
                                aggtTest = seiveAnalysis1;
                            }

                            foreach (var agtest in aggtTest)
                            {
                                for (int j = 0; j < 14; j++)
                                {
                                    if (strSieveSize[j] == agtest.AGGTSA_SeiveSize_var)
                                    {
                                        val = Convert.ToDecimal(agtest.AGGTSA_CumuPassing_dec);
                                        if (val > 100)
                                            val = Convert.ToDecimal(100.00);
                                        else if (val < 0)
                                            val = Convert.ToDecimal(0.00);
                                        strValues[j, 7] = val;
                                        flgFound = true;
                                        break;
                                    }
                                }
                            }
                        }

                    }
                }
            }
            //
            for (int i = 0; i < 14; i++)
            {
                if (i == 0)
                {
                    drRow = dtTable.NewRow();
                    drRow["SieveSize"] = "Sieve Size";
                    if (strHeaderText[9] != "" && strHeaderText[9] != null)
                        drRow["NaturalSand"] = "% Passing Fine Aggregate (Natural Sand)";
                    if (strHeaderText[10] != "" && strHeaderText[10] != null)
                        drRow["CrushedSand"] = "% Passing Fine Aggregate (Crushed Sand)";
                    if (strHeaderText[11] != "" && strHeaderText[11] != null)
                        drRow["StoneDust"] = "% Passing Fine Aggregate (Stone Dust)";
                    if (strHeaderText[12] != "" && strHeaderText[12] != null)
                        drRow["Grit"] = "% Passing Fine Aggregate (Grit)";
                    if (strHeaderText[16] != "" && strHeaderText[16] != null)
                        drRow["MixAggregate"] = "% Passing Fine Aggregate (Mix Aggregate)";

                    dtTable.Rows.Add(drRow);
                }
                if (strSieveSize[i] != "")
                {
                    drRow = dtTable.NewRow();
                    drRow["SieveSize"] = strSieveSize[i];
                    drRow["NaturalSand"] = strValues[i, 0];
                    drRow["CrushedSand"] = strValues[i, 1];
                    drRow["StoneDust"] = strValues[i, 2];
                    drRow["Grit"] = strValues[i, 3];
                    drRow["MixAggregate"] = strValues[i, 7];
                    dtTable.Rows.Add(drRow);
                }

            }
            return dtTable;
        }
        #endregion

        #region AAC
        public void AAC_CS_PDFReport(string ReferenceNo, string Action, bool pageBrk)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("AAC", ReferenceNo);
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "AAC_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/AAC";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername + "/CS";
                if (!Directory.Exists(@Subfoldername1))
                    Directory.CreateDirectory(@Subfoldername1);
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "AAC_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "AAC_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();
                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.0f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.0f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.5f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);
                Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 7.0f, Font.BOLD);
                Font fontH5 = new Font(Font.FontFamily.TIMES_ROMAN, 9.0f, Font.BOLD);
                Font fontH6 = new Font(Font.FontFamily.TIMES_ROMAN, 6f, Font.UNDEFINED);


                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data
                float[] widths = new float[] { 18f, 1f, 50f, 18f, 1f, 18f };
                MaindataTable.SetWidths(widths);
                DateTime ApproveDt = new DateTime();
                string Witnessby = string.Empty, CustName = "", SiteName = "", Address = "";
                int TestId = 0;
                bool RemotelyAppv = false;

                int Approveby = 0;
                string supersedeNote = "";
                DateTime? dtTesting = null;
                var pt = dc.ReportStatus_View("AAC Block Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var pavmt in pt)
                {
                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        CustName = pavmt.RptCL_Name_var;
                        SiteName = pavmt.RptST_Name_var;
                        Address = pavmt.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = pavmt.CL_Name_var;
                        SiteName = pavmt.SITE_Name_var;
                        Address = pavmt.CL_OfficeAddress_var;
                    }

                    SiteRouteId = Convert.ToInt32(pavmt.SITE_Route_Id);
                    if (pavmt.AACINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(pavmt.AACINWD_ApprovedBy_tint);
                    }
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //paragraph.Add(" "); 
                    //pdfDoc.Add(paragraph);
                    //if (pavmt.PTINWD_Status_tint == 4 || pavmt.PTINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    ////  paragraph.SpacingBefore = 2;
                    pdfDoc.Add(paragraph);

                    if (pavmt.AACINWD_WitnessBy_var != null && pavmt.AACINWD_WitnessBy_var != "")
                    {
                        Witnessby = pavmt.AACINWD_WitnessBy_var;
                    }
                    if (Convert.ToString(pavmt.AACINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(pavmt.AACINWD_ApprovedDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 2;
                    paragraph.Add("Autoclaved Aerated Cellular Concrete Products Compressive Test");
                    if (pavmt.AACINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";

                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;

                    if (pavmt.AACINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("AAC", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("PT - " + pavmt.PTINWD_SetOfRecord_var, fontH1));
                    string strRecNo = pavmt.AACINWD_SetOfRecord_var;
                    if (pavmt.AACINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (pavmt.AACINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (pavmt.AACINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(pavmt.AACINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + pavmt.AACINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(pavmt.AACINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //if (pavmt.CL_MonthlyBilling_bit == true && pavmt.INWD_BILL_Id == "0")
                    if (pavmt.SITE_MonthlyBillingStatus_bit == true && pavmt.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (pavmt.AACINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(pavmt.AACINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(pavmt.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(pavmt.CONT_Name_var + " - " + pavmt.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.AACINWD_ReceivedDate_dt != null)
                    {
                        DateTime cDT = Convert.ToDateTime(pavmt.AACINWD_ReceivedDate_dt);
                        string ReceiptDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(ReceiptDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (Convert.ToString(pavmt.AACINWD_SupplierName_var) != "")
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.AACINWD_SupplierName_var, fontH1));
                    else
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.AACINWD_TestingDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(pavmt.AACINWD_TestingDate_dt);
                        DateTime cDT = Convert.ToDateTime(pavmt.AACINWD_TestingDate_dt);
                        string TestingDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(TestingDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //if (Convert.ToString(pavmt.AACINWD_IssueDate_dt) != "")
                    //{
                    //    DateTime rDT = Convert.ToDateTime(pavmt.AACINWD_IssueDate_dt);
                    //    Cust_Namecell = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH1));
                    //}
                    if (Convert.ToString(pavmt.AACINWD_ApprovedDate_dt) != "")
                    {
                        DateTime rDT = Convert.ToDateTime(pavmt.AACINWD_ApprovedDate_dt);
                        Cust_Namecell = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(pavmt.AACINWD_ULRNo_var) != "" && Convert.ToString(pavmt.AACINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(pavmt.AACINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                    }
                    //

                    TestId = Convert.ToInt32(pavmt.AACINWD_TEST_Id);
                    if (pavmt.AACINWD_RemoteApproved == true && pavmt.AACINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }

                }
                //MaindataTable.SpacingAfter = 2; //2
                paragraph.SpacingAfter = 2;
                pdfDoc.Add(MaindataTable);

                #endregion

                var AAC_CS = dc.AAC_Test_View(ReferenceNo, TestId, "CS").ToList();
                var count = AAC_CS.Count();

                ////pdfDoc.Add(Chunk.NEWLINE);
                //table1.SpacingBefore = 10;
                paragraph = new Paragraph();
                paragraph.Font = fontH5;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 2; //12
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(new Paragraph(" ", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                #region tbldata

                PdfPCell cell1;
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(table1);
                table1 = new PdfPTable(9);
                table1.WidthPercentage = 100;
                int j = 0;
                for (int i = 0; i < count; i++)
                {
                    if (i == 0)
                    {
                        table1.SetTotalWidth(new float[] { 5f, 16f, 10f, 10f, 10f, 10f, 12f, 12f, 8f });
                        cell1 = new PdfPCell(new Phrase("Sr.No", fontH5));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("ID Mark", fontH5));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Length \n (mm)", fontH5));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Breadth \n(mm)", fontH5));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Height \n(mm)", fontH5));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("CS Area \n(mm²)", fontH5));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Load \n(kN)", fontH5));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Comp Strength (N/mm²)", fontH5));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Average \n(N/mm²)", fontH5));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    string srNo = Convert.ToString(i + 1);
                    cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(AAC_CS[i].AACTEST_IdMark_var, fontH4));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_CS[i].AACTEST_Length_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_CS[i].AACTEST_Breadth_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_CS[i].AACTEST_Height_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_CS[i].AACTEST_CSArea_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_CS[i].AACTEST_Load_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_CS[i].AACTEST_CompStr_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    if (j == 0)
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_CS[i].AACINWD_AvgStr_var), fontH1));
                        cell1.Rowspan = count;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        table1.AddCell(cell1);
                    }
                    j++;
                }
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                pdfDoc.Add(table1);
                #endregion

                //table1.SpacingBefore = 10;

                #region iscode/remarks
                table1 = new PdfPTable(2);
                // table1.SpacingAfter = 7;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                if (pageBrk == true)
                {
                    table1.SpacingAfter = 1;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;
                    pdfDoc.Add(table1);
                    table1.FlushContent();

                    pdfDoc.Add(new Paragraph("Page 1 of 2", fontH6));

                    table1 = new PdfPTable(2);
                    table1.SpacingAfter = 1;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetWidths(new float[] { 2f, 70f });
                    table1.WidthPercentage = 100;

                    pdfDoc.NewPage();

                    if (Action.Contains("Print") == true)
                        LogoToPdf(pdfDoc, nablStatus);
                    else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                        LogoToPdfEmail(pdfDoc, nablStatus);
                    else if (Action.Contains("Display") == true)
                        LogoToPdfOld(pdfDoc, Action);
                }

                var iscd = dc.ISCode_View(0, "CS", "AAC", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);

                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                serial_no = 0;
                var re = dc.AAC_Remark_View("", ReferenceNo, 0, TestId).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var r in re)
                    {
                        var remark = dc.AAC_Remark_View("", "", Convert.ToInt32(r.RemarkId_int), TestId);
                        foreach (var remk in remark)
                        {
                            if (serial_no == 0)
                            {
                                //pdfDoc.Add(new Paragraph("Remarks :", fontH2));
                                cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(serial_no + ")" + remk.Remark_var.ToString(), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remk.Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 8;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);

                #endregion

                ////if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")//if(Action.Contains("Display")==false)
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 12;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("AAC Block Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
                    foreach (var r in RecNo)
                    {
                        if (r.AACINWD_ApprovedBy_tint != null && r.AACINWD_ApprovedBy_tint.ToString() != "" && r.AACINWD_ApprovedBy_tint > 0)
                        {
                            var U = dc.User_View(r.AACINWD_ApprovedBy_tint, -1, "", "", "");
                            foreach (var r1 in U)
                            {
                                pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                                if (r1.USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                                if ((Action == "Print" || Action == "Automail" || Action == "Email") && ApproveDt != null)
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(Convert.ToDateTime(ApproveDt).ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }

                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (r.AACINWD_CheckedBy_tint != null && r.AACINWD_CheckedBy_tint.ToString() != "" && r.AACINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(r.AACINWD_CheckedBy_tint, -1, "", "", "");
                            foreach (var loginusr in lgin)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by : " + loginusr.USER_Name_var.ToString(), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    //paragraph.Add("For all technical queries contact (020)24348027.");
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);


                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                if (pageBrk == true)
                    pdfDoc.Add(new Paragraph("Page 2 of 2", fontH6));
                else
                    pdfDoc.Add(new Paragraph("Page 1 of 1", fontH6));
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }

            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void AAC_DS_PDFReport(string ReferenceNo, string Action, bool pageBrk)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("AAC", ReferenceNo);
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "AAC_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/AAC";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername + "/DS";
                if (!Directory.Exists(@Subfoldername1))
                    Directory.CreateDirectory(@Subfoldername1);
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "AAC_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "AAC_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);
                Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 7.0f, Font.BOLD);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data
                //float[] widths = new float[] { 20f, 1f, 55f, 15f, 1f, 25f };
                float[] widths = new float[] { 18f, 1f, 50f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                DateTime ApproveDt = new DateTime();
                string Witnessby = string.Empty, CustName = "", SiteName = "", Address = "";
                int TestId = 0;
                bool RemotelyAppv = false;

                int Approveby = 0;
                string supersedeNote = "";
                DateTime? dtTesting = null;
                var pt = dc.ReportStatus_View("AAC Block Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var pavmt in pt)
                {
                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        CustName = pavmt.RptCL_Name_var;
                        SiteName = pavmt.RptST_Name_var;
                        Address = pavmt.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = pavmt.CL_Name_var;
                        SiteName = pavmt.SITE_Name_var;
                        Address = pavmt.CL_OfficeAddress_var;
                    }

                    SiteRouteId = Convert.ToInt32(pavmt.SITE_Route_Id);

                    if (pavmt.AACINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(pavmt.AACINWD_ApprovedBy_tint);
                    }
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //  paragraph.Add(" "); pdfDoc.Add(paragraph);
                    //if (pavmt.PTINWD_Status_tint == 4 || pavmt.PTINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);

                    if (pavmt.AACINWD_WitnessBy_var != null && pavmt.AACINWD_WitnessBy_var != "")
                    {
                        Witnessby = pavmt.AACINWD_WitnessBy_var;
                    }
                    if (Convert.ToString(pavmt.AACINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(pavmt.AACINWD_ApprovedDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 5;
                    paragraph.Add("Autoclaved Aerated Cellular Concrete Products Density Test");
                    if (pavmt.AACINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //   //  Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{

                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}

                    if (pavmt.AACINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("AAC", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string strRecNo = pavmt.AACINWD_SetOfRecord_var;
                    if (pavmt.AACINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (pavmt.AACINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (pavmt.AACINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(pavmt.AACINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + pavmt.AACINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(pavmt.AACINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.SITE_MonthlyBillingStatus_bit == true && pavmt.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (pavmt.AACINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(pavmt.AACINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(pavmt.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(pavmt.CONT_Name_var + " - " + pavmt.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.AACINWD_ReceivedDate_dt != null)
                    {
                        DateTime cDT = Convert.ToDateTime(pavmt.AACINWD_ReceivedDate_dt);
                        string ReceiptDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(ReceiptDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (Convert.ToString(pavmt.AACINWD_SupplierName_var) != "")
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.AACINWD_SupplierName_var, fontH1));
                    else
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.AACINWD_TestingDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(pavmt.AACINWD_TestingDate_dt);
                        DateTime cDT = Convert.ToDateTime(pavmt.AACINWD_TestingDate_dt);
                        string TestingDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(TestingDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //if (Convert.ToString(pavmt.AACINWD_IssueDate_dt) != "")
                    //{
                    //    DateTime rDT = Convert.ToDateTime(pavmt.AACINWD_IssueDate_dt);
                    //    Cust_Namecell = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH1));
                    //}
                    if (Convert.ToString(pavmt.AACINWD_ApprovedDate_dt) != "")
                    {
                        DateTime rDT = Convert.ToDateTime(pavmt.AACINWD_ApprovedDate_dt);
                        Cust_Namecell = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(pavmt.AACINWD_ULRNo_var) != "" && Convert.ToString(pavmt.AACINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(pavmt.AACINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //

                    TestId = Convert.ToInt32(pavmt.AACINWD_TEST_Id);
                    if (pavmt.AACINWD_RemoteApproved == true && pavmt.AACINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }


                    //if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(pavmt.CL_Name_var, fontH1));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(pavmt.SITE_Name_var, fontH1));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                }
                //MaindataTable.SpacingAfter = 2;
                pdfDoc.Add(MaindataTable);

                #endregion

                var AAC_CS = dc.AAC_Test_View(ReferenceNo, TestId, "DS").ToList();
                var count = AAC_CS.Count();

                //pdfDoc.Add(Chunk.NEWLINE);
                //table1.SpacingBefore = 10;
                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5; // 12;
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(new Paragraph(" ", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                #region tbldata

                PdfPCell cell1;
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(table1);
                table1 = new PdfPTable(8);
                table1.WidthPercentage = 100;
                int j = 0;
                for (int i = 0; i < count; i++)
                {
                    if (i == 0)
                    {
                        table1.SetTotalWidth(new float[] { 5f, 20f, 10f, 10f, 10f, 10f, 10f, 10f });
                        cell1 = new PdfPCell(new Phrase("Sr.No", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("ID Mark", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Length \n(mm)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Breadth \n (mm)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Height \n (mm)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Weight \n (kg)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Density \n(kg/m³)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Average Density \n(kg/m³)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    string srNo = Convert.ToString(i + 1);
                    cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(AAC_CS[i].AACTEST_IdMark_var, fontH4));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_CS[i].AACTEST_Length_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_CS[i].AACTEST_Breadth_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_CS[i].AACTEST_Height_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_CS[i].AACTEST_Weight_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_CS[i].AACTEST_Density_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    if (j == 0)
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_CS[i].AACINWD_AvgStr_var), fontH1));
                        cell1.Rowspan = count;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        table1.AddCell(cell1);
                    }
                    j++;
                }
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SpacingAfter = 8;
                pdfDoc.Add(table1);
                #endregion

                //table1.SpacingBefore = 10;

                #region iscode/remarks
                table1 = new PdfPTable(2);
                table1.SpacingBefore = 7;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                if (pageBrk == true)
                {
                    table1.SpacingAfter = 8;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;
                    pdfDoc.Add(table1);
                    table1.FlushContent();

                    pdfDoc.Add(new Paragraph("Page 1 of 2", fontH1));

                    table1 = new PdfPTable(2);
                    table1.SpacingAfter = 8;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetWidths(new float[] { 2f, 70f });
                    table1.WidthPercentage = 100;

                    pdfDoc.NewPage();

                    if (Action.Contains("Print") == true)
                        LogoToPdf(pdfDoc, nablStatus);
                    else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                        LogoToPdfEmail(pdfDoc, nablStatus);
                    else if (Action.Contains("Display") == true)
                        LogoToPdfOld(pdfDoc, Action);
                }

                var iscd = dc.ISCode_View(0, "DS", "AAC", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                serial_no = 0;
                var re = dc.AAC_Remark_View("", ReferenceNo, 0, TestId).ToList();
                if (re.Count > 0)
                {
                    foreach (var r in re)
                    {
                        var remark = dc.AAC_Remark_View("", "", Convert.ToInt32(r.RemarkId_int), TestId);
                        foreach (var remk in remark)
                        {
                            if (serial_no == 0)
                            {
                                //pdfDoc.Add(new Paragraph("Remarks :", fontH2));
                                cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(serial_no + ")" + remk.Remark_var.ToString(), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remk.Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {

                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 8;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);

                #endregion

                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 12;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("AAC Block Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
                    foreach (var r in RecNo)
                    {
                        if (r.AACINWD_ApprovedBy_tint != null && r.AACINWD_ApprovedBy_tint.ToString() != "" && r.AACINWD_ApprovedBy_tint > 0)
                        {
                            var U = dc.User_View(r.AACINWD_ApprovedBy_tint, -1, "", "", "");
                            foreach (var r1 in U)
                            {
                                pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                                if (r1.USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                                if ((Action == "Print" || Action == "Email" || Action == "Automail") && ApproveDt != null)
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(Convert.ToDateTime(ApproveDt).ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }

                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (r.AACINWD_CheckedBy_tint != null && r.AACINWD_CheckedBy_tint.ToString() != "" && r.AACINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(r.AACINWD_CheckedBy_tint, -1, "", "", "");
                            foreach (var loginusr in lgin)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by : " + loginusr.USER_Name_var.ToString(), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                if (pageBrk == true)
                    pdfDoc.Add(new Paragraph("Page 2 of 2", fontH1));
                else
                    pdfDoc.Add(new Paragraph("Page 1 of 1", fontH1));
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }

            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void AAC_DM_PDFReport(string ReferenceNo, string Action, bool pageBrk)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = 0;// getNablLogoStatus("AAC",ReferenceNo);
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "AAC_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/AAC";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername + "/DM";
                if (!Directory.Exists(@Subfoldername1))
                    Directory.CreateDirectory(@Subfoldername1);
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "AAC_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "AAC_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);
                Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 7.0f, Font.BOLD);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action == "Automail" || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data
                //float[] widths = new float[] { 20f, 1f, 55f, 15f, 1f, 25f };
                float[] widths = new float[] { 18f, 1f, 50f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                DateTime ApproveDt = new DateTime();
                string Witnessby = string.Empty, CustName = "", SiteName = "", Address = "";
                int TestId = 0;
                bool RemotelyAppv = false;

                int Approveby = 0;
                string supersedeNote = "";
                DateTime? dtTesting = null;
                var pt = dc.ReportStatus_View("AAC Block Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var pavmt in pt)
                {
                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        CustName = pavmt.RptCL_Name_var;
                        SiteName = pavmt.RptST_Name_var;
                        Address = pavmt.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = pavmt.CL_Name_var;
                        SiteName = pavmt.SITE_Name_var;
                        Address = pavmt.CL_OfficeAddress_var;
                    }
                    SiteRouteId = Convert.ToInt32(pavmt.SITE_Route_Id);


                    if (pavmt.AACINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(pavmt.AACINWD_ApprovedBy_tint);
                    }
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    // paragraph.Add(" "); pdfDoc.Add(paragraph);
                    //if (pavmt.PTINWD_Status_tint == 4 || pavmt.PTINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);

                    if (pavmt.AACINWD_WitnessBy_var != null && pavmt.AACINWD_WitnessBy_var != "")
                    {
                        Witnessby = pavmt.AACINWD_WitnessBy_var;
                    }
                    if (Convert.ToString(pavmt.AACINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(pavmt.AACINWD_ApprovedDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 5;
                    paragraph.Add("Autoclaved Aerated Cellular Concrete Products Dimension Test");
                    if (pavmt.AACINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //     Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{

                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    if (pavmt.AACINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }
                    //else
                    //{

                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("AAC", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("PT - " + pavmt.PTINWD_SetOfRecord_var, fontH1));
                    string strRecNo = pavmt.AACINWD_SetOfRecord_var;
                    if (pavmt.AACINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (pavmt.AACINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (pavmt.AACINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(pavmt.AACINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + pavmt.AACINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(pavmt.AACINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.SITE_MonthlyBillingStatus_bit == true && pavmt.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (pavmt.AACINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(pavmt.AACINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(pavmt.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(pavmt.CONT_Name_var + " - " + pavmt.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.AACINWD_ReceivedDate_dt != null)
                    {
                        DateTime cDT = Convert.ToDateTime(pavmt.AACINWD_ReceivedDate_dt);
                        string ReceiptDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(ReceiptDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (Convert.ToString(pavmt.AACINWD_SupplierName_var) != "")
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.AACINWD_SupplierName_var, fontH1));
                    else
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.AACINWD_TestingDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(pavmt.AACINWD_TestingDate_dt);
                        DateTime cDT = Convert.ToDateTime(pavmt.AACINWD_TestingDate_dt);
                        string TestingDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(TestingDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //if (Convert.ToString(pavmt.AACINWD_IssueDate_dt) != "")
                    //{
                    //    DateTime rDT = Convert.ToDateTime(pavmt.AACINWD_IssueDate_dt);
                    //    Cust_Namecell = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH1));
                    //}
                    if (Convert.ToString(pavmt.AACINWD_ApprovedDate_dt) != "")
                    {
                        DateTime rDT = Convert.ToDateTime(pavmt.AACINWD_ApprovedDate_dt);
                        Cust_Namecell = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(pavmt.AACINWD_ULRNo_var) != "" && Convert.ToString(pavmt.AACINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(pavmt.AACINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    TestId = Convert.ToInt32(pavmt.AACINWD_TEST_Id);
                    if (pavmt.AACINWD_RemoteApproved == true && pavmt.AACINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }



                }
                //MaindataTable.SpacingAfter = 2;
                pdfDoc.Add(MaindataTable);

                #endregion

                var AAC_DM = dc.AAC_Test_View(ReferenceNo, TestId, "DM").ToList();
                var count = AAC_DM.Count();

                //pdfDoc.Add(Chunk.NEWLINE);
                //table1.SpacingBefore = 10;
                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5; //7
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(new Paragraph(" ", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                #region tbldata

                PdfPCell cell1;

                table1 = new PdfPTable(7);
                table1.WidthPercentage = 100;
                int j = 0;
                for (int i = 0; i < count; i++)
                {
                    if (i == 0)
                    {
                        table1.SetTotalWidth(new float[] { 5f, 15f, 10f, 10f, 10f, 15f, 15f });
                        cell1 = new PdfPCell(new Phrase("Sr.No", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("ID Mark", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Length \n (mm)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Breadth \n(mm)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Height \n (mm)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Permissible Variation in Length \n (mm)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Permissible Variation in Width and height \n(mm)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                    }
                    string srNo = Convert.ToString(i + 1);
                    cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(AAC_DM[i].AACTEST_IdMark_var, fontH4));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_DM[i].AACTEST_Length_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_DM[i].AACTEST_Breadth_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_DM[i].AACTEST_Height_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    if (j == 0)
                    {
                        cell1 = new PdfPCell(new Phrase("+/-5", fontH1));
                        cell1.Rowspan = count;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        table1.AddCell(cell1);


                        cell1 = new PdfPCell(new Phrase("+/-3", fontH1));
                        cell1.Rowspan = count;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        table1.AddCell(cell1);
                    }
                    j++;
                }
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SpacingAfter = 8;
                pdfDoc.Add(table1);
                #endregion

                //table1.SpacingBefore = 10;

                #region iscode/remarks
                table1 = new PdfPTable(2);
                table1.SpacingAfter = 7;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                if (pageBrk == true)
                {
                    table1.SpacingAfter = 8;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;
                    pdfDoc.Add(table1);
                    table1.FlushContent();

                    pdfDoc.Add(new Paragraph("Page 1 of 2", fontH1));

                    table1 = new PdfPTable(2);
                    table1.SpacingAfter = 8;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetWidths(new float[] { 2f, 70f });
                    table1.WidthPercentage = 100;

                    pdfDoc.NewPage();

                    if (Action.Contains("Print") == true)
                        LogoToPdf(pdfDoc, nablStatus);
                    else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                        LogoToPdfEmail(pdfDoc, nablStatus);
                    else if (Action.Contains("Display") == true)
                        LogoToPdfOld(pdfDoc, Action);
                }

                var iscd = dc.ISCode_View(0, "DM", "AAC", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                serial_no = 0;
                var re = dc.AAC_Remark_View("", ReferenceNo, 0, TestId).ToList();
                if (re.Count > 0)
                {
                    foreach (var r in re)
                    {
                        var remark = dc.AAC_Remark_View("", "", Convert.ToInt32(r.RemarkId_int), TestId);
                        foreach (var remk in remark)
                        {
                            if (serial_no == 0)
                            {
                                //pdfDoc.Add(new Paragraph("Remarks :", fontH2));
                                cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(serial_no + ")" + remk.Remark_var.ToString(), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remk.Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {

                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);

                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 8;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);

                #endregion




                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 12;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("AAC Block Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
                    foreach (var r in RecNo)
                    {
                        if (r.AACINWD_ApprovedBy_tint != null && r.AACINWD_ApprovedBy_tint.ToString() != "" && r.AACINWD_ApprovedBy_tint > 0)
                        {
                            var U = dc.User_View(r.AACINWD_ApprovedBy_tint, -1, "", "", "");
                            foreach (var r1 in U)
                            {
                                pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                                if (r1.USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                                if ((Action == "Print" || Action == "Email" || Action == "Automail") && ApproveDt != null)
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(Convert.ToDateTime(ApproveDt).ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }

                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (r.AACINWD_CheckedBy_tint != null && r.AACINWD_CheckedBy_tint.ToString() != "" && r.AACINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(r.AACINWD_CheckedBy_tint, -1, "", "", "");
                            foreach (var loginusr in lgin)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by : " + loginusr.USER_Name_var.ToString(), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);


                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                if (pageBrk == true)
                    pdfDoc.Add(new Paragraph("Page 2 of 2", fontH1));
                else
                    pdfDoc.Add(new Paragraph("Page 1 of 1", fontH1));
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }

            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void AAC_SN_PDFReport(string ReferenceNo, string Action, bool pageBrk)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("AAC", ReferenceNo);
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "AAC_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/AAC";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername + "/SN";
                if (!Directory.Exists(@Subfoldername1))
                    Directory.CreateDirectory(@Subfoldername1);
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "AAC_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "AAC_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);
                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action == "Automail" || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data
                // float[] widths = new float[] { 20f, 1f, 55f, 15f, 1f, 25f };
                float[] widths = new float[] { 18f, 1f, 50f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                DateTime ApproveDt = new DateTime();
                string Witnessby = string.Empty, CustName = "", SiteName = "", Address = "";
                int TestId = 0;
                bool RemotelyAppv = false;

                int Approveby = 0;
                string supersedeNote = "";
                DateTime? dtTesting = null;
                var pt = dc.ReportStatus_View("AAC Block Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var pavmt in pt)
                {
                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        CustName = pavmt.RptCL_Name_var;
                        SiteName = pavmt.RptST_Name_var;
                        Address = pavmt.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = pavmt.CL_Name_var;
                        SiteName = pavmt.SITE_Name_var;
                        Address = pavmt.CL_OfficeAddress_var;
                    }

                    SiteRouteId = Convert.ToInt32(pavmt.SITE_Route_Id);

                    if (pavmt.AACINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(pavmt.AACINWD_ApprovedBy_tint);
                    }
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //paragraph.Add(" "); pdfDoc.Add(paragraph);
                    //if (pavmt.PTINWD_Status_tint == 4 || pavmt.PTINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);

                    if (pavmt.AACINWD_WitnessBy_var != null && pavmt.AACINWD_WitnessBy_var != "")
                    {
                        Witnessby = pavmt.AACINWD_WitnessBy_var;
                    }
                    if (Convert.ToString(pavmt.AACINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(pavmt.AACINWD_ApprovedDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 5;
                    paragraph.Add("Autoclaved Aerated Cellular Concrete Products Shrinkage Test");
                    if (pavmt.AACINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //     Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{

                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    if (pavmt.AACINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }
                    //else
                    //{

                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("AAC", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string strRecNo = pavmt.AACINWD_SetOfRecord_var;
                    if (pavmt.AACINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (pavmt.AACINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (pavmt.AACINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(pavmt.AACINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + pavmt.AACINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(pavmt.AACINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.SITE_MonthlyBillingStatus_bit == true && pavmt.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (pavmt.AACINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(pavmt.AACINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(pavmt.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(pavmt.CONT_Name_var + " - " + pavmt.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.AACINWD_ReceivedDate_dt != null)
                    {
                        DateTime cDT = Convert.ToDateTime(pavmt.AACINWD_ReceivedDate_dt);
                        string ReceiptDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(ReceiptDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (Convert.ToString(pavmt.AACINWD_SupplierName_var) != "")
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.AACINWD_SupplierName_var, fontH1));
                    else
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.AACINWD_TestingDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(pavmt.AACINWD_TestingDate_dt);
                        DateTime cDT = Convert.ToDateTime(pavmt.AACINWD_TestingDate_dt);
                        string TestingDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(TestingDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    TestId = Convert.ToInt32(pavmt.AACINWD_TEST_Id);
                    if (pavmt.AACINWD_RemoteApproved == true && pavmt.AACINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }

                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //if (Convert.ToString(pavmt.AACINWD_IssueDate_dt) != "")
                    //{
                    //    DateTime rDT = Convert.ToDateTime(pavmt.AACINWD_IssueDate_dt);
                    //    Cust_Namecell = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH1));
                    //}
                    if (Convert.ToString(pavmt.AACINWD_ApprovedDate_dt) != "")
                    {
                        DateTime rDT = Convert.ToDateTime(pavmt.AACINWD_ApprovedDate_dt);
                        Cust_Namecell = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);

                    }
                    //ULR No
                    if (Convert.ToString(pavmt.AACINWD_ULRNo_var) != "" && Convert.ToString(pavmt.AACINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(pavmt.AACINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                }
                //MaindataTable.SpacingAfter = 2;
                pdfDoc.Add(MaindataTable);

                #endregion

                var AAC_SN = dc.AAC_Test_View(ReferenceNo, TestId, "SN").ToList();
                var count = AAC_SN.Count();

                //pdfDoc.Add(Chunk.NEWLINE);
                //table1.SpacingBefore = 10;
                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5; // 12;
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(new Paragraph(" ", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                #region tbldata

                PdfPCell cell1;
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(table1);
                table1 = new PdfPTable(6);
                table1.WidthPercentage = 100;
                int j = 0;
                for (int i = 0; i < count; i++)
                {
                    if (i == 0)
                    {
                        table1.SetTotalWidth(new float[] { 5f, 15f, 10f, 10f, 10f, 12f });
                        cell1 = new PdfPCell(new Phrase("Sr.No", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("ID Mark", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Wet measurement \n (mm)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Dry measurement \n (mm)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Dry Shrinkage \n (%)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Avg. Dry Shrinkage \n (%)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    string srNo = Convert.ToString(i + 1);
                    cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(AAC_SN[i].AACTEST_IdMark_var, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_SN[i].AACTEST_WetMeasuremnt_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_SN[i].AACTEST_DryMeasuremnt_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_SN[i].AACTEST_DryShrinkage_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    if (j == 0)
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(AAC_SN[i].AACINWD_AvgStr_var), fontH1));
                        cell1.Rowspan = count;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        table1.AddCell(cell1);
                    }
                    j++;
                }
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SpacingAfter = 8;
                pdfDoc.Add(table1);
                #endregion

                //table1.SpacingBefore = 10;

                #region iscode/remarks
                table1 = new PdfPTable(2);
                table1.SpacingAfter = 7;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                if (pageBrk == true)
                {
                    table1.SpacingAfter = 8;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;
                    pdfDoc.Add(table1);
                    table1.FlushContent();

                    pdfDoc.Add(new Paragraph("Page 1 of 2", fontH1));

                    table1 = new PdfPTable(2);
                    table1.SpacingAfter = 8;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetWidths(new float[] { 2f, 70f });
                    table1.WidthPercentage = 100;

                    pdfDoc.NewPage();

                    if (Action.Contains("Print") == true)
                        LogoToPdf(pdfDoc, nablStatus);
                    else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                        LogoToPdfEmail(pdfDoc, nablStatus);
                    else if (Action.Contains("Display") == true)
                        LogoToPdfOld(pdfDoc, Action);
                }

                var iscd = dc.ISCode_View(0, "SN", "AAC", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                serial_no = 0;
                var re = dc.AAC_Remark_View("", ReferenceNo, 0, TestId).ToList();
                if (re.Count > 0)
                {
                    foreach (var r in re)
                    {
                        var remark = dc.AAC_Remark_View("", "", Convert.ToInt32(r.RemarkId_int), TestId);
                        foreach (var remk in remark)
                        {
                            if (serial_no == 0)
                            {
                                //pdfDoc.Add(new Paragraph("Remarks :", fontH2));
                                cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(serial_no + ")" + remk.Remark_var.ToString(), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remk.Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {

                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }


                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 8;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);



                #endregion

                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 12;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {

                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("AAC Block Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
                    foreach (var r in RecNo)
                    {
                        if (r.AACINWD_ApprovedBy_tint != null && r.AACINWD_ApprovedBy_tint.ToString() != "" && r.AACINWD_ApprovedBy_tint > 0)
                        {
                            var U = dc.User_View(r.AACINWD_ApprovedBy_tint, -1, "", "", "");
                            foreach (var r1 in U)
                            {
                                pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                                if (r1.USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                                if ((Action == "Print" || Action == "Automail" || Action == "Email") && ApproveDt != null)
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(Convert.ToDateTime(ApproveDt).ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }

                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (r.AACINWD_CheckedBy_tint != null && r.AACINWD_CheckedBy_tint.ToString() != "" && r.AACINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(r.AACINWD_CheckedBy_tint, -1, "", "", "");
                            foreach (var loginusr in lgin)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by : " + loginusr.USER_Name_var.ToString(), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);


                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                if (pageBrk == true)
                    pdfDoc.Add(new Paragraph("Page 2 of 2", fontH1));
                else
                    pdfDoc.Add(new Paragraph("Page 1 of 1", fontH1));
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }

            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        #endregion

        public void Aggregate_PDFReport(string RefernceNo, string RecType, string MatName, int MatId, string Action, bool pageBrk)
        {
            try
            {
                bool flagFooter = false;
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus(RecType, RefernceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }

                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "AGGT_" + RefernceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Aggregate";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "AGGT_" + RefernceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "AGGT_" + RefernceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                pdfDoc.Open();
                string CustName = "", SiteName = "", Address = "";
                var AggtInward = dc.ReportStatus_View("Aggregate Testing", null, null, 0, 0, 0, RefernceNo, 0, 2, 0).ToList();
                if (AggtInward.Count() > 0)
                {
                    if (AggtInward.FirstOrDefault().AGGTINWD_TestedAt_bit == true)
                    {
                        writer.PageEvent = new clsPdfFooter();
                        flagFooter = true;
                    }

                    if (AggtInward.FirstOrDefault().INWD_RptSITE_Id != null && AggtInward.FirstOrDefault().INWD_RptCL_Id != null)
                    {
                        CustName = AggtInward.FirstOrDefault().RptCL_Name_var;
                        SiteName = AggtInward.FirstOrDefault().RptST_Name_var;
                        Address = AggtInward.FirstOrDefault().RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = AggtInward.FirstOrDefault().CL_Name_var;
                        SiteName = AggtInward.FirstOrDefault().SITE_Name_var;
                        Address = AggtInward.FirstOrDefault().CL_OfficeAddress_var;
                    }

                    SiteRouteId = Convert.ToInt32(AggtInward.FirstOrDefault().SITE_Route_Id);

                }
                if (!flagFooter)
                    writer.PageEvent = new classPdfFooter1();

                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;

                float[] widths = new float[] { 18f, 1f, 50f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action == "Automail" || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);

                #region data
                DateTime ApproveDt = new DateTime();

                string AggregateType = string.Empty;
                string AggregateName = string.Empty;
                string Witnessby = string.Empty;
                int i = 0;
                bool RemotelyAppv = false;
                int Approveby = 0;
                string supersedeNote = "";
                DateTime? dtTesting = null;
                //var AggtInward = dc.ReportStatus_View("Aggregate Testing", null, null, 0, 0, 0, RefernceNo, 0, 2, 0);
                foreach (var aggt in AggtInward)
                {
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    // paragraph.Add(" "); pdfDoc.Add(paragraph);
                    //if (aggt.AGGTINWD_Status_tint == 4 || aggt.AGGTINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2;
                    pdfDoc.Add(paragraph);

                    if (Convert.ToString(aggt.AGGTINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(aggt.AGGTINWD_ApprovedDate_dt);
                    }
                    AggregateName = aggt.AGGTINWD_AggregateName_var.ToString();
                    if (AggregateName.Contains("mm") == true)
                    {
                        AggregateType = "Coarse Aggregate";
                        AggregateName = aggt.AGGTINWD_AggregateName_var + " M. S. A.";
                    }
                    else
                    {
                        AggregateType = "Fine Aggregate";
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 5;
                    if (RecType == "AGGT")
                    {
                        //paragraph.Add(AggregateType + "   " + "(" + aggt.AGGTINWD_AggregateName_var + ")");
                        paragraph.Add(AggregateType + "   " + "(" + AggregateName + ")");
                    }
                    else
                    {
                        paragraph.Add(AggregateType + "   " + "(" + MatName + ")");
                    }
                    if (aggt.AGGTINWD_Status_tint < 6 || Action != "Print")
                    {
                        // paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //     Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //if (aggt.AGGTINWD_Status_tint > 5) //== 6
                    if (aggt.AGGTINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);

                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.HorizontalAlignment = Element.ALIGN_RIGHT;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }
                    //else
                    //{

                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.HorizontalAlignment = Element.ALIGN_CENTER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(RecType, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(RefernceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string strRecNo = aggt.AGGTINWD_SetOfRecord_var;
                    if (aggt.AGGTINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (aggt.AGGTINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (aggt.AGGTINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(aggt.AGGTINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + aggt.AGGTINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(aggt.AGGTINWD_Description_var), fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No.", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (aggt.SITE_MonthlyBillingStatus_bit == true && aggt.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (aggt.AGGTINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(aggt.AGGTINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(aggt.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Witnessby = aggt.AGGTINWD_WitnessBy_var.ToString();
                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(aggt.AGGTINWD_SupplierName_var), fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Convert.ToDateTime(aggt.INWD_ReceivedDate_dt).ToString("dd-MMM-yy"), fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    dtTesting = Convert.ToDateTime(aggt.AGGTINWD_TestedDate_dt);
                    if (aggt.AGGTINWD_RemoteApproved == true && aggt.AGGTINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }
                    if (aggt.AGGTINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(aggt.AGGTINWD_ApprovedBy_tint);
                    }

                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(aggt.CONT_Name_var + " - " + aggt.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    //if (aggt.AGGTINWD_IssueDate_dt != null)
                    //{
                    //    DateTime iDT = Convert.ToDateTime(aggt.AGGTINWD_IssueDate_dt);
                    //    string issuedt = iDT.ToString("dd-MMM-yyyy");
                    //    Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    //}
                    if (aggt.AGGTINWD_ApprovedDate_dt != null)
                    {
                        DateTime iDT = Convert.ToDateTime(aggt.AGGTINWD_ApprovedDate_dt);
                        string issuedt = iDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (aggt.INWD_RptSITE_Id != null && aggt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(aggt.CL_Name_var, fontH1));//person name
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(aggt.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //ULR No
                    if (Convert.ToString(aggt.AGGTINWD_ULRNo_var) != "" && Convert.ToString(aggt.AGGTINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(aggt.AGGTINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //
                    break;
                }
                //MaindataTable.SpacingAfter = 2;
                pdfDoc.Add(MaindataTable);

                #endregion
                //  pdfDoc.Add(Chunk.NEWLINE);
                //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(new Paragraph(" ", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);
                #region tbldata
                bool SpecGrav = false;
                bool lbd = false;
                bool Moist = false;
                bool Sild = false;
                bool Sieve = false;
                bool Impact = false;
                bool Elong = false;
                bool Crush = false;
                bool Flaki = false;
                var aggtTestname = dc.AllInwdDetails_View(RefernceNo, "", 0, "", 0, null, "", "", 0, false, false, true, 0, "", 0, 0, 0, 0, 0, "", 0, RecType);
                foreach (var aggtt in aggtTestname)
                {
                    if (RecType == "AGGT")
                    {
                        if (aggtt.TEST_Sr_No == 1)
                        {
                            Sieve = true;
                        }
                        if (aggtt.TEST_Sr_No == 3)
                        {
                            SpecGrav = true;
                        }
                        if (aggtt.TEST_Sr_No == 4)
                        {
                            lbd = true;
                        }
                        if (aggtt.TEST_Sr_No == 9)
                        {
                            Moist = true;
                        }
                        if (aggtt.TEST_Sr_No == 2)
                        {
                            Sild = true;
                        }
                        if (aggtt.TEST_Sr_No == 7)
                        {
                            Impact = true;
                        }
                        if (aggtt.TEST_Sr_No == 6)
                        {
                            Elong = true;
                        }
                        if (aggtt.TEST_Sr_No == 8)
                        {
                            Crush = true;
                        }
                        if (aggtt.TEST_Sr_No == 5)
                        {
                            Flaki = true;
                        }
                    }
                    // Fetching Data for Mix Design( Aggregate)
                    if (RecType == "MF")
                    {
                        if (aggtt.AGGTINWD_FM_var != null && aggtt.AGGTINWD_FM_var != "")
                        {
                            Sieve = true;
                        }
                        if (aggtt.AGGTINWD_ImpactValue_var != null && aggtt.AGGTINWD_ImpactValue_var != "")
                        {
                            Impact = true;
                        }
                        if (aggtt.AGGTINWD_Flakiness_var != null && aggtt.AGGTINWD_Flakiness_var != "")
                        {
                            Flaki = true;
                        }
                        if (aggtt.AGGTINWD_Flakiness_var != null && aggtt.AGGTINWD_Flakiness_var != "")
                        {
                            Flaki = true;
                        }
                        if (aggtt.AGGTINWD_LBD_var != null && aggtt.AGGTINWD_LBD_var != "")
                        {
                            lbd = true;
                        }
                        if (aggtt.AGGTINWD_MoistureContent_var != null && aggtt.AGGTINWD_MoistureContent_var != "")
                        {
                            Moist = true;
                        }
                        if (aggtt.AGGTINWD_SpecificGravity_var != null && aggtt.AGGTINWD_SpecificGravity_var != "")
                        {
                            SpecGrav = true;
                        }
                        if (aggtt.AGGTINWD_WaterAborp_var != null && aggtt.AGGTINWD_WaterAborp_var != "")
                        {
                            SpecGrav = true;
                        }
                        if (aggtt.AGGTINWD_SildContent_var != null && aggtt.AGGTINWD_SildContent_var != "")
                        {
                            Sild = true;
                        }
                        if (aggtt.AGGTINWD_Elongation_var != null && aggtt.AGGTINWD_Elongation_var != "")
                        {
                            Elong = true;
                        }
                        if (aggtt.AGGTINWD_CrushingValue_var != null && aggtt.AGGTINWD_CrushingValue_var != "")
                        {
                            Crush = true;
                        }
                    }
                }

                PdfPCell cell1;
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(table1);
                table1 = new PdfPTable(7);
                table1.WidthPercentage = 100;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SetTotalWidth(new float[] { 10f, 5f, 3f, 2f, 10f, 5f, 3f });
                string[] header = { " Test", "Result", "Unit", " ", " Test", "Result", "Unit" };
                for (int h = 0; h < header.Count(); h++)
                {
                    cell1 = new PdfPCell(new Phrase(header[h], fontH2));
                    if (h == 0 || h == 4)
                    {
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    }
                    else
                    {
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    }
                    if (h == 3)
                    {
                        cell1 = new PdfPCell(new Phrase(header[h], fontH2));
                        cell1.Rowspan = 6;
                    }
                    table1.AddCell(cell1);
                }
                #region Mix design
                string strNotReq = "Not Requested";
                if (RefernceNo.Contains("69340/") == true)
                    strNotReq = "";
                var MfInwd = dc.MF_View(RefernceNo, MatId, RecType);
                foreach (var mf in MfInwd)
                {
                    if (mf.AGGTINWD_AggregateName_var == "Natural Sand" || mf.AGGTINWD_AggregateName_var == "Crushed Sand" || mf.AGGTINWD_AggregateName_var == "Stone Dust" || mf.AGGTINWD_AggregateName_var == "Grit")
                    {
                        cell1 = new PdfPCell(new Phrase("Specific Gravity", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                        if (SpecGrav == true)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(mf.AGGTINWD_SpecificGravity_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase(" ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Moisture Content", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                        if (Moist == true)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(mf.AGGTINWD_MoistureContent_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase("% ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Water Absorption", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                        if (SpecGrav == true)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(mf.AGGTINWD_WaterAborp_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase("%", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Condition of the Sample", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(mf.AGGTINWD_SampleCondition_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(" ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Loose Bulk Density", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        if (lbd == true)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(mf.AGGTINWD_LBD_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase("kg/lit ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Material finer than 75 u \n (by wet sieving)", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                        if (Sild == true)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(mf.AGGTINWD_SildContent_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase(" %  ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (mf.AGGTINWD_AggregateName_var == "10 mm" || mf.AGGTINWD_AggregateName_var == "20 mm" || mf.AGGTINWD_AggregateName_var == "40 mm" || mf.AGGTINWD_AggregateName_var == "Mix Aggt")
                    {
                        cell1 = new PdfPCell(new Phrase("Specific Gravity", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                        if (SpecGrav == true)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(mf.AGGTINWD_SpecificGravity_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase(" ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Impact Value", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        if (Impact == true)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(mf.AGGTINWD_ImpactValue_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase(" ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Water Absorption", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        if (SpecGrav == true)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(mf.AGGTINWD_WaterAborp_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase("%", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Condition of the Sample", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(mf.AGGTINWD_SampleCondition_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(" ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Loose Bulk Density", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        if (lbd == true)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(mf.AGGTINWD_LBD_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase("kg/lit ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Flakiness Index", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        if (Flaki == true)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(mf.AGGTINWD_Flakiness_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase("", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Elongness Value", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        if (Elong == true)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(mf.AGGTINWD_Elongation_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase("", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Crushing Value", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        if (Crush == true)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(mf.AGGTINWD_CrushingValue_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase("", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                }
                #endregion
                if (RecType == "AGGT")
                {
                    var Inward_aggt = dc.ReportStatus_View("Aggregate Testing", null, null, 1, 0, 0, RefernceNo, 0, 0, 0);
                    foreach (var aggt in Inward_aggt)
                    {
                        if (aggt.AGGTINWD_AggregateName_var.Contains("mm") == true || aggt.AGGTINWD_AggregateName_var == "Mix Aggt")
                        {
                            cell1 = new PdfPCell(new Phrase("Specific Gravity", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            if (SpecGrav == true)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(aggt.AGGTINWD_SpecificGravity_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            cell1 = new PdfPCell(new Phrase(" ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Crushing Value", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            if (Crush == true)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(aggt.AGGTINWD_CrushingValue_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            cell1 = new PdfPCell(new Phrase("%", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Water Absorption", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            if (SpecGrav == true)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(aggt.AGGTINWD_WaterAborp_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            cell1 = new PdfPCell(new Phrase("%", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Impact Value", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            if (Impact == true)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(aggt.AGGTINWD_ImpactValue_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            cell1 = new PdfPCell(new Phrase("%", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Loose Bulk Density", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            if (lbd == true)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(aggt.AGGTINWD_LBD_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            cell1 = new PdfPCell(new Phrase("kg/lit ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Flakiness Index", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            if (Flaki == true)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(aggt.AGGTINWD_Flakiness_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            cell1 = new PdfPCell(new Phrase("%", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Condition of the Sample", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(aggt.AGGTINWD_SampleCondition_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(" ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Elongation Index", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            if (Elong == true)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(aggt.AGGTINWD_Elongation_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            cell1 = new PdfPCell(new Phrase("%", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            /// 16012019
                            cell1 = new PdfPCell(new Phrase(" ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("", fontH1));

                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Moisture Content", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            if (Moist == true)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(aggt.AGGTINWD_MoistureContent_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            cell1 = new PdfPCell(new Phrase("% ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);



                        }
                        //if (mf.AGGTINWD_AggregateName_var == "Natural Sand" || mf.AGGTINWD_AggregateName_var == "Crushed Sand" || mf.AGGTINWD_AggregateName_var == "Stone Dust" || mf.AGGTINWD_AggregateName_var == "Grit")
                        else
                        {
                            cell1 = new PdfPCell(new Phrase("Specific Gravity", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            if (SpecGrav == true)
                            {
                                cell1 = new PdfPCell(new Phrase(aggt.AGGTINWD_SpecificGravity_var, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            cell1 = new PdfPCell(new Phrase(" ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Moisture Content", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            if (Moist == true)
                            {
                                cell1 = new PdfPCell(new Phrase(aggt.AGGTINWD_MoistureContent_var, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            cell1 = new PdfPCell(new Phrase("% ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Water Absorption", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            if (SpecGrav == true)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(aggt.AGGTINWD_WaterAborp_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            cell1 = new PdfPCell(new Phrase("%", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Condition of the Sample", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(aggt.AGGTINWD_SampleCondition_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(" ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Loose Bulk Density", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            if (lbd == true)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(aggt.AGGTINWD_LBD_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            cell1 = new PdfPCell(new Phrase("kg/lit ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Material finer than 75 u \n (by wet sieving)", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            if (Sild == true)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(aggt.AGGTINWD_SildContent_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(strNotReq, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            cell1 = new PdfPCell(new Phrase("%", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }

                    }
                }
                pdfDoc.Add(table1);
                if (Sieve == true)
                {
                    pdfDoc.Add(Chunk.NEWLINE);
                    pdfDoc.Add(new Paragraph("Sieve Analysis (by dry sieving)" + "   " + AggregateName, fontH2));
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    pdfDoc.Add(new Paragraph(" ", fontH2));
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    i = 0;
                    var aggtTest = dc.AggregateAllTestView(RefernceNo, MatId, "AGGTSA");
                    foreach (var aggtt in aggtTest)
                    {
                        if (i == 0)
                        {
                            if (aggtt.AGGTSA_IsPassingLmt_var != string.Empty && aggtt.AGGTSA_IsPassingLmt_var != null)
                            {
                                table1 = new PdfPTable(6);
                                table1.WidthPercentage = 100;
                                table1.SpacingBefore = 6;
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SetTotalWidth(new float[] { 5f, 5f, 5f, 5f, 5f, 5f });
                                string[] subheader = { "Sieve Size", "Weight retained", "Passing", "IS Passing % Limits" };
                                for (int h = 0; h < subheader.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(subheader[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (h == 1)
                                    {
                                        cell1 = new PdfPCell(new Phrase(subheader[h], fontH2));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        cell1.Colspan = 3;
                                    }
                                    if (h == 0 || h == 3)
                                    {
                                        cell1 = new PdfPCell(new Phrase(subheader[h], fontH2));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                        cell1.Rowspan = 2;
                                    }
                                    table1.AddCell(cell1);
                                }
                                cell1 = new PdfPCell(new Phrase("(g)", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase("(%)", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase("Cummu (%)", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase("(%)", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                table1 = new PdfPTable(5);
                                table1.WidthPercentage = 100;
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SetTotalWidth(new float[] { 5f, 5f, 5f, 5f, 5f });
                                string[] subheader = { "Sieve Size", "Weight retained", "Passing" };
                                for (int h = 0; h < subheader.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(subheader[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (h == 1)
                                    {
                                        cell1 = new PdfPCell(new Phrase(subheader[h], fontH2));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        cell1.Colspan = 3;
                                    }
                                    if (h == 0)
                                    {
                                        cell1 = new PdfPCell(new Phrase(subheader[h], fontH2));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                        cell1.Rowspan = 2;
                                    }
                                    table1.AddCell(cell1);
                                }
                                cell1 = new PdfPCell(new Phrase("(g)", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase("(%)", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase("Cummu (%)", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase("(%)", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                        }

                        cell1 = new PdfPCell(new Phrase(aggtt.AGGTSA_SeiveSize_var.ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(aggtt.AGGTSA_Weight_num.ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        if (aggtt.AGGTSA_SeiveSize_var != "Total")
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(aggtt.AGGTSA_WeightRet_dec).ToString("0.00"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            decimal val = 0;
                            val = Convert.ToDecimal(aggtt.AGGTSA_CumuWeightRet_dec.ToString());
                            if (val > 100)
                                val = Convert.ToDecimal(100.00);
                            else if (val < 0)
                                val = Convert.ToDecimal(0.00);

                            cell1 = new PdfPCell(new Phrase(val.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            val = Convert.ToDecimal(aggtt.AGGTSA_CumuPassing_dec.ToString());
                            if (val > 100)
                                val = Convert.ToDecimal(100.00);
                            else if (val < 0)
                                val = Convert.ToDecimal(0.00);
                            cell1 = new PdfPCell(new Phrase(val.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (aggtt.AGGTSA_IsPassingLmt_var != string.Empty && aggtt.AGGTSA_IsPassingLmt_var != null)
                            {
                                cell1 = new PdfPCell(new Phrase(aggtt.AGGTSA_IsPassingLmt_var.ToString(), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                        }
                        else if (aggtt.AGGTSA_SeiveSize_var == "Total")
                        {
                            cell1 = new PdfPCell(new Phrase(" ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Fineness Modulus", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (aggtt.AGGTINWD_FM_var != string.Empty && aggtt.AGGTINWD_FM_var != null)
                            {
                                cell1 = new PdfPCell(new Phrase(aggtt.AGGTINWD_FM_var.ToString(), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            if (aggtt.AGGTSA_IsPassingLmt_var != string.Empty && aggtt.AGGTSA_IsPassingLmt_var != null)
                            {
                                cell1 = new PdfPCell(new Phrase("", fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                        }
                        i++;
                    }
                    table1.SpacingAfter = 8;
                    pdfDoc.Add(table1);
                }

                #endregion
                //table1.SpacingBefore = 10;
                if (pageBrk == true)
                {
                    //table1.SpacingAfter = 8;
                    //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    //table1.WidthPercentage = 100;
                    //pdfDoc.Add(table1);
                    //table1.FlushContent();

                    pdfDoc.Add(new Paragraph("Page 1 of 2", fontH1));

                    //table1 = new PdfPTable(2);
                    //table1.SpacingAfter = 8;
                    //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    //table1.SetWidths(new float[] { 2f, 70f });
                    //table1.WidthPercentage = 100;

                    pdfDoc.NewPage();

                    if (Action.Contains("Print") == true)
                        LogoToPdf(pdfDoc, nablStatus);
                    else if (Action == "Automail" || Action.Contains("Email") == true)
                        LogoToPdfEmail(pdfDoc, nablStatus);
                    else if (Action.Contains("Display") == true)
                        LogoToPdfOld(pdfDoc, Action);

                }
                #region iscode/remarks
                table1 = new PdfPTable(2);
                table1.SpacingAfter = 7;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                var iscd = dc.ISCode_View(0, "", "AGGT", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);

                }
                serial_no = 0;
                var reference = dc.AllRemark_View("", RefernceNo, 0, "AGGT").ToList();
                var referencecount = reference.Count();
                if (referencecount > 0)
                {
                    for (int r = 0; r < referencecount; r++)
                    {
                        if (r == 0)
                        {
                            //pdfDoc.Add(new Paragraph("Remarks : ", fontH2));
                            cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        var remark = dc.AllRemark_View("", "", Convert.ToInt32(reference[r].AGGTDetail_RemarkId_int), "AGGT").ToList();
                        var remarkcount = remark.Count();
                        for (int remk = 0; remk < remarkcount; remk++)
                        {
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(CountRmrk + ")" + Convert.ToString(remark[remk].AGGT_Remark_var), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remark[remk].AGGT_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 8;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);

                #endregion

                //if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Email"))
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 5;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    //
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("Aggregate Testing", null, null, 1, 0, 0, RefernceNo, 0, 0, 0).ToList();
                    var RecNocount = RecNo.Count();
                    for (int r = 0; r < RecNocount; r++)
                    {
                        if (RecNo[r].AGGTINWD_ApprovedBy_tint != null && RecNo[r].AGGTINWD_ApprovedBy_tint.ToString() != string.Empty && RecNo[r].AGGTINWD_ApprovedBy_tint > 0)
                        {
                            var User = dc.User_View(Convert.ToInt32(RecNo[r].AGGTINWD_ApprovedBy_tint), -1, "", "", "").ToList();
                            var ucount = User.Count();
                            for (int userId = 0; userId < ucount; userId++)
                            {

                                pdfDoc.Add(new Paragraph(Convert.ToString(User[userId].USER_Name_var), fontH1));
                                if (User[userId].USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + User[userId].USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(User[userId].USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Email" || Action == "Automail")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }
                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (RecNo[r].AGGTINWD_CheckedBy_tint != null && RecNo[r].AGGTINWD_CheckedBy_tint.ToString() != "" && RecNo[r].AGGTINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(Convert.ToInt32(RecNo[r].AGGTINWD_CheckedBy_tint), -1, "", "", "").ToList();
                            var lginCount = lgin.Count();
                            for (int loginusr = 0; loginusr < lginCount; loginusr++)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by :  " + Convert.ToString(lgin[loginusr].USER_Name_var), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);


                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                if (pageBrk == true)
                    pdfDoc.Add(new Paragraph("Page 2 of 2", fontH1));
                else
                    pdfDoc.Add(new Paragraph("Page 1 of 1", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void Brick_PDFReport(string RefNo, string Action)
        {
            try
            {
                int DAQty = 0, WAQty = 0, CSQty = 0, DSQty = 0;
                DateTime? dtTesting = null;
                var brickInward = dc.BrickInward_View(RefNo, 0);
                foreach (var btinwd in brickInward)
                {

                    Paragraph paragraph = new Paragraph();
                    float marginTop = 100;
                    int nablStatus = -1, SiteRouteId = 0;
                    if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                        nablStatus = getNablLogoStatus("BT-", RefNo);//1 for priting nabl logo
                    if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                    {
                        marginTop = 21;
                    }
                    Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                    var fileName = "BT-_" + RefNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                    if (!Directory.Exists(@foldername))
                        Directory.CreateDirectory(@foldername);
                    string Subfoldername = foldername + "/Brick";
                    if (!Directory.Exists(@Subfoldername))
                        Directory.CreateDirectory(@Subfoldername);
                    string Subfoldername1 = Subfoldername;
                    if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                    {
                        fileName = "BT-_" + RefNo.Replace('/', '_') + ".pdf";
                        Subfoldername1 = foldername;
                    }
                    PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                    //var fileName = "BT-_" + RefNo.Replace('/', '_') + ".pdf";
                    //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                    writer.PageEvent = new classPdfFooter1();

                    pdfDoc.Open();
                    Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                    Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12f, Font.BOLD);
                    Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 8.5f, Font.UNDEFINED);
                    Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 8.1f, Font.BOLD);
                    Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 8f, Font.UNDEFINED);

                    DateTime ApproveDt = new DateTime();
                    PdfPTable table1 = null;
                    pdfDoc.Open();
                    PdfPTable MaindataTable = new PdfPTable(6);
                    MaindataTable.WidthPercentage = 100;
                    float[] widths = new float[] { 18f, 1f, 50f, 18f, 1f, 15f };
                    MaindataTable.SetWidths(widths);
                    MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                    if (Action.Contains("Print") == true)
                        LogoToPdf(pdfDoc, nablStatus);
                    else if (Action == "Automail" || Action.Contains("Email") == true)
                        LogoToPdfEmail(pdfDoc, nablStatus);

                    else if (Action.Contains("Display") == true)
                        LogoToPdfOld(pdfDoc, Action);
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //paragraph.Add(" "); 
                    //pdfDoc.Add(paragraph);
                    ////if (btinwd.BTINWD_Status_tint == 4 || btinwd.BTINWD_Status_tint == 6)
                    SiteRouteId = Convert.ToInt32(btinwd.SITE_Route_Id);

                    if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    pdfDoc.Add(paragraph);
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.Add(btinwd.BTINWD_BrickType_var + " Brick");

                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    #region Heading
                    if (btinwd.BTINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 6);

                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }

                    int Approveby = 0;
                    bool RemotelyAppv = false;
                    paragraph = new Paragraph();

                    string supersedeNote = "", CustName = "", SiteName = "", Address = "";
                    string Witnessby = string.Empty;

                    if (btinwd.INWD_RptSITE_Id != null && btinwd.INWD_RptCL_Id != null)
                    {
                        CustName = btinwd.RptCL_Name_var;
                        SiteName = btinwd.RptST_Name_var;
                        Address = btinwd.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = btinwd.CL_Name_var;
                        SiteName = btinwd.SITE_Name_var;
                        Address = btinwd.CL_OfficeAddress_var;
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (btinwd.BTINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(btinwd.BTINWD_ApprovedBy_tint);
                    }
                    if (Convert.ToString(btinwd.BTINWD_WitnessBy_var) != string.Empty)
                    {
                        Witnessby = btinwd.BTINWD_WitnessBy_var.ToString();
                    }
                    if (Convert.ToString(btinwd.BTINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(btinwd.BTINWD_ApprovedDate_dt);
                    }
                    try
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }

                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("BT-", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(RefNo).Split('/');
                    try
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(" -", fontH2));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }

                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell); Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string strRecNo = btinwd.BTINWD_SetOfRecord_var;
                    if (btinwd.BTINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (btinwd.BTINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (btinwd.BTINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(btinwd.BTINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = ": " + strRecNo + "-R" + btinwd.BTINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(btinwd.BTINWD_Description_var, fontH1));
                    }
                    catch (Exception ex)
                    {

                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Bill No.", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        if (btinwd.SITE_MonthlyBillingStatus_bit == true && btinwd.INWD_BILL_Id == "0")
                        {
                            //Cust_Namecell = new PdfPCell(new Phrase(": " + "Monthly", fontH1));
                            if (btinwd.BTINWD_IssueDate_dt != null)
                            {
                                string monthlyBillNo = Convert.ToDateTime(btinwd.BTINWD_IssueDate_dt).ToString("MMM/yyyy");
                                Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                            }
                            else
                            {
                                Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                            }
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(btinwd.INWD_BILL_Id), fontH1));
                        }
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(btinwd.BTINWD_SupplierName_var, fontH1));
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }

                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        DateTime rDT = btinwd.INWD_ReceivedDate_dt.Value;
                        string receiptDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(receiptDt, fontH1));
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }

                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(btinwd.CONT_Name_var + " - " + btinwd.INWD_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase(btinwd.CONT_Name_var + " - " + btinwd.INWD_ContactNo_var, fontH1));
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    try
                    {
                        dtTesting = Convert.ToDateTime(btinwd.BTINWD_TestedDate_dt);
                        DateTime tDT = Convert.ToDateTime(btinwd.BTINWD_TestedDate_dt);
                        string testingDt = tDT.ToString("dd-MMM-yyyy");
                        //if(testingDt=="" || testingDt==null)
                        //    Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        //else
                        Cust_Namecell = new PdfPCell(new Phrase(testingDt, fontH1));

                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    }
                    catch (Exception ex)
                    {

                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    if (btinwd.BTINWD_RemoteApproved == true && btinwd.BTINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    if (btinwd.INWD_RptSITE_Id != null && btinwd.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(btinwd.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        //DateTime iDT = btinwd.BTINWD_IssueDate_dt.Value;
                        //string issuedt = iDT.ToString("dd-MMM-yyyy");
                        //Cust_Namecell = new PdfPCell(new Phrase(btinwd.BTINWD_IssueDate_dt.Value.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase(btinwd.BTINWD_ApprovedDate_dt.Value.ToString("dd-MMM-yyyy"), fontH1));
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (btinwd.INWD_RptSITE_Id != null && btinwd.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(btinwd.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //ULR No
                    if (Convert.ToString(btinwd.BTINWD_ULRNo_var) != "" && Convert.ToString(btinwd.BTINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(btinwd.BTINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //
                    //MaindataTable.SpacingAfter =1;
                    pdfDoc.Add(MaindataTable);
                    #endregion
                    #region  table heading.
                    //string[] headerDA = { "Sr.No.", "ID Mark", "Dimension(mm)", "Average Length", "Average Width", "Average Height" };
                    string[] headerDA = { "Sr.No.", "ID Mark", "Length(mm)", "Width(mm)", "Height(mm)" };
                    string[] headerWA = { "Sr.No.", "ID Mark", "Weight", "Water absorption", "Average", "Specified limit" };
                    string[] headerCS = { "Sr.No.", "ID Mark", "Dimension", "C/s area", "Load", "Compressive strength", "Avg. Compressive strength", "Complies to the grade" };
                    string[] headerET = { "Sr.No.", "ID Mark", "Observations" };
                    string[] headerDensity = { "Sr.No.", "ID Mark", "Size of specimen (mm)", "Weight", "Density", "Average Density" };

                    string[] subheaderCS = { "", "", "Length(mm)", "Width(mm)", "(mm²)", "(kN)", "(N/mm²)", "(N/mm²)", "" };
                    string[] subheaderWA = { "", "", "Dry (g)", "Wet (g)", "(%)", "(%)", "" };
                    //string[] subheaderDA = { "", "", "Length", "Width", "Height", "", "", "" };
                    string[] subheaderDensity = { "", "", "Length", "Width", "Thickness", "(kg)", "(kg/m³)", "(kg/m³)" };
                    #endregion

                    #region table detail
                    //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));
                    paragraph = new Paragraph();
                    paragraph.Font = fontH2;
                    paragraph.Add(" OBSERVATIONS & CALCULATIONS :");
                    paragraph.SpacingAfter = 1;
                    pdfDoc.Add(paragraph);
                    int i = 0, k = 0;
                    string[] arryForRecType = new string[5];
                    int[] arrayForSrNo = new int[5];
                    var tabData = dc.BrickTest_View(RefNo);
                    foreach (var tabs in tabData)
                    {
                        arryForRecType[i] = tabs.Test_RecType_var;
                        arrayForSrNo[i] = Convert.ToInt32(tabs.TEST_Sr_No);
                        if (tabs.TEST_Sr_No == 3)
                        { DAQty = Convert.ToInt32(tabs.BTTEST_Quantity_tint); }
                        else if (tabs.TEST_Sr_No == 2)
                        { WAQty = Convert.ToInt32(tabs.BTTEST_Quantity_tint); }
                        else if (tabs.TEST_Sr_No == 1)
                        { CSQty = Convert.ToInt32(tabs.BTTEST_Quantity_tint); }
                        else if (tabs.TEST_Sr_No == 5)
                        { DSQty = Convert.ToInt32(tabs.BTTEST_Quantity_tint); }
                        i++;
                    }

                    while (k < arryForRecType.Length)
                    {
                        if (arryForRecType[k] == "BT-" && arrayForSrNo[k] == 3)
                        {
                            #region Dimension Analysis
                            table1 = new PdfPTable(1);
                            table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.SetWidths(new float[] { 100f });
                            PdfPCell cell3;
                            cell3 = new PdfPCell(new Phrase("Dimension Analysis of Brick", fontH1));
                            cell3.Border = PdfPCell.NO_BORDER;
                            cell3.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell3);
                            pdfDoc.Add(table1);
                            //paragraph = new Paragraph();
                            //paragraph.Font = fontH2;
                            //paragraph.Add("Dimension Analysis of Brick");
                            //paragraph.SpacingAfter =1.5f;
                            //pdfDoc.Add(paragraph);
                            //table1 = new PdfPTable(8);
                            table1 = new PdfPTable(5);
                            // table1.SpacingBefore = 1;
                            //float[] widthsDA = new float[] { 16f, 31f, 25f, 25f, 25f, 25f, 25f, 25f };
                            float[] widthsDA = new float[] { 16f, 31f, 25f, 25f, 25f };
                            table1.SetWidths(widthsDA);
                            var brick_DA = dc.BrickDA_View(RefNo).ToList();
                            var count = brick_DA.Count();
                            int b = 0;
                            PdfPCell cell1;

                            for (int h = 0; h < headerDA.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headerDA[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            #region tbldata

                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;
                            for (int j = 0; j < count; j++)
                            {
                                string srNo = Convert.ToString(b + 1);
                                cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                if (brick_DA[j].BTDA_IdMark_var == "" || brick_DA[j].BTDA_IdMark_var == null)
                                {
                                    cell1 = new PdfPCell(new Phrase("-", fontH1));
                                }
                                else
                                {
                                    cell1 = new PdfPCell(new Phrase(brick_DA[j].BTDA_IdMark_var, fontH1));
                                }
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_DA[j].BTDA_AvgLength_dec), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_DA[j].BTDA_AvgWidth_dec), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_DA[j].BTDA_AvgHeight_dec), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);


                                b++;

                            }
                            pdfDoc.Add(table1);
                            #endregion

                            #endregion
                        }
                        else if (arryForRecType[k] == "BT-" && arrayForSrNo[k] == 2)
                        {
                            #region Water Absorption
                            //paragraph = new Paragraph();
                            //paragraph.Font = fontH2;
                            //paragraph.Add("Water Absorption of Brick");
                            //paragraph.SpacingAfter = 1.5f;
                            //pdfDoc.Add(paragraph);

                            table1 = new PdfPTable(1);
                            table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.SetWidths(new float[] { 100f });
                            PdfPCell cell3;
                            cell3 = new PdfPCell(new Phrase("Water Absorption of Brick", fontH1));
                            cell3.Border = PdfPCell.NO_BORDER;
                            cell3.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell3);
                            pdfDoc.Add(table1);
                            table1 = new PdfPTable(7);
                            // table1.SpacingBefore = 2;
                            float[] widthsWA = new float[] { 15f, 20f, 25f, 25f, 34f, 20f, 35f };
                            table1.SetWidths(widthsWA);
                            var brick_WA = dc.BrickWA_View(RefNo).ToList();
                            var count = brick_WA.Count();
                            int b = 0;
                            PdfPCell cell1;
                            for (int h = 0; h < headerWA.Count(); h++)
                            {
                                if (h < 2)
                                {
                                    cell1 = new PdfPCell(new Phrase(headerWA[h], fontH2));
                                    cell1.Rowspan = 2;
                                }
                                else
                                {
                                    if (h == 2)
                                    {
                                        cell1 = new PdfPCell(new Phrase(headerWA[h], fontH2));
                                        cell1.Colspan = 2;
                                    }
                                    else
                                    {
                                        cell1 = new PdfPCell(new Phrase(headerWA[h], fontH2));
                                    }
                                }
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1 = new PdfPCell();
                            for (int h = 2; h < subheaderWA.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(subheaderWA[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;
                            //  pdfDoc.Add(table1);

                            #region tbldata

                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;
                            for (int j = 0; j < count; j++)
                            {
                                string srNo = Convert.ToString(b + 1);
                                cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                if (brick_WA[j].BTWA_IdMark_var == "" || brick_WA[j].BTWA_IdMark_var == null)
                                {
                                    cell1 = new PdfPCell(new Phrase("-", fontH1));
                                }
                                else
                                {
                                    cell1 = new PdfPCell(new Phrase(brick_WA[j].BTWA_IdMark_var, fontH1));
                                }
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_WA[j].BTWA_DryWt_dec), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_WA[j].BTWA_WetWt_dec), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_WA[j].BTWA_WaterAbsorption_dec), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                bool avgFound = false;
                                if (b == 0)
                                {
                                    for (int jj = 0; jj < count; jj++)
                                    {
                                        if (brick_WA[jj].BTWA_Average_dec > 0 && brick_WA[jj].BTWA_Average_dec != null)
                                        {
                                            //cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_WA[count - 1].BTWA_Average_dec), fontH1));
                                            cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_WA[jj].BTWA_Average_dec), fontH1));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                            cell1.Rowspan = count;
                                            table1.AddCell(cell1);


                                            cell1 = new PdfPCell(new Phrase("Avg should not be more than 20%", fontH1));
                                            cell1.Rowspan = count;
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                            table1.AddCell(cell1);
                                            avgFound = true;
                                        }
                                    }
                                    if (avgFound == false)
                                    {
                                        //cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_WA[count - 1].BTWA_Average_dec), fontH1));
                                        cell1 = new PdfPCell(new Phrase("***", fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                        cell1.Rowspan = count;
                                        table1.AddCell(cell1);


                                        cell1 = new PdfPCell(new Phrase("Avg should not be more than 20%", fontH1));
                                        cell1.Rowspan = count;
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                        table1.AddCell(cell1);

                                    }
                                }
                                b++;

                            }
                            // table1.SpacingAfter =2;
                            pdfDoc.Add(table1);

                            #endregion
                            #endregion
                        }
                        else if (arryForRecType[k] == "BT-" && arrayForSrNo[k] == 1)
                        {
                            #region Compressive Strength
                            //paragraph = new Paragraph();
                            //paragraph.Font = fontH2;
                            //paragraph.Add("Compressive Strength of Brick");
                            //paragraph.SpacingAfter = 1.5f;
                            //pdfDoc.Add(paragraph);
                            table1 = new PdfPTable(1);
                            table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.SetWidths(new float[] { 100f });
                            PdfPCell cell3;
                            cell3 = new PdfPCell(new Phrase("Compressive Strength of Brick", fontH1));
                            cell3.Border = PdfPCell.NO_BORDER;
                            cell3.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell3);
                            pdfDoc.Add(table1);
                            table1 = new PdfPTable(9);
                            // table1.SpacingBefore = 2;
                            float[] widthsCS = new float[] { 15f, 30f, 25f, 22f, 17f, 25f, 25f, 35f, 25f };
                            table1.SetWidths(widthsCS);
                            var brick_CS = dc.BrickCS_View(RefNo).ToList();
                            var count = brick_CS.Count();
                            int b = 0;
                            PdfPCell cell1;
                            for (int h = 0; h < headerCS.Count(); h++)
                            {
                                if (h < 2)
                                {
                                    cell1 = new PdfPCell(new Phrase(headerCS[h], fontH2));
                                    cell1.Rowspan = 2;

                                }
                                else
                                {
                                    if (h == 2)
                                    {
                                        cell1 = new PdfPCell(new Phrase(headerCS[h], fontH2));
                                        cell1.Colspan = 2;
                                    }
                                    else
                                    {
                                        cell1 = new PdfPCell(new Phrase(headerCS[h], fontH2));
                                    }
                                }
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1 = new PdfPCell();
                            for (int h = 2; h < subheaderCS.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(subheaderCS[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;
                            // pdfDoc.Add(table1);

                            #region tbldata

                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;

                            for (int j = 0; j < count; j++)
                            {
                                string srNo = Convert.ToString(b + 1);
                                cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                if (brick_CS[j].BTCS_IdMark_var == "" || brick_CS[j].BTCS_IdMark_var == null)
                                {
                                    cell1 = new PdfPCell(new Phrase("-", fontH1));
                                }
                                else
                                {
                                    cell1 = new PdfPCell(new Phrase(brick_CS[j].BTCS_IdMark_var, fontH1));
                                }
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_CS[j].BTCS_Length_dec), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_CS[j].BTCS_Width_dec), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_CS[j].BTCS_Area_dec), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_CS[j].BTCS_Load_dec), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_CS[j].BTCS_Strength_dec), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                if (b == 0)
                                {
                                    for (int jj = 0; jj < count; jj++)
                                    {
                                        if (brick_CS[jj].BTCS_Average_var != "" && brick_CS[jj].BTCS_Average_var != null)
                                        {
                                            //cell1 = new PdfPCell(new Phrase(brick_CS[count - 1].BTCS_Average_var, fontH1));
                                            cell1 = new PdfPCell(new Phrase(brick_CS[jj].BTCS_Average_var, fontH1));
                                            cell1.Rowspan = count;
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                            table1.AddCell(cell1);

                                            //string notes = compl_notes(brick_CS[count - 1].BTCS_Average_var);
                                            string compToGrade = compl_to_grade(brick_CS[jj].BTCS_Average_var, btinwd.BTINWD_BrickType_var);
                                            cell1 = new PdfPCell(new Phrase(compToGrade, fontH1));
                                            cell1.Rowspan = count;
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                            table1.AddCell(cell1);
                                        }
                                    }
                                }
                                b++;

                            }

                            // table1.SpacingAfter =2;
                            pdfDoc.Add(table1);
                            #endregion
                            #endregion
                        }
                        else if (arryForRecType[k] == "BT-" && arrayForSrNo[k] == 4)
                        {
                            #region Efflorescence Test
                            //paragraph = new Paragraph();
                            //paragraph.Font = fontH2;
                            //paragraph.Add("Efflorescence of Brick");
                            //paragraph.SpacingAfter = 1.5f;
                            //pdfDoc.Add(paragraph);
                            table1 = new PdfPTable(1);
                            table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.SetWidths(new float[] { 100f });
                            PdfPCell cell3;
                            cell3 = new PdfPCell(new Phrase("Efflorescence of Brick", fontH1));
                            cell3.Border = PdfPCell.NO_BORDER;
                            cell3.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell3);
                            pdfDoc.Add(table1);
                            table1 = new PdfPTable(3);
                            float[] widthsET = new float[] { 9f, 17f, 40f };
                            table1.SetWidths(widthsET);
                            // table1.SpacingBefore = 2;
                            var brick_ET = dc.BrickET_View(RefNo).ToList();
                            var count = brick_ET.Count();
                            int b = 0;
                            PdfPCell cell1;
                            for (int h = 0; h < headerET.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headerET[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            //  pdfDoc.Add(table1);

                            #region tbldata

                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 60;
                            for (int j = 0; j < count; j++)
                            {
                                string srNo = Convert.ToString(b + 1);
                                cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                if (brick_ET[j].BTET_IdMark_var == "" || brick_ET[j].BTET_IdMark_var == null)
                                {
                                    cell1 = new PdfPCell(new Phrase("-", fontH1));
                                }
                                else
                                {
                                    cell1 = new PdfPCell(new Phrase(brick_ET[j].BTET_IdMark_var, fontH1));
                                }
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_ET[j].BTET_Observation_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                b++;
                            }
                            //  table1.SpacingAfter =2;

                            pdfDoc.Add(table1);
                            #endregion
                            #endregion
                        }
                        else if (arryForRecType[k] == "BT-" && arrayForSrNo[k] == 5)
                        {
                            #region Density
                            //paragraph = new Paragraph();
                            //paragraph.Font = fontH2;
                            //paragraph.Add("Density of Brick");
                            //paragraph.SpacingAfter = 1.5f;
                            //pdfDoc.Add(paragraph);
                            table1 = new PdfPTable(1);
                            table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.SetWidths(new float[] { 100f });
                            PdfPCell cell3;
                            cell3 = new PdfPCell(new Phrase("Density of Brick", fontH1));
                            cell3.Border = PdfPCell.NO_BORDER;
                            cell3.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell3);
                            pdfDoc.Add(table1);
                            table1 = new PdfPTable(8);
                            // table1.SpacingBefore = 2;
                            var brick_Density = dc.BrickDS_View(RefNo).ToList();
                            var count = brick_Density.Count();
                            int b = 0;
                            PdfPCell cell1;
                            for (int h = 0; h < headerDensity.Count(); h++)
                            {
                                if (h < 2)
                                {
                                    cell1 = new PdfPCell(new Phrase(headerDensity[h], fontH2));
                                    cell1.Rowspan = 2;
                                }
                                else
                                {
                                    if (h == 2)
                                    {
                                        cell1 = new PdfPCell(new Phrase(headerDensity[h], fontH2));
                                        cell1.Colspan = 3;
                                    }
                                    else
                                    {
                                        cell1 = new PdfPCell(new Phrase(headerDensity[h], fontH2));
                                    }
                                }
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1 = new PdfPCell();
                            for (int h = 2; h < subheaderDensity.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(subheaderDensity[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;
                            //  pdfDoc.Add(table1);

                            #region tbldata

                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;
                            for (int j = 0; j < count; j++)
                            {
                                string srNo = Convert.ToString(b + 1);
                                cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                if (brick_Density[j].BTDS_IdMark_var == "" || brick_Density[j].BTDS_IdMark_var == null)
                                {
                                    cell1 = new PdfPCell(new Phrase("-", fontH1));
                                }
                                else
                                {
                                    cell1 = new PdfPCell(new Phrase(brick_Density[j].BTDS_IdMark_var, fontH1));
                                }
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_Density[j].BTDS_Length_dec), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_Density[j].BTDS_Width_dec), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_Density[j].BTDS_Thickness_dec), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_Density[j].BTDS_OvenDryWt_dec), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_Density[j].BTDS_Density_dec), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);


                                if (b == 0)
                                {
                                    for (int jj = 0; jj < count; jj++)
                                    {
                                        if (brick_Density[jj].BTDS_Average_var != "" && brick_Density[jj].BTDS_Average_var != null)
                                        {
                                            //cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_Density[count - 1].BTDS_Average_var), fontH1));
                                            cell1 = new PdfPCell(new Phrase(Convert.ToString(brick_Density[jj].BTDS_Average_var), fontH1));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            cell1.Rowspan = count;
                                            cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                            table1.AddCell(cell1);
                                        }
                                    }
                                }
                                b++;
                            }

                            //  table1.SpacingAfter =2;
                            pdfDoc.Add(table1);
                            #endregion

                            #endregion
                        }
                        k++;
                    }

                    #endregion table detail end
                    #region iscode / Remark
                    table1 = new PdfPTable(2);
                    //table1.SpacingAfter =2.5f;
                    table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                    table1.SetWidths(new float[] { 2f, 70f });
                    PdfPCell cell2;
                    int serial_no = 0;
                    int mID = 0;
                    var material = dc.Material_View(btinwd.BTINWD_RecordType_var, "");
                    foreach (var m in material)
                    {
                        mID = m.MATERIAL_Id;
                    }

                    var iscodelist = dc.ISCode_View(mID, "", "BT-", dtTesting).ToList();
                    var remarklist = dc.BrickRemarkDetail_View(RefNo).ToList();

                    if (iscodelist.Count() != 0 || remarklist.Count() != 0)
                    {
                        foreach (var item in iscodelist)
                        {
                            bool add = false;
                            if (item.Isc_Description_var.Contains("specimens"))
                            {
                                if ((CSQty < 5 && CSQty > 0) || (WAQty < 5 && WAQty > 0))
                                    add = true;
                            }
                            else if (item.Isc_Description_var.Contains("Burnt Clay"))
                            {
                                if (DSQty == 0 && btinwd.BTINWD_BrickType_var == "Burnt Clay")
                                    add = true;
                            }
                            else if (item.Isc_Description_var.Contains("Pulverized Fuel"))
                            {
                                if (DSQty == 0 && btinwd.BTINWD_BrickType_var != "Burnt Clay")
                                    add = true;
                            }
                            else
                            {
                                if (DSQty == 0)
                                    add = true;
                            }

                            if (add == true)
                            {
                                if (serial_no == 0)
                                {
                                    //pdfDoc.Add(new Paragraph("References/Notes", fontH2));
                                    cell2 = new PdfPCell(new Phrase("References :", fontH2));
                                    cell2.Colspan = 2;
                                    cell2.Border = PdfPCell.NO_BORDER;
                                    table1.AddCell(cell2);

                                }
                                serial_no = serial_no + 1;
                                //pdfDoc.Add(new Paragraph((serial_no) + "." + item.Isc_Description_var, fontH1));
                                cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ") ", fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                                cell2 = new PdfPCell(new Phrase(item.Isc_Description_var, fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                        }


                        foreach (var item in remarklist)
                        {
                            if (serial_no == 0)
                            {
                                //pdfDoc.Add(new Paragraph("References/Notes", fontH2));
                                cell2 = new PdfPCell(new Phrase("References :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            //pdfDoc.Add(new Paragraph((serial_no + 1) + "." + item.BTREM_Remark_var, fontH1));
                            serial_no = serial_no + 1;
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ") ", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(item.BTREM_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(" ", fontH2));
                            cell2.Border = PdfPCell.NO_BORDER;
                            cell2.Colspan = 2;
                            table1.AddCell(cell2);
                        }

                        //if (CSQty < 8)
                        //{
                        //    pdfDoc.Add(new Paragraph(++serial_no + ".For Compressive Strength , At least 8 specimens are required for the testing, however as per customer request testing is done on lesser no. of specimens", fontH1));
                        //}
                        //if (WAQty < 3)
                        //{
                        //    pdfDoc.Add(new Paragraph(++serial_no + ".For Water Absorption , At least 3 specimens are required for the testing, however as per customer request testing is done on lesser no. of specimens.", fontH1));
                        //}  

                        //if (DSQty < 5 && DSQty > 0)
                        //{
                        //    //pdfDoc.Add(new Paragraph(++serial_no + "***  atleast five specimens are required for testing. However as per customer's request testing is done on lesser no. of specimens", fontH1));
                        //    serial_no = serial_no + 1;
                        //    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ") ", fontH1));
                        //    cell2.Border = PdfPCell.NO_BORDER;
                        //    table1.AddCell(cell2);
                        //    cell2 = new PdfPCell(new Phrase("***  atleast five specimens are required for testing. However as per customer's request testing is done on lesser no. of specimens", fontH1));
                        //    cell2.Border = PdfPCell.NO_BORDER;
                        //    table1.AddCell(cell2);
                        //}
                        //cell2 = new PdfPCell(new Phrase(" ", fontH2));
                        //cell2.Border = PdfPCell.NO_BORDER;
                        //cell2.Colspan = 2;
                        //table1.AddCell(cell2);
                    }
                    if (supersedeNote != "")
                    {
                        if (serial_no == 0)
                        {
                            cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        //cell2 = new PdfPCell(new Phrase(" ", fontH2));
                        //cell2.Border = PdfPCell.NO_BORDER;
                        //cell2.Colspan = 2;
                        //table1.AddCell(cell2);
                    }

                    #region notes

                    cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                    cell2.Colspan = 2;
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    //table1.SpacingAfter =1;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;
                    pdfDoc.Add(table1);

                    #endregion
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH2;
                    paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                    pdfDoc.Add(paragraph);


                    #endregion

                    //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                    if (Action != "Check")
                    {
                        PdfPTable MaindataTable1 = new PdfPTable(1);
                        MaindataTable1.SpacingBefore = 1;
                        MaindataTable1.WidthPercentage = 100;
                        PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                        cellbottom.Border = PdfPCell.NO_BORDER;
                        MaindataTable1.AddCell(cellbottom);
                        pdfDoc.Add(MaindataTable1);

                        #region Signature
                        bool sign = false;
                        //byte[] bytes = null;
                        if (RemotelyAppv == true)
                        {
                            if (Approveby > 0)
                            {
                                var data = dc.Sign_View(Approveby);
                                foreach (var g in data)
                                {
                                    byte[] imageBytes = g.UserSign.ToArray();
                                    MemoryStream mxs1 = new MemoryStream(imageBytes);
                                    iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                    table1 = new PdfPTable(1);
                                    table1.WidthPercentage = 100;
                                    table1.SetWidths(new float[] { 1.9f });
                                    PdfPCell cell = new PdfPCell(image);
                                    cell.FixedHeight = 20;
                                    cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                    cell.Border = PdfPCell.NO_BORDER;
                                    table1.AddCell(cell);

                                    pdfDoc.Add(table1);
                                    //bytes = memoryStream.ToArray();
                                    sign = true;
                                    break;
                                }
                            }
                        }
                        #endregion
                        if (sign == false)
                        {
                            pdfDoc.Add(new Paragraph(" ", fontH1));
                            pdfDoc.Add(new Paragraph(" ", fontH1));
                        }

                        table1 = new PdfPTable(3);
                        table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                        table1.SetWidths(new float[] { 30f, 30f, 30f });
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.WidthPercentage = 100;
                        PdfPCell cell3;
                        try
                        {


                            if (btinwd.BTINWD_ApprovedBy_tint != null)
                            {
                                //pdfDoc.Add(new Paragraph(btinwd.ApprovedByUser, fontH1));
                                cell3 = new PdfPCell(new Phrase(btinwd.ApprovedByUser, fontH1));
                                cell3.Border = PdfPCell.NO_BORDER;
                                cell3.Colspan = 3;
                                table1.AddCell(cell3);
                            }
                            else
                            {
                                //pdfDoc.Add(new Paragraph("-", fontH1));
                                cell3 = new PdfPCell(new Phrase("-", fontH1));
                                cell3.Colspan = 3;
                                cell3.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell3);
                            }
                        }
                        catch (Exception ex)
                        {
                            cell3 = new PdfPCell(new Phrase("-", fontH1));
                            cell3.Colspan = 3;
                            cell3.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell3);
                        }

                        if (btinwd.ApprovedByUserDesig != null)
                        {
                            cell3 = new PdfPCell(new Phrase("(" + btinwd.ApprovedByUserDesig.Replace("(", "").Replace(")", "") + ")", fontH1));
                            cell3.Colspan = 3;
                            cell3.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell3);
                        }
                        if (Action == "Print" || Action == "Email" || Action == "Automail")
                        {
                            cell3 = new PdfPCell(new Phrase(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH1));
                            cell3.HorizontalAlignment = PdfPCell.ALIGN_LEFT;
                            cell3.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell3);
                        }
                        else
                        {
                            cell3 = new PdfPCell(new Phrase("", fontH1));
                            cell3.HorizontalAlignment = PdfPCell.ALIGN_LEFT;
                            cell3.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell3);
                        }

                        if (Witnessby != string.Empty)
                        {

                            cell3 = new PdfPCell(new Phrase("Witness by :  " + Witnessby, fontH1));
                            cell3.HorizontalAlignment = PdfPCell.ALIGN_CENTER;
                            cell3.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell3);
                        }
                        else
                        {
                            cell3 = new PdfPCell(new Phrase("", fontH1));
                            cell3.HorizontalAlignment = PdfPCell.ALIGN_CENTER;
                            cell3.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell3);

                        }
                        if (btinwd.BTINWD_CheckedBy_tint != null)
                        {
                            cell3 = new PdfPCell(new Phrase("Checked By : " + btinwd.CheckedByUser, fontH1));
                            cell3.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                            cell3.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell3);
                            //cellbottom = new PdfPCell(new Paragraph("Checked By : " + btinwd.CheckedByUser, fontH3));
                        }
                        else
                        {
                            cell3 = new PdfPCell(new Phrase("Checked By : -", fontH1));
                            cell3.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                            cell3.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell3);
                            //cellbottom = new PdfPCell(new Paragraph("Checked By : -", fontH3));
                        }


                        pdfDoc.Add(table1);
                        //#endregion


                    }
                    else
                    {
                        //paragraph = new Paragraph();
                        //paragraph.Font = fontH1;
                        //paragraph.Add("  ");
                        //pdfDoc.Add(paragraph);
                        //paragraph = new Paragraph();

                        paragraph = new Paragraph();
                        paragraph.Alignment = Element.ALIGN_LEFT;
                        paragraph.Font = fontH1;
                        paragraph.SpacingBefore = 5;
                        paragraph.Add("This is electronically generated report hence does not require signature. ");
                        pdfDoc.Add(paragraph);

                        paragraph = new Paragraph();
                        paragraph.Font = fontH1;
                        paragraph.SpacingBefore = 5;
                        paragraph.Add("For all technical queries contact on " + tollFree + ".");
                        pdfDoc.Add(paragraph);



                    }
                    var blackListTextFont = FontFactory.GetFont("Verdana", 3);
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = blackListTextFont;
                    paragraph.SpacingBefore = 0f;
                    paragraph.Add("--End of Report--");
                    pdfDoc.Add(paragraph);
                    //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                    //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                    pdfDoc.Close();
                    if (Action != "Email" && Action.Contains("Email") == false)
                    {
                        string pdfPath = @Subfoldername1 + "/" + fileName;
                        DownloadReport(fileName, pdfPath);
                    }

                }
            }
            catch { }
        }
        public void CCH_PDFReport(string ReferenceNo, string Action)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("CCH", ReferenceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "CCH_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/CementChemical";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Automail" || Action == "Email" || Action.Contains("Email") == true)
                {
                    fileName = "CCH_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                // PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "CCH_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);
                MaindataTable.WidthPercentage = 100;

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);
                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                {
                    LogoToPdfEmail(pdfDoc, nablStatus);
                }
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data
                float[] widths = new float[] { 18f, 1f, 52f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                string Grade = ""; string CustName = "", SiteName = "", Address = "";
                DateTime ApproveDt = new DateTime();
                string Witnessby = string.Empty;
                bool RemotelyAppv = false;
                int Approveby = 0;
                string strGrade = "NA";
                string supersedeNote = "";
                DateTime? dtTesting = null;
                var Cement = dc.ReportStatus_View("Cement Chemical Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var cemt in Cement)
                {

                    if (cemt.INWD_RptCL_Id != null && cemt.INWD_RptSITE_Id != null)
                    {
                        CustName = cemt.RptCL_Name_var;
                        SiteName = cemt.RptST_Name_var;
                        Address = cemt.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = cemt.CL_Name_var;
                        SiteName = cemt.SITE_Name_var;
                        Address = cemt.CL_OfficeAddress_var;
                    }
                    SiteRouteId = Convert.ToInt32(cemt.SITE_Route_Id);

                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //   paragraph.Add(" "); pdfDoc.Add(paragraph);
                    //if (cemt.CCHINWD_Status_tint == 4 || cemt.CCHINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Email" || Action == "Automail" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);

                    if (cemt.CCHINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(cemt.CCHINWD_ApprovedBy_tint);
                    }
                    if (Convert.ToString(cemt.CCHINWD_IssueDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(cemt.CCHINWD_IssueDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 5;
                    paragraph.Add("Hydraulic Cement (Chemical)");
                    if (cemt.CCHINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    if (cemt.CCHINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("CCH", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell); Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("CCH - " + cemt.CCHINWD_SetOfRecord_var, fontH1));
                    string strRecNo = cemt.CCHINWD_SetOfRecord_var;
                    if (cemt.CCHINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (cemt.CCHINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (cemt.CCHINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(cemt.CCHINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + cemt.CCHINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Cement name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(cemt.CCHINWD_CementName_var, fontH1));
                    if (cemt.CCHINWD_Grade_var.ToLower().Contains("ppc") == true && cemt.CCHINWD_Grade_var.ToLower().Contains("43") == true)
                        strGrade = "PPC 43 Grade";
                    else if (cemt.CCHINWD_Grade_var.ToLower().Contains("43") == true)
                        strGrade = "43 Grade";
                    else if (cemt.CCHINWD_Grade_var.ToLower().Contains("53") == true)
                        strGrade = "53 Grade";
                    else if (cemt.CCHINWD_Grade_var.ToLower().Contains("ppc") == true)
                        strGrade = "PPC Cement";
                    else if (cemt.CCHINWD_Grade_var.ToLower().Contains("psc") == true)
                        strGrade = "PSC Cement";
                    else
                        strGrade = "NA";
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (cemt.SITE_MonthlyBillingStatus_bit == true && cemt.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (cemt.CCHINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(cemt.CCHINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(cemt.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(cemt.CCHINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (cemt.CCHINWD_ReceivedDate_dt != null)
                    {
                        DateTime rDT = Convert.ToDateTime(cemt.CCHINWD_ReceivedDate_dt);
                        string receiptDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(receiptDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(cemt.CCHINWD_SupplierName_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (cemt.CCHINWD_TestedDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(cemt.CCHINWD_TestedDate_dt);
                        DateTime tDT = Convert.ToDateTime(cemt.CCHINWD_TestedDate_dt);
                        string testingDt = tDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(testingDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Grade", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase(cemt.CCHINWD_Grade_var, fontH1));
                    if (cemt.CCHINWD_Grade_var.Contains("PSC") == true && cemt.CCHINWD_Grade_var.Contains("33") == true)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("PSC", fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(cemt.CCHINWD_Grade_var, fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    //if (cemt.CCHINWD_IssueDate_dt != null)
                    //{
                    //    DateTime iDT = Convert.ToDateTime(cemt.CCHINWD_IssueDate_dt);
                    //    string issuedt = iDT.ToString("dd-MMM-yyyy");
                    //    Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    //}
                    if (cemt.CCHINWD_ApprovedDate_dt != null)
                    {
                        DateTime iDT = Convert.ToDateTime(cemt.CCHINWD_ApprovedDate_dt);
                        string issuedt = iDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Grade = Convert.ToString(cemt.CCHINWD_Grade_var);
                    if (cemt.CCHINWD_WitnessBy_var != null && cemt.CCHINWD_WitnessBy_var != "")
                    {
                        Witnessby = cemt.CCHINWD_WitnessBy_var.ToString();
                    }

                    if (cemt.CCHINWD_RemoteApproved == true && cemt.CCHINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }



                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(cemt.CONT_Name_var + " - " + cemt.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (cemt.INWD_RptSITE_Id != null && cemt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(cemt.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(cemt.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(cemt.CCHINWD_ULRNo_var) != "" && Convert.ToString(cemt.CCHINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Chemical" + "    " + "Group : " + "Cement", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(cemt.CCHINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //
                }
                //MaindataTable.SpacingAfter = 2;
                pdfDoc.Add(MaindataTable);
                #endregion
                bool addStarNote = false;
                var CementChemicalInward_CCH = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, true, 0, "", 0, 0, 0, 0, 0, strGrade, 0, "CCH").ToList();
                var count = CementChemicalInward_CCH.Count();

                //table1.SpacingBefore = 10;
                //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(new Paragraph(" ", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(table1);
                #region tbldata

                PdfPCell cell1;
                string spLimit = "";
                //if (strGrade.ToLower().Contains("43 grade")  == true)
                //    spLimit = "Specified Limits (IS-8112)";
                //else if (strGrade.ToLower().Contains("53 grade")  == true)
                //    spLimit = "Specified Limits (IS-12269)";
                //else if (strGrade.ToLower().Contains("psc")  == true)
                //    spLimit = "Specified Limits (IS-455)";
                //else if (strGrade.ToLower().Contains("ppc")  == true)
                //    spLimit = "Specified Limits (IS-1489)";

                spLimit = "Specified Limits";
                string[] headers = { "Sr.No", "Name Of The Test", "Result", "Unit", spLimit, "Compliance" };
                table1 = new PdfPTable(6);
                for (int h = 0; h < headers.Count(); h++)
                {
                    table1.SetTotalWidth(new float[] { 15f, 80f, 40f, 20f, 60f, 30f });
                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                table1.WidthPercentage = 100;
                for (int i = 0; i < count; i++)
                {
                    string srNo = Convert.ToString(i + 1);
                    cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    string testName = "";
                    testName = CementChemicalInward_CCH[i].TEST_Name_var;
                    testName = getTestNameToDisplay(testName);
                    // sub sup
                    if (testName.Contains("<Sub>") == true)
                    {
                        Phrase phrase = new Phrase(15, "", fontH1);
                        string[] strTemp = testName.Split(new[] { "<Sub>" }, StringSplitOptions.None);
                        foreach (string str in strTemp)
                        {
                            if (str.Contains("</Sub>") == true)
                            {
                                string[] strTemp2 = str.Split(new[] { "</Sub>" }, StringSplitOptions.None);
                                Chunk ck = new Chunk(strTemp2[0], fontH3).SetTextRise(-1);
                                phrase.Add(ck);
                                phrase.Add(strTemp2[1]);
                            }
                            else
                            {
                                phrase.Add(str);
                            }
                        }
                        cell1 = new PdfPCell(phrase);
                    }
                    else
                    {
                        cell1 = new PdfPCell(new Phrase(testName, fontH1));
                    }
                    //

                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(CementChemicalInward_CCH[i].CCHTEST_Result_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(CementChemicalInward_CCH[i].splmt_Unit_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(CementChemicalInward_CCH[i].splmt_SpecifiedLimit_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    if (CementChemicalInward_CCH[i].splmt_SpecifiedLimit_var == "** | ***")
                    {
                        addStarNote = true;
                    }
                    //Complaince 
                    string SpecifiedLmt = "";
                    decimal Obsns = 0;
                    decimal result = 0;
                    Obsns = Convert.ToDecimal(CementChemicalInward_CCH[i].CCHTEST_Result_dec);
                    if (CementChemicalInward_CCH[i].splmt_SpecifiedLimit_var != null)
                        SpecifiedLmt = Convert.ToString(CementChemicalInward_CCH[i].splmt_SpecifiedLimit_var);
                    string[] line = SpecifiedLmt.Split(' ', ',', '-');
                    string res = "", res1 = "", res2 = "";
                    foreach (string line1 in line)
                    {
                        if (line1 != " ")
                        {
                            if (decimal.TryParse(line1, out result))
                            {
                                result = Convert.ToDecimal(line1);
                                res = result.ToString();
                                if (res1 == "")
                                    res1 = result.ToString();
                                else if (res2 == "")
                                    res2 = result.ToString();
                            }
                        }
                    }
                    if (SpecifiedLmt == "---" || SpecifiedLmt == "NA" || SpecifiedLmt == "" || SpecifiedLmt == "**" || SpecifiedLmt == "** | ***")
                    {
                        cell1 = new PdfPCell(new Phrase("---", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else if (SpecifiedLmt.Contains("prestressed structure") == true && Obsns <= Convert.ToDecimal(res1))
                    {
                        cell1 = new PdfPCell(new Phrase("Pass", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else if (SpecifiedLmt.Contains(" - ") == true && Obsns >= Convert.ToDecimal(res1) && Obsns <= Convert.ToDecimal(res2))
                    {
                        cell1 = new PdfPCell(new Phrase("Pass", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else if (Obsns <= result && SpecifiedLmt.Contains("Maximum") == true)
                    {
                        cell1 = new PdfPCell(new Phrase("Pass", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else if (Obsns >= result && SpecifiedLmt.Contains("Minimum") == true)
                    {
                        cell1 = new PdfPCell(new Phrase("Pass", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else
                    {
                        cell1 = new PdfPCell(new Phrase("Fail", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    ////
                }
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SpacingAfter = 8;
                pdfDoc.Add(table1);
                #endregion

                //table1.SpacingBefore = 10;
                #region iscode/remarks
                table1 = new PdfPTable(2);
                table1.SpacingAfter = 8;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                if (strGrade == "PPC 43 Grade")
                    strGrade = "43 Grade";
                var iscd = dc.ISCode_View(0, strGrade, "CCH", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                serial_no = 0;
                var re = dc.AllRemark_View("", ReferenceNo, 0, "CCH").ToList();
                if (re.Count > 0)
                {
                    foreach (var r in re)
                    {
                        var remark = dc.AllRemark_View("", "", Convert.ToInt32(r.CCHDetail_RemarkId_int), "CCH");
                        foreach (var remk in remark)
                        {
                            if (serial_no == 0)
                            {
                                //pdfDoc.Add(new Paragraph("Remarks :", fontH2));
                                cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(serial_no + ")" + remk.CCH_Remark_var.ToString(), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remk.CCH_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (addStarNote == true)
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("** indicates that maximum insoluble residue = x=4[(100-x)/100], Where x is % Flyash used.", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("*** indicates that minimum insoluble residue = 0.6x, Where x is % Flyash used.", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 8;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);

                #endregion

                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 12;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("Cement Chemical Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
                    foreach (var r in RecNo)
                    {
                        if (r.CCHINWD_ApprovedBy_tint != null && r.CCHINWD_ApprovedBy_tint.ToString() != "" && r.CCHINWD_ApprovedBy_tint > 0)
                        {
                            var U = dc.User_View(r.CCHINWD_ApprovedBy_tint, -1, "", "", "");
                            foreach (var r1 in U)
                            {

                                pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                                if (r1.USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Email" || Action == "Automail")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }
                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (r.CCHINWD_CheckedBy_tint != null && r.CCHINWD_CheckedBy_tint.ToString() != "" && r.CCHINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(r.CCHINWD_CheckedBy_tint, -1, "", "", "");
                            foreach (var loginusr in lgin)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by : " + loginusr.USER_Name_var.ToString(), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);


                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                pdfDoc.Add(new Paragraph("Page 1 of 1", fontH1));
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }

            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }

        }
        public void Cement_PDFReport(string ReferenceNo, string Action)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("CEMT", ReferenceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "CEMT_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Cement";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "CEMT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                //  PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "CEMT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;
                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data
                DateTime ApproveDt = new DateTime();
                float[] widths = new float[] { 18f, 1f, 52f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                //string Grade = "";
                string Witnessby = string.Empty;
                bool RemotelyAppv = false;

                int Approveby = 0;
                string strGrade = "NA", CustName = "", SiteName = "", Address = "";
                //string cementName = "";
                string supersedeNote = "";
                DateTime? dtTesting = null;
                var Cement = dc.ReportStatus_View("Cement Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var cemt in Cement)
                {
                    //cementName = cemt.CEMTINWD_CementName_var;
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //if (cemt.CEMTINWD_Status_tint == 4 || cemt.CEMTINWD_Status_tint == 6)
                    //  paragraph.Add(" "); pdfDoc.Add(paragraph);
                    if (Action == "Print" || Action == "Email" || Action == "Automail" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);
                    SiteRouteId = Convert.ToInt32(cemt.SITE_Route_Id);

                    if (cemt.INWD_RptSITE_Id != null && cemt.INWD_RptCL_Id != null)
                    {
                        CustName = cemt.RptCL_Name_var;
                        SiteName = cemt.RptST_Name_var;
                        Address = cemt.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = cemt.CL_Name_var;
                        SiteName = cemt.SITE_Name_var;
                        Address = cemt.CL_OfficeAddress_var;
                    }

                    if (cemt.CEMTINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(cemt.CEMTINWD_ApprovedBy_tint);
                    }

                    if (Convert.ToString(cemt.CEMTINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(cemt.CEMTINWD_ApprovedDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 5;
                    paragraph.Add(" Hydraulic Cement (Physical)");
                    if (cemt.CEMTINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}


                    if (cemt.CEMTINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("CEMT", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("CEMT - " + cemt.CEMTINWD_SetOfRecord_var, fontH1));
                    string strRecNo = cemt.CEMTINWD_SetOfRecord_var;
                    if (cemt.CEMTINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (cemt.CEMTINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (cemt.CEMTINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(cemt.CEMTINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + cemt.CEMTINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Cement name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(cemt.CEMTINWD_CementName_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (cemt.SITE_MonthlyBillingStatus_bit == true && cemt.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (cemt.CEMTINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(cemt.CEMTINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(cemt.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(cemt.CEMTINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (cemt.CEMTINWD_ReceivedDate_dt != null)
                    {
                        DateTime rDT = Convert.ToDateTime(cemt.CEMTINWD_ReceivedDate_dt);
                        string receiptDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(receiptDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(cemt.CEMTINWD_SupplierName_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string CastingDt = "";
                    if (cemt.CEMTINWD_TestedDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(cemt.CEMTINWD_TestedDate_dt);
                        DateTime cDT = Convert.ToDateTime(cemt.CEMTINWD_TestedDate_dt);
                        CastingDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(CastingDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Grade", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase(cemt.CEMTINWD_Grade_var, fontH1));
                    strGrade = Convert.ToString(cemt.CEMTINWD_Grade_var);
                    if (strGrade.Contains("PSC") == true && strGrade.Contains("33") == true)
                        strGrade = "PSC";
                    Cust_Namecell = new PdfPCell(new Phrase(strGrade, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //if (cemt.CEMTINWD_IssueDate_dt != null)
                    //{
                    //    DateTime iDT = Convert.ToDateTime(cemt.CEMTINWD_IssueDate_dt);
                    //    string issuedt = iDT.ToString("dd-MMM-yyyy");
                    //    Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    //}
                    if (cemt.CEMTINWD_ApprovedDate_dt != null)
                    {
                        DateTime iDT = Convert.ToDateTime(cemt.CEMTINWD_ApprovedDate_dt);
                        string issuedt = iDT.ToString("dd-MMM-yyyy");

                        if (cemt.CEMTINWD_TestedDate_dt != null)
                        {
                            DateTime Testdt = Convert.ToDateTime(CastingDt);
                            DateTime AprDt = Convert.ToDateTime(issuedt);
                            int DaysDiff = 0;
                            DaysDiff = Convert.ToInt32((Testdt - AprDt).TotalDays);
                            if (DaysDiff > 0)
                            {
                                issuedt = "---";
                            }
                        }
                        Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    strGrade = Convert.ToString(cemt.CEMTINWD_Grade_var);
                    if (cemt.CEMTINWD_WitnessBy_var != null && cemt.CEMTINWD_WitnessBy_var != "")
                    {
                        Witnessby = cemt.CEMTINWD_WitnessBy_var.ToString();
                    }
                    if (cemt.CEMTINWD_RemoteApproved == true && cemt.CEMTINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }

                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(cemt.CONT_Name_var + " - " + cemt.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (cemt.INWD_RptSITE_Id != null && cemt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(cemt.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(cemt.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(cemt.CEMTINWD_ULRNo_var) != "" && Convert.ToString(cemt.CEMTINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(cemt.CEMTINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //
                    break;
                }
                //MaindataTable.SpacingAfter = 2;
                pdfDoc.Add(MaindataTable);

                #endregion

                // pdfDoc.Add(Chunk.NEWLINE);
                //table1.SpacingBefore = 10;
                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(new Paragraph(" ", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                #region tbldata

                PdfPCell cell1;
                table1 = new PdfPTable(6);  //tbl
                table1.WidthPercentage = 100;

                int SrNo = 0;
                int i = 0;
                var details = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, true, 0, "", 0, 0, 0, 0, 0, "", 0, "CEMT");
                foreach (var CEMT in details)
                {
                    if (SrNo == 0)
                    {
                        //table1.SetTotalWidth(new float[] { 8f, 50f, 10f, 15f, 20f, 15f, 50f });
                        table1.SetTotalWidth(new float[] { 50f, 14f, 15f, 20f, 18f, 50f });
                        //cell1 = new PdfPCell(new Phrase("Sr No.", fontH2));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Name Of The Test", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Unit", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Result", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Specified Limits", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Compliance", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Method Of Testing", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                    }
                    SrNo++;
                    //cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                    //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    //table1.AddCell(cell1);


                    bool valid = false;
                    string TEST_Name_var = "";

                    if (CEMT.TEST_Name_var.ToString() == "Compressive Strength")
                    {
                        if (CEMT.CEMTTEST_Days_tint.ToString() != "" && CEMT.CEMTTEST_Days_tint.ToString() != null && CEMT.CEMTTEST_Days_tint.ToString() != "0")
                        {
                            TEST_Name_var = " ";
                            if (CEMT.CEMTTEST_Days_tint == 3)
                                //TEST_Name_var = "72 +- 1hr";
                                TEST_Name_var = "72 +/- 1hr";
                            else if (CEMT.CEMTTEST_Days_tint == 7)
                                TEST_Name_var = "168 +/- 2hr";
                            else if (CEMT.CEMTTEST_Days_tint == 28)
                                TEST_Name_var = "672 +/- 4hr";
                            TEST_Name_var += "(" + "" + CEMT.CEMTTEST_Days_tint.ToString() + " " + "Days" + " " + ")" + " " + CEMT.TEST_Name_var.ToString();
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(TEST_Name_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                        }
                    }
                    else
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CEMT.TEST_Name_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                    }
                    var Id = dc.AllInwdDetails_View("", "", 0, "", 0, null, "", "", 0, false, false, true, CEMT.TEST_Id, "", 0, 0, 0, 0, 0, "", 0, "CEMT");
                    foreach (var testid in Id)
                    {
                        valid = true;

                        if (testid.splmt_Unit_var != null && testid.splmt_Unit_var.Contains("<sup>") == true)
                        {
                            Phrase phrase = new Phrase(15, "", fontH1);
                            string[] strTemp = testid.splmt_Unit_var.Split(new[] { "<sup>" }, StringSplitOptions.None);
                            foreach (string str in strTemp)
                            {
                                if (str.Contains("</sup>") == true)
                                {
                                    string[] strTemp2 = str.Split(new[] { "</sup>" }, StringSplitOptions.None);
                                    Chunk ck = new Chunk(strTemp2[0], fontH3).SetTextRise(3);
                                    phrase.Add(ck);
                                    phrase.Add(strTemp2[1]);
                                }
                                else
                                {
                                    phrase.Add(str);
                                }
                            }
                            cell1 = new PdfPCell(phrase);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(testid.splmt_Unit_var, fontH1));
                        }

                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        //if (CEMT.TEST_Name_var.ToString() == "Compressive Strength")
                        //    if (Convert.ToString(CEMT.CEMTTEST_Result_var).Trim() != "Awaited")
                        //         cell1 = new PdfPCell(new Phrase(Math.Round (Convert.ToDecimal(CEMT.CEMTTEST_Result_var),0).ToString(), fontH1));
                        //    else
                        //        cell1 = new PdfPCell(new Phrase(CEMT.CEMTTEST_Result_var.ToString(), fontH1));
                        //else
                        cell1 = new PdfPCell(new Phrase(CEMT.CEMTTEST_Result_var, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        //specified limit
                        string strSpecLim = "", strMethodOfTesting = "";
                        string[] SplitString;
                        strSpecLim = testid.splmt_SpecifiedLimit_var;
                        strMethodOfTesting = testid.splmt_testingMethod_var;

                        if (strSpecLim.Contains("=") == true)
                        {
                            SplitString = strSpecLim.Split('=');

                            if (CEMT.TEST_Name_var == "Initial Setting Time")
                            {
                                if (strSpecLim.Contains("IST") == true)
                                {
                                    strSpecLim = SplitString[1];
                                }
                            }
                            else if (CEMT.TEST_Name_var == "Final Setting Time")
                            {
                                if (strSpecLim.Contains("FST") == true)
                                {
                                    strSpecLim = SplitString[1];
                                }
                            }
                        }

                        if (CEMT.TEST_Name_var.ToString() == "Compressive Strength")
                        {
                            strSpecLim = "---";
                            if (CEMT.CEMTTEST_Days_tint == 3)
                            //if (CEMT.TEST_Name_var == "3 Days Compressive Strength" )
                            {
                                if (strGrade.ToLower().Contains("43") == true) //43 grade
                                    strSpecLim = "Minimum 23";
                                else if (strGrade.ToLower().Contains("53") == true) //53 grade
                                    strSpecLim = "Minimum 27";
                                else
                                    strSpecLim = "Minimum 16";

                                strMethodOfTesting = "IS:4031 (Part-6) - 1988-RA(2014)";
                            }
                            else if (CEMT.CEMTTEST_Days_tint == 7)
                            //else if (CEMT.TEST_Name_var == "7 Days Compressive Strength")
                            {
                                if (strGrade.ToLower().Contains("43") == true) //43 grade
                                    strSpecLim = "Minimum 33";
                                else if (strGrade.ToLower().Contains("53") == true) //53 grade
                                    strSpecLim = "Minimum 37";
                                else
                                    strSpecLim = "Minimum 22";

                                strMethodOfTesting = "IS:4031 (Part-6) - 1988-RA(2014)";
                            }
                            if (CEMT.CEMTTEST_Days_tint == 28)
                            //else if (CEMT.TEST_Name_var == "28 Days Compressive Strength")
                            {
                                if (strGrade.ToLower().Contains("43") == true)  //43 grade
                                {
                                    if (strGrade.ToLower().Contains("opc") == true)
                                        strSpecLim = "Minimum 43, Maximum 58";
                                    else
                                        strSpecLim = "Minimum 43";

                                }
                                else if (strGrade.ToLower().Contains("53") == true)  //53 grade
                                    strSpecLim = "Minimum 53";
                                else
                                    strSpecLim = "Minimum 33";

                                strMethodOfTesting = "IS:4031 (Part-6) - 1988-RA(2014)";
                            }
                        }
                        if (CEMT.TEST_Name_var == "Fineness By Blain`s Air Permeability Method")
                        {
                            if (strGrade.ToLower().Contains("psc") == true)
                                strSpecLim = "Minimum 225";
                            else if (strGrade.ToLower().Contains("ppc") == true)
                                strSpecLim = "Minimum 300";
                            else if ((strGrade.ToLower().Contains("43") == true || strGrade.Contains("53") == true)
                                && strGrade.ToLower().Contains("opc") == true)
                                strSpecLim = "Minimum 225";
                            else
                                strSpecLim = "For OPC 43/53 - Minimum 225, For PPC - Minimum 300, For PSC - Minimum 225";


                        }
                        else if (CEMT.TEST_Name_var == "Density")
                            strMethodOfTesting = "IS:4031 (Part-11) - 1988-RA(2014)";
                        else if (CEMT.TEST_Name_var == "Fineness By Dry Seiving")
                            strMethodOfTesting = "IS:4031 (Part-1) - 1996-RA(2011)";

                        //cell1 = new PdfPCell(new Phrase(Convert.ToString(testid.splmt_SpecifiedLimit_var), fontH1));
                        cell1 = new PdfPCell(new Phrase(strSpecLim, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        //result pass-fail
                        decimal SpecifiedLmtRes = 0;
                        bool validmax = false;
                        string res = "";
                        //string[] SpceifiedLmt = Convert.ToString(testid.splmt_SpecifiedLimit_var).Split(' ', ',');
                        string[] SpceifiedLmt = Convert.ToString(strSpecLim).Split(' ', ',');
                        foreach (var Comp in SpceifiedLmt)
                        {
                            if (Comp != "")
                            {
                                if (Comp.Trim() == "Maximum")
                                {
                                    validmax = true;
                                }
                                if (Comp.Trim() == "PCC" || Comp.Trim() == "RCC")
                                {
                                    res = res + " " + "-" + " " + Comp + "\n";
                                }
                                if (decimal.TryParse(Comp, out SpecifiedLmtRes))
                                {
                                    SpecifiedLmtRes = Convert.ToDecimal(Comp.ToString());
                                    if (validmax == true)
                                    {
                                        if (Convert.ToString(CEMT.CEMTTEST_Result_var).Trim() != "Awaited" && Convert.ToString(CEMT.CEMTTEST_Result_var).Trim() != "*" && Convert.ToString(testid.splmt_SpecifiedLimit_var) != "---" && Convert.ToString(testid.splmt_SpecifiedLimit_var) != "" && Convert.ToString(testid.splmt_SpecifiedLimit_var).Trim() != "Not Specified")
                                        {
                                            if ((Convert.ToDecimal(CEMT.CEMTTEST_Result_var)) <= Convert.ToDecimal(SpecifiedLmtRes))
                                            {
                                                if (res != "Fail ")
                                                    res = "Pass ";
                                            }
                                            else if ((Convert.ToDecimal(CEMT.CEMTTEST_Result_var)) > Convert.ToDecimal(SpecifiedLmtRes))
                                            {
                                                res = "Crossing the upper limit ";
                                            }
                                            else
                                            {
                                                res = "Fail ";
                                            }
                                        }
                                        else
                                        {
                                            res = "---";
                                        }
                                    }
                                    else
                                    {
                                        if (Convert.ToString(CEMT.CEMTTEST_Result_var).Trim() != "Awaited" && Convert.ToString(CEMT.CEMTTEST_Result_var).Trim() != "*" && Convert.ToString(testid.splmt_SpecifiedLimit_var) != "---" && Convert.ToString(testid.splmt_SpecifiedLimit_var) != "" && Convert.ToString(testid.splmt_SpecifiedLimit_var).Trim() != "Not Specified")
                                        {
                                            if ((Convert.ToDecimal(CEMT.CEMTTEST_Result_var)) >= Convert.ToDecimal(SpecifiedLmtRes))
                                            {
                                                if (res != "Fail ")
                                                    res = "Pass ";
                                            }
                                            else
                                            {
                                                res = "Fail ";
                                            }
                                        }
                                        else
                                        {
                                            res = "---";
                                        }
                                    }
                                }

                            }
                        }
                        if (res == "")
                        {
                            res = "---";
                        }
                        cell1 = new PdfPCell(new Phrase(res, fontH1));
                        ////
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase(testid.splmt_testingMethod_var, fontH1));
                        cell1 = new PdfPCell(new Phrase(strMethodOfTesting, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        break;
                    }
                    if (valid == false)
                    {
                        cell1 = new PdfPCell(new Phrase("---", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CEMT.CEMTTEST_Result_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("---", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("---", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("---", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    i++;
                }

                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SpacingAfter = 8;
                pdfDoc.Add(table1);
                #endregion

                //table1.SpacingBefore = 10;
                #region iscode/remarks
                table1 = new PdfPTable(2);
                table1.SpacingAfter = 8;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                var iscd = dc.ISCode_View(0, strGrade, "CEMT", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                serial_no = 0;
                var re = dc.AllRemark_View("", ReferenceNo, 0, "CEMT").ToList();
                if (re.Count > 0)
                {
                    foreach (var r in re)
                    {
                        var remark = dc.AllRemark_View("", "", Convert.ToInt32(r.CEMTDetail_RemarkId_int), "CEMT");
                        foreach (var remk in remark)
                        {
                            if (serial_no == 0)
                            {
                                //table1.SpacingBefore = 10;
                                //pdfDoc.Add(new Paragraph("Remarks :", fontH2));
                                cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(SrNo + ")" + remk.CEMT_Remark_var.ToString(), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remk.CEMT_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {

                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 8;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);


                #endregion

                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 12;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("Cement Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
                    foreach (var r in RecNo)
                    {
                        if (r.CEMTINWD_ApprovedBy_tint != null && r.CEMTINWD_ApprovedBy_tint.ToString() != "" && r.CEMTINWD_ApprovedBy_tint > 0)
                        {
                            var U = dc.User_View(r.CEMTINWD_ApprovedBy_tint, -1, "", "", "");
                            foreach (var r1 in U)
                            {

                                pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                                if (r1.USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Email" || Action == "Automail")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }
                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (r.CEMTINWD_CheckedBy_tint != null && r.CEMTINWD_CheckedBy_tint.ToString() != "" && r.CEMTINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(r.CEMTINWD_CheckedBy_tint, -1, "", "", "");
                            foreach (var loginusr in lgin)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by : " + loginusr.USER_Name_var.ToString(), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);


                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                pdfDoc.Add(new Paragraph("Page 1 of 1", fontH1));
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void Core_PDFReport(string ReferenceNo, string Action)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 90;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("CR", ReferenceNo);
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "CR_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Core";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "CR_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                //PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "CR_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.6f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.3f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 8.8f, Font.UNDEFINED);


                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action == "Automail" || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data
                DateTime ApproveDt = new DateTime();
                //float[] widths = new float[] { 18f, 1f, 47f, 20f, 1f, 15f };
                float[] widths = new float[] { 18f, 1f, 47f, 23f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                int TestId = 0;
                int PrintPulse = 0;
                string Witnesby = string.Empty;
                bool RemotelyAppv = false;
                int Approveby = 0;
                string supersedeNote = "", CustName = "", SiteName = "", Address = "";
                DateTime? dtTesting = null;
                var Core = dc.ReportStatus_View("Core Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var CoreTest in Core)
                {

                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Add(" ");
                    pdfDoc.Add(paragraph);
                    //if (CoreTest.CRINWD_Status_tint == 4 || CoreTest.CRINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    pdfDoc.Add(paragraph);

                    SiteRouteId = Convert.ToInt32(CoreTest.SITE_Route_Id);

                    if (CoreTest.INWD_RptSITE_Id != null && CoreTest.INWD_RptCL_Id != null)
                    {
                        CustName = CoreTest.RptCL_Name_var;
                        SiteName = CoreTest.RptST_Name_var;
                        Address = CoreTest.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = CoreTest.CL_Name_var;
                        SiteName = CoreTest.SITE_Name_var;
                        Address = CoreTest.CL_OfficeAddress_var;
                    }

                    if (Convert.ToString(CoreTest.CRINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(CoreTest.CRINWD_ApprovedDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 2;

                    if (CoreTest.CRINWD_Cylinder_bit != null)
                    {
                        if (CoreTest.CRINWD_Cylinder_bit == true)
                        {
                            paragraph.Add("Concrete Cylinder Compressive Strength");
                        }
                        else
                            paragraph.Add("Concrete Core Compressive Strength");
                    }
                    else
                    {
                        paragraph.Add("Concrete Core Compressive Strength");
                    }

                    if (CoreTest.CRINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    paragraph.SpacingAfter = 2;
                    pdfDoc.Add(paragraph);
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{

                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    if (CoreTest.CRINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("CR", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("CR - " + Convert.ToString(CoreTest.CRINWD_SetOfRecord_var), fontH1));
                    string strRecNo = CoreTest.CRINWD_SetOfRecord_var;
                    if (CoreTest.CRINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (CoreTest.CRINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (CoreTest.CRINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(CoreTest.CRINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + CoreTest.CRINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Concrete Member", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CoreTest.CRINWD_ConcreteMember_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No.", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (CoreTest.SITE_MonthlyBillingStatus_bit == true && CoreTest.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (CoreTest.CRINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(CoreTest.CRINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(CoreTest.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Grade of Concrete", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CoreTest.CRINWD_Grade_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (CoreTest.CRINWD_ReceivedDate_dt != null)
                    {
                        DateTime cDT = Convert.ToDateTime(CoreTest.CRINWD_ReceivedDate_dt);
                        string ReceiptDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(ReceiptDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Curring Conditions", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CoreTest.CRINWD_CurrCondition_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Specimen Extraction Date", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (CoreTest.CRINWD_SpecimenExtDate_dt != null && CoreTest.CRINWD_SpecimenExtDate_dt != "")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(DateTime.ParseExact(CoreTest.CRINWD_SpecimenExtDate_dt.ToString(), "dd/MM/yyyy", null).ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase(CoreTest.CRINWD_SpecimenExtDate_dt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(CoreTest.CONT_Name_var + " - " + CoreTest.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase); //Cust_Namecell = new PdfPCell(new Phrase(CoreTest.CONT_Name_var + " - " + CoreTest.CONT_ContactNo_var, fontH1));//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (CoreTest.CRINWD_TestingDate_dt != null && CoreTest.CRINWD_TestingDate_dt.ToString() != "")
                    {
                        dtTesting = Convert.ToDateTime(CoreTest.CRINWD_TestingDate_dt);
                        //Cust_Namecell = new PdfPCell(new Phrase(DateTime.ParseExact(CoreTest.CRINWD_TestingDate_dt.ToString(), "dd/MM/yyyy", null).ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToDateTime(CoreTest.CRINWD_TestingDate_dt).ToString("dd-MMM-yyyy"), fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    if (CoreTest.CRINWD_WitnessBy_var != null && CoreTest.CRINWD_WitnessBy_var != "")
                    {
                        Witnesby = CoreTest.CRINWD_WitnessBy_var;
                    }
                    if (Convert.ToString(CoreTest.CRINWD_PulseVelocity_bit) != null)
                    {
                        PrintPulse = Convert.ToInt32(CoreTest.CRINWD_PulseVelocity_bit);
                    }
                    TestId = Convert.ToInt32(CoreTest.CRINWD_TestId_int);
                    if (CoreTest.CRINWD_RemoteApproved == true && CoreTest.CRINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }
                    if (CoreTest.CRINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(CoreTest.CRINWD_ApprovedBy_tint);
                    }


                    if (CoreTest.INWD_RptSITE_Id != null && CoreTest.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(CoreTest.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    //if (CoreTest.CRINWD_IssueDate_dt != null)
                    //{
                    //    DateTime iDT = Convert.ToDateTime(CoreTest.CRINWD_IssueDate_dt);
                    //    string issuedt = iDT.ToString("dd-MMM-yyyy");
                    //    Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    //}
                    if (CoreTest.CRINWD_ApprovedDate_dt != null)
                    {
                        DateTime iDT = Convert.ToDateTime(CoreTest.CRINWD_ApprovedDate_dt);
                        string issuedt = iDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    if (CoreTest.INWD_RptSITE_Id != null && CoreTest.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(CoreTest.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);

                    }

                    //ULR No
                    if (Convert.ToString(CoreTest.CRINWD_ULRNo_var) != "" && Convert.ToString(CoreTest.CRINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(CoreTest.CRINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //
                }
                //MaindataTable.SpacingAfter = 1;
                pdfDoc.Add(MaindataTable);

                #endregion
                //  pdfDoc.Add(Chunk.NEWLINE);
                //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(new Paragraph(" ", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 3; // 10;
                pdfDoc.Add(paragraph);
                #region tbldata

                PdfPCell cell1;
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(table1);

                table1 = new PdfPTable(12);
                table1.WidthPercentage = 100;
                table1.SetTotalWidth(new float[] { 6.5f, 10f, 10f, 12f, 10f, 10f, 10f, 10f, 8f, 10f, 12f, 13f });
                string[] headers = { "Sr No.", "ID Mark", "Diameter \n \n \n(mm)", "Date of Casting", "Age of concrete \n \n(Days)", "Area of cross section \n(mm²)", "Weight before capping \n(kg)", "Density of Concrete \n \n (kg/m³)", "Load at failure \n \n (kN)", "Comp. Strength of Core\n(N/mm²)", "Corrected comp. strength\n (N/mm²)", "Equivalent cube comp. strength \n (N/mm²)" };
                for (int h = 0; h < headers.Count(); h++)
                {
                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }

                var CoreTesting = dc.TestDetail_Title_View(ReferenceNo, 0, "CR", false).ToList();
                var Count = CoreTesting.Count();

                int SrNo = 0;
                for (int cr = 0; cr < Count; cr++)
                {
                    if (Convert.ToString(CoreTesting[cr].Description_var) != "")
                    {
                        SrNo++;
                        cell1 = new PdfPCell(new Phrase(SrNo.ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CoreTesting[cr].Description_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CoreTesting[cr].Dia_int), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CoreTesting[cr].Castingdate_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CoreTesting[cr].Age_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CoreTesting[cr].CsArea_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CoreTesting[cr].Weight_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CoreTesting[cr].Density_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CoreTesting[cr].Reading_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CoreTesting[cr].CompStr_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CoreTesting[cr].CorrCompStr_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CoreTesting[cr].EquCubeStr_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else
                    {
                        if (Convert.ToString(CoreTesting[cr].TitleId_int) != "")
                        {
                            if (Convert.ToInt32(CoreTesting[cr].TitleId_int) > 0)
                            {
                                var crr = dc.TestDetail_Title_View(ReferenceNo, Convert.ToInt32(CoreTesting[cr].TitleId_int), "CR", false);
                                foreach (var title in crr)
                                {
                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(title.TitleDesc_var), fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.Colspan = 12;
                                    table1.AddCell(cell1);
                                    break;
                                }
                            }
                        }
                    }
                }
                table1.SpacingAfter = 1;
                pdfDoc.Add(table1);
                //pdfDoc.Add(Chunk.NEWLINE);
                //pdfDoc.Add(new Paragraph("GENERAL INFORMATION & MODE OF FAILURE :", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(new Paragraph(" ", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("GENERAL INFORMATION & MODE OF FAILURE :");
                paragraph.SpacingAfter = 3;
                pdfDoc.Add(paragraph);


                if (PrintPulse == 1)
                {
                    table1 = new PdfPTable(8);
                    table1.WidthPercentage = 100;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetTotalWidth(new float[] { 5f, 40f, 10f, 10f, 10f, 10f, 10f, 12f });
                    string[] subheader = { "Sr No.", "ID Mark", "Correction Factor", "Core Length (mm)", "Pulse velocity", "Mode Of Failure" };
                    for (int h = 0; h < subheader.Count(); h++)
                    {
                        cell1 = new PdfPCell(new Phrase(subheader[h], fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        if (PrintPulse == 1)
                        {
                            // mySql += "<td width= 5% align=center valign=top height=19 ><font size=2><b>Pulse  Velcocity</b></font></td>";
                        }
                        if (h == 2 || h == 3)
                        {
                            cell1.Colspan = 2;
                        }
                        else
                        {
                            cell1.Rowspan = 2;
                        }
                        table1.AddCell(cell1);
                    }
                }
                else
                {
                    table1 = new PdfPTable(7);
                    table1.WidthPercentage = 100;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetTotalWidth(new float[] { 5f, 40f, 10f, 10f, 10f, 10f, 12f });
                    string[] subheader = { "Sr No.", "ID Mark", "Correction Factor", "Core Length (mm)", "Mode Of Failure" };
                    for (int h = 0; h < subheader.Count(); h++)
                    {
                        cell1 = new PdfPCell(new Phrase(subheader[h], fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        if (h == 2 || h == 3)
                        {
                            cell1.Colspan = 2;
                        }
                        else
                        {
                            cell1.Rowspan = 2;
                        }
                        table1.AddCell(cell1);
                    }
                }
                cell1 = new PdfPCell(new Phrase("L/D", fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Diameter", fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Original", fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("with cap", fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                SrNo = 0;
                decimal Diameter = 0;
                decimal Lenforcore = 0;
                decimal Multifactor = 0;

                for (int c = 0; c < Count; c++)
                {
                    if (Convert.ToString(CoreTesting[c].Description_var) != "")
                    {
                        SrNo++;

                        if (dtTesting >= DateTime.ParseExact("05/05/2019", "dd/MM/yyyy", null))
                        {
                            if (CoreTesting[c].Dia_int < 70)
                            {
                                Diameter = Convert.ToDecimal(1.06);
                            }
                            else if (CoreTesting[c].Dia_int >= 70 && CoreTesting[c].Dia_int < 100)
                            {
                                Diameter = Convert.ToDecimal(1.03);
                            }
                            else if (CoreTesting[c].Dia_int >= 100)
                            {
                                Diameter = Convert.ToDecimal(1);
                            }
                            cell1 = new PdfPCell(new Phrase(SrNo.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (Convert.ToString(CoreTesting[c].Dia_int) != "" && Convert.ToString(CoreTesting[c].LengthCaping_num) != "")
                            {
                                Lenforcore = (Convert.ToDecimal(CoreTesting[c].LengthCaping_num) / Convert.ToDecimal(CoreTesting[c].Dia_int));
                                Multifactor = (Convert.ToDecimal(0.11) * Lenforcore) + Convert.ToDecimal(0.78);
                            }
                        }
                        else
                        {
                            if (CoreTesting[c].Dia_int < 100)
                            {
                                Diameter = Convert.ToDecimal(1.08);
                            }
                            else if (CoreTesting[c].Dia_int >= 100)
                            {
                                Diameter = Convert.ToDecimal(1);
                            }
                            cell1 = new PdfPCell(new Phrase(SrNo.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (Convert.ToString(CoreTesting[c].Dia_int) != "" && Convert.ToString(CoreTesting[c].LengthCaping_num) != "")
                            {
                                Lenforcore = (Convert.ToDecimal(CoreTesting[c].LengthCaping_num) / Convert.ToDecimal(CoreTesting[c].Dia_int));
                                Multifactor = (Convert.ToDecimal(0.106) * Lenforcore) + Convert.ToDecimal(0.786);
                            }
                        }




                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CoreTesting[c].Description_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(Multifactor).ToString("0.000"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(Diameter), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CoreTesting[c].Length_num), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CoreTesting[c].LengthCaping_num), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        if (PrintPulse == 1)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(CoreTesting[c].PulseVelocity_dec), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CoreTesting[c].ModeOfFailure_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else
                    {
                        if (Convert.ToString(CoreTesting[c].TitleId_int) != "")
                        {
                            if (Convert.ToInt32(CoreTesting[c].TitleId_int) > 0)
                            {
                                var crr = dc.TestDetail_Title_View(ReferenceNo, Convert.ToInt32(CoreTesting[c].TitleId_int), "CR", false).ToList();
                                foreach (var title in crr)
                                {
                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(title.TitleDesc_var), fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.Colspan = 12;
                                    table1.AddCell(cell1);
                                    break;
                                }
                            }
                        }
                    }
                }
                table1.SpacingAfter = 6;
                pdfDoc.Add(table1);
                #endregion

                //table1.SpacingBefore = 10;
                #region iscode/remarks
                table1 = new PdfPTable(2);
                table1.SpacingAfter = 6;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                var iscd = dc.ISCode_View(0, "", "CR", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                serial_no = 0;
                var reference = dc.AllRemark_View("", ReferenceNo, 0, "CR").ToList();
                var referencecount = reference.Count();
                if (referencecount > 0)
                {
                    for (int r = 0; r < referencecount; r++)
                    {
                        if (r == 0)
                        {
                            //pdfDoc.Add(new Paragraph("Remarks :", fontH2));
                            cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        var remark = dc.AllRemark_View("", "", Convert.ToInt32(reference[r].CRDetail_RemarkId_int), "CR").ToList();
                        var remarkcount = remark.Count();
                        for (int remk = 0; remk < remarkcount; remk++)
                        {
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(SrNo + ")" + Convert.ToString(remark[remk].CR_Remark_var), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remark[remk].CR_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 2;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);


                #endregion

                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 2;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.9f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 23;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    #region approved By
                    var RecNo = dc.ReportStatus_View("Core Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0).ToList();
                    var RecNocount = RecNo.Count();
                    for (int r = 0; r < RecNocount; r++)
                    {
                        if (RecNo[r].CRINWD_ApprovedBy_tint != null && RecNo[r].CRINWD_ApprovedBy_tint.ToString() != "" && RecNo[r].CRINWD_ApprovedBy_tint > 0)
                        {
                            var User = dc.User_View(Convert.ToInt32(RecNo[r].CRINWD_ApprovedBy_tint), -1, "", "", "").ToList();
                            var ucount = User.Count();
                            for (int userId = 0; userId < ucount; userId++)
                            {

                                pdfDoc.Add(new Paragraph(Convert.ToString(User[userId].USER_Name_var), fontH1));
                                if (User[userId].USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + User[userId].USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(User[userId].USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Automail" || Action == "Email")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }

                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 1;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnesby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnesby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (RecNo[r].CRINWD_CheckedBy_tint != null && RecNo[r].CRINWD_CheckedBy_tint.ToString() != "" && RecNo[r].CRINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(Convert.ToInt32(RecNo[r].CRINWD_CheckedBy_tint), -1, "", "", "").ToList();
                            var lginCount = lgin.Count();
                            for (int loginusr = 0; loginusr < lginCount; loginusr++)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by :  " + Convert.ToString(lgin[loginusr].USER_Name_var), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);

                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                #endregion
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 3);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.SpacingBefore = 0.5f;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }

        #region Cube
        public void Cube_PDFReportMultiple(string strListReferenceNo, string Action)
        {
            try
            {
                float marginTop = 100;
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "CT_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Cube";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                pdfDoc.Open();

                string[] strListRefNo = strListReferenceNo.Split('|');
                foreach (var ReferenceNo in strListRefNo)
                {
                    Paragraph paragraph = new Paragraph();
                    int nablStatus = -1, SiteRouteId = 0;
                    if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                        nablStatus = getNablLogoStatus("CT", ReferenceNo);//1 for priting nabl logo                

                    string CustName = "", SiteName = "", Address = "";
                    bool flagFooter = false;
                    var ctInward = dc.ReportStatus_View("Cube Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0).ToList();
                    if (ctInward.Count() > 0)
                    {
                        if (ctInward.FirstOrDefault().CTINWD_TestedAt_bit == true)
                        {
                            writer.PageEvent = new clsPdfFooter();
                            flagFooter = true;
                        }
                        SiteRouteId = Convert.ToInt32(ctInward.FirstOrDefault().SITE_Route_Id);
                    }
                    if (!flagFooter)
                        writer.PageEvent = new classPdfFooter1();
                    PdfPTable table1 = new PdfPTable(7);  //tbl
                    table1.WidthPercentage = 90;
                    pdfDoc.Open();
                    PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                    MaindataTable.WidthPercentage = 100;
                    paragraph = new Paragraph();
                    Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                    Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                    Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                    Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                    Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

                    if (Action.Contains("Print") == true)
                        LogoToPdf(pdfDoc, nablStatus);
                    else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                    {
                        LogoToPdfEmail(pdfDoc, nablStatus);
                    }
                    else if (Action.Contains("Display") == true)
                        LogoToPdfOld(pdfDoc, Action);

                    #region Report details
                    DateTime? ApproveDt = null;
                    int TestId = 0, Approveby = 0;
                    string WitnessBy = string.Empty;
                    bool RemotelyAppv = false;
                    float[] widths = new float[] { 18f, 1f, 52f, 18f, 1f, 15f };
                    MaindataTable.SetWidths(widths);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";

                    decimal mAge = 0;
                    decimal mAvg = 0;
                    decimal mGrade = 0;
                    string testType = "";
                    DateTime? dtTesting = null;

                    string supersedeNote = "";
                    //var ctInward = dc.ReportStatus_View("Cube Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                    foreach (var cube in ctInward)
                    {
                        if (cube.INWD_RptSITE_Id != null && cube.INWD_RptCL_Id != null)
                        {
                            CustName = cube.RptCL_Name_var;
                            SiteName = cube.RptST_Name_var;
                            Address = cube.RptCL_OfficeAddress_var;
                        }
                        else
                        {
                            CustName = cube.CL_Name_var;
                            SiteName = cube.SITE_Name_var;
                            Address = cube.CL_OfficeAddress_var;
                        }

                        // paragraph.Add(" "); pdfDoc.Add(paragraph);
                        paragraph.Alignment = Element.ALIGN_CENTER;
                        if (Action == "Print" || Action == "Automail" || Action.Contains("Display") || Action.Contains("Email"))
                        {
                            paragraph.Font = fontTitle1;
                            paragraph.Add("Test Report");
                        }
                        else
                        {
                            paragraph.Font = fontH1;
                            paragraph.Add("Office Copy");
                        }
                        paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);

                        paragraph = new Paragraph();
                        paragraph.Alignment = Element.ALIGN_CENTER;
                        //paragraph.Add("Concrete Cube Compressive Strength");
                        paragraph.Font = fontTitle;
                        paragraph.SpacingAfter = 5;
                        paragraph.Add(cube.CTINWD_TestType_var + " Compressive Strength");
                        DateTime d1 = Convert.ToDateTime(cube.CTINWD_TestingDate_dt);
                        if (cube.CTINWD_CastingDate_dt != "NA")
                        {
                            DateTime d2 = DateTime.ParseExact(cube.CTINWD_CastingDate_dt, "dd/MM/yyyy", null);
                            mAge = Convert.ToInt32((d1 - d2).TotalDays);
                        }

                        if (cube.CTINWD_Status_tint < 6 || Action != "Print")
                        {
                            //paragraph.SpacingAfter = 20;
                        }
                        pdfDoc.Add(paragraph);
                        PdfPCell Cust_Namecell;
                        MaindataTable.SpacingBefore = 1;
                        if (cube.CTINWD_Status_tint >= 6 && Action == "Print")
                        {
                            var blackListText = FontFactory.GetFont("italic", 8);
                            Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                            Cust_Namecell.HorizontalAlignment = Element.ALIGN_RIGHT;
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            Cust_Namecell.Colspan = 6;
                            MaindataTable.AddCell(Cust_Namecell);

                        }

                        if (Convert.ToString(cube.CTINWD_ApprovedDate_dt) != string.Empty)
                        {
                            ApproveDt = Convert.ToDateTime(cube.CTINWD_ApprovedDate_dt);
                        }

                        Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        if (authCode != "00")
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase(""));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            Cust_Namecell.Colspan = 3;
                            MaindataTable.AddCell(Cust_Namecell);
                        }
                        Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Rowspan = 2;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Rowspan = 2;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Rowspan = 2;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("CT", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                        // Cust_Namecell = new PdfPCell(new Phrase("CT - " + RefNo1[0], fontH2));
                        Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        string strRecNo = cube.CTINWD_SetOfRecord_var;
                        if (cube.CTINWD_SupersedeStatus_tint > 0)
                        {
                            supersedeNote = "This report supersedes " + strRecNo;
                            if (cube.CTINWD_SupersedeStatus_tint > 1)
                                supersedeNote += "-R" + (cube.CTINWD_SupersedeStatus_tint - 1).ToString();
                            supersedeNote += " report dated  " + Convert.ToDateTime(cube.CTINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                            strRecNo = strRecNo + "-R" + cube.CTINWD_SupersedeStatus_tint.ToString();
                        }
                        Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Nature of Work", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(cube.CTINWD_WorkingNature_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        if (cube.CTINWD_CouponNo_var != "")
                            Cust_Namecell = new PdfPCell(new Phrase("Coupon No.", fontH1));
                        else
                            Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));

                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        if (cube.CTINWD_CouponNo_var != "")
                            Cust_Namecell = new PdfPCell(new Phrase(cube.CTINWD_CouponNo_var.Replace("-", ""), fontH1));
                        else
                        {
                            if (cube.SITE_MonthlyBillingStatus_bit == true && cube.INWD_BILL_Id == "0")
                            {
                                //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                                if (cube.CTINWD_IssueDate_dt != null)
                                {
                                    string monthlyBillNo = Convert.ToDateTime(cube.CTINWD_IssueDate_dt).ToString("MMM/yyyy");
                                    Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                                }
                                else
                                {
                                    Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                                }
                            }
                            else
                            {
                                Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(cube.INWD_BILL_Id), fontH1));
                            }
                        }
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Grade of Concrete", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        if (cube.CTINWD_Grade_var == "0")
                            Cust_Namecell = new PdfPCell(new Phrase("NA", fontH1));
                        else
                            Cust_Namecell = new PdfPCell(new Phrase("M " + "" + cube.CTINWD_Grade_var, fontH1));
                        mGrade = Convert.ToDecimal(cube.CTINWD_Grade_var);
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Date of Casting", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        if (cube.CTINWD_CastingDate_dt != null && Convert.ToString(cube.CTINWD_CastingDate_dt) != "NA")
                        {
                            string CastingDt = DateTime.ParseExact(cube.CTINWD_CastingDate_dt.ToString(), "dd/MM/yyyy", null).ToString("dd-MMM-yyyy");// rDT.ToString("dd-MMM-yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(CastingDt, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("NA", fontH1));
                        }
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);


                        Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(cube.CTINWD_Description_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        if (cube.CTINWD_ReceivedDate_dt != null)
                        {
                            DateTime cDT = Convert.ToDateTime(cube.CTINWD_ReceivedDate_dt);
                            string ReceiptDt = cDT.ToString("dd-MMM-yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(ReceiptDt, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        // contact details
                        Phrase phrase = new Phrase();
                        phrase.Add(new Chunk(cube.CONT_Name_var + " - " + cube.CONT_ContactNo_var, fontH1));
                        phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                        Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(phrase);//person name
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        if (cube.CTINWD_TestingDate_dt != null)
                        {
                            dtTesting = Convert.ToDateTime(cube.CTINWD_TestingDate_dt);
                            DateTime cDT = Convert.ToDateTime(cube.CTINWD_TestingDate_dt);
                            string TestingDt = cDT.ToString("dd-MMM-yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(TestingDt, fontH1));
                        }
                        else
                        {
                            //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        if (cube.INWD_RptSITE_Id != null && cube.INWD_RptCL_Id != null)
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(cube.CL_Name_var, fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            Cust_Namecell.Colspan = 3;
                            MaindataTable.AddCell(Cust_Namecell);

                        }

                        Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        //if (cube.CTINWD_IssueDate_dt != null)
                        //{
                        //    DateTime iDT = Convert.ToDateTime(cube.CTINWD_IssueDate_dt);
                        //    string issuedt = iDT.ToString("dd-MMM-yyyy");
                        //    Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                        //}
                        if (cube.CTINWD_ApprovedDate_dt != null)
                        {
                            DateTime iDT = Convert.ToDateTime(cube.CTINWD_ApprovedDate_dt);
                            string issuedt = iDT.ToString("dd-MMM-yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        if (cube.INWD_RptSITE_Id != null && cube.INWD_RptCL_Id != null)
                        {
                            //Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                            //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            //MaindataTable.AddCell(Cust_Namecell);
                            //Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                            //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            //MaindataTable.AddCell(Cust_Namecell);
                            //Cust_Namecell = new PdfPCell(new Phrase(cube.CL_Name_var, fontH1));
                            //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            //MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(cube.SITE_Name_var, fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            Cust_Namecell.Colspan = 4;
                            MaindataTable.AddCell(Cust_Namecell);

                        }

                        //ULR No
                        if (Convert.ToString(cube.CTINWD_ULRNo_var) != "" && Convert.ToString(cube.CTINWD_ULRNo_var) != null)
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            Cust_Namecell.Colspan = 3;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(cube.CTINWD_ULRNo_var), fontH1));
                            Cust_Namecell.Colspan = 3;
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                        }
                        //
                        // enquiry no.
                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Enquiry No       : " + Convert.ToString(cube.INWD_ENQ_Id), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        //
                        if (cube.CTINWD_WitnessBy_var != null && cube.CTINWD_WitnessBy_var != "")
                        {
                            WitnessBy = cube.CTINWD_WitnessBy_var.ToString();
                        }
                        if (Convert.ToString(cube.CTINWD_TEST_Id) != "")
                        {
                            TestId = Convert.ToInt32(cube.CTINWD_TEST_Id);
                        }
                        if (cube.CTINWD_RemoteApproved == true && cube.CTINWD_RemoteApproved != null)
                        {
                            RemotelyAppv = true;
                        }
                        if (cube.CTINWD_ApprovedBy_tint != null)
                        {
                            Approveby = Convert.ToInt32(cube.CTINWD_ApprovedBy_tint);
                        }
                        testType = cube.CTINWD_TestType_var;

                        break;
                    }
                    //MaindataTable.SpacingAfter = 2;

                    pdfDoc.Add(MaindataTable);
                    #endregion

                    var CubeTestInwartd_CT = dc.CubeTestDetails_View(ReferenceNo, "CT").ToList();
                    var count = CubeTestInwartd_CT.Count();

                    //   pdfDoc.Add(Chunk.NEWLINE);
                    //table1.SpacingBefore = 10;
                    paragraph = new Paragraph();
                    paragraph.Font = fontH2;
                    paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                    paragraph.SpacingAfter = 5; //10;
                    pdfDoc.Add(paragraph);
                    //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));
                    //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    //pdfDoc.Add(new Paragraph(" ", fontH2));
                    //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    #region tbldata

                    PdfPCell cell1;
                    table1 = new PdfPTable(10);
                    table1.WidthPercentage = 100;
                    int j = 0;
                    int SrNo = 0;
                    int Days = 0;
                    Boolean flgNote15 = false, flgNoteClosestValueAvg = false;
                    mAvg = 0;
                    decimal lmt = 0, lwLmt = 0, upLmt = 0;
                    decimal SumCompstr = 0, avgNew = 0;
                    var ctAvg = dc.ReportStatus_View("Cube Testing", null, null, 0, 0, 0, ReferenceNo, 0, 0, 0).ToList();
                    if (decimal.TryParse(ctAvg[0].CTINWD_AvgStr_var, out mAvg) == true)
                    {
                        mAvg = Convert.ToDecimal(ctAvg[0].CTINWD_AvgStr_var);
                    }
                    if (mAvg > 0)
                    {
                        decimal[] mCompStr = new decimal[3];
                        for (int i = 0; i < count; i++)
                        {
                            decimal tempCompStr = 0;
                            if (decimal.TryParse(CubeTestInwartd_CT[i].CTTEST_CompStr_var, out tempCompStr) == true)
                            {
                                mCompStr[i] = Convert.ToDecimal(CubeTestInwartd_CT[i].CTTEST_CompStr_var);
                                SumCompstr += Convert.ToDecimal(CubeTestInwartd_CT[i].CTTEST_CompStr_var);
                            }
                        }
                        avgNew = SumCompstr / 3;
                        avgNew = Math.Round(avgNew, 2);
                        lmt = avgNew * Convert.ToDecimal(0.15);
                        lwLmt = avgNew - lmt;
                        upLmt = avgNew + lmt;
                        for (int i = 0; i < count; i++)
                        {
                            decimal tempCompStr = 0;
                            if (decimal.TryParse(CubeTestInwartd_CT[i].CTTEST_CompStr_var, out tempCompStr) == true)
                            {
                                if (Convert.ToDecimal(CubeTestInwartd_CT[i].CTTEST_CompStr_var) < lwLmt ||
                                    Convert.ToDecimal(CubeTestInwartd_CT[i].CTTEST_CompStr_var) > upLmt)
                                {
                                    flgNote15 = true;
                                    break;
                                }
                            }
                        }
                        if (flgNote15 == true)
                        {
                            SumCompstr = 0;
                            decimal[] diff = new decimal[3];
                            diff[0] = Math.Abs(mCompStr[0] - mCompStr[1]);
                            diff[1] = Math.Abs(mCompStr[1] - mCompStr[2]);
                            diff[2] = Math.Abs(mCompStr[0] - mCompStr[2]);
                            if (diff[0] == diff.Min())
                            {
                                SumCompstr = mCompStr[0] + mCompStr[1];
                            }
                            else if (diff[1] == diff.Min())
                            {
                                SumCompstr = mCompStr[1] + mCompStr[2];
                            }
                            else if (diff[2] == diff.Min())
                            {
                                SumCompstr = mCompStr[0] + mCompStr[2];
                            }
                            if (SumCompstr > 0)
                            {
                                avgNew = SumCompstr / 2;
                                avgNew = Math.Round(avgNew * 2, MidpointRounding.ToEven) / 2;
                            }
                            if (avgNew == mAvg)
                            {
                                flgNoteClosestValueAvg = true;
                            }
                        }
                    }

                    for (int i = 0; i < count; i++)
                    {
                        if (i == 0)
                        {
                            //table1.SetTotalWidth(new float[] { 50f, 50f, 50f, 100f, 50f, 50f, 80f, 50f, 50f, 50f });
                            table1.SetTotalWidth(new float[] { 8f, 15f, 8f, 20f, 10f, 10f, 10f, 10f, 10f, 10f });
                            cell1 = new PdfPCell(new Phrase("Sr.No", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("ID Mark", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Age", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Size of Specimen", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Weight", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("C/S Area", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Density", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Load", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Comp. Strength", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Avg. Comp Strength", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(Days)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(mm)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(kg)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(mm²)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(kg/m³)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(kN)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(N/mm²)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(N/mm²)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        //
                        SrNo++;
                        cell1 = new PdfPCell(new Phrase(SrNo.ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(CubeTestInwartd_CT[i].CTTEST_IdMark_var, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CubeTestInwartd_CT[i].CTTEST_Age_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CubeTestInwartd_CT[i].CTTEST_Length_dec) + " " + "X" + " " + Convert.ToString(CubeTestInwartd_CT[i].CTTEST_Breadth_dec) + " " + "X" + " " + Convert.ToString(CubeTestInwartd_CT[i].CTTEST_Height_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CubeTestInwartd_CT[i].CTTEST_Weight_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CubeTestInwartd_CT[i].CTTEST_CSArea_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CubeTestInwartd_CT[i].CTTEST_Density_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CubeTestInwartd_CT[i].CTTEST_Reading_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CubeTestInwartd_CT[i].CTTEST_CompStr_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        if (j == 0)
                        {
                            //if (flgNote15 == true || count < 3)
                            if (count < 3)
                            {
                                cell1 = new PdfPCell(new Phrase("***", fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = count;
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                //mAvg = 0;
                                //var CubeInwartd_CT = dc.ReportStatus_View("Cube Testing", null, null, 0, 0, 0, ReferenceNo, 0, 0, 0).ToList();
                                //if (decimal.TryParse(CubeInwartd_CT[i].CTINWD_AvgStr_var, out mAvg) == true)
                                //{
                                //    mAvg = Convert.ToDecimal(CubeInwartd_CT[i].CTINWD_AvgStr_var);
                                //}
                                //cell1 = new PdfPCell(new Phrase(CubeInwartd_CT[i].CTINWD_AvgStr_var, fontH1));
                                cell1 = new PdfPCell(new Phrase(ctAvg[0].CTINWD_AvgStr_var, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = count;
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                            }
                        }
                        j++;
                    }

                    #endregion
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SpacingAfter = 8;
                    pdfDoc.Add(table1);

                    //table1.SpacingBefore = 10;
                    #region iscode/remarks
                    table1 = new PdfPTable(2);
                    table1.SpacingBefore = 7;
                    table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                    table1.SetWidths(new float[] { 2f, 70f });
                    PdfPCell cell2;
                    int serial_no = 0;
                    //compliance note 
                    string CompNote = "", strengthNote = "";
                    //Phrase phraseStrNote = new Phrase(15, "", fontH1);
                    if (flgNote15 == false && count >= 3)
                    {
                        if (mAge >= 28 && mAvg > 0 && mGrade > 0 && testType == "Concrete Cube") // InStr(1, LCase(lbltitle), "concrete cube") > 0
                        {
                            if (mAvg >= mGrade + 3)
                                CompNote = "The test result complies with the requirement of IS 456-2000, subject to standard deviation less than 4.";
                            else if (mAvg > mGrade - 3 && mAvg < mGrade + 3)
                                CompNote = "The test result does not comply with requirement of IS 456-2000. However for acceptance of concrete average of 4 consecutive non overlapping test samples should be considered. Refer page 30 table XI IS 456-2000.";
                            else if (mAvg <= mGrade - 3)
                                CompNote = "The test result does not comply with the requirement of IS 456-2000.";
                        }
                        //else if (mAge >= 3 && mAge < 28 && mAvg > 0 && mGrade > 0 && testType == "Concrete Cube")
                        //{
                        //    strengthNote = ((mAge / (Convert.ToDecimal(4.7) + Convert.ToDecimal(0.833) * mAge)) * mGrade).ToString("0");
                        //    strengthNote = "* As per SP : 24-1983 (Exp Handbook on IS 456) expected strength at " + mAge + " days for M " + mGrade + " grade of concrete is " + strengthNote + ".0 N/mm²";
                        //}
                    }
                    if (CompNote != "")
                    {
                        //pdfDoc.Add(new Paragraph("Compliance :", fontH2));
                        cell2 = new PdfPCell(new Phrase("Compliance :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        serial_no++;
                        //pdfDoc.Add(new Paragraph("1)" + CompNote, fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH2));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(CompNote, fontH2));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(" ", fontH2));
                        cell2.FixedHeight = 5f;
                        cell2.Border = PdfPCell.NO_BORDER;
                        cell2.Colspan = 2;
                        table1.AddCell(cell2);
                    }
                    serial_no = 0;
                    var iscd = dc.ISCode_View(0, testType, "CT", dtTesting).ToList();
                    if (iscd.Count > 0)
                    {
                        foreach (var cd in iscd)
                        {
                            if (serial_no == 0)
                            {
                                //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                                cell2 = new PdfPCell(new Phrase("References :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            serial_no++;
                            //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));                   
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        cell2 = new PdfPCell(new Phrase(" ", fontH2));
                        cell2.Border = PdfPCell.NO_BORDER;
                        cell2.FixedHeight = 5f;
                        cell2.Colspan = 2;
                        table1.AddCell(cell2);
                    }

                    serial_no = 0;
                    var re = dc.AllRemark_View("", ReferenceNo, Days, "CT").ToList();
                    if (re.Count > 0)
                    {
                        foreach (var r in re)
                        {
                            var remark = dc.AllRemark_View("", "", Convert.ToInt32(r.CTDetail_RemarkId_int), "CT");
                            foreach (var remk in remark)
                            {
                                if (serial_no == 0)
                                {
                                    //table1.SpacingBefore = 10;
                                    //pdfDoc.Add(new Paragraph("Remarks :", fontH2));
                                    cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                                    cell2.Colspan = 2;
                                    cell2.Border = PdfPCell.NO_BORDER;
                                    table1.AddCell(cell2);
                                }
                                serial_no++;
                                //pdfDoc.Add(new Paragraph(serial_no + ") " + remk.CT_Remark_var.ToString(), fontH1));
                                cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                                cell2 = new PdfPCell(new Phrase(remk.CT_Remark_var, fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                        }
                        cell2 = new PdfPCell(new Phrase(" ", fontH2));
                        cell2.Border = PdfPCell.NO_BORDER;
                        cell2.FixedHeight = 10f;
                        cell2.Colspan = 2;
                        table1.AddCell(cell2);
                    }
                    if (count < 3)
                    {
                        if (serial_no == 0)
                        {
                            cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase("***- IS 516-1959,clause 54, states that at least three specimens required for the testing. However as per customer`s request testing is done on lesser number of specimens.", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    else
                    {
                        if (flgNote15 == true)
                        {
                            if (serial_no == 0)
                            {
                                cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            serial_no++;
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase("***-Individual cube result do not fall in the range of + or - 15% of the average. Hence as per IS 456:2000 Page No.29 para no.15.4, Average value not calculated.", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            if (flgNoteClosestValueAvg == true)
                            {
                                serial_no++;
                                cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                                cell2 = new PdfPCell(new Phrase("As per IS 516 : Part 1 : Sec 1 : 2021, clause 3.6, average of two closest value is taken as average result, however you are requested to test further sample if available.", fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            cell2 = new PdfPCell(new Phrase(" ", fontH2));
                            cell2.Border = PdfPCell.NO_BORDER;
                            cell2.FixedHeight = 10f;
                            cell2.Colspan = 2;
                            table1.AddCell(cell2);
                        }
                    }

                    if (strengthNote != "")
                    {
                        if (serial_no == 0)
                        {
                            cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph(serial_no + ") " + strengthNote, fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(strengthNote, fontH1));
                        //cell2 = new PdfPCell(phraseStrNote);                   
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(" ", fontH2));
                        cell2.Border = PdfPCell.NO_BORDER;
                        cell2.FixedHeight = 8f;
                        cell2.Colspan = 2;
                        table1.AddCell(cell2);
                    }

                    if (supersedeNote != "")
                    {
                        if (serial_no == 0)
                        {
                            cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(" ", fontH2));
                        cell2.Border = PdfPCell.NO_BORDER;
                        cell2.FixedHeight = 8f;
                        cell2.Colspan = 2;
                        table1.AddCell(cell2);
                    }

                    #region notes

                    cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                    cell2.Colspan = 2;
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    //cell2 = new PdfPCell(new Phrase("", fontH1));
                    //cell2.Border = PdfPCell.NO_BORDER;
                    //table1.AddCell(cell2);
                    //cell2 = new PdfPCell(new Phrase("This report can be authenticated on our website www.durocrete.in", fontH2));
                    //cell2.Border = PdfPCell.NO_BORDER;
                    //cell2.Colspan = 2;
                    //table1.AddCell(cell2);
                    table1.SpacingAfter = 8;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;
                    pdfDoc.Add(table1);

                    #endregion
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH2;
                    paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                    pdfDoc.Add(paragraph);

                    #endregion

                    //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                    //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                    if (Action != "Check")
                    {
                        PdfPTable MaindataTable1 = new PdfPTable(1);
                        MaindataTable1.SpacingBefore = 10;
                        MaindataTable1.WidthPercentage = 100;
                        PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                        cellbottom.Border = PdfPCell.NO_BORDER;
                        MaindataTable1.AddCell(cellbottom);
                        // MaindataTable1.SpacingAfter = 25;
                        pdfDoc.Add(MaindataTable1);

                        bool sign = false;
                        #region Signature

                        //byte[] bytes = null;
                        if (RemotelyAppv == true)
                        {
                            if (Approveby > 0)
                            {
                                var data = dc.Sign_View(Approveby);
                                foreach (var g in data)
                                {
                                    byte[] imageBytes = g.UserSign.ToArray();
                                    MemoryStream mxs1 = new MemoryStream(imageBytes);
                                    iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                    table1 = new PdfPTable(1);
                                    table1.WidthPercentage = 100;
                                    table1.SetWidths(new float[] { 1.7f });
                                    PdfPCell cell = new PdfPCell(image);
                                    cell.FixedHeight = 25;
                                    cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                    cell.Border = PdfPCell.NO_BORDER;
                                    table1.AddCell(cell);
                                    pdfDoc.Add(table1);
                                    //bytes = memoryStream.ToArray();

                                    sign = true;
                                    break;
                                }
                            }
                        }
                        #endregion
                        if (sign == false)
                        {
                            pdfDoc.Add(new Paragraph(" ", fontH1));
                            pdfDoc.Add(new Paragraph(" ", fontH1));
                        }
                        var RecNo = dc.ReportStatus_View("Cube Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
                        foreach (var r in RecNo)
                        {
                            if (r.CTINWD_ApprovedBy_tint != null && r.CTINWD_ApprovedBy_tint.ToString() != "" && r.CTINWD_ApprovedBy_tint > 0)
                            {
                                var U = dc.User_View(r.CTINWD_ApprovedBy_tint, -1, "", "", "");
                                foreach (var r1 in U)
                                {
                                    pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                                    if (r1.USER_Designation_var.Contains("(") == false)
                                        pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                                    else
                                        pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                                    if (Action == "Print" || Action == "Email" && ApproveDt != null)
                                    {
                                        pdfDoc.Add(new Paragraph(Convert.ToString(Convert.ToDateTime(ApproveDt).ToString("dd/MM/yy")), fontH3));
                                    }
                                    else
                                    {
                                        pdfDoc.Add(new Paragraph("", fontH3));
                                    }

                                }
                            }
                            PdfPTable MaindataTable2 = new PdfPTable(2);
                            MaindataTable2.SpacingBefore = 5;
                            MaindataTable2.WidthPercentage = 100;
                            PdfPCell cellbottom1;
                            if (WitnessBy != string.Empty)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + WitnessBy, fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                            else
                            {
                                cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                            if (r.CTINWD_CheckedBy_tint != null && r.CTINWD_CheckedBy_tint.ToString() != "" && r.CTINWD_CheckedBy_tint > 0)
                            {
                                var lgin = dc.User_View(r.CTINWD_CheckedBy_tint, -1, "", "", "");
                                foreach (var loginusr in lgin)
                                {
                                    cellbottom1 = new PdfPCell(new Paragraph("Checked by : " + loginusr.USER_Name_var.ToString(), fontH1));
                                    cellbottom1.Border = PdfPCell.NO_BORDER;
                                    cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                    MaindataTable2.AddCell(cellbottom1);
                                }
                            }
                            else
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                            pdfDoc.Add(MaindataTable2);
                        }
                    }
                    else
                    {
                        //paragraph = new Paragraph();
                        //paragraph.Font = fontH1;
                        //paragraph.Add("  ");
                        //pdfDoc.Add(paragraph);
                        //paragraph = new Paragraph();

                        paragraph = new Paragraph();
                        paragraph.Alignment = Element.ALIGN_LEFT;
                        paragraph.Font = fontH1;
                        paragraph.SpacingBefore = 5;
                        paragraph.Add("This is electronically generated report hence does not require signature. ");
                        pdfDoc.Add(paragraph);

                        //paragraph = new Paragraph();
                        //paragraph.Font = fontH1;
                        //paragraph.Add("  ");
                        //pdfDoc.Add(paragraph);

                        paragraph = new Paragraph();
                        paragraph.Font = fontH1;
                        paragraph.SpacingBefore = 5;
                        paragraph.Add("For all technical queries contact on " + tollFree + ".");
                        pdfDoc.Add(paragraph);

                        //paragraph = new Paragraph();
                        //paragraph.Font = fontH1;
                        //paragraph.Add("  ");
                        //pdfDoc.Add(paragraph);

                    }
                    var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = blackListTextFont;
                    paragraph.Add("--End of Report--");
                    pdfDoc.Add(paragraph);
                    //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                    //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));

                    pdfDoc.NewPage();
                }
                pdfDoc.Close();

                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void Cube_PDFReport(string ReferenceNo, int days, string RecType, string Cubetype, string Action, string CubeCompstr, string TrialId)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus(RecType, ReferenceNo);//1 for priting nabl logo                
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "CT_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Cube";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Email" || Action.Contains("Email") == true || Action == "Automail")
                {
                    fileName = "CT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "CT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                pdfDoc.Open();
                string CustName = "", SiteName = "", Address = "";
                bool flagFooter = false;
                var ctInward = dc.ReportStatus_View("Cube Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0).ToList();
                if (ctInward.Count() > 0)
                {
                    if (ctInward.FirstOrDefault().CTINWD_TestedAt_bit == true)
                    {
                        writer.PageEvent = new clsPdfFooter();
                        flagFooter = true;
                    }
                    SiteRouteId = Convert.ToInt32(ctInward.FirstOrDefault().SITE_Route_Id);

                }
                if (!flagFooter)
                    writer.PageEvent = new classPdfFooter1();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;
                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                {
                    LogoToPdfEmail(pdfDoc, nablStatus);
                }
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);

                #region Report details
                //DateTime ApproveDt = new DateTime();
                DateTime? ApproveDt = null;
                int TestId = 0, Approveby = 0;
                string WitnessBy = string.Empty;
                bool RemotelyAppv = false;
                float[] widths = new float[] { 18f, 1f, 52f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                string authCode = reportAuthenticateCode();
                clsData obj = new clsData();
                string RouteName = obj.getRouteName(SiteRouteId);
                if (RouteName == "")
                    RouteName = "NA";
                //PdfPTable tableA = new PdfPTable(6);
                //tableA.WidthPercentage = 100;
                //tableA.SetWidths(widths);
                //tableA.SpacingAfter = 5;

                decimal mAge = 0;
                decimal mAvg = 0;
                decimal mGrade = 0;
                string testType = "";
                DateTime? dtTesting = null;
                #region other than CT
                if (RecType != "CT")
                {
                    if (RecType == "MF")
                    {
                        Cubetype = "Trial";
                    }
                    MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                    //  paragraph.Add(" "); pdfDoc.Add(paragraph);
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    if (Action == "Print" || Action == "Automail" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);
                    paragraph = new Paragraph();
                    paragraph.Font = fontTitle;
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    if (RecType == "MF")
                    {
                        paragraph.Add("Mix Design Cube Compressive Strength");
                    }
                    else if (RecType == "CEMT")
                    {
                        paragraph.Add("Cement Cube Compressive Strength");
                    }
                    else if (RecType == "FLYASH")
                    {
                        paragraph.Add("Flyash Cube Compressive Strength");
                    }
                    //paragraph.SpacingAfter = 20;
                    pdfDoc.Add(paragraph);

                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase("", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 6;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    ////
                    var mfInward = dc.ReportStatus_View("Mix Design", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0).ToList();
                    foreach (var cube in mfInward)
                    {
                        if (cube.INWD_RptSITE_Id != null && cube.INWD_RptCL_Id != null)
                        {
                            CustName = cube.RptCL_Name_var;
                            SiteName = cube.RptST_Name_var;
                            Address = cube.RptCL_OfficeAddress_var;
                        }
                        else
                        {
                            CustName = cube.CL_Name_var;
                            SiteName = cube.SITE_Name_var;
                            Address = cube.CL_OfficeAddress_var;
                        }

                        //ULR No
                        if (Convert.ToString(cube.MFINWD_ULRNo_var) != "" && Convert.ToString(cube.MFINWD_ULRNo_var) != null)
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            Cust_Namecell.Colspan = 3;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(cube.MFINWD_ULRNo_var), fontH1));
                            Cust_Namecell.Colspan = 3;
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                        }
                        //

                        Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        if (authCode != "00")
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase(""));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            Cust_Namecell.Colspan = 3;
                            MaindataTable.AddCell(Cust_Namecell);
                        }

                        Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Rowspan = 2;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Rowspan = 2;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Rowspan = 2;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(RecType, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                        Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(ReferenceNo, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("Nature of work", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        if (cube.CTINWD_WorkingNature_var != null)
                            Cust_Namecell = new PdfPCell(new Phrase(cube.CTINWD_WorkingNature_var, fontH1));
                        else
                            Cust_Namecell = new PdfPCell(new Phrase("---", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        if (cube.MFINWD_ReceivedDate_dt != null)
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);

                            Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);

                            DateTime cDT = Convert.ToDateTime(cube.MFINWD_ReceivedDate_dt);
                            string ReceiptDt = cDT.ToString("dd-MMM-yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(ReceiptDt, fontH1));

                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);

                            Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);

                            Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        }
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("Grade of concrete", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        if (cube.MFINWD_Grade_var == "0")
                            Cust_Namecell = new PdfPCell(new Phrase("NA", fontH1));
                        else
                            Cust_Namecell = new PdfPCell(new Phrase(cube.MFINWD_Grade_var, fontH1));
                        mGrade = Convert.ToDecimal(cube.MFINWD_Grade_var.Replace("M ", ""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);





                        break;
                    }
                    int mfTrialId = 0;
                    if (TrialId != "")
                        mfTrialId = Convert.ToInt32(TrialId);
                    var CubeCast = dc.OtherCubeTestView(ReferenceNo, RecType, Convert.ToByte(days), mfTrialId, Cubetype, false, false);
                    foreach (var cu in CubeCast)
                    {
                        if (cu.CastingDate != null && Convert.ToString(cu.CastingDate) != "NA")
                        {

                            Cust_Namecell = new PdfPCell(new Phrase("Date of Casting", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            string CastingDt = DateTime.ParseExact(cu.CastingDate, "dd/MM/yyyy", null).ToString("dd-MMM-yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(CastingDt, fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            Cust_Namecell.Colspan = 3;
                            MaindataTable.AddCell(Cust_Namecell);
                        }

                        if (cu.TestingDate != null)
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            Cust_Namecell.Colspan = 3;
                            MaindataTable.AddCell(Cust_Namecell);
                            dtTesting = Convert.ToDateTime(cu.TestingDate);
                            DateTime cDT = Convert.ToDateTime(cu.TestingDate);
                            cDT = DateTime.ParseExact(cu.CastingDate, "dd/MM/yyyy", null).AddDays(days);
                            string TestingDt = cDT.ToString("dd-MMM-yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(TestingDt, fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);



                            break;
                        }


                    }
                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(mfInward.FirstOrDefault().CONT_Name_var + " - " + mfInward.FirstOrDefault().CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(phrase));//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (mfInward.FirstOrDefault().INWD_RptSITE_Id != null && mfInward.FirstOrDefault().INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(mfInward.FirstOrDefault().CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(mfInward.FirstOrDefault().SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                }
                #endregion

                string supersedeNote = "";
                //var ctInward = dc.ReportStatus_View("Cube Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var cube in ctInward)
                {
                    if (cube.INWD_RptSITE_Id != null && cube.INWD_RptCL_Id != null)
                    {
                        CustName = cube.RptCL_Name_var;
                        SiteName = cube.RptST_Name_var;
                        Address = cube.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = cube.CL_Name_var;
                        SiteName = cube.SITE_Name_var;
                        Address = cube.CL_OfficeAddress_var;
                    }

                    // paragraph.Add(" "); pdfDoc.Add(paragraph);
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    if (Action == "Print" || Action == "Automail" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //paragraph.Add("Concrete Cube Compressive Strength");
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 5;
                    paragraph.Add(cube.CTINWD_TestType_var + " Compressive Strength");
                    DateTime d1 = Convert.ToDateTime(cube.CTINWD_TestingDate_dt);
                    if (cube.CTINWD_CastingDate_dt != "NA")
                    {
                        DateTime d2 = DateTime.ParseExact(cube.CTINWD_CastingDate_dt, "dd/MM/yyyy", null);
                        mAge = Convert.ToInt32((d1 - d2).TotalDays);
                    }

                    if (cube.CTINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //     Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    if (cube.CTINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = Element.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }
                    else
                    {

                        //Cust_Namecell = new PdfPCell(new Phrase(""));
                        //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        //Cust_Namecell.HorizontalAlignment = Element.ALIGN_CENTER;
                        //Cust_Namecell.Colspan = 3;
                        //MaindataTable.AddCell(Cust_Namecell);
                    }
                    if (Convert.ToString(cube.CTINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(cube.CTINWD_ApprovedDate_dt);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(RecType, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    // Cust_Namecell = new PdfPCell(new Phrase("CT - " + RefNo1[0], fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string strRecNo = cube.CTINWD_SetOfRecord_var;
                    if (cube.CTINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (cube.CTINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (cube.CTINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(cube.CTINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + cube.CTINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Nature of Work", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(cube.CTINWD_WorkingNature_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (cube.CTINWD_CouponNo_var != "")
                        Cust_Namecell = new PdfPCell(new Phrase("Coupon No.", fontH1));
                    else
                        Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));

                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (cube.CTINWD_CouponNo_var != "")
                        Cust_Namecell = new PdfPCell(new Phrase(cube.CTINWD_CouponNo_var.Replace("-", ""), fontH1));
                    else
                    {
                        if (cube.SITE_MonthlyBillingStatus_bit == true && cube.INWD_BILL_Id == "0")
                        {
                            //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                            if (cube.CTINWD_IssueDate_dt != null)
                            {
                                string monthlyBillNo = Convert.ToDateTime(cube.CTINWD_IssueDate_dt).ToString("MMM/yyyy");
                                Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                            }
                            else
                            {
                                Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                            }
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(cube.INWD_BILL_Id), fontH1));
                        }
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Grade of Concrete", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (cube.CTINWD_Grade_var == "0")
                        Cust_Namecell = new PdfPCell(new Phrase("NA", fontH1));
                    else
                        Cust_Namecell = new PdfPCell(new Phrase("M " + "" + cube.CTINWD_Grade_var, fontH1));
                    mGrade = Convert.ToDecimal(cube.CTINWD_Grade_var);
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Casting", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (cube.CTINWD_CastingDate_dt != null && Convert.ToString(cube.CTINWD_CastingDate_dt) != "NA")
                    {
                        string CastingDt = DateTime.ParseExact(cube.CTINWD_CastingDate_dt.ToString(), "dd/MM/yyyy", null).ToString("dd-MMM-yyyy");// rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(CastingDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("NA", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(cube.CTINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (cube.CTINWD_ReceivedDate_dt != null)
                    {
                        DateTime cDT = Convert.ToDateTime(cube.CTINWD_ReceivedDate_dt);
                        string ReceiptDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(ReceiptDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(cube.CONT_Name_var + " - " + cube.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (cube.CTINWD_TestingDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(cube.CTINWD_TestingDate_dt);
                        DateTime cDT = Convert.ToDateTime(cube.CTINWD_TestingDate_dt);
                        string TestingDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(TestingDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);




                    if (cube.INWD_RptSITE_Id != null && cube.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(cube.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);

                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    //if (cube.CTINWD_IssueDate_dt != null)
                    //{
                    //    DateTime iDT = Convert.ToDateTime(cube.CTINWD_IssueDate_dt);
                    //    string issuedt = iDT.ToString("dd-MMM-yyyy");
                    //    Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    //}
                    if (cube.CTINWD_ApprovedDate_dt != null)
                    {
                        DateTime iDT = Convert.ToDateTime(cube.CTINWD_ApprovedDate_dt);
                        string issuedt = iDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (cube.INWD_RptSITE_Id != null && cube.INWD_RptCL_Id != null)
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        //MaindataTable.AddCell(Cust_Namecell);
                        //Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        //MaindataTable.AddCell(Cust_Namecell);
                        //Cust_Namecell = new PdfPCell(new Phrase(cube.CL_Name_var, fontH1));
                        //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        //MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(cube.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);

                    }

                    //ULR No
                    if (Convert.ToString(cube.CTINWD_ULRNo_var) != "" && Convert.ToString(cube.CTINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(cube.CTINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //
                    // enquiry no.
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 3;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Enquiry No       : " + Convert.ToString(cube.INWD_ENQ_Id), fontH1));
                    Cust_Namecell.Colspan = 3;
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //
                    if (cube.CTINWD_WitnessBy_var != null && cube.CTINWD_WitnessBy_var != "")
                    {
                        WitnessBy = cube.CTINWD_WitnessBy_var.ToString();
                    }
                    if (Convert.ToString(cube.CTINWD_TEST_Id) != "")
                    {
                        TestId = Convert.ToInt32(cube.CTINWD_TEST_Id);
                    }
                    if (cube.CTINWD_RemoteApproved == true && cube.CTINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }
                    if (cube.CTINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(cube.CTINWD_ApprovedBy_tint);
                    }
                    testType = cube.CTINWD_TestType_var;

                    // contact details
                    //Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase(cube.CONT_Name_var + " - " + cube.CONT_ContactNo_var, fontH1));//person name
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);

                    break;
                }
                //MaindataTable.SpacingAfter = 2;

                pdfDoc.Add(MaindataTable);
                #endregion

                var CubeTestInwartd_CT = dc.CubeTestDetails_View(ReferenceNo, "CT").ToList();
                var count = CubeTestInwartd_CT.Count();

                //   pdfDoc.Add(Chunk.NEWLINE);
                //table1.SpacingBefore = 10;
                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5; //10;
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(new Paragraph(" ", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                #region tbldata

                PdfPCell cell1;
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                // pdfDoc.Add(table1);
                table1 = new PdfPTable(10);
                table1.WidthPercentage = 100;
                int j = 0;
                int SrNo = 0;
                int Days = 0;
                Boolean flgNote15 = false, flgNoteClosestValueAvg = false;
                //Boolean flgStar = false;
                #region Trial str
                if (CubeCompstr == "TrialCubeCompStr")
                {
                    var cubeCompstr = dc.OtherCubeDetailForMF(ReferenceNo, "MF", Convert.ToByte(days), Convert.ToInt32(TrialId), "Trial").ToList();
                    var countCube = cubeCompstr.Count();
                    count = countCube;

                    mAvg = 0;
                    decimal lmt = 0, lwLmt = 0, upLmt = 0;
                    decimal SumCompstr = 0, avgNew = 0;
                    //var cubeAvg1 = dc.OtherCubeTestView(ReferenceNo, "MF", Convert.ToByte(days), Convert.ToInt32(TrialId), "Trial", false, false).ToList();
                    //if (decimal.TryParse(cubeAvg1[0].Avg_var, out mAvg) == true)                        
                    //{
                    //    mAvg = Convert.ToDecimal(cubeAvg1[0].Avg_var);
                    //}
                    string mavg1 = "---";
                    if (cubeCompstr[0].Avg_var != null)
                    {
                        mavg1 = cubeCompstr[0].Avg_var;
                    }
                    else
                    {
                        var cubeAvg = dc.OtherCubeTestView(ReferenceNo, "MF", Convert.ToByte(days), cubeCompstr[0].Trial_id_int, "Trial", false, false);
                        foreach (var cub in cubeAvg)
                        {
                            mavg1 = Convert.ToString(cub.Avg_var);
                        }
                    }
                    if (decimal.TryParse(mavg1, out mAvg) == true)
                    {
                        mAvg = Convert.ToDecimal(mavg1);
                    }
                    if (mAvg > 0)
                    {
                        decimal[] mCompStr = new decimal[3];
                        for (int i = 0; i < countCube; i++)
                        {
                            decimal tempCompStr = 0;
                            if (decimal.TryParse(cubeCompstr[i].CompStr_var, out tempCompStr) == true)
                            {
                                mCompStr[i] = Convert.ToDecimal(cubeCompstr[i].CompStr_var);
                                SumCompstr += Convert.ToDecimal(cubeCompstr[i].CompStr_var);
                            }
                        }
                        avgNew = SumCompstr / 3;
                        avgNew = Math.Round(avgNew, 2);
                        lmt = avgNew * Convert.ToDecimal(0.15);
                        lwLmt = avgNew - lmt;
                        upLmt = avgNew + lmt;
                        for (int i = 0; i < countCube; i++)
                        {
                            decimal tempCompStr = 0;
                            if (decimal.TryParse(cubeCompstr[i].CompStr_var, out tempCompStr) == true)
                            {
                                if (Convert.ToDecimal(cubeCompstr[i].CompStr_var) < lwLmt ||
                                    Convert.ToDecimal(cubeCompstr[i].CompStr_var) > upLmt)
                                {
                                    flgNote15 = true;
                                    break;
                                }
                            }
                        }
                        if (flgNote15 == true)
                        {
                            SumCompstr = 0;
                            decimal[] diff = new decimal[3];
                            diff[0] = Math.Abs(mCompStr[0] - mCompStr[1]);
                            diff[1] = Math.Abs(mCompStr[1] - mCompStr[2]);
                            diff[2] = Math.Abs(mCompStr[0] - mCompStr[2]);
                            if (diff[0] == diff.Min())
                            {
                                SumCompstr = mCompStr[0] + mCompStr[1];
                            }
                            else if (diff[1] == diff.Min())
                            {
                                SumCompstr = mCompStr[1] + mCompStr[2];
                            }
                            else if (diff[2] == diff.Min())
                            {
                                SumCompstr = mCompStr[0] + mCompStr[2];
                            }
                            if (SumCompstr > 0)
                            {
                                avgNew = SumCompstr / 2;
                                avgNew = Math.Round(avgNew * 2, MidpointRounding.ToEven) / 2;
                            }
                            if (avgNew == mAvg)
                            {
                                flgNoteClosestValueAvg = true;
                            }
                        }
                    }

                    for (int i = 0; i < countCube; i++)
                    {
                        if (i == 0)
                        {
                            table1.SetTotalWidth(new float[] { 8f, 15f, 8f, 20f, 10f, 10f, 10f, 10f, 10f, 10f });
                            cell1 = new PdfPCell(new Phrase("Sr.No", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("ID Mark", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Age", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Size of Specimen", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Weight", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("C/S Area", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Density", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Load", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Comp. Strength", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Avg. Comp Strength", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(Days)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(mm)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(kg)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(mm²)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(kg/m³)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(kN)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(N/mm²)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(N/mm²)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        SrNo++;
                        cell1 = new PdfPCell(new Phrase(SrNo.ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(cubeCompstr[i].IdMark_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(cubeCompstr[i].Age_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(cubeCompstr[i].Length_var) + " " + "X" + " " + Convert.ToString(cubeCompstr[i].Breadth_dec) + " " + "X" + " " + Convert.ToString(cubeCompstr[i].Height_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(cubeCompstr[i].Weight_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(cubeCompstr[i].CSArea_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(cubeCompstr[i].Density_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(cubeCompstr[i].Reading_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(cubeCompstr[i].CompStr_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        if (j == 0)
                        {
                            //if (flgNote15 == true || count < 3)
                            if (count < 3)
                            {
                                cell1 = new PdfPCell(new Phrase("***", fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = count;
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                //mAvg = 0;
                                //string mavg1 = "---";
                                //if (cubeCompstr[i].Avg_var != null)
                                //{
                                //    mavg1 = cubeCompstr[i].Avg_var;                                    
                                //}
                                //else
                                //{
                                //    var cubeAvg = dc.OtherCubeTestView(ReferenceNo, "MF", Convert.ToByte(days), cubeCompstr[i].Trial_id_int, "Trial", false, false);
                                //    foreach (var cub in cubeAvg)
                                //    {
                                //        mavg1 = Convert.ToString(cub.Avg_var);
                                //    }
                                //}
                                //if (decimal.TryParse(mavg1, out mAvg) == true)
                                //{
                                //    mAvg = Convert.ToDecimal(mavg1);
                                //}
                                cell1 = new PdfPCell(new Phrase(mavg1, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = countCube;
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                            }
                        }
                        j++;
                    }
                }
                #endregion
                #region  other Cube & cement
                else if (CubeCompstr == "CubeCompStrength" || CubeCompstr == "CementStrength")
                {
                    var cubeCompstr = dc.OtherCubeTestView(ReferenceNo, RecType, Convert.ToByte(days), 0, Cubetype, false, true).ToList();
                    var countCube = cubeCompstr.Count();

                    for (int i = 0; i < countCube; i++)
                    {
                        if (i == 0)
                        {
                            //table1.SetTotalWidth(new float[] { 50f, 50f, 50f, 100f, 50f, 50f, 80f, 50f, 50f, 50f });
                            table1.SetTotalWidth(new float[] { 8f, 15f, 8f, 20f, 10f, 10f, 10f, 10f, 10f, 10f });
                            cell1 = new PdfPCell(new Phrase("Sr.No", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("ID Mark", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Age", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Size of Specimen", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Weight", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("C/S Area", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Density", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Load", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Comp. Strength", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Avg. Comp Strength", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(Days)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(mm)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(kg )", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(mm²)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(kg/m³)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(kN)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(N/mm²)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(N/mm²)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        SrNo++;
                        cell1 = new PdfPCell(new Phrase(SrNo.ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(cubeCompstr[i].IdMark_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(cubeCompstr[i].Age_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(cubeCompstr[i].Length_var) + " " + "X" + " " + Convert.ToString(cubeCompstr[i].Breadth_dec) + " " + "X" + " " + Convert.ToString(cubeCompstr[i].Height_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(cubeCompstr[i].Weight_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(cubeCompstr[i].CSArea_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(cubeCompstr[i].Density_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(cubeCompstr[i].Reading_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(cubeCompstr[i].CompStr_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        if (j == 0)
                        {

                            var cubeAvg = dc.OtherCubeTestView(ReferenceNo, RecType, Convert.ToByte(days), 0, Cubetype, false, false);
                            foreach (var cub in cubeAvg)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(cub.Avg_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = countCube;
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                            }
                        }
                        j++;
                    }
                }
                #endregion
                else
                # region  ct and Cemt
                {
                    mAvg = 0;
                    decimal lmt = 0, lwLmt = 0, upLmt = 0;
                    decimal SumCompstr = 0, avgNew = 0;
                    var ctAvg = dc.ReportStatus_View("Cube Testing", null, null, 0, 0, 0, ReferenceNo, 0, 0, 0).ToList();
                    if (decimal.TryParse(ctAvg[0].CTINWD_AvgStr_var, out mAvg) == true)
                    {
                        mAvg = Convert.ToDecimal(ctAvg[0].CTINWD_AvgStr_var);
                    }
                    if (mAvg > 0)
                    {
                        decimal[] mCompStr = new decimal[3];
                        for (int i = 0; i < count; i++)
                        {
                            decimal tempCompStr = 0;
                            if (decimal.TryParse(CubeTestInwartd_CT[i].CTTEST_CompStr_var, out tempCompStr) == true)
                            {
                                mCompStr[i] = Convert.ToDecimal(CubeTestInwartd_CT[i].CTTEST_CompStr_var);
                                SumCompstr += Convert.ToDecimal(CubeTestInwartd_CT[i].CTTEST_CompStr_var);
                            }
                        }
                        avgNew = SumCompstr / 3;
                        avgNew = Math.Round(avgNew, 2);
                        lmt = avgNew * Convert.ToDecimal(0.15);
                        lwLmt = avgNew - lmt;
                        upLmt = avgNew + lmt;
                        for (int i = 0; i < count; i++)
                        {
                            decimal tempCompStr = 0;
                            if (decimal.TryParse(CubeTestInwartd_CT[i].CTTEST_CompStr_var, out tempCompStr) == true)
                            {
                                if (Convert.ToDecimal(CubeTestInwartd_CT[i].CTTEST_CompStr_var) < lwLmt ||
                                    Convert.ToDecimal(CubeTestInwartd_CT[i].CTTEST_CompStr_var) > upLmt)
                                {
                                    flgNote15 = true;
                                    break;
                                }
                            }
                        }
                        if (flgNote15 == true)
                        {
                            SumCompstr = 0;
                            decimal[] diff = new decimal[3];
                            diff[0] = Math.Abs(mCompStr[0] - mCompStr[1]);
                            diff[1] = Math.Abs(mCompStr[1] - mCompStr[2]);
                            diff[2] = Math.Abs(mCompStr[0] - mCompStr[2]);
                            if (diff[0] == diff.Min())
                            {
                                SumCompstr = mCompStr[0] + mCompStr[1];
                            }
                            else if (diff[1] == diff.Min())
                            {
                                SumCompstr = mCompStr[1] + mCompStr[2];
                            }
                            else if (diff[2] == diff.Min())
                            {
                                SumCompstr = mCompStr[0] + mCompStr[2];
                            }
                            if (SumCompstr > 0)
                            {
                                avgNew = SumCompstr / 2;
                                avgNew = Math.Round(avgNew * 2, MidpointRounding.ToEven) / 2;
                            }
                            if (avgNew == mAvg)
                            {
                                flgNoteClosestValueAvg = true;
                            }
                        }
                    }
                    for (int i = 0; i < count; i++)
                    {
                        if (i == 0)
                        {
                            table1.SetTotalWidth(new float[] { 8f, 15f, 8f, 20f, 10f, 10f, 10f, 10f, 10f, 10f });
                            cell1 = new PdfPCell(new Phrase("Sr.No", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("ID Mark", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Age", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Size of Specimen", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Weight", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("C/S Area", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Density", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Load", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Comp. Strength", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Avg. Comp Strength", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(Days)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(mm)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(kg)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(mm²)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(kg/m³)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(kN)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(N/mm²)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("(N/mm²)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        //
                        SrNo++;
                        cell1 = new PdfPCell(new Phrase(SrNo.ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(CubeTestInwartd_CT[i].CTTEST_IdMark_var, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CubeTestInwartd_CT[i].CTTEST_Age_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CubeTestInwartd_CT[i].CTTEST_Length_dec) + " " + "X" + " " + Convert.ToString(CubeTestInwartd_CT[i].CTTEST_Breadth_dec) + " " + "X" + " " + Convert.ToString(CubeTestInwartd_CT[i].CTTEST_Height_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CubeTestInwartd_CT[i].CTTEST_Weight_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CubeTestInwartd_CT[i].CTTEST_CSArea_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CubeTestInwartd_CT[i].CTTEST_Density_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CubeTestInwartd_CT[i].CTTEST_Reading_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(CubeTestInwartd_CT[i].CTTEST_CompStr_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        if (j == 0)
                        {
                            //if (flgNote15 == true || count < 3)
                            if (count < 3)
                            {
                                cell1 = new PdfPCell(new Phrase("***", fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = count;
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                //mAvg = 0;
                                //var CubeInwartd_CT = dc.ReportStatus_View("Cube Testing", null, null, 0, 0, 0, ReferenceNo, 0, 0, 0).ToList();
                                //if (decimal.TryParse(CubeInwartd_CT[i].CTINWD_AvgStr_var, out mAvg) == true)
                                //{
                                //    mAvg = Convert.ToDecimal(CubeInwartd_CT[i].CTINWD_AvgStr_var);
                                //}                                
                                //cell1 = new PdfPCell(new Phrase(CubeInwartd_CT[i].CTINWD_AvgStr_var, fontH1));
                                cell1 = new PdfPCell(new Phrase(ctAvg[0].CTINWD_AvgStr_var, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = count;
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                            }
                        }
                        j++;
                    }
                }
                #endregion
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SpacingAfter = 8;
                pdfDoc.Add(table1);
                #endregion

                //table1.SpacingBefore = 10;
                #region iscode/remarks
                table1 = new PdfPTable(2);
                table1.SpacingBefore = 7;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                //compliance note 
                string CompNote = "", strengthNote = "";
                //Phrase phraseStrNote = new Phrase(15, "", fontH1);
                if (flgNote15 == false && count >= 3)
                {
                    if (mAge >= 28 && mAvg > 0 && mGrade > 0 && testType == "Concrete Cube") // InStr(1, LCase(lbltitle), "concrete cube") > 0
                    {
                        if (mAvg >= mGrade + 3)
                            CompNote = "The test result complies with the requirement of IS 456-2000, subject to standard deviation less than 4.";
                        else if (mAvg > mGrade - 3 && mAvg < mGrade + 3)
                            CompNote = "The test result does not comply with requirement of IS 456-2000. However for acceptance of concrete average of 4 consecutive non overlapping test samples should be considered. Refer page 30 table XI IS 456-2000.";
                        else if (mAvg <= mGrade - 3)
                            CompNote = "The test result does not comply with the requirement of IS 456-2000.";
                    }
                    //else if (mAge >= 3 && mAge < 28 && mAvg > 0 && mGrade > 0 && testType == "Concrete Cube")
                    //{
                    //    strengthNote = ((mAge / (Convert.ToDecimal(4.7) + Convert.ToDecimal(0.833) * mAge)) * mGrade).ToString("0");
                    //    strengthNote = "* As per SP : 24-1983 (Exp Handbook on IS 456) expected strength at " + mAge + " days for M " + mGrade + " grade of concrete is " + strengthNote + ".0 N/mm²";
                    //}
                }
                if (CompNote != "")
                {
                    cell2 = new PdfPCell(new Phrase("Compliance :", fontH2));
                    cell2.Colspan = 2;
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH2));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(CompNote, fontH2));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                serial_no = 0;
                var iscd = dc.ISCode_View(0, testType, "CT", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.FixedHeight = 5f;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (RecType == "MF")
                {
                    serial_no = 0;
                    var rem = dc.OtherCubeTestRemark_View("", ReferenceNo, 0, Convert.ToByte(days), "MF");
                    foreach (var r in rem)
                    {
                        var remark = dc.OtherCubeTestRemark_View("", "", Convert.ToInt32(r.RemarkId_int), Convert.ToByte(days), "MF");
                        foreach (var remk in remark)
                        {
                            if (serial_no == 0)
                            {
                                cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            serial_no++;
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remk.Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    cell2.FixedHeight = 8f;
                    table1.AddCell(cell2);
                }
                serial_no = 0;
                var re = dc.AllRemark_View("", ReferenceNo, Days, "CT").ToList();
                if (re.Count > 0)
                {
                    foreach (var r in re)
                    {
                        var remark = dc.AllRemark_View("", "", Convert.ToInt32(r.CTDetail_RemarkId_int), "CT");
                        foreach (var remk in remark)
                        {
                            if (serial_no == 0)
                            {
                                cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            serial_no++;
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remk.CT_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.FixedHeight = 10f;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (count < 3)
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("***- IS 516-1959,clause 54, states that at least three specimens required for the testing. However as per customer`s request testing is done on lesser number of specimens.", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                }
                else
                {
                    if (flgNote15 == true)
                    {
                        if (serial_no == 0)
                        {
                            cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase("***-Individual cube result do not fall in the range of + or - 15% of the average. Hence as per IS 456:2000 Page No.29 para no.15.4, Average value not calculated.", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        if (flgNoteClosestValueAvg == true)
                        {
                            serial_no++;
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase("As per IS 516 : Part 1 : Sec 1 : 2021, clause 3.6, average of two closest value is taken as average result, however you are requested to test further sample if available.", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        cell2 = new PdfPCell(new Phrase(" ", fontH2));
                        cell2.Border = PdfPCell.NO_BORDER;
                        cell2.FixedHeight = 10f;
                        cell2.Colspan = 2;
                        table1.AddCell(cell2);
                    }
                }

                if (strengthNote != "")
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(strengthNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.FixedHeight = 8f;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (RecType == "CEMT" || RecType == "FLYASH")
                {
                    serial_no = 0;
                    var remk = dc.OtherCubeTestRemark_View("", ReferenceNo, 0, Convert.ToByte(Days), "CT");
                    foreach (var rm in remk)
                    {
                        var remark = dc.OtherCubeTestRemark_View("", "", Convert.ToInt32(rm.RemarkId_int), Convert.ToByte(Days), "CT");
                        foreach (var rem in remark)
                        {
                            if (serial_no == 0)
                            {
                                cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            serial_no++;
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(rem.Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.FixedHeight = 8f;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.FixedHeight = 8f;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }


                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                //cell2 = new PdfPCell(new Phrase("", fontH1));
                //cell2.Border = PdfPCell.NO_BORDER;
                //table1.AddCell(cell2);
                //cell2 = new PdfPCell(new Phrase("This report can be authenticated on our website www.durocrete.in", fontH2));
                //cell2.Border = PdfPCell.NO_BORDER;
                //cell2.Colspan = 2;
                //table1.AddCell(cell2);
                table1.SpacingAfter = 8;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);

                #endregion

                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 10;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    // MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    bool sign = false;
                    #region Signature

                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);
                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();

                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("Cube Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
                    foreach (var r in RecNo)
                    {
                        if (r.CTINWD_ApprovedBy_tint != null && r.CTINWD_ApprovedBy_tint.ToString() != "" && r.CTINWD_ApprovedBy_tint > 0)
                        {
                            var U = dc.User_View(r.CTINWD_ApprovedBy_tint, -1, "", "", "");
                            foreach (var r1 in U)
                            {
                                pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                                if (r1.USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Email" && ApproveDt != null)
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(Convert.ToDateTime(ApproveDt).ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }

                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (WitnessBy != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + WitnessBy, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (r.CTINWD_CheckedBy_tint != null && r.CTINWD_CheckedBy_tint.ToString() != "" && r.CTINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(r.CTINWD_CheckedBy_tint, -1, "", "", "");
                            foreach (var loginusr in lgin)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by : " + loginusr.USER_Name_var.ToString(), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));

                pdfDoc.Close();

                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    // pwd
                    //string password = "kandy";
                    //PdfReader reader = new PdfReader();
                    //PdfEncryptor.Encrypt(reader,new FileStream(output,true), true, password, password, PdfWriter.ALLOW_SCREENREADERS);

                    DownloadReport(fileName, pdfPath);
                }
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        #endregion

        public void FlyAsh_PDFReport(string ReferenceNo, string Action)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("FLYASH", ReferenceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "FLYASH_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/FlyAsh";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "FLYASH_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                //PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "FLYASH_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);
                MaindataTable.WidthPercentage = 100;

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.5f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.3f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 8.8f, Font.UNDEFINED);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action == "Automail" || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data
                DateTime ApproveDt = new DateTime();
                //float[] widths = new float[] { 18f, 1f, 47f, 25f, 1f, 15f };
                float[] widths = new float[] { 18f, 1f, 50f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                string Grade = "", CustName = "", SiteName = "", Address = "";
                int Approveby = 0;
                var FlyashInwd = dc.ReportStatus_View("Fly Ash Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                string CementCubeStrength = string.Empty;
                string Witnessby = string.Empty;
                bool RemotelyAppv = false;
                string supersedeNote = "";
                DateTime? dtTesting = null;
                var cemtavg = dc.OtherCubeTestView(ReferenceNo, "FLYASH", 28, 0, "CEMT", false, true);
                foreach (var cmavg in cemtavg)
                {
                    CementCubeStrength = Convert.ToString(cmavg.Avg_var);
                    break;
                }
                foreach (var flyash in FlyashInwd)
                {

                    SiteRouteId = Convert.ToInt32(flyash.SITE_Route_Id);

                    if (flyash.INWD_RptSITE_Id != null && flyash.INWD_RptCL_Id != null)
                    {
                        CustName = flyash.RptCL_Name_var;
                        SiteName = flyash.RptST_Name_var;
                        Address = flyash.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = flyash.CL_Name_var;
                        SiteName = flyash.SITE_Name_var;
                        Address = flyash.CL_OfficeAddress_var;
                    }
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //  paragraph.Add(" "); pdfDoc.Add(paragraph);
                    //if (flyash.FLYASHINWD_Status_tint == 4 || flyash.FLYASHINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);

                    if (Convert.ToString(flyash.FLYASHINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(flyash.FLYASHINWD_ApprovedDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 3;
                    paragraph.Add(" Hydraulic Fly Ash (Physical)");
                    if (flyash.FLYASHINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    if (flyash.FLYASHINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }
                    //else
                    //{

                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}


                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("FLYASH", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("FLYASH - " + flyash.FLYASHINWD_SetOfRecord_var, fontH1));
                    string strRecNo = flyash.FLYASHINWD_SetOfRecord_var;
                    if (flyash.FLYASHINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (flyash.FLYASHINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (flyash.FLYASHINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(flyash.FLYASHINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + flyash.FLYASHINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(flyash.FLYASHINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell); Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (flyash.SITE_MonthlyBillingStatus_bit == true && flyash.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (flyash.FLYASHINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(flyash.FLYASHINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(flyash.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(flyash.FLYASHINWD_SupplierName_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (flyash.FLYASHINWD_ReceivedDate_dt != null)
                    {
                        DateTime rDT = Convert.ToDateTime(flyash.FLYASHINWD_ReceivedDate_dt);
                        string receiptDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(receiptDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Cement name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(flyash.FLYASHINWD_CementName_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string CastingDt = "";
                    if (flyash.FLYASHINWD_TestedDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(flyash.FLYASHINWD_TestedDate_dt);
                        DateTime cDT = Convert.ToDateTime(flyash.FLYASHINWD_TestedDate_dt);
                        CastingDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(CastingDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Cement Compressive Strength", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (CementCubeStrength != string.Empty)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(CementCubeStrength + " N/mm²", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    }
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //if (flyash.FLYASHINWD_IssueDate_dt != null)
                    //{
                    //    DateTime iDT = Convert.ToDateTime(flyash.FLYASHINWD_IssueDate_dt);
                    //    string issuedt = iDT.ToString("dd-MMM-yyyy");
                    //    Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    //}
                    if (flyash.FLYASHINWD_ApprovedDate_dt != null)
                    {
                        DateTime iDT = Convert.ToDateTime(flyash.FLYASHINWD_ApprovedDate_dt);
                        string issuedt = iDT.ToString("dd-MMM-yyyy");
                        if (flyash.FLYASHINWD_TestedDate_dt != null)
                        {
                            DateTime Testdt = Convert.ToDateTime(CastingDt);
                            DateTime AprDt = Convert.ToDateTime(issuedt);
                            int DaysDiff = 0;
                            DaysDiff = Convert.ToInt32((Testdt - AprDt).TotalDays);
                            if (DaysDiff > 0)
                            {
                                issuedt = "---";
                            }
                        }
                        Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    //Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);

                    if (flyash.FLYASHINWD_WitnessBy_var != null && flyash.FLYASHINWD_WitnessBy_var != string.Empty)
                    {
                        Witnessby = flyash.FLYASHINWD_WitnessBy_var.ToString();
                    }
                    Grade = Convert.ToString(flyash.FLYASHINWD_Grade_var);

                    if (flyash.FLYASHINWD_RemoteApproved == true && flyash.FLYASHINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }
                    if (flyash.FLYASHINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(flyash.FLYASHINWD_ApprovedBy_tint);
                    }
                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(flyash.CONT_Name_var + " - " + flyash.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Fly Ash Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(flyash.FLYASHINWD_FlyAshName_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    if (flyash.INWD_RptSITE_Id != null && flyash.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(flyash.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(flyash.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);

                    }
                    //ULR No
                    if (Convert.ToString(flyash.FLYASHINWD_ULRNo_var) != "" && Convert.ToString(flyash.FLYASHINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(flyash.FLYASHINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //
                }
                //MaindataTable.SpacingAfter = 2;
                pdfDoc.Add(MaindataTable);

                #endregion

                //    pdfDoc.Add(Chunk.NEWLINE);
                //table1.SpacingBefore = 10;
                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(new Paragraph(" ", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                #region tbldata

                PdfPCell cell1;
                table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 100;


                int i = 0;
                int SrNo = 0;
                bool flgStarRem = false;
                var details = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, true, 0, "", 0, 0, 0, 0, 0, "", 0, "FLYASH");
                foreach (var FLYASH in details)
                {
                    if (SrNo == 0)
                    {
                        //  table1.SetTotalWidth(new float[] { 8f, 40f, 15f, 15f, 20f, 20f, 40f });
                        table1.SetTotalWidth(new float[] { 9f, 40f, 12f, 12f, 25f, 16f, 36f });
                        cell1 = new PdfPCell(new Phrase("Sr No.", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Name Of The Test", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Unit", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Result", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Specified Limits", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Compliance", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Method Of Testing", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    SrNo++;
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    bool valid = false;
                    string TEST_Name_var = "";
                    string strGrade = "";

                    if (FLYASH.TEST_Name_var.ToString() == "Compressive Strength")
                    {
                        if (FLYASH.FLYASHTEST_Days_tint.ToString() != "" && FLYASH.FLYASHTEST_Days_tint.ToString() != null && FLYASH.FLYASHTEST_Days_tint.ToString() != "0")
                        {
                            TEST_Name_var = " " + "(" + "" + FLYASH.FLYASHTEST_Days_tint.ToString() + " " + "Days" + " " + ")" + " " + FLYASH.TEST_Name_var.ToString();
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(TEST_Name_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            strGrade = FLYASH.FLYASHTEST_Days_tint.ToString();
                            if (FLYASH.FLYASHTEST_Days_tint == 28)
                                flgStarRem = true;
                        }
                    }
                    else
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(FLYASH.TEST_Name_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                    }
                    var Id = dc.AllInwdDetails_View("", "", 0, "", 0, null, "", "", 0, false, false, true, FLYASH.TEST_Id, "", 0, 0, 0, 0, 0, strGrade, 0, "FLYASH");
                    foreach (var testid in Id)
                    {
                        valid = true;
                        if (testid.splmt_Unit_var != null && testid.splmt_Unit_var.Contains("<sup>") == true)
                        {
                            Phrase phrase = new Phrase(15, "", fontH1);
                            string[] strTemp = testid.splmt_Unit_var.Split(new[] { "<sup>" }, StringSplitOptions.None);
                            foreach (string str in strTemp)
                            {
                                if (str.Contains("</sup>") == true)
                                {
                                    string[] strTemp2 = str.Split(new[] { "</sup>" }, StringSplitOptions.None);
                                    Chunk ck = new Chunk(strTemp2[0], fontH3).SetTextRise(3);
                                    phrase.Add(ck);
                                    phrase.Add(strTemp2[1]);
                                }
                                else
                                {
                                    phrase.Add(str);
                                }
                            }
                            cell1 = new PdfPCell(phrase);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(testid.splmt_Unit_var), fontH1));
                        }
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(FLYASH.FLYASHTEST_Result_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(testid.splmt_SpecifiedLimit_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        decimal SpecifiedLmtRes = 0;
                        bool validmax = false;
                        string res = "";

                        string[] SpceifiedLmt = Convert.ToString(testid.splmt_SpecifiedLimit_var).Split(' ', ',');
                        foreach (var Comp in SpceifiedLmt)
                        {
                            if (Comp != "")
                            {
                                if (Comp.Trim() == "Maximum")
                                {
                                    validmax = true;
                                }
                                if (Comp.Trim() == "PCC" || Comp.Trim() == "RCC")
                                {
                                    res = res + " " + "-" + " " + Comp + "\n";
                                }
                                if (decimal.TryParse(Comp, out SpecifiedLmtRes))
                                {
                                    SpecifiedLmtRes = Convert.ToDecimal(Comp);
                                    if (validmax == true)
                                    {
                                        if (FLYASH.FLYASHTEST_Result_var.Trim() != "Awaited" && FLYASH.FLYASHTEST_Result_var.Trim() != "*" &&
                                            FLYASH.FLYASHTEST_Result_var.Trim() != "*" && testid.splmt_SpecifiedLimit_var != "---" &&
                                            testid.splmt_SpecifiedLimit_var.Trim() != "Not Specified")
                                        {
                                            if ((Convert.ToDecimal(FLYASH.FLYASHTEST_Result_var)) <= Convert.ToDecimal(SpecifiedLmtRes))
                                            {
                                                res = res + "Pass ";
                                            }
                                            else
                                            {
                                                res = res + "Fail ";
                                            }
                                        }
                                        else
                                        {
                                            res = "---";
                                        }
                                    }
                                    else
                                    {
                                        if (FLYASH.FLYASHTEST_Result_var.Trim() != "Awaited" && FLYASH.FLYASHTEST_Result_var.Trim() != "*" &&
                                            FLYASH.FLYASHTEST_Result_var.Trim() != "*" && testid.splmt_SpecifiedLimit_var != "---"
                                            && testid.splmt_SpecifiedLimit_var.Trim() != "Not Specified")
                                        {
                                            if (Convert.ToDecimal(FLYASH.FLYASHTEST_Result_var) >= Convert.ToDecimal(SpecifiedLmtRes))
                                            {
                                                res = res + "Pass ";
                                            }
                                            else
                                            {
                                                res = res + "Fail ";
                                            }
                                        }
                                        else
                                        {
                                            res = "---";
                                        }
                                    }
                                }
                            }
                        }
                        if (res == "")
                        {
                            res = "---";
                        }
                        cell1 = new PdfPCell(new Phrase(res, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(testid.splmt_testingMethod_var, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        break;
                    }
                    if (valid == false)
                    {
                        cell1 = new PdfPCell(new Phrase("---", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(FLYASH.FLYASHTEST_Result_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("---", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("---", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("---", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                    }
                    i++;
                }

                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SpacingAfter = 5;
                pdfDoc.Add(table1);
                #endregion

                //table1.SpacingBefore = 10;
                #region iscode
                table1 = new PdfPTable(2);
                //table1.SpacingBefore = 3;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                var iscd = dc.ISCode_View(0, "", "FLYASH", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                serial_no = 0;
                var re = dc.AllRemark_View("", ReferenceNo, 0, "FLYASH").ToList();
                if (re.Count > 0)
                {
                    foreach (var r in re)
                    {
                        var remark = dc.AllRemark_View("", "", Convert.ToInt32(r.FLYASHDetail_RemarkId_int), "FLYASH");
                        foreach (var remk in remark)
                        {
                            if (serial_no == 0)
                            {
                                //table1.SpacingBefore = 10;
                                //pdfDoc.Add(new Paragraph("Remarks :", fontH2));
                                cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(serial_no + ")" + remk.FLYASH_Remark_var.ToString(), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remk.FLYASH_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (flgStarRem == true)
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("* indicates minimum 80% of the strength of corresponding plain cement mortar cubes", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 3;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);

                #endregion
                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 3;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 23;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }

                    var RecNo = dc.ReportStatus_View("Fly Ash Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
                    foreach (var r in RecNo)
                    {
                        if (r.FLYASHINWD_ApprovedBy_tint != null && r.FLYASHINWD_ApprovedBy_tint.ToString() != "" && r.FLYASHINWD_ApprovedBy_tint > 0)
                        {
                            var U = dc.User_View(r.FLYASHINWD_ApprovedBy_tint, -1, "", "", "");
                            foreach (var r1 in U)
                            {

                                pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                                if (r1.USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Email")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }

                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 3;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (r.FLYASHINWD_CheckedBy_tint != null && r.FLYASHINWD_CheckedBy_tint.ToString() != "" && r.FLYASHINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(r.FLYASHINWD_CheckedBy_tint, -1, "", "", "");
                            foreach (var loginusr in lgin)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by : " + loginusr.USER_Name_var.ToString(), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);


                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                pdfDoc.Add(new Paragraph("Page 1 of 1", fontH1));
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void GGBSCH_PDFReport(string ReferenceNo, string Action)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("GGBSCH", ReferenceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "GGBSCH_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/GgbsChemical";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Automail" || Action == "Email" || Action.Contains("Email") == true)
                {
                    fileName = "GGBSCH_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);
                MaindataTable.WidthPercentage = 100;

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);
                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);

                #region data
                float[] widths = new float[] { 18f, 1f, 52f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                string CustName = "", SiteName = "", Address = "", strCalculationDetails = "";
                DateTime ApproveDt = new DateTime();
                string Witnessby = string.Empty;
                bool RemotelyAppv = false;
                int Approveby = 0;
                string supersedeNote = "";
                DateTime? dtTesting = null;
                var GgbsChemical = dc.ReportStatus_View("GGBS Chemical Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var ggbs in GgbsChemical)
                {
                    if (ggbs.INWD_RptCL_Id != null && ggbs.INWD_RptSITE_Id != null)
                    {
                        CustName = ggbs.RptCL_Name_var;
                        SiteName = ggbs.RptST_Name_var;
                        Address = ggbs.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = ggbs.CL_Name_var;
                        SiteName = ggbs.SITE_Name_var;
                        Address = ggbs.CL_OfficeAddress_var;
                    }
                    SiteRouteId = Convert.ToInt32(ggbs.SITE_Route_Id);

                    paragraph.Alignment = Element.ALIGN_CENTER;
                    if (Action == "Print" || Action == "Email" || Action == "Automail" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);

                    if (ggbs.GGBSCHINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(ggbs.GGBSCHINWD_ApprovedBy_tint);
                    }
                    if (Convert.ToString(ggbs.GGBSCHINWD_IssueDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(ggbs.GGBSCHINWD_IssueDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 5;
                    paragraph.Add("GGBS (Chemical)");
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;

                    if (ggbs.GGBSCHINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("GGBSCH", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell); Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string strRecNo = ggbs.GGBSCHINWD_SetOfRecord_var;
                    if (ggbs.GGBSCHINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (ggbs.GGBSCHINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (ggbs.GGBSCHINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(ggbs.GGBSCHINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + ggbs.GGBSCHINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("GGBS name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(ggbs.GGBSCHINWD_GgbsName_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (ggbs.SITE_MonthlyBillingStatus_bit == true && ggbs.INWD_BILL_Id == "0")
                    {
                        if (ggbs.GGBSCHINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(ggbs.GGBSCHINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(ggbs.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(ggbs.GGBSCHINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (ggbs.GGBSCHINWD_ReceivedDate_dt != null)
                    {
                        DateTime rDT = Convert.ToDateTime(ggbs.GGBSCHINWD_ReceivedDate_dt);
                        string receiptDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(receiptDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(ggbs.GGBSCHINWD_SupplierName_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (ggbs.GGBSCHINWD_TestedDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(ggbs.GGBSCHINWD_TestedDate_dt);
                        DateTime tDT = Convert.ToDateTime(ggbs.GGBSCHINWD_TestedDate_dt);
                        string testingDt = tDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(testingDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(ggbs.CONT_Name_var + " - " + ggbs.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (ggbs.GGBSCHINWD_ApprovedDate_dt != null)
                    {
                        DateTime iDT = Convert.ToDateTime(ggbs.GGBSCHINWD_ApprovedDate_dt);
                        string issuedt = iDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (ggbs.GGBSCHINWD_WitnessBy_var != null && ggbs.GGBSCHINWD_WitnessBy_var != "")
                    {
                        Witnessby = ggbs.GGBSCHINWD_WitnessBy_var.ToString();
                    }

                    if (ggbs.GGBSCHINWD_RemoteApproved == true && ggbs.GGBSCHINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }

                    if (ggbs.INWD_RptSITE_Id != null && ggbs.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(ggbs.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(ggbs.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(ggbs.GGBSCHINWD_ULRNo_var) != "" && Convert.ToString(ggbs.GGBSCHINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Chemical" + "    " + "Group : " + "Cement", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(ggbs.GGBSCHINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    strCalculationDetails = ggbs.GGBSCHINWD_ReportDetails_var;
                }
                pdfDoc.Add(MaindataTable);
                #endregion

                var GgbsChemicalInward_GGBSCH = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, true, 0, "", 0, 0, 0, 0, 0, "", 0, "GGBSCH").ToList();
                var count = GgbsChemicalInward_GGBSCH.Count();

                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);

                #region tbldata

                PdfPCell cell1;
                string[] headers = { "Sr.No", "Name Of The Test", "Result", "Unit", "Specified Limits", "Compliance" };
                table1 = new PdfPTable(6);
                for (int h = 0; h < headers.Count(); h++)
                {
                    table1.SetTotalWidth(new float[] { 15f, 80f, 40f, 20f, 60f, 30f });
                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                table1.WidthPercentage = 100;
                int srNo = 0;
                for (int i = 0; i < count; i++)
                {
                    srNo = i + 1;
                    cell1 = new PdfPCell(new Phrase(srNo.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    string testName = "";
                    testName = GgbsChemicalInward_GGBSCH[i].TEST_Name_var;
                    testName = getTestNameToDisplay(testName);
                    // sub sup
                    if (testName.Contains("<Sub>") == true)
                    {
                        Phrase phrase = new Phrase(15, "", fontH1);
                        string[] strTemp = testName.Split(new[] { "<Sub>" }, StringSplitOptions.None);
                        foreach (string str in strTemp)
                        {
                            if (str.Contains("</Sub>") == true)
                            {
                                string[] strTemp2 = str.Split(new[] { "</Sub>" }, StringSplitOptions.None);
                                Chunk ck = new Chunk(strTemp2[0], fontH3).SetTextRise(-1);
                                phrase.Add(ck);
                                phrase.Add(strTemp2[1]);
                            }
                            else
                            {
                                phrase.Add(str);
                            }
                        }
                        cell1 = new PdfPCell(phrase);
                    }
                    else
                    {
                        cell1 = new PdfPCell(new Phrase(testName, fontH1));
                    }
                    //

                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(GgbsChemicalInward_GGBSCH[i].GGBSCHTEST_Result_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(GgbsChemicalInward_GGBSCH[i].splmt_Unit_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(GgbsChemicalInward_GGBSCH[i].splmt_SpecifiedLimit_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    //Complaince 
                    string SpecifiedLmt = "";
                    decimal Obsns = 0;
                    decimal result = 0;
                    Obsns = Convert.ToDecimal(GgbsChemicalInward_GGBSCH[i].GGBSCHTEST_Result_dec);
                    if (GgbsChemicalInward_GGBSCH[i].splmt_SpecifiedLimit_var != null)
                        SpecifiedLmt = Convert.ToString(GgbsChemicalInward_GGBSCH[i].splmt_SpecifiedLimit_var);
                    string[] line = SpecifiedLmt.Split(' ', ',', '-');
                    string res = "", res1 = "", res2 = "";
                    foreach (string line1 in line)
                    {
                        if (line1 != " ")
                        {
                            if (decimal.TryParse(line1, out result))
                            {
                                result = Convert.ToDecimal(line1);
                                res = result.ToString();
                                if (res1 == "")
                                    res1 = result.ToString();
                                else if (res2 == "")
                                    res2 = result.ToString();
                            }
                        }
                    }
                    if (SpecifiedLmt == "---" || SpecifiedLmt == "NA" || SpecifiedLmt == "" || SpecifiedLmt == "**" || SpecifiedLmt == "** | ***")
                    {
                        cell1 = new PdfPCell(new Phrase("---", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else if (SpecifiedLmt.Contains("prestressed structure") == true && Obsns <= Convert.ToDecimal(res1))
                    {
                        cell1 = new PdfPCell(new Phrase("Pass", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else if (SpecifiedLmt.Contains(" - ") == true && Obsns >= Convert.ToDecimal(res1) && Obsns <= Convert.ToDecimal(res2))
                    {
                        cell1 = new PdfPCell(new Phrase("Pass", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else if (Obsns <= result && SpecifiedLmt.Contains("Maximum") == true)
                    {
                        cell1 = new PdfPCell(new Phrase("Pass", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else if (Obsns >= result && SpecifiedLmt.Contains("Minimum") == true)
                    {
                        cell1 = new PdfPCell(new Phrase("Pass", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else
                    {
                        cell1 = new PdfPCell(new Phrase("Fail", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    ////
                }
                if (strCalculationDetails != "")
                {
                    string[] strVal = strCalculationDetails.Split('~');                    
                    for (int i = 0; i < strVal.Count()-1; i++)
                    {
                        string[] strVal1 = strVal[i].Split('|');
                        if (Convert.ToBoolean(strVal1[0]) == true)
                        {
                            srNo += 1;
                            cell1 = new PdfPCell(new Phrase(srNo.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            string testName = "", strSpLimit = "";
                            decimal decSpLimit = 0;
                            if (i == 0)
                            {
                                testName = "CaO+MgO+Al2O3/SiO2";
                                strSpLimit = "Minimum 1";
                                decSpLimit = 1;
                            }
                            else if (i == 1)
                            {
                                testName = "CaO+MgO+1/3Al2O3/SiO2+2/3Al2O3";
                                strSpLimit = "Minimum 1";
                                decSpLimit = 1;
                            }
                            else if (i == 2)
                            {
                                testName = "CaO+CaS+1/2MgO+Al2O3/SiO2+MnO";
                                strSpLimit = "Minimum 1.5";
                                decSpLimit = Convert.ToDecimal("1.5");
                            }
                            testName = getTestNameToDisplay(testName);
                            // sub sup
                            if (testName.Contains("<Sub>") == true)
                            {
                                Phrase phrase = new Phrase(15, "", fontH1);
                                string[] strTemp = testName.Split(new[] { "<Sub>" }, StringSplitOptions.None);
                                foreach (string str in strTemp)
                                {
                                    if (str.Contains("</Sub>") == true)
                                    {
                                        string[] strTemp2 = str.Split(new[] { "</Sub>" }, StringSplitOptions.None);
                                        Chunk ck = new Chunk(strTemp2[0], fontH3).SetTextRise(-1);
                                        phrase.Add(ck);
                                        phrase.Add(strTemp2[1]);
                                    }
                                    else
                                    {
                                        phrase.Add(str);
                                    }
                                }
                                cell1 = new PdfPCell(phrase);
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(testName, fontH1));
                            }
                            //
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[1]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString("-"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strSpLimit), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (Convert.ToDecimal(strVal1[1]) >= decSpLimit)
                            {
                                cell1 = new PdfPCell(new Phrase("Satisfy", fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase("Unsatisfy", fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                        }
                    }
                }
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SpacingAfter = 8;
                pdfDoc.Add(table1);
                #endregion

                #region iscode/remarks
                table1 = new PdfPTable(2);
                table1.SpacingAfter = 8;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                var iscd = dc.ISCode_View(0, "", "GGBSCH", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                serial_no = 0;
                var re = dc.AllRemark_View("", ReferenceNo, 0, "GGBSCH").ToList();
                if (re.Count > 0)
                {
                    foreach (var r in re)
                    {
                        var remark = dc.AllRemark_View("", "", Convert.ToInt32(r.GGBSCHDetail_RemarkId_int), "GGBSCH");
                        foreach (var remk in remark)
                        {
                            if (serial_no == 0)
                            {
                                cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            serial_no++;
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remk.GGBSCH_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                if (supersedeNote != "")
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 8;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);

                #endregion

                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 12;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("GGBS Chemical Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
                    foreach (var r in RecNo)
                    {
                        if (r.GGBSCHINWD_ApprovedBy_tint != null && r.GGBSCHINWD_ApprovedBy_tint.ToString() != "" && r.GGBSCHINWD_ApprovedBy_tint > 0)
                        {
                            var U = dc.User_View(r.GGBSCHINWD_ApprovedBy_tint, -1, "", "", "");
                            foreach (var r1 in U)
                            {

                                pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                                if (r1.USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Email" || Action == "Automail")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }
                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (r.GGBSCHINWD_CheckedBy_tint != null && r.GGBSCHINWD_CheckedBy_tint.ToString() != "" && r.GGBSCHINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(r.GGBSCHINWD_CheckedBy_tint, -1, "", "", "");
                            foreach (var loginusr in lgin)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by : " + loginusr.USER_Name_var.ToString(), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                pdfDoc.Add(new Paragraph("Page 1 of 1", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }

        }
        public void GGBS_PDFReport(string ReferenceNo, string Action)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("GGBS", ReferenceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "GGBS_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Ggbs";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "GGBS_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;
                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data
                DateTime ApproveDt = new DateTime();
                float[] widths = new float[] { 18f, 1f, 52f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                string Witnessby = string.Empty;
                bool RemotelyAppv = false;

                int Approveby = 0;
                string CustName = "", SiteName = "", Address = "";
                string supersedeNote = "";
                DateTime? dtTesting = null;
                var Ggbs = dc.ReportStatus_View("GGBS Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var ggbs in Ggbs)
                {
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    if (Action == "Print" || Action == "Email" || Action == "Automail" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);
                    SiteRouteId = Convert.ToInt32(ggbs.SITE_Route_Id);

                    if (ggbs.INWD_RptSITE_Id != null && ggbs.INWD_RptCL_Id != null)
                    {
                        CustName = ggbs.RptCL_Name_var;
                        SiteName = ggbs.RptST_Name_var;
                        Address = ggbs.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = ggbs.CL_Name_var;
                        SiteName = ggbs.SITE_Name_var;
                        Address = ggbs.CL_OfficeAddress_var;
                    }

                    if (ggbs.GGBSINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(ggbs.GGBSINWD_ApprovedBy_tint);
                    }

                    if (Convert.ToString(ggbs.GGBSINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(ggbs.GGBSINWD_ApprovedDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 5;
                    paragraph.Add("Ground Granulated Blast Furnace Slag (Physical)");

                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;

                    if (ggbs.GGBSINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("GGBS", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    string strRecNo = ggbs.GGBSINWD_SetOfRecord_var;
                    if (ggbs.GGBSINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (ggbs.GGBSINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (ggbs.GGBSINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(ggbs.GGBSINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + ggbs.GGBSINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("GGBS name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(ggbs.GGBSINWD_GgbsName_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (ggbs.SITE_MonthlyBillingStatus_bit == true && ggbs.INWD_BILL_Id == "0")
                    {
                        if (ggbs.GGBSINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(ggbs.GGBSINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(ggbs.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Cement name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(ggbs.GGBSINWD_CementName_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (ggbs.GGBSINWD_ReceivedDate_dt != null)
                    {
                        DateTime rDT = Convert.ToDateTime(ggbs.GGBSINWD_ReceivedDate_dt);
                        string receiptDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(receiptDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(ggbs.GGBSINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string CastingDt = "";
                    if (ggbs.GGBSINWD_TestedDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(ggbs.GGBSINWD_TestedDate_dt);
                        DateTime cDT = Convert.ToDateTime(ggbs.GGBSINWD_TestedDate_dt);
                        CastingDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(CastingDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(ggbs.GGBSINWD_SupplierName_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (ggbs.GGBSINWD_ApprovedDate_dt != null)
                    {
                        DateTime iDT = Convert.ToDateTime(ggbs.GGBSINWD_ApprovedDate_dt);
                        string issuedt = iDT.ToString("dd-MMM-yyyy");
                        if (ggbs.GGBSINWD_TestedDate_dt != null)
                        {
                            DateTime Testdt = Convert.ToDateTime(CastingDt);
                            DateTime AprDt = Convert.ToDateTime(issuedt);
                            int DaysDiff = 0;
                            DaysDiff = Convert.ToInt32((Testdt - AprDt).TotalDays);
                            if (DaysDiff > 0)
                            {
                                issuedt = "---";
                            }
                        }
                        Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(ggbs.CONT_Name_var + " - " + ggbs.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 4;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (ggbs.GGBSINWD_WitnessBy_var != null && ggbs.GGBSINWD_WitnessBy_var != "")
                    {
                        Witnessby = ggbs.GGBSINWD_WitnessBy_var.ToString();
                    }
                    if (ggbs.GGBSINWD_RemoteApproved == true && ggbs.GGBSINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }

                    if (ggbs.INWD_RptSITE_Id != null && ggbs.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(ggbs.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(ggbs.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(ggbs.GGBSINWD_ULRNo_var) != "" && Convert.ToString(ggbs.GGBSINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(ggbs.GGBSINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //
                    break;
                }
                pdfDoc.Add(MaindataTable);
                #endregion

                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);

                #region tbldata
                PdfPCell cell1;
                table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 100;

                int SrNo = 0;
                int i = 0;
                var details = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, true, 0, "", 0, 0, 0, 0, 0, "", 0, "GGBS");
                foreach (var ggbst in details)
                {
                    if (SrNo == 0)
                    {
                        table1.SetTotalWidth(new float[] { 8f, 50f, 12f, 15f, 22f, 19f, 38f });
                        cell1 = new PdfPCell(new Phrase("Sr. No.", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Name Of The Test", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Unit", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Result", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Specified Limits", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Compliance", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Method Of Testing", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                    }
                    SrNo++;

                    bool valid = false;

                    cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    if (ggbst.TEST_Name_var.ToString() == "Slag activity index")
                    {
                        cell1.Rowspan = 3;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                    }
                    table1.AddCell(cell1);

                    string TEST_Name_var = "";
                    if (ggbst.TEST_Name_var.ToString() == "Compressive Strength")
                    {
                        if (ggbst.GGBSTEST_Days_tint.ToString() != "" && ggbst.GGBSTEST_Days_tint.ToString() != null && ggbst.GGBSTEST_Days_tint.ToString() != "0")
                        {
                            TEST_Name_var = " ";
                            if (ggbst.GGBSTEST_Days_tint == 3)
                                TEST_Name_var = "72 +/- 1hr";
                            else if (ggbst.GGBSTEST_Days_tint == 7)
                                TEST_Name_var = "168 +/- 2hr";
                            else if (ggbst.GGBSTEST_Days_tint == 28)
                                TEST_Name_var = "672 +/- 4hr";
                            TEST_Name_var += "( " + ggbst.GGBSTEST_Days_tint.ToString() + " Days ) " + ggbst.TEST_Name_var.ToString();
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(TEST_Name_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                        }
                    }
                    else if (ggbst.TEST_Name_var.ToString() == "Slag activity index")
                    {
                        if (ggbst.GGBSTEST_Days_tint.ToString() != "" && ggbst.GGBSTEST_Days_tint.ToString() != null && ggbst.GGBSTEST_Days_tint.ToString() != "0")
                        {
                            TEST_Name_var = " ";
                            if (ggbst.GGBSTEST_Days_tint == 3)
                                TEST_Name_var = "72 +/- 1hr";
                            else if (ggbst.GGBSTEST_Days_tint == 7)
                                TEST_Name_var = "168 +/- 2hr";
                            else if (ggbst.GGBSTEST_Days_tint == 28)
                                TEST_Name_var = "672 +/- 4hr";
                            TEST_Name_var += "( " + ggbst.GGBSTEST_Days_tint.ToString() + " Days ) Compressive Strength";
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(TEST_Name_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Colspan = 6;
                            table1.AddCell(cell1);

                            //Cement Strenth
                            cell1 = new PdfPCell(new Phrase(" i. Control OPC mortar cube", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            Phrase phrase = new Phrase(15, "", fontH1);
                            phrase.Add("N/mm");
                            Chunk ck = new Chunk("2", fontH3).SetTextRise(3);
                            phrase.Add(ck);
                            cell1 = new PdfPCell(phrase);
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            string tmpStr = "Awaited";
                            var CompStr = dc.OtherCubeTestView(ReferenceNo, "GGBS", Convert.ToByte(ggbst.GGBSTEST_Days_tint), 0, "CEMT", false, true);
                            foreach (var cms in CompStr)
                            {
                                tmpStr = Convert.ToString(cms.Avg_var);
                            }
                            cell1 = new PdfPCell(new Phrase(tmpStr, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("---", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("---", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("IS:4031 (Part-6) - 1988-RA(2014)", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                            //Ggbs Strength
                            cell1 = new PdfPCell(new Phrase("ii. Mortar cube using blend (Cement + GGBS)", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            phrase = new Phrase(15, "", fontH1);
                            phrase.Add("N/mm");
                            ck = new Chunk("2", fontH3).SetTextRise(3);
                            phrase.Add(ck);
                            cell1 = new PdfPCell(phrase);
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            tmpStr = "Awaited";
                            var CompStrCement = dc.OtherCubeTestView(ReferenceNo, "GGBS", Convert.ToByte(ggbst.GGBSTEST_Days_tint), 0, "GGBS", false, true);
                            foreach (var cms in CompStrCement)
                            {
                                tmpStr = Convert.ToString(cms.Avg_var);
                            }
                            cell1 = new PdfPCell(new Phrase(tmpStr, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("---", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("---", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            //
                            SrNo++;
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(SrNo), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            TEST_Name_var = ggbst.TEST_Name_var.ToString() + "(SAI) at " + ggbst.GGBSTEST_Days_tint.ToString() + " Days ";
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(TEST_Name_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                        }
                    }
                    else
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(ggbst.TEST_Name_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                    }
                    var Id = dc.AllInwdDetails_View("", "", 0, "", 0, null, "", "", 0, false, false, true, ggbst.TEST_Id, "", 0, 0, 0, 0, 0, "", 0, "GGBS");
                    foreach (var testid in Id)
                    {
                        valid = true;

                        if (testid.splmt_Unit_var != null && testid.splmt_Unit_var.Contains("<sup>") == true)
                        {
                            Phrase phrase = new Phrase(15, "", fontH1);
                            string[] strTemp = testid.splmt_Unit_var.Split(new[] { "<sup>" }, StringSplitOptions.None);
                            foreach (string str in strTemp)
                            {
                                if (str.Contains("</sup>") == true)
                                {
                                    string[] strTemp2 = str.Split(new[] { "</sup>" }, StringSplitOptions.None);
                                    Chunk ck = new Chunk(strTemp2[0], fontH3).SetTextRise(3);
                                    phrase.Add(ck);
                                    phrase.Add(strTemp2[1]);
                                }
                                else
                                {
                                    phrase.Add(str);
                                }
                            }
                            cell1 = new PdfPCell(phrase);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(testid.splmt_Unit_var, fontH1));
                        }

                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(ggbst.GGBSTEST_Result_var, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        //specified limit
                        string strSpecLim = "", strMethodOfTesting = "";
                        strSpecLim = testid.splmt_SpecifiedLimit_var;
                        strMethodOfTesting = testid.splmt_testingMethod_var;

                        if (ggbst.TEST_Name_var.ToString() == "Slag activity index")
                        {
                            strSpecLim = "---";
                            if (ggbst.GGBSTEST_Days_tint == 7)
                            {
                                strSpecLim = "Minimum 60 % of Control OPC Mortar Cube";
                            }
                            if (ggbst.GGBSTEST_Days_tint == 28)
                            {
                                strSpecLim = "Minimum 75 % of Control OPC Mortar Cube";
                            }
                        }

                        cell1 = new PdfPCell(new Phrase(strSpecLim, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        //result pass-fail
                        decimal SpecifiedLmtRes = 0;
                        bool validmax = false;
                        string res = "";
                        string[] SpceifiedLmt = Convert.ToString(strSpecLim).Split(' ', ',');
                        foreach (var Comp in SpceifiedLmt)
                        {
                            if (Comp != "")
                            {
                                if (Comp.Trim() == "Maximum")
                                {
                                    validmax = true;
                                }
                                if (decimal.TryParse(Comp, out SpecifiedLmtRes))
                                {
                                    SpecifiedLmtRes = Convert.ToDecimal(Comp.ToString());
                                    if (validmax == true)
                                    {
                                        if (Convert.ToString(ggbst.GGBSTEST_Result_var).Trim() != "Awaited" && Convert.ToString(ggbst.GGBSTEST_Result_var).Trim() != "*"
                                            && Convert.ToString(testid.splmt_SpecifiedLimit_var) != "---" && Convert.ToString(testid.splmt_SpecifiedLimit_var) != ""
                                            && Convert.ToString(testid.splmt_SpecifiedLimit_var).Trim() != "Not Specified")
                                        {
                                            if ((Convert.ToDecimal(ggbst.GGBSTEST_Result_var)) <= Convert.ToDecimal(SpecifiedLmtRes))
                                            {
                                                if (res != "Fail ")
                                                    res = "Pass ";
                                            }
                                            else if ((Convert.ToDecimal(ggbst.GGBSTEST_Result_var)) > Convert.ToDecimal(SpecifiedLmtRes))
                                            {
                                                res = "Crossing the upper limit ";
                                            }
                                            else
                                            {
                                                res = "Fail ";
                                            }
                                        }
                                        else
                                        {
                                            res = "---";
                                        }
                                    }
                                    else
                                    {
                                        if (Convert.ToString(ggbst.GGBSTEST_Result_var).Trim() != "Awaited" && Convert.ToString(ggbst.GGBSTEST_Result_var).Trim() != "*"
                                            && Convert.ToString(testid.splmt_SpecifiedLimit_var) != "---" && Convert.ToString(testid.splmt_SpecifiedLimit_var) != ""
                                            && Convert.ToString(testid.splmt_SpecifiedLimit_var).Trim() != "Not Specified")
                                        {
                                            if ((Convert.ToDecimal(ggbst.GGBSTEST_Result_var)) >= Convert.ToDecimal(SpecifiedLmtRes))
                                            {
                                                if (res != "Fail ")
                                                    res = "Pass ";
                                            }
                                            else
                                            {
                                                res = "Fail ";
                                            }
                                        }
                                        else
                                        {
                                            res = "---";
                                        }
                                    }
                                }

                            }
                        }
                        if (res == "")
                        {
                            res = "---";
                        }
                        cell1 = new PdfPCell(new Phrase(res, fontH1));
                        ////
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase(testid.splmt_testingMethod_var, fontH1));
                        cell1 = new PdfPCell(new Phrase(strMethodOfTesting, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        break;
                    }
                    if (valid == false)
                    {
                        cell1 = new PdfPCell(new Phrase("---", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(ggbst.GGBSTEST_Result_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("---", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("---", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("---", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    i++;
                }

                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SpacingAfter = 8;
                pdfDoc.Add(table1);
                #endregion

                #region iscode/remarks
                table1 = new PdfPTable(2);
                table1.SpacingAfter = 8;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                var iscd = dc.ISCode_View(0, "", "GGBS", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                serial_no = 0;
                var re = dc.AllRemark_View("", ReferenceNo, 0, "GGBS").ToList();
                if (re.Count > 0)
                {
                    foreach (var r in re)
                    {
                        var remark = dc.AllRemark_View("", "", Convert.ToInt32(r.GGBSDetail_RemarkId_int), "GGBS");
                        foreach (var remk in remark)
                        {
                            if (serial_no == 0)
                            {
                                cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            serial_no++;
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remk.GGBS_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {

                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 8;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);


                #endregion

                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 12;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("GGBS Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
                    foreach (var r in RecNo)
                    {
                        if (r.GGBSINWD_ApprovedBy_tint != null && r.GGBSINWD_ApprovedBy_tint.ToString() != "" && r.GGBSINWD_ApprovedBy_tint > 0)
                        {
                            var U = dc.User_View(r.GGBSINWD_ApprovedBy_tint, -1, "", "", "");
                            foreach (var r1 in U)
                            {
                                pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                                if (r1.USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Email" || Action == "Automail")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }
                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (r.GGBSINWD_CheckedBy_tint != null && r.GGBSINWD_CheckedBy_tint.ToString() != "" && r.GGBSINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(r.GGBSINWD_CheckedBy_tint, -1, "", "", "");
                            foreach (var loginusr in lgin)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by : " + loginusr.USER_Name_var.ToString(), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                pdfDoc.Add(new Paragraph("Page 1 of 1", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        #region Masonary Block - Solid
        public void SOLID_CS_PDFReport(string ReferenceNo, string Action)
        {
            try
            {
                #region for RefNo
                string[] RefNo = Convert.ToString(ReferenceNo).Split('/');
                string refNo = RefNo[0];
                int ref_No = Convert.ToInt32(refNo);

                #endregion
                #region fetch data from db

                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("SOLID", ReferenceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "SOLID_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Solid";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername + "/CS";
                if (!Directory.Exists(@Subfoldername1))
                    Directory.CreateDirectory(@Subfoldername1);
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "SOLID_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                //PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "SOLID_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(9);
                table1.WidthPercentage = 100;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);
                MaindataTable.WidthPercentage = 100;
                MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                //paragraph.Alignment = Element.ALIGN_CENTER;
                //paragraph.Add("Office Copy");
                //pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.5f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action == "Automail" || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #endregion
                string Witnessby = string.Empty;
                DateTime ApproveDt = new DateTime();
                int TestId = 0, Qty = 0;
                bool RemotelyAppv = false;
                //float[] widths = new float[] { 20f, 1f, 50f, 15f, 1f, 15f };
                float[] widths = new float[] { 21f, 1f, 50f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);

                #region data
                int Approveby = 0;
                string blockType = "";
                string supersedeNote = "", CustName = "", SiteName = "", Address = "";
                DateTime? dtTesting = null;
                var SolidInward = dc.ReportStatus_View("Masonary Block Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var solid in SolidInward)
                {

                    if (solid.INWD_RptSITE_Id != null && solid.INWD_RptCL_Id != null)
                    {
                        CustName = solid.RptCL_Name_var;
                        SiteName = solid.RptST_Name_var;
                        Address = solid.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = solid.CL_Name_var;
                        SiteName = solid.SITE_Name_var;
                        Address = solid.CL_OfficeAddress_var;
                    }

                    SiteRouteId = Convert.ToInt32(solid.SITE_Route_Id);

                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //  paragraph.Add(" "); pdfDoc.Add(paragraph);
                    //if (solid.SOLIDINWD_Status_tint == 4 || solid.SOLIDINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);

                    if (Convert.ToString(solid.SOLIDINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(solid.SOLIDINWD_ApprovedDate_dt);
                    }
                    if (solid.SOLIDINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(solid.SOLIDINWD_ApprovedBy_tint);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                    paragraph.Add("Masonry Unit(Compressive Strength)");
                    if (solid.SOLIDINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    if (solid.SOLIDINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("SOLID", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(solid.SOLIDINWD_ReferenceNo_var).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string strRecNo = solid.SOLIDINWD_SetOfRecord_var;
                    if (solid.SOLIDINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (solid.SOLIDINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (solid.SOLIDINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(solid.SOLIDINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + solid.SOLIDINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(solid.SOLIDINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (solid.SITE_MonthlyBillingStatus_bit == true && solid.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (solid.SOLIDINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(solid.SOLIDINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(solid.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(solid.SOLIDINWD_SupplierName_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (solid.INWD_ReceivedDate_dt != null)
                    {
                        DateTime rDT = solid.INWD_ReceivedDate_dt.Value;
                        string receiptDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(receiptDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-"));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Type of Masonry Block", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(solid.SOLIDINWD_BlockType_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Casting", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (solid.SOLIDINWD_CastingDate_nvar != null && solid.SOLIDINWD_CastingDate_nvar != "NA")
                    {
                        //DateTime cDT = Convert.ToDateTime(solid.SOLIDINWD_CastingDate_nvar);
                        //string CastingDt = cDT.ToString("dd-MMM-yyyy");
                        string CastingDt = DateTime.ParseExact(solid.SOLIDINWD_CastingDate_nvar, "dd/MM/yyyy", null).ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(CastingDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("NA", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(solid.CONT_Name_var + " - " + solid.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (solid.SOLIDINWD_TestingDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(solid.SOLIDINWD_TestingDate_dt);
                        DateTime tDT = Convert.ToDateTime(solid.SOLIDINWD_TestingDate_dt);
                        string testingDt = tDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(testingDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-"));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;

                    MaindataTable.AddCell(Cust_Namecell);
                    Witnessby = solid.SOLIDINWD_WitnessBy_var;
                    TestId = Convert.ToInt32(solid.SOLIDINWD_TEST_Id);
                    Qty = Convert.ToInt32(solid.SOLIDINWD_Quantity_tint);
                    if (solid.SOLIDINWD_RemoteApproved == true && solid.SOLIDINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }
                    blockType = solid.SOLIDINWD_BlockType_var;

                    if (solid.INWD_RptSITE_Id != null && solid.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(solid.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //if (solid.SOLIDINWD_IssueDate_dt != null)
                    //{
                    //    DateTime iDT = solid.SOLIDINWD_IssueDate_dt.Value;
                    //    string issuedt = iDT.ToString("dd-MMM-yyyy");

                    //    Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    //}
                    if (solid.SOLIDINWD_ApprovedDate_dt != null)
                    {
                        DateTime iDT = solid.SOLIDINWD_ApprovedDate_dt.Value;
                        string issuedt = iDT.ToString("dd-MMM-yyyy");

                        Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (solid.INWD_RptSITE_Id != null && solid.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(solid.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                        //Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        //Cust_Namecell.Colspan = 3;
                        //MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(solid.SOLIDINWD_ULRNo_var) != "" && Convert.ToString(solid.SOLIDINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(solid.SOLIDINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //
                }
                //MaindataTable.SpacingAfter = 2;
                pdfDoc.Add(MaindataTable);
                #endregion

                var solidInward_CA = dc.Solid_Inward_CS_View(ReferenceNo).ToList();
                var count = solidInward_CA.Count();
                int i = 0;
                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);
                //table1.SpacingBefore = 10;
                //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS", fontH2));
                //table1.SpacingBefore = 5;
                string[] headers = { "Sr.No", "ID Mark", "Age", "Dimensions", "Cross Section Area", "Load", "Compressive strength", "Average strength" };
                PdfPCell cell1;
                for (int h = 0; h < headers.Count(); h++)
                {
                    if (h < 2)
                    {
                        cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                        cell1.Rowspan = 2;
                    }
                    else
                    {
                        if (h == 3)
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                            cell1.Colspan = 2;

                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                        }
                    }
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                table1.HorizontalAlignment = Element.ALIGN_LEFT;

                string[] subheaders = { "", "", "(days)", "Length", "Width", "(mm²)", "(kN)", "(N/mm²)", "(N/mm²)" };
                cell1 = new PdfPCell();
                for (int h = 2; h < subheaders.Count(); h++)
                {
                    cell1 = new PdfPCell(new Phrase(subheaders[h], fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);



                #region tbldata
                table1 = new PdfPTable(9);
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                decimal minStrength = 0;
                for (int j = 0; j < count; j++)
                {

                    string srNo = Convert.ToString(i + 1);
                    cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    if (solidInward_CA[j].SOLIDINWD_CS_ID_Mark_var == "" || solidInward_CA[j].SOLIDINWD_CS_ID_Mark_var == null)
                    {
                        cell1 = new PdfPCell(new Phrase("-", fontH1));
                    }
                    else
                    {
                        cell1 = new PdfPCell(new Phrase(solidInward_CA[j].SOLIDINWD_CS_ID_Mark_var, fontH1));
                    }
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    if (solidInward_CA[j].SOLIDINWD_CS_Age_var == "NA")
                    {
                        cell1 = new PdfPCell(new Phrase("NA", fontH1));
                    }
                    else
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(solidInward_CA[j].SOLIDINWD_CS_Age_var), fontH1));
                    }
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(solidInward_CA[j].SOLIDINWD_CS_Length_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(solidInward_CA[j].SOLIDINWD_CS_width_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    int area = Convert.ToInt32(solidInward_CA[j].SOLIDINWD_CS_Length_dec) * Convert.ToInt32(solidInward_CA[j].SOLIDINWD_CS_width_dec);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(area), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(solidInward_CA[j].SOLIDINWD_CS_Load_Dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(solidInward_CA[j].SOLIDINWD_CS_Strength_Dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    if (j == 0)
                        minStrength = Convert.ToDecimal(solidInward_CA[j].SOLIDINWD_CS_Strength_Dec);
                    else if (minStrength > solidInward_CA[j].SOLIDINWD_CS_Strength_Dec)
                        minStrength = Convert.ToDecimal(solidInward_CA[j].SOLIDINWD_CS_Strength_Dec);
                    if (i == 0)
                    {
                        //int qty = Convert.ToInt32(TxtQty.Text);
                        if (Qty < 8)
                        {
                            cell1 = new PdfPCell(new Phrase("***", fontH1));
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(solidInward_CA[count - 1].SOLIDINWD_CS_Average_Dec), fontH1));
                        }
                        cell1.Rowspan = count;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        table1.AddCell(cell1);
                    }

                    i++;

                }

                table1.SpacingAfter = 5;
                pdfDoc.Add(table1);

                #endregion
                #region iscode/remarks
                table1 = new PdfPTable(2);
                table1.SpacingAfter = 5;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                serial_no++;
                //pdfDoc.Add(new Paragraph("Compliance", fontH2));
                cell2 = new PdfPCell(new Phrase("Compliance :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                string notess = "";
                if (blockType == "Hollow")
                {
                    notess = compl_notes_hollowBlock(Convert.ToString(solidInward_CA[count - 1].SOLIDINWD_CS_Average_Dec), Convert.ToString(solidInward_CA[count - 1].SOLIDINWD_CS_Age_var), minStrength);
                }
                else if (blockType == "Solid")
                {
                    notess = compl_notes_solidBlock(Convert.ToString(solidInward_CA[count - 1].SOLIDINWD_CS_Average_Dec), minStrength);
                }

                cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notess, fontH1));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(" ", fontH2));
                cell2.FixedHeight = 5f;
                cell2.Border = PdfPCell.NO_BORDER;
                cell2.Colspan = 2;
                table1.AddCell(cell2);

                serial_no = 0;
                var iscd = dc.ISCode_View(0, "", "SOLID", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (Qty < 8)
                {
                    if (serial_no == 0)
                    {
                        //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                        cell2 = new PdfPCell(new Phrase("References :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    //pdfDoc.Add(new Paragraph(serial_no + ")" + "At least 8 specimens are required for the testing, however as per customer request testing is done on lesser no. of specimens", fontH1));
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("*** IS 2185(Part I) 2005 states that at least 8 specimens are required for the testing, however as per customer request testing is done on lesser no. of specimens.", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                serial_no = 0;
                table1.SpacingBefore = 5;
                var reference = dc.AllRemark_View("", ReferenceNo, 0, "SOLID").ToList();
                var referencecount = reference.Count();
                if (referencecount > 0)
                {
                    for (int r = 0; r < referencecount; r++)
                    {
                        if (r == 0)
                        {
                            //pdfDoc.Add(new Paragraph("Remarks : ", fontH2));
                            cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        var remark = dc.AllRemark_View("", "", Convert.ToInt32(reference[r].SOLIDDetail_Remark_ID), "SOLID").ToList();
                        var remarkcount = remark.Count();
                        for (int remk = 0; remk < remarkcount; remk++)
                        {
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(serial_no + ")" + Convert.ToString(remark[remk].SOLID_Remark_var), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remark[remk].SOLID_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0].ToString(), fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1].ToString(), fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2].ToString(), fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 8;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);
                #endregion
                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 12;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var solidChkby = dc.ReportStatus_View("Masonary Block Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0).ToList();
                    var RecNocount = solidChkby.Count();
                    for (int r = 0; r < RecNocount; r++)
                    {
                        if (solidChkby[r].SOLIDINWD_ApprovedBy_tint != null && solidChkby[r].SOLIDINWD_ApprovedBy_tint.ToString() != "" && solidChkby[r].SOLIDINWD_ApprovedBy_tint > 0)
                        {
                            var User = dc.User_View(Convert.ToInt32(solidChkby[r].SOLIDINWD_ApprovedBy_tint), -1, "", "", "").ToList();
                            var ucount = User.Count();
                            for (int userId = 0; userId < ucount; userId++)
                            {

                                pdfDoc.Add(new Paragraph(Convert.ToString(User[userId].USER_Name_var), fontH1));
                                if (User[userId].USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + User[userId].USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(User[userId].USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Automail" || Action == "Email")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }
                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (solidChkby[r].SOLIDINWD_CheckedBy_tint != null && solidChkby[r].SOLIDINWD_CheckedBy_tint.ToString() != "" && solidChkby[r].SOLIDINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(Convert.ToInt32(solidChkby[r].SOLIDINWD_CheckedBy_tint), -1, "", "", "").ToList();
                            var lginCount = lgin.Count();
                            for (int loginusr = 0; loginusr < lginCount; loginusr++)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by :  " + Convert.ToString(lgin[loginusr].USER_Name_var), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);


                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
            }
            catch (Exception ex)
            {

            }
        }
        public void SOLID_WA_PDFReport(string ReferenceNo, string Action)
        {
            try
            {
                string[] RefNo = Convert.ToString(ReferenceNo).Split('/');
                string refNo = RefNo[0];
                int ref_No = Convert.ToInt32(refNo);
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("SOLID", ReferenceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "SOLID_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Solid";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername + "/WA";
                if (!Directory.Exists(@Subfoldername1))
                    Directory.CreateDirectory(@Subfoldername1);
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "SOLID_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                //PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "SOLID_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;
                MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                //paragraph.Alignment = Element.ALIGN_CENTER;
                //paragraph.Add("Office Copy");
                //pdfDoc.Add(paragraph);
                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action == "Automail" || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data
                //float[] widths = new float[] { 20f, 1f, 50f, 15f, 1f, 15f };
                float[] widths = new float[] { 21f, 1f, 50f, 18f, 1f, 15f };

                MaindataTable.SetWidths(widths);
                string Witnessby = string.Empty, CustName = "", SiteName = "", Address = "";
                DateTime ApproveDt = new DateTime();
                int TestId = 0, Qty = 0;
                bool RemotelyAppv = false;
                int Approveby = 0;
                string supersedeNote = "";
                DateTime? dtTesting = null;
                var SolidInward = dc.ReportStatus_View("Masonary Block Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var solid in SolidInward)
                {
                    if (solid.INWD_RptSITE_Id != null && solid.INWD_RptCL_Id != null)
                    {
                        CustName = solid.RptCL_Name_var;
                        SiteName = solid.RptST_Name_var;
                        Address = solid.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = solid.CL_Name_var;
                        SiteName = solid.SITE_Name_var;
                        Address = solid.CL_OfficeAddress_var;
                    }
                    SiteRouteId = Convert.ToInt32(solid.SITE_Route_Id);


                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //  paragraph.Add(" "); pdfDoc.Add(paragraph); //if (solid.SOLIDINWD_Status_tint == 4 || solid.SOLIDINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);

                    if (solid.SOLIDINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(solid.SOLIDINWD_ApprovedBy_tint);
                    }
                    if (Convert.ToString(solid.SOLIDINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(solid.SOLIDINWD_ApprovedDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Add("Masonry Unit  (Water Absorption)");
                    if (solid.SOLIDINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    if (solid.SOLIDINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("SOLID", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(solid.SOLIDINWD_ReferenceNo_var).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("SOLID - " + solid.SOLIDINWD_SetOfRecord_var, fontH1));
                    string strRecNo = solid.SOLIDINWD_SetOfRecord_var;
                    if (solid.SOLIDINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (solid.SOLIDINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (solid.SOLIDINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(solid.SOLIDINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + solid.SOLIDINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(solid.SOLIDINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (solid.SITE_MonthlyBillingStatus_bit == true && solid.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (solid.SOLIDINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(solid.SOLIDINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(solid.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(solid.SOLIDINWD_SupplierName_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //   string receiptDt = Convert.ToString(clientdata.FirstOrDefault().INWD_ReceivedDate_dt);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (solid.INWD_ReceivedDate_dt != null)
                    {
                        DateTime rDT = Convert.ToDateTime(solid.INWD_ReceivedDate_dt);
                        string receiptDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(receiptDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    Cust_Namecell = new PdfPCell(new Phrase("Type of Masonry Block", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(solid.SOLIDINWD_BlockType_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Casting", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (solid.SOLIDINWD_CastingDate_nvar != null && solid.SOLIDINWD_CastingDate_nvar != "NA")
                    {
                        //DateTime cDT = Convert.ToDateTime(solid.SOLIDINWD_CastingDate_nvar);
                        //string CastingDt = cDT.ToString("dd-MMM-yyyy");
                        string CastingDt = DateTime.ParseExact(solid.SOLIDINWD_CastingDate_nvar, "dd/MM/yyyy", null).ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(CastingDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("NA", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(solid.CONT_Name_var + " - " + solid.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (solid.SOLIDINWD_TestingDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(solid.SOLIDINWD_TestingDate_dt);
                        DateTime tDT = Convert.ToDateTime(solid.SOLIDINWD_TestingDate_dt);
                        string testingDt = tDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(testingDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Witnessby = solid.SOLIDINWD_WitnessBy_var;
                    TestId = Convert.ToInt32(solid.SOLIDINWD_TEST_Id);
                    Qty = Convert.ToInt32(solid.SOLIDINWD_Quantity_tint);

                    if (solid.SOLIDINWD_RemoteApproved == true && solid.SOLIDINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }


                    if (solid.INWD_RptSITE_Id != null && solid.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(solid.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //if (solid.SOLIDINWD_IssueDate_dt != null)
                    //{
                    //    DateTime iDT = Convert.ToDateTime(solid.SOLIDINWD_IssueDate_dt);
                    //    string issuedt = iDT.ToString("dd-MMM-yyyy");
                    //    Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    //}
                    if (solid.SOLIDINWD_ApprovedDate_dt != null)
                    {
                        DateTime iDT = Convert.ToDateTime(solid.SOLIDINWD_ApprovedDate_dt);
                        string issuedt = iDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (solid.INWD_RptSITE_Id != null && solid.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": " + solid.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                        //Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        //Cust_Namecell.Colspan = 3;
                        //MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(solid.SOLIDINWD_ULRNo_var) != "" && Convert.ToString(solid.SOLIDINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(solid.SOLIDINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //
                }
                //MaindataTable.SpacingAfter = 3;
                pdfDoc.Add(MaindataTable);
                #endregion

                var solidInward_WA = dc.Solid_Inward_WA_View(ReferenceNo).ToList();
                var count = solidInward_WA.Count();

                //pdfDoc.Add(Chunk.NEWLINE);
                //table1.SpacingBefore = 10;
                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS", fontH2));
                //table1.SpacingBefore = 5;
                #region tbldata
                float[] widths1 = new float[] { 12f, 15f, 25f, 25f, 25f, 15f, 15f };
                string[] headers = { "Sr. No", "ID Mark", "Dry weight", "Wet weight", "Water absorption", "Average", "Compliance" };
                PdfPCell cell1;
                for (int h = 0; h < headers.Count(); h++)
                {
                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                    if (h == 0 || h == 1 || h == 6 || h == 7)
                        cell1.Rowspan = 2;
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }

                string[] subheaders = { "", "", "(g)", "(g)", "(%)", "(%)", "", "" };
                cell1 = new PdfPCell();
                for (int h = 2; h < subheaders.Count(); h++)
                {
                    cell1 = new PdfPCell(new Phrase(subheaders[h], fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SetWidths(widths1);
                table1.WidthPercentage = 100;

                pdfDoc.Add(table1);
                table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 100;
                table1.SetWidths(widths1);
                int j = 0;
                for (int i = 0; i < count; i++)
                {
                    string srNo = Convert.ToString(i + 1);
                    cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(solidInward_WA[i].SOLIDINWD_WA_ID_Mark_var, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(solidInward_WA[i].SOLIDINWD_WA_Dry_wt), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(solidInward_WA[i].SOLIDINWD_WA_Wet_wt), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(solidInward_WA[i].SOLIDINWD_WA_Water_Abs), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    if (j == 0)
                    {
                        //int qty = Convert.ToInt32(TxtQty.Text);
                        if (Qty < 3)
                        {
                            cell1 = new PdfPCell(new Phrase("***", fontH1));
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(solidInward_WA[count - 1].SOLIDINWD_WA_Avg_WA), fontH1));
                        }
                        cell1.Rowspan = count;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        table1.AddCell(cell1);
                    }
                    if (j == 0)
                    {

                        cell1 = new PdfPCell(new Phrase("Maximum 10%", fontH1));
                        cell1.Rowspan = count;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        table1.AddCell(cell1);
                    }

                    j++;

                }
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SpacingAfter = 5;
                pdfDoc.Add(table1);
                #endregion

                //table1.SpacingBefore = 10;
                #region iscode/remarks
                table1 = new PdfPTable(2);
                table1.SpacingAfter = 5;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;

                int serial_no = 0;
                var iscd = dc.ISCode_View(0, "", "SOLID", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (Qty < 3)
                {
                    if (serial_no == 0)
                    {
                        //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                        cell2 = new PdfPCell(new Phrase("References :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    //pdfDoc.Add(new Paragraph(serial_no + 1 + ")" + " At least 3 specimens are required for the testing, however as per customer request testing is done on lesser no. of specimens", fontH1));
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("*** IS 2185(Part I) 2005 states that at least 3 specimens are required for the testing, however as per customer request testing is done on lesser no. of specimens.", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                serial_no = 0;
                table1.SpacingBefore = 5;
                var reference = dc.AllRemark_View("", ReferenceNo, 0, "SOLID").ToList();
                var referencecount = reference.Count();
                if (referencecount > 0)
                {
                    for (int r = 0; r < referencecount; r++)
                    {
                        if (r == 0)
                        {
                            //pdfDoc.Add(new Paragraph("Remarks : ", fontH2));
                            cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        var remark = dc.AllRemark_View("", "", Convert.ToInt32(reference[r].SOLIDDetail_Remark_ID), "SOLID").ToList();
                        var remarkcount = remark.Count();
                        for (int remk = 0; remk < remarkcount; remk++)
                        {
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(serial_no + ")" + Convert.ToString(remark[remk].SOLID_Remark_var), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remark[remk].SOLID_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 8;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);

                #endregion

                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 12;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var solidChkby = dc.ReportStatus_View("Masonary Block Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0).ToList();
                    var RecNocount = solidChkby.Count();
                    for (int r = 0; r < RecNocount; r++)
                    {
                        if (solidChkby[r].SOLIDINWD_ApprovedBy_tint != null && solidChkby[r].SOLIDINWD_ApprovedBy_tint.ToString() != "" && solidChkby[r].SOLIDINWD_ApprovedBy_tint > 0)
                        {
                            var User = dc.User_View(Convert.ToInt32(solidChkby[r].SOLIDINWD_ApprovedBy_tint), -1, "", "", "").ToList();
                            var ucount = User.Count();
                            for (int userId = 0; userId < ucount; userId++)
                            {

                                pdfDoc.Add(new Paragraph(Convert.ToString(User[userId].USER_Name_var), fontH1));
                                if (User[userId].USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + User[userId].USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(User[userId].USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Automail" || Action == "Email")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }
                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (solidChkby[r].SOLIDINWD_CheckedBy_tint != null && solidChkby[r].SOLIDINWD_CheckedBy_tint.ToString() != "" && solidChkby[r].SOLIDINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(Convert.ToInt32(solidChkby[r].SOLIDINWD_CheckedBy_tint), -1, "", "", "").ToList();
                            var lginCount = lgin.Count();
                            for (int loginusr = 0; loginusr < lginCount; loginusr++)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by :  " + Convert.ToString(lgin[loginusr].USER_Name_var), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);


                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
            }
            catch (Exception ex)
            {

            }

        }
        #endregion

        #region Mix Design
        public void MFSieveAnalysis_PDF(string ReferenceNo, string RecType, string Action)
        {
            clsData objcls = new clsData();
            #region fileCreate
            string pgHead = "", CustName = "", SiteName = "", Address = "";
            Paragraph paragraph = new Paragraph();
            float marginTop = 100;
            int nablStatus = -1, SiteRouteId = 0;
            //if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
            //    nablStatus = getNablLogoStatus("MF", ReferenceNo);
            nablStatus = 1;
            if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
            {
                marginTop = 21;
            }
            Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
            var fileName = "SieveAnalysis_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
            if (!Directory.Exists(@foldername))
                Directory.CreateDirectory(@foldername);
            string Subfoldername = foldername + "/SieveAnalysis";
            if (!Directory.Exists(@Subfoldername))
                Directory.CreateDirectory(@Subfoldername);
            string Subfoldername1 = Subfoldername;
            if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
            {
                fileName = "SieveAnalysis_" + ReferenceNo.Replace('/', '_') + ".pdf";
                Subfoldername1 = foldername;
            }
            PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
            //var fileName = "SieveAnalysis_" + ReferenceNo.Replace('/', '_') + ".pdf";
            //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
            pdfDoc.Open();
            bool flagFooter = false;
            var AggtTest = dc.ReportStatus_View("Mix Design", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0).ToList();
            if (AggtTest.Count() > 0)
            {
                if (AggtTest.FirstOrDefault().MFINWD_TestedAt_bit == true)
                {
                    writer.PageEvent = new clsPdfFooter();
                    flagFooter = true;
                }
            }

            if (!flagFooter)
                writer.PageEvent = new classPdfFooter1();

            Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
            Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
            Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.5f, Font.UNDEFINED);
            Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.5f, Font.BOLD);
            Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

            if (Action.Contains("Print") == true)
                LogoToPdf(pdfDoc, nablStatus);
            else if (Action.Contains("Display") == true || Action.Contains("Email") == true)
                LogoToPdfOld(pdfDoc, Action);
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_CENTER;
            paragraph.Font = fontTitle1;
            paragraph.Add("Test Report");
            paragraph.SpacingBefore = 2;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_CENTER;
            paragraph.Font = fontTitle;
            paragraph.SpacingAfter = 5;
            paragraph.Add("Fine & Coarse Aggregate");
            paragraph.SpacingAfter = 1;
            pdfDoc.Add(paragraph);

            PdfPTable MaindataTable = new PdfPTable(6);  //tbl
            MaindataTable.WidthPercentage = 100;
            //MaindataTable.SpacingBefore = 1;
            //MaindataTable.SpacingAfter = 2;
            //float[] widths = new float[] { 18f, 1f, 52f, 15f, 1f, 15f };
            float[] widths = new float[] { 18f, 1f, 50f, 18f, 1f, 15f };
            MaindataTable.SetWidths(widths);
            #endregion
            int RecordNo = 0, apprBy = 0;
            //string[] NewRef = ReferenceNo.Split('/');
            //ReferenceNo = NewRef[0].ToString() + "/1-1";
            //var AggtTest = dc.ReportStatus_View("Aggregate Testing", null, null, 0, 0, 0, NewRef[0].ToString() + "/1-1", 0, 2, 0);

            //var AggtTest = dc.ReportStatus_View("Mix Design", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
            #region heading
            foreach (var aggt in AggtTest)
            {
                SiteRouteId = Convert.ToInt32(aggt.SITE_Route_Id);

                if (aggt.INWD_RptSITE_Id != null && aggt.INWD_RptCL_Id != null)
                {
                    CustName = aggt.RptCL_Name_var;
                    SiteName = aggt.RptST_Name_var;
                    Address = aggt.RptCL_OfficeAddress_var;
                }
                else
                {
                    CustName = aggt.CL_Name_var;
                    SiteName = aggt.SITE_Name_var;
                    Address = aggt.CL_OfficeAddress_var;
                }
                PdfPCell Cust_Namecell;
                string authCode = reportAuthenticateCode();
                clsData obj = new clsData();
                string RouteName = obj.getRouteName(SiteRouteId);
                if (RouteName == "")
                    RouteName = "NA";
                //if (authCode != "00")
                //{
                //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                //    MaindataTable.AddCell(Cust_Namecell);
                //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                //    MaindataTable.AddCell(Cust_Namecell);
                //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                   Route : " + RouteName, fontH2));
                //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                //    MaindataTable.AddCell(Cust_Namecell);
                //    Cust_Namecell = new PdfPCell(new Phrase(""));
                //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                //    Cust_Namecell.Colspan = 3;
                //    MaindataTable.AddCell(Cust_Namecell);
                //}
                //else
                //{

                //    Cust_Namecell = new PdfPCell(new Phrase(""));
                //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                //    Cust_Namecell.Colspan = 6;
                //    MaindataTable.AddCell(Cust_Namecell);
                //}


                apprBy = Convert.ToInt32(aggt.MFINWD_ApprovedBy_tint.ToString());
                Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                if (authCode != "00")
                {
                    Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                }
                else
                {
                    Cust_Namecell = new PdfPCell(new Phrase(""));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 3;
                    MaindataTable.AddCell(Cust_Namecell);
                }

                Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                Cust_Namecell.Rowspan = 2;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                Cust_Namecell.Rowspan = 2;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                Cust_Namecell.Rowspan = 2;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("MF", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                string[] RefNo1 = Convert.ToString(aggt.MFINWD_ReferenceNo_var).Split('/');
                pgHead = RefNo1[0].ToString();
                Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0].ToString(), fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);


                Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(aggt.MFINWD_RecordNo_int.ToString(), fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);



                RecordNo = Convert.ToInt32(aggt.MFINWD_RecordNo_int);

                // contact details
                Phrase phrase = new Phrase();
                phrase.Add(new Chunk(aggt.CONT_Name_var + " - " + aggt.CONT_ContactNo_var, fontH1));
                phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                //Cust_Namecell = new PdfPCell(new Phrase(aggt.CONT_Name_var + " - " + aggt.CONT_ContactNo_var, fontH1));//person name
                Cust_Namecell = new PdfPCell(phrase);
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                Cust_Namecell.Colspan = 3;
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);


                if (aggt.INWD_RptSITE_Id != null && aggt.INWD_RptCL_Id != null)
                {
                    Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(aggt.CL_Name_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 4;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(aggt.SITE_Name_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 4;
                    MaindataTable.AddCell(Cust_Namecell);
                }

                //ULR No
                if (Convert.ToString(aggt.MFINWD_ULRNo_var) != "" && Convert.ToString(aggt.MFINWD_ULRNo_var) != null)
                {
                    //Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 3;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(aggt.MFINWD_ULRNo_var), fontH1));
                    Cust_Namecell.Colspan = 3;
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                }
                //
                break;
            }
            pdfDoc.Add(MaindataTable);
            #endregion
            //  pdfDoc.Add(new Paragraph(" ", fontH1));
            paragraph = new Paragraph();
            paragraph.Font = fontH2;
            paragraph.Add("OBSERVATIONS & CALCULATIONS :");
            paragraph.SpacingAfter = 3;
            pdfDoc.Add(paragraph);
            PdfPTable table1 = new PdfPTable(7);  //tbl
            table1.WidthPercentage = 100;
            PdfPCell cell1;
            int SrNo = 0;
            int materialCount = 0;
            decimal val = 0;
            //var Mix = dc.MaterialDetail_View(RecordNo, "", 0, "", null, null, "");
            string mySql = "select distinct(Material_Id ) from tbl_MaterialList,tbl_MaterialDetail ";
            mySql += " where tbl_MaterialList.Material_Id= tbl_MaterialDetail.MaterialDetail_Id and Material_Type='Aggregate'";
            mySql += " and tbl_MaterialDetail.MaterialDetail_RefNo='" + ReferenceNo + "'";
            DataTable dtMatrls = objcls.getGeneralData(mySql);
            //foreach (var m in Mix)
            Int32 mID = 0;
            for (int i1 = 0; i1 < dtMatrls.Rows.Count; i1++)
            {
                //var MfInwd = dc.MF_View(ReferenceNo, Convert.ToInt32(dtMatrls.Rows[i]["material_id"].ToString()), RecType);
                mID = Convert.ToInt32(dtMatrls.Rows[i1]["material_id"].ToString());
                var MfInwd = dc.MF_View1(pgHead + "/%", mID);
                SrNo = 0;
                foreach (var aggt in MfInwd)
                {
                    if (SrNo == 0 || Convert.ToInt32(aggt.AGGTINWD_Material_Id) != SrNo)
                    {
                        #region Other than SA
                        if (aggt.AGGTINWD_AggregateName_var == "Natural Sand" || aggt.AGGTINWD_AggregateName_var == "Crushed Sand" || aggt.AGGTINWD_AggregateName_var == "Stone Dust" || aggt.AGGTINWD_AggregateName_var == "Grit")
                        {
                            if (materialCount == 2)
                            {
                                pdfDoc.NewPage();
                                if (Action.Contains("Print") == true)
                                    LogoToPdf(pdfDoc, nablStatus);
                                else if (Action.Contains("Display") == true || Action.Contains("Email") == true)
                                    LogoToPdfOld(pdfDoc, Action);
                                materialCount = 0;

                                pdfDoc.Add(new Paragraph("Record No. : " + pgHead, fontH1));
                                pdfDoc.Add(new Paragraph(" ", fontH1));
                            }

                            if ((ReferenceNo == "1291/3-1" || ReferenceNo == "1291/3-2" || ReferenceNo == "1291/3-3") && aggt.AGGTINWD_AggregateName_var == "Natural Sand")
                            {
                                //cell1 = new PdfPCell(new Phrase("T Sand", fontH2));
                                pdfDoc.Add(new Paragraph("Fine Aggregate" + " ( Crushed Sand [T] )", fontH2));
                            }
                            else
                            {


                                mySql = "select MATALIAS_AliasName_var from tbl_MaterialAlias where MATALIAS_ReferenceNo_var = '" + ReferenceNo + "' and MATALIAS_MATERIAL_Id =" + Convert.ToInt32(aggt.AGGTINWD_Material_Id).ToString();
                                DataTable dtma = objcls.getGeneralData(mySql);
                                mySql = "";
                                if (dtma.Rows.Count > 0)
                                {

                                    if (dtma.Rows[0]["MATALIAS_AliasName_var"].ToString() != null)
                                    {
                                        if (dtma.Rows[0]["MATALIAS_AliasName_var"].ToString() != "")
                                        {
                                            mySql = dtma.Rows[0]["MATALIAS_AliasName_var"].ToString();
                                        }
                                    }

                                }
                                dtma.Dispose();
                                if (mySql == "")
                                {
                                    pdfDoc.Add(new Paragraph("Fine Aggregate" + " (" + Convert.ToString(aggt.AGGTINWD_AggregateName_var) + ")", fontH2));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("Fine Aggregate" + " (" + mySql + ")", fontH2));
                                }
                            }
                            // pdfDoc.Add(new Paragraph(" ", fontH1));

                            table1 = new PdfPTable(7);  //tbl
                            table1.SpacingBefore = 3;
                            table1.WidthPercentage = 100;
                            table1.SetTotalWidth(new float[] { 20f, 10f, 8f, 10f, 20f, 10f, 8f });


                            cell1 = new PdfPCell(new Phrase("Test", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Result", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Unit", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Rowspan = 4;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Test", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Result", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Unit", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Specific Gravity", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            string strResult = "";
                            //if (SpecGrav == true)
                            //if (aggt.AGGTINWD_WaterAborp_var != null && aggt.AGGTINWD_WaterAborp_var != "")
                            //    if (aggt.AGGTINWD_CrushingValue_var != null && aggt.AGGTINWD_ImpactValue_var != "")

                            if (aggt.AGGTINWD_SpecificGravity_var != null && aggt.AGGTINWD_SpecificGravity_var != "")
                            {
                                strResult = Convert.ToString(aggt.AGGTINWD_SpecificGravity_var);
                            }
                            else
                            {
                                strResult = "Not Requested";
                            }
                            cell1 = new PdfPCell(new Phrase(strResult, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(" ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Moisture Content", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            //        if (Moist == true)
                            if (aggt.AGGTINWD_MoistureContent_var != null && aggt.AGGTINWD_MoistureContent_var != "")
                            {
                                strResult = Convert.ToString(aggt.AGGTINWD_MoistureContent_var);
                            }
                            else
                            {
                                strResult = "Not Requested";
                            }
                            cell1 = new PdfPCell(new Phrase(strResult, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("%", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Water Absorption", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            if (aggt.AGGTINWD_WaterAborp_var != null && aggt.AGGTINWD_WaterAborp_var != "")
                            {
                                strResult = Convert.ToString(aggt.AGGTINWD_WaterAborp_var);
                            }
                            else
                            {
                                strResult = "Not Requested";
                            }
                            cell1 = new PdfPCell(new Phrase(strResult, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("%", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Condition of the Sample", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(aggt.AGGTINWD_SampleCondition_var, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Loose Bulk Density", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            if (aggt.AGGTINWD_LBD_var != null && aggt.AGGTINWD_LBD_var != "")
                            {
                                strResult = Convert.ToString(aggt.AGGTINWD_LBD_var);
                            }
                            else
                            {
                                strResult = "Not Requested";
                            }
                            cell1 = new PdfPCell(new Phrase(strResult, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("kg/lit", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Material finer than 75 u \n (by wet sieving)", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            if (aggt.AGGTINWD_SildContent_var != null && aggt.AGGTINWD_SildContent_var != "")
                            {
                                strResult = Convert.ToString(aggt.AGGTINWD_SildContent_var);
                            }
                            else
                            {
                                strResult = "Not Requested";
                            }
                            cell1 = new PdfPCell(new Phrase(strResult, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("%", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            pdfDoc.Add(table1);
                        }
                        if (aggt.AGGTINWD_AggregateName_var == "10 mm" || aggt.AGGTINWD_AggregateName_var == "20 mm" || aggt.AGGTINWD_AggregateName_var == "40 mm" || aggt.AGGTINWD_AggregateName_var == "Mix Aggt")
                        {
                            if (materialCount == 2)
                            {
                                pdfDoc.NewPage();
                                if (Action.Contains("Print") == true)
                                    LogoToPdf(pdfDoc, nablStatus);
                                else if (Action.Contains("Display") == true || Action.Contains("Email") == true)
                                    LogoToPdfOld(pdfDoc, Action);
                                materialCount = 0;
                            }
                            string tempStr = "";
                            if (Convert.ToString(aggt.AGGTINWD_AggregateName_var) != "Mix Aggt")
                            {
                                tempStr = "Coarse Aggregate" + " (" + Convert.ToString(aggt.AGGTINWD_AggregateName_var) + ")";
                            }
                            else
                            {
                                tempStr = "Fine /Coarse Aggregate" + " (" + Convert.ToString(aggt.AGGTINWD_AggregateName_var) + ")";
                            }
                            pdfDoc.Add(new Paragraph(tempStr, fontH2));
                            // pdfDoc.Add(new Paragraph(" ", fontH1));

                            table1 = new PdfPTable(7);
                            table1.SpacingBefore = 3;
                            table1.WidthPercentage = 100;
                            table1.SetTotalWidth(new float[] { 20f, 10f, 8f, 10f, 20f, 10f, 8f });
                            cell1 = new PdfPCell(new Phrase("Test", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Result", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Unit", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Rowspan = 4;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Test", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Result", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Unit", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Specific Gravity", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            string strResult = "";
                            if (aggt.AGGTINWD_SpecificGravity_var != null && aggt.AGGTINWD_SpecificGravity_var != "")
                            {
                                strResult = Convert.ToString(aggt.AGGTINWD_SpecificGravity_var);
                            }
                            else
                            {
                                strResult = "Not Requested";
                            }
                            cell1 = new PdfPCell(new Phrase(strResult, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(" ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Condition of the Sample", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(aggt.AGGTINWD_SampleCondition_var, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(" ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Water Absorption", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            if (aggt.AGGTINWD_WaterAborp_var != null && aggt.AGGTINWD_WaterAborp_var != "")
                            {
                                strResult = Convert.ToString(aggt.AGGTINWD_WaterAborp_var);
                            }
                            else
                            {
                                strResult = "Not Requested";
                            }
                            cell1 = new PdfPCell(new Phrase(strResult, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("%", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);


                            cell1 = new PdfPCell(new Phrase("Loose Bulk Density", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            if (aggt.AGGTINWD_LBD_var != null && aggt.AGGTINWD_LBD_var != "")
                            {
                                strResult = Convert.ToString(aggt.AGGTINWD_LBD_var);
                            }
                            else
                            {
                                strResult = "Not Requested";
                            }
                            cell1 = new PdfPCell(new Phrase(strResult, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("kg/lit", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            pdfDoc.Add(table1);
                        }

                        #endregion
                        #region SieveAna
                        int i = 0;
                        bool addCol = false;
                        //var aggtTest = dc.AggregateAllTestView(ReferenceNo, Convert.ToInt32(mID), "AGGTSA");
                        var aggtTest = dc.MFSieveAnalysis(pgHead + "/%", Convert.ToInt32(mID));
                        foreach (var aggtt in aggtTest)
                        {
                            if (i == 0)
                            {

                                pdfDoc.Add(new Paragraph("Sieve Analysis (by dry sieving) ", fontH2));
                                // pdfDoc.Add(new Paragraph(" ", fontH1));

                                if (aggtt.AGGTSA_IsPassingLmt_var != string.Empty && aggtt.AGGTSA_IsPassingLmt_var != null)
                                {
                                    addCol = true;
                                }

                                if (addCol == true)
                                {
                                    table1 = new PdfPTable(6);
                                    table1.SpacingBefore = 3;
                                    table1.SetTotalWidth(new float[] { 6f, 8f, 8f, 8f, 10f, 10f });
                                    table1.WidthPercentage = 100;
                                }
                                else
                                {
                                    table1 = new PdfPTable(5);
                                    table1.SpacingBefore = 3;
                                    table1.SetTotalWidth(new float[] { 6f, 8f, 8f, 8f, 10f });
                                    table1.WidthPercentage = 100;
                                }

                                cell1 = new PdfPCell(new Phrase("Sieve Size", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = 2;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase("Weight retained", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Colspan = 3;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase("Passing", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                if (addCol == true)
                                {
                                    cell1 = new PdfPCell(new Phrase("IS Passing % Limits", fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.Rowspan = 2;
                                    table1.AddCell(cell1);
                                }

                                cell1 = new PdfPCell(new Phrase("(g)", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase("(%)", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase("Cummu (%)", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase("(%)", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            cell1 = new PdfPCell(new Phrase(aggtt.AGGTSA_SeiveSize_var, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(aggtt.AGGTSA_Weight_num.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (aggtt.AGGTSA_SeiveSize_var != "Total")
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(aggtt.AGGTSA_WeightRet_dec).ToString("0.00"), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                val = Convert.ToDecimal(aggtt.AGGTSA_CumuWeightRet_dec.ToString());
                                if (val > 100)
                                    val = Convert.ToDecimal(100.00);
                                else if (val < 0)
                                    val = Convert.ToDecimal(0.00);

                                cell1 = new PdfPCell(new Phrase(val.ToString("0.00"), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                val = Convert.ToDecimal(aggtt.AGGTSA_CumuPassing_dec);
                                if (val > 100)
                                    val = Convert.ToDecimal(100.00);
                                else if (val < 0)
                                    val = Convert.ToDecimal(0.00);

                                cell1 = new PdfPCell(new Phrase(val.ToString("0.00"), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                if (aggtt.AGGTSA_IsPassingLmt_var != string.Empty && aggtt.AGGTSA_IsPassingLmt_var != null)
                                {
                                    cell1 = new PdfPCell(new Phrase(aggtt.AGGTSA_IsPassingLmt_var.ToString(), fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }
                                // break;
                            }
                            else if (aggtt.AGGTSA_SeiveSize_var == "Total")
                            {
                                cell1 = new PdfPCell(new Phrase("", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                if (aggt.AGGTINWD_AggregateName_var == "Natural Sand" || aggt.AGGTINWD_AggregateName_var == "Crushed Sand" || aggt.AGGTINWD_AggregateName_var == "Stone Dust" || aggt.AGGTINWD_AggregateName_var == "Grit")
                                {
                                    cell1 = new PdfPCell(new Phrase("Fineness Modulus", fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(Convert.ToDecimal(aggtt.AGGTINWD_FM_var)), fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }
                                else
                                {
                                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }
                                if (addCol == true)
                                {
                                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }
                                break;

                            }
                            i++;
                        }
                        if (i > 0)
                        {
                            table1.SpacingAfter = 3;
                            pdfDoc.Add(table1);
                            materialCount++;
                        }
                        #endregion SA
                        SrNo = Convert.ToInt32(aggt.AGGTINWD_Material_Id);
                    }
                }
            }
            //if ((Action == "Duplicate Print" || Action == "Print") &&
            //    (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false))
            //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
            if (Action != "Check")
            {
                PdfPTable MaindataTable1 = new PdfPTable(1);
                MaindataTable1.SpacingBefore = 2;
                MaindataTable1.WidthPercentage = 100;
                PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                cellbottom.Border = PdfPCell.NO_BORDER;
                MaindataTable1.AddCell(cellbottom);
                pdfDoc.Add(MaindataTable1);

                bool sign = false;
                #region Signature
                if (apprBy > 0)
                {
                    var data = dc.Sign_View(apprBy);
                    foreach (var g in data)
                    {
                        byte[] imageBytes = g.UserSign.ToArray();
                        MemoryStream mxs1 = new MemoryStream(imageBytes);
                        iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                        table1 = new PdfPTable(1);
                        table1.WidthPercentage = 100;
                        table1.SetWidths(new float[] { 1.7f });
                        PdfPCell cell = new PdfPCell(image);
                        cell.FixedHeight = 23;
                        cell.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell);
                        pdfDoc.Add(table1);
                        //bytes = memoryStream.ToArray();

                        sign = true;
                        break;
                    }
                }
                #endregion
                if (sign == false)
                {
                    pdfDoc.Add(new Paragraph(" ", fontH1));
                    pdfDoc.Add(new Paragraph(" ", fontH1));
                }

                //var RecNo = dc.ReportStatus_View("Mix Design", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
                //foreach (var r in RecNo)
                //{
                //    if (r.MFINWD_ApprovedBy_tint != null && r.MFINWD_ApprovedBy_tint.ToString() != "" && r.MFINWD_ApprovedBy_tint > 0)
                //    {
                //var U = dc.User_View(r.MFINWD_ApprovedBy_tint, -1, "", "", "");
                if (apprBy > 0)
                {
                    var U = dc.User_View(apprBy, -1, "", "", "");
                    foreach (var r1 in U)
                    {
                        pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                        if (r1.USER_Designation_var.Contains("(") == false)
                            pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                        else
                            pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                    }
                }
                //    }
                //    else
                //    {
                //        pdfDoc.Add(new Paragraph(" ", fontH1));
                //        pdfDoc.Add(new Paragraph(" ", fontH1));
                //        pdfDoc.Add(new Paragraph(" ", fontH1));
                //    }

                //}
            }
            else
            {
                //paragraph = new Paragraph();
                //paragraph.Font = fontH1;
                //paragraph.Add("  ");
                //pdfDoc.Add(paragraph);
                //paragraph = new Paragraph();

                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH1;
                paragraph.SpacingBefore = 2;
                paragraph.Add("This is electronically generated report hence does not require signature. ");
                pdfDoc.Add(paragraph);

                //paragraph = new Paragraph();
                //paragraph.Font = fontH1;
                //paragraph.Add("  ");
                //pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                paragraph.Font = fontH1;
                paragraph.SpacingBefore = 3;
                paragraph.Add("For all technical queries contact on " + tollFree + ".");
                pdfDoc.Add(paragraph);

                //paragraph = new Paragraph();
                //paragraph.Font = fontH1;
                //paragraph.Add("  ");
                //pdfDoc.Add(paragraph);


            }
            var blackListTextFont = FontFactory.GetFont("Verdana", 4);
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_CENTER;
            paragraph.Font = blackListTextFont;
            paragraph.Add("--End of Report--");
            pdfDoc.Add(paragraph);
            pdfDoc.Close();
            if (Action != "Email" && Action.Contains("Email") == false)
            {
                string pdfPath = @Subfoldername1 + "/" + fileName;
                DownloadReport(fileName, pdfPath);
            }
        }
        public void MoistureCorrection_PDF(string RefNo, int TrialId, string Action)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("MF", RefNo);
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "MoistureCorrection_" + RefNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/MoistureCorrection";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "MoistureCorrection_" + RefNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "MoistureCorrection_" + RefNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                pdfDoc.Open();
                bool flagFooter = false;
                var MoistCorr = dc.ReportStatus_View("Mix Design", null, null, 0, 0, 0, RefNo, 0, 0, 0).ToList();
                if (MoistCorr.Count() > 0)
                {
                    if (MoistCorr.FirstOrDefault().MFINWD_TestedAt_bit == true)
                    {
                        writer.PageEvent = new clsPdfFooter();
                        flagFooter = true;
                    }
                }
                if (!flagFooter)
                    writer.PageEvent = new classPdfFooter1();

                PdfPTable table1 = new PdfPTable(7);
                paragraph = new Paragraph();

                Font fontH0 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.UNDEFINED);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.UNDEFINED);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.UNDEFINED);
                Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.UNDERLINE);
                Font fontH5 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.UNDERLINE);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true || Action.Contains("Email") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data

                PdfPTable MaindataTable = new PdfPTable(4);
                MaindataTable.HorizontalAlignment = Element.ALIGN_LEFT;
                MaindataTable.WidthPercentage = 85;
                MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                //  paragraph.Add(" "); pdfDoc.Add(paragraph);
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = fontH5;
                paragraph.SpacingBefore = 2; paragraph.Add("Correction For Moisture In Aggregate");
                pdfDoc.Add(paragraph);

                bool NSandFlag = false, CSandFlag = false;
                int trialId = 0;
                double NSWaterAbsorption = 0, CSWaterAbsorption = 0;
                var res = dc.MaterialDetail_View(0, RefNo, 0, "", null, null, "");
                foreach (var t in res)
                {
                    if (Convert.ToString(t.Material_List) == "Natural Sand")
                    {
                        NSandFlag = true;
                    }
                    if (Convert.ToString(t.Material_List) == "Crushed Sand")
                    {
                        CSandFlag = true;
                    }
                }

                var trial = dc.Trial_View(RefNo, false);
                foreach (var t in trial)
                {
                    if (t.Trial_Status == 1)
                    {
                        trialId = t.Trial_Id;
                        if (NSandFlag == true)
                            NSWaterAbsorption = Convert.ToDouble(t.Trial_WA_NS);
                        if (CSandFlag == true)
                            CSWaterAbsorption = Convert.ToDouble(t.Trial_WA_CS);
                    }
                }
                int apprBy = 0;
                PdfPCell cell1;
                MaindataTable.SpacingBefore = 10;
                MaindataTable.SetTotalWidth(new float[] { 20, 35, 15f, 20f });
                //var MoistCorr = dc.ReportStatus_View("Mix Design", null, null, 0, 0, 0, RefNo, 0, 0, 0);
                foreach (var moist in MoistCorr)
                {
                    apprBy = Convert.ToInt32(moist.MFINWD_ApprovedBy_tint.ToString());
                    PdfPCell Cust_Namecell = new PdfPCell(new Phrase("Site Name             : ", fontH3));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(moist.SITE_Name_var, fontH3));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.HorizontalAlignment = Element.ALIGN_LEFT;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No. : ", fontH3));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.HorizontalAlignment = Element.ALIGN_RIGHT;
                    MaindataTable.AddCell(Cust_Namecell);
                    //string[] RefNo1 = Convert.ToString(moist.MFINWD_ReferenceNo_var).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(" MF-" + RefNo.ToString(), fontH3));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;

                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Grade of Concrete : ", fontH3));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(moist.MFINWD_Grade_var, fontH3));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.HorizontalAlignment = Element.ALIGN_LEFT;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH3));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH3));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH4));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 4;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("A) Finding Total Moisture in Sand", fontH4));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 4;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("Take 500 g of sand in a tray, heat for 5 min, check wt in gram say 'w', calculate moisture = ((500-w)/w) X 100", fontH3));
                    // replace 500 by 200 and 5 min by 10 mins and split in 2 lines @09/09/20 - 
                    Cust_Namecell = new PdfPCell(new Phrase("Take 200 g of sand in a tray, heat for 10 min, check wt in gram say 'w', ", fontH3));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 4;

                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Total Moisture = ((200-w)/w) X 100 ", fontH3));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 4;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH4));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 4;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (NSandFlag == true && CSandFlag == true)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("B) Correction Applied", fontH4));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("B) Free water to be added after moisture correction", fontH4));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    break;
                }
                pdfDoc.Add(MaindataTable);
                pdfDoc.Add(table1);

                double d2 = 0, d3 = 0, CemCont = 0, flyashcal = 0, fly_ash_cont = 0, Fly_Ash_By_Min_Adm = 0;
                double FlyAshWt = 0, WaterCementRatio = 0, WtOfFA2 = 0, WtOfFA1 = 0;
                var triald = dc.TrialDetail_View(RefNo, trialId).ToList();
                foreach (var t in triald)
                {
                    if (Convert.ToString(t.TrialDetail_MaterialName) == "Cement")
                    {
                        d2 = (0.15 * 0.15 * 0.15) * Convert.ToDouble(t.Trial_NoOfCubes);
                        d3 = (d2 * 0.2) + d2;
                        CemCont = Convert.ToDouble(t.TrialDetail_Weight) / 50;
                    }
                    if (Convert.ToString(t.TrialDetail_MaterialName) == "W/C Ratio")
                    {
                        WaterCementRatio = Convert.ToDouble(t.TrialDetail_Weight);
                    }
                    if (Convert.ToString(t.TrialDetail_MaterialName) == "Fly Ash" || Convert.ToString(t.TrialDetail_MaterialName) == "G G B S" || Convert.ToString(t.TrialDetail_MaterialName) == "Micro Silica")
                    {
                        flyashcal = Convert.ToDouble(t.TrialDetail_Weight);
                        fly_ash_cont = flyashcal * d3;
                        fly_ash_cont = Convert.ToDouble(FormatNumber(fly_ash_cont, 3));
                        if (fly_ash_cont > 0)
                        {
                            Fly_Ash_By_Min_Adm = Convert.ToDouble(Convert.ToInt32(flyashcal / CemCont));
                        }
                        FlyAshWt = Fly_Ash_By_Min_Adm;
                    }

                }
                var md = dc.MDLetter_View(RefNo, "MDL");
                foreach (var mdl in md)
                {
                    if (mdl.MD_SrNo == 0)
                    {
                        WtOfFA1 = Convert.ToDouble(mdl.MD_NaturalSand);
                        WtOfFA2 = Convert.ToDouble(mdl.MD_CrushedSand);
                    }
                }

                if (WtOfFA1 == 0 && WtOfFA2 == 0)
                {
                    var md1 = dc.MixDesignLetter_View(RefNo, "MDL");
                    foreach (var mdl1 in md1)
                    {
                        if (mdl1.MD_MaterialNameActual_var == "Natural Sand")
                        {
                            WtOfFA1 = Convert.ToDouble(mdl1.MD_WeightPer50Kg_num);
                        }
                        else if (mdl1.MD_MaterialNameActual_var == "Crushed Sand")
                        {
                            WtOfFA2 = Convert.ToDouble(mdl1.MD_WeightPer50Kg_num);
                        }
                    }
                }

                int i = 0;
                string strDetails = "", strDetails1 = "", strDetails2 = "";
                if (NSandFlag == true && CSandFlag == true)
                {
                    table1 = new PdfPTable(11);
                    table1.SpacingBefore = 10;
                    table1.WidthPercentage = 80;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetTotalWidth(new float[] { 5f, 10f, 10f, 10f, 10f, 10f, 10f, 10f, 10f, 10f, 10f });
                    if (i == 0)
                    {
                        cell1 = new PdfPCell(new Phrase("Total  Moisture(%)", fontH1));
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        cell1.Rowspan = 3;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Crushed Sand (% moisture)", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Colspan = 9;
                        table1.AddCell(cell1);

                        string[] header = { "1", "2", "3 ", "4", "5", "6", "7", "8", "9" };
                        for (int h = 0; h < header.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(header[h], fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase("Water to be added (lit) ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Colspan = 9;
                        table1.AddCell(cell1);
                        if (RefNo == "1291/3-1" || RefNo == "1291/3-2" || RefNo == "1291/3-3")
                        {
                            cell1 = new PdfPCell(new Phrase("C\n r\n u\n s\n h\n e\n d\n   S\n a\n n\n d\n (T)\n ", fontH1));
                        }
                        else
                            cell1 = new PdfPCell(new Phrase("N\n a\n t\n u\n r\n a\n l\n \n s\n a\n n\n d", fontH1));

                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Rowspan = 10;
                        table1.AddCell(cell1);
                    }
                    for (int row = 1; row <= 10; row++)
                    {
                        strDetails = strDetails + row + "~";
                        strDetails1 = strDetails1 + row + "~";
                        for (int j = 1; j <= 9; j++)
                        {
                            strDetails = strDetails + Convert.ToString(Convert.ToDecimal(((50 + FlyAshWt) * WaterCementRatio) - (WtOfFA1 * ((row - NSWaterAbsorption) / 100)) - (WtOfFA2 * ((j - CSWaterAbsorption) / 100))).ToString("0.0")) + "~";
                            strDetails1 = strDetails1 + Convert.ToString(Convert.ToDecimal(WtOfFA1 - (WtOfFA1 * (NSWaterAbsorption - row) / 100)).ToString("0"));
                            strDetails1 = strDetails1 + " | " + Convert.ToString(Convert.ToDecimal(WtOfFA2 - (WtOfFA2 * (CSWaterAbsorption - j) / 100)).ToString("0")) + "~";
                            //strDetails1 = strDetails1 + Convert.ToString(Convert.ToDecimal(WtOfFA1 - (WtOfFA1 * (NSWaterAbsorption - row) / 100)).ToString("0.0"));
                            //strDetails1 = strDetails1 + " | " + Convert.ToString(Convert.ToDecimal(WtOfFA2 - (WtOfFA2 * (CSWaterAbsorption - j) / 100)).ToString("0.0")) + "~";
                        }
                    }

                    string[] Moist = Convert.ToString(strDetails).Split('~');
                    foreach (var mst in Moist)
                    {
                        if (mst != "")
                        {
                            cell1 = new PdfPCell(new Phrase(mst, fontH3));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }

                    pdfDoc.Add(table1);
                    table1 = new PdfPTable(10);
                    table1.SpacingBefore = 10;
                    table1.WidthPercentage = 80;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetTotalWidth(new float[] { 10f, 10f, 10f, 10f, 10f, 10f, 10f, 10f, 10f, 10f });
                    if (i == 0)
                    {
                        string[] header = { "Weight", "1", "2", "3 ", "4", "5", "6", "7", "8", "9" };
                        for (int h = 0; h < header.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(header[h], fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            if (h == 0)
                            {
                                cell1.Rowspan = 3;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                            }
                            table1.AddCell(cell1);
                        }
                        if (RefNo == "1291/3-1" || RefNo == "1291/3-2" || RefNo == "1291/3-3")
                        {
                            //cell1 = new PdfPCell(new Phrase("Crushed Sand (T)", fontH2));
                            string[] subheader = { "CST | CS", "CST | CS", "CST | CS ", "CST | CS", "CST | CS", "CST | CS", "CST | CS", "CST | CS", "CST | CS" };
                            for (int h = 0; h < subheader.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(subheader[h], fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                        }
                        else
                        {
                            string[] subheader = { "NS | CS", "NS | CS", "NS | CS ", "NS | CS", "NS | CS", "NS | CS", "NS | CS", "NS | CS", "NS | CS" };
                            for (int h = 0; h < subheader.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(subheader[h], fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                        }

                        cell1 = new PdfPCell(new Phrase(" (Weight  in  Kg)  ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Colspan = 9;
                        table1.AddCell(cell1);

                    }

                    string[] nsics = Convert.ToString(strDetails1).Split('~');
                    foreach (var nst in nsics)
                    {
                        if (nst != "")
                        {
                            cell1 = new PdfPCell(new Phrase(nst, fontH3));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }

                    pdfDoc.Add(table1);
                    //strDetails2 = strDetails2 + "Dry~";
                    strDetails2 = strDetails2 + Convert.ToString(Convert.ToInt32(((50 + FlyAshWt) * WaterCementRatio) - ((-2 * WtOfFA1) / 100) - ((-2 * WtOfFA2) / 100))) + "~";
                    //strDetails2 = strDetails2 + "Moist~";
                    strDetails2 = strDetails2 + Convert.ToString(Convert.ToInt32(((50 + FlyAshWt) * WaterCementRatio) - ((2 * WtOfFA1) / 100) - ((2 * WtOfFA2) / 100))) + "~";
                    //strDetails2 = strDetails2 + "Wet~";
                    strDetails2 = strDetails2 + Convert.ToString(Convert.ToInt32(((50 + FlyAshWt) * WaterCementRatio) - ((5 * WtOfFA1) / 100) - ((5 * WtOfFA2) / 100))) + "~";
                    //strDetails2 = strDetails2 + "Saturated~";
                    strDetails2 = strDetails2 + Convert.ToString(Convert.ToInt32(((50 + FlyAshWt) * WaterCementRatio) - ((8 * WtOfFA1) / 100) - ((8 * WtOfFA2) / 100))) + "~";
                }
                else
                {
                    table1 = new PdfPTable(3);
                    table1.SpacingBefore = 10;
                    table1.WidthPercentage = 50;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetTotalWidth(new float[] { 12f, 12f, 12f });
                    if (i == 0)
                    {
                        string[] header = { "Total Moisture (%)", "Water to be added (lit)", "Wt. of Fine Aggregate" };
                        for (int h = 0; h < header.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(header[h], fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }

                    if (NSandFlag == true)
                    {
                        for (int row = 1; row <= 12; row++)
                        {
                            strDetails = strDetails + row + "~";
                            strDetails = strDetails + Convert.ToString(Convert.ToDecimal(((50 + FlyAshWt) * WaterCementRatio) - (WtOfFA1 * ((Convert.ToDouble(row) - NSWaterAbsorption) / 100))).ToString("0.0")) + "~";
                            strDetails = strDetails + Convert.ToString(Convert.ToDecimal(WtOfFA1 - (WtOfFA1 * (NSWaterAbsorption - Convert.ToDouble(row)) / 100)).ToString("0")) + "~";

                            //strDetails = strDetails + Convert.ToString(Convert.ToDecimal(((50 + FlyAshWt) * WaterCementRatio) - (WtOfFA1 * ((Convert.ToDouble(row) - NSWaterAbsorption) / 100))).ToString("0.0")) + "~";
                            //strDetails = strDetails + Convert.ToString(Convert.ToDecimal(WtOfFA1 - (WtOfFA1 * (NSWaterAbsorption - Convert.ToDouble(row)) / 100)).ToString("0.0")) + "~";
                        }
                        //strDetails2 = strDetails2 + "Dry~";
                        strDetails2 = strDetails2 + Convert.ToString(Convert.ToInt32(((50 + FlyAshWt) * WaterCementRatio) - ((-2 * WtOfFA1) / 100))) + "~";
                        //strDetails2 = strDetails2 + "Moist~";
                        strDetails2 = strDetails2 + Convert.ToString(Convert.ToInt32(((50 + FlyAshWt) * WaterCementRatio) - ((2 * WtOfFA1) / 100))) + "~";
                        //strDetails2 = strDetails2 + "Wet~";
                        strDetails2 = strDetails2 + Convert.ToString(Convert.ToInt32(((50 + FlyAshWt) * WaterCementRatio) - ((5 * WtOfFA1) / 100))) + "~";
                        //strDetails2 = strDetails2 + "Saturated~";
                        strDetails2 = strDetails2 + Convert.ToString(Convert.ToInt32(((50 + FlyAshWt) * WaterCementRatio) - ((8 * WtOfFA1) / 100))) + "~";
                    }
                    else if (CSandFlag == true)
                    {
                        for (int row = 1; row <= 12; row++)
                        {
                            strDetails = strDetails + row + "~";
                            strDetails = strDetails + Convert.ToString(Convert.ToDecimal(((50 + FlyAshWt) * WaterCementRatio) - (WtOfFA2 * ((Convert.ToDouble(row) - CSWaterAbsorption) / 100))).ToString("0.0")) + "~";
                            strDetails = strDetails + Convert.ToString(Convert.ToDecimal(WtOfFA2 - (WtOfFA2 * (CSWaterAbsorption - Convert.ToDouble(row)) / 100)).ToString("0")) + "~";

                            //strDetails = strDetails + Convert.ToString(Convert.ToDecimal(((50 + FlyAshWt) * WaterCementRatio) - (WtOfFA2 * ((Convert.ToDouble(row) - CSWaterAbsorption) / 100))).ToString("0.0")) + "~";
                            //strDetails = strDetails + Convert.ToString(Convert.ToDecimal(WtOfFA2 - (WtOfFA2 * (CSWaterAbsorption - Convert.ToDouble(row)) / 100)).ToString("0.0"))+ "~";
                        }
                        //strDetails2 = strDetails2 + "Dry~";
                        strDetails2 = strDetails2 + Convert.ToString(Convert.ToInt32(((50 + FlyAshWt) * WaterCementRatio) - ((-2 * WtOfFA2) / 100))) + "~";
                        //strDetails2 = strDetails2 + "Moist~";
                        strDetails2 = strDetails2 + Convert.ToString(Convert.ToInt32(((50 + FlyAshWt) * WaterCementRatio) - ((2 * WtOfFA2) / 100))) + "~";
                        //strDetails2 = strDetails2 + "Wet~";
                        strDetails2 = strDetails2 + Convert.ToString(Convert.ToInt32(((50 + FlyAshWt) * WaterCementRatio) - ((5 * WtOfFA2) / 100))) + "~";
                        //strDetails2 = strDetails2 + "Saturated~";
                        strDetails2 = strDetails2 + Convert.ToString(Convert.ToInt32(((50 + FlyAshWt) * WaterCementRatio) - ((8 * WtOfFA2) / 100))) + "~";
                    }
                    string[] Moist = strDetails.Split('~');
                    foreach (var mst in Moist)
                    {
                        if (mst != "")
                        {
                            cell1 = new PdfPCell(new Phrase(mst, fontH3));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }

                    pdfDoc.Add(table1);
                }
                table1 = new PdfPTable(1);
                table1.SpacingBefore = 10;
                table1.WidthPercentage = 80;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SetTotalWidth(new float[] { 78f });

                cell1 = new PdfPCell(new Phrase("C) Method Of Moisture Correction in absence of equipment  ", fontH4));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("It is recommended that total moisture be calculated for every pour by procedure mentioned above .", fontH3));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("However in absence of proper equipment following corrections may be applied. ", fontH3));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("The moisture correction calculated in section A & B can also be verified by this table. ", fontH3));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                pdfDoc.Add(table1);

                table1 = new PdfPTable(5);
                table1.SpacingBefore = 10;
                table1.WidthPercentage = 50;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //table1.SetTotalWidth(new float[] { 20f, 20f });
                //if (i == 0)
                //{
                //    string[] header = { "Condition of Sand ", "Water to be added (lit) " };
                //    for (int h = 0; h < header.Count(); h++)
                //    {
                //        cell1 = new PdfPCell(new Phrase(header[h], fontH1));
                //        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                //        table1.AddCell(cell1);
                //    }
                //}
                //string[] Equipmt = Convert.ToString(strDetails2).Split('~');
                //foreach (var Equip in Equipmt)
                //{
                //    if (Equip != "")
                //    {
                //        cell1 = new PdfPCell(new Phrase(Equip, fontH3));
                //        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                //        table1.AddCell(cell1);
                //    }
                //}
                table1.SetTotalWidth(new float[] { 25f, 9f, 9f, 9f, 12f });
                if (i == 0)
                {
                    string[] header = { "Condition of Sand ", "Dry", "Moist", "Wet", "Saturated" };
                    for (int h = 0; h < header.Count(); h++)
                    {
                        cell1 = new PdfPCell(new Phrase(header[h], fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    cell1 = new PdfPCell(new Phrase("Water to be added (lit)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                string[] Equipmt = Convert.ToString(strDetails2).Split('~');
                foreach (var Equip in Equipmt)
                {
                    if (Equip != "")
                    {
                        cell1 = new PdfPCell(new Phrase(Equip, fontH3));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                }


                pdfDoc.Add(table1);
                i++;

                PdfPTable MaindataTable11 = new PdfPTable(1);
                MaindataTable11.SpacingBefore = 5;
                MaindataTable11.WidthPercentage = 85;
                PdfPCell cellbottom1 = new PdfPCell(new Paragraph("When making the above moisture correction it is important to ensure that slump of concrete is maintained in the range of +/-25 mm from slump specified in mix design. Incase variation is more than 25 mm  please consult our engineer. ", fontH3));
                cellbottom1.Border = PdfPCell.NO_BORDER;
                MaindataTable11.AddCell(cellbottom1);
                MaindataTable11.HorizontalAlignment = Element.ALIGN_LEFT;
                pdfDoc.Add(MaindataTable11);

                //if ((Action == "Duplicate Print" || Action == "Print") &&
                //    (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false))
                //if ((Action == "Duplicate Print" || Action == "Print" || Action == "Email") && Action.Contains("Display") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 5;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    pdfDoc.Add(MaindataTable1);

                    bool sign = false;
                    #region Signature
                    if (apprBy > 0)
                    {
                        var data = dc.Sign_View(apprBy);
                        foreach (var g in data)
                        {
                            byte[] imageBytes = g.UserSign.ToArray();
                            MemoryStream mxs1 = new MemoryStream(imageBytes);
                            iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                            table1 = new PdfPTable(1);
                            table1.WidthPercentage = 100;
                            table1.SetWidths(new float[] { 1.7f });
                            PdfPCell cell = new PdfPCell(image);
                            cell.FixedHeight = 25;
                            cell.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell);
                            pdfDoc.Add(table1);

                            sign = true;
                            break;
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    if (apprBy > 0)
                    {
                        var U = dc.User_View(apprBy, -1, "", "", "");
                        foreach (var r1 in U)
                        {
                            pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                            if (r1.USER_Designation_var.Contains("(") == false)
                                pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                            else
                                pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                        }
                    }

                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                }

                table1 = new PdfPTable(1);
                table1.SpacingBefore = 3;
                table1.WidthPercentage = 80;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1 = new PdfPCell(new Phrase("Page 1 of 1 ", fontH3));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("-- End of Report --", fontH0));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                pdfDoc.Add(table1);
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {

                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
                #endregion
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void MDLCoverSheet_PDF(string ReferenceNo, int TrialId, string Action)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                Int32 MDLApprby = 0;
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print")
                    nablStatus = getNablLogoStatus("MF", ReferenceNo);
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "MDLCoverSheet" + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/MDLCoverSheet";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "MDLCoverSheet_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "MDLCoverSheet_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                //     writer.PageEvent = new classPdfFooter1();
                bool flagFooter = false;
                pdfDoc.Open();
                var MFDtls = dc.ReportStatus_View("Mix Design", null, null, 0, 0, 0, ReferenceNo, 0, 0, 0).ToList();
                if (MFDtls.Count() > 0)
                {
                    if (MFDtls.FirstOrDefault().MFINWD_TestedAt_bit == true)
                    {
                        writer.PageEvent = new clsPdfFooter();
                        flagFooter = true;
                    }
                }
                if (!flagFooter)
                    writer.PageEvent = new classPdfFooter1();

                PdfPTable table1 = new PdfPTable(7);
                table1.WidthPercentage = 90;

                paragraph = new Paragraph();

                Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 6, Font.UNDEFINED);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);



                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true || Action.Contains("Email") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data

                PdfPCell cell1;
                table1 = new PdfPTable(2);
                table1.HorizontalAlignment = Element.ALIGN_LEFT;

                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                //var MFDtls = dc.ReportStatus_View("Mix Design", null, null, 0, 0, 0, ReferenceNo, 0, 0, 0);
                foreach (var mdl in MFDtls)
                {
                    cell1 = new PdfPCell(new Phrase("  ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    if (mdl.MFINWD_ApprovedBy_tint != null)
                        MDLApprby = Convert.ToInt32(mdl.MFINWD_ApprovedBy_tint.ToString());
                    if (mdl.MFINWD_MDLIssueDt != null)
                    {
                        cell1 = new PdfPCell(new Phrase("Date       : " + Convert.ToDateTime(mdl.MFINWD_MDLIssueDt).ToString("dd-MMM-yyyy"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                    }
                    else
                    {
                        cell1 = new PdfPCell(new Phrase("---", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                    }
                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Record No. : " + mdl.MFINWD_SetOfRecord_var, fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);


                    cell1 = new PdfPCell(new Phrase("To, ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(mdl.CL_Name_var.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(mdl.CL_OfficeAddress_var.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);



                    cell1 = new PdfPCell(new Phrase("Kind Attention       : " + Convert.ToString(mdl.MFINWD_KindAttention), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                }
                pdfDoc.Add(table1);
                table1 = new PdfPTable(2);
                table1.SpacingBefore = 5;
                table1.WidthPercentage = 100;
                table1.HorizontalAlignment = Element.ALIGN_CENTER;
                //table1.SetTotalWidth(new float[] { 20f, 30f });

                var mdldtls = dc.ReportStatus_View("Mix Design", null, null, 0, 0, 0, ReferenceNo, 0, 0, 0);
                foreach (var mdl in mdldtls)
                {
                    cell1 = new PdfPCell(new Phrase("Subject : " + "Interim Mix Design Report for " + mdl.MFINWD_Grade_var + " grade of concrete.", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);
                    // string[] RefNo1 = Convert.ToString(mdl.MFINWD_ReferenceNo_var).Split('/');
                    cell1 = new PdfPCell(new Phrase("Site   : " + mdl.SITE_Name_var, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Reference No.: " + "MF-" + ReferenceNo, fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.AddCell(cell1);



                    cell1 = new PdfPCell(new Phrase("Material Recd. On : " + Convert.ToDateTime(mdl.INWD_ReceivedDate_dt).ToString("dd/MMM/yy"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.AddCell(cell1);

                    if (mdl.MFINWD_CoverSheetDetail != null)
                    {
                        string[] Days = Convert.ToString(mdl.MFINWD_CoverSheetDetail).Split('|');
                        foreach (var day in Days)
                        {
                            if (day != "")
                            {
                                cell1 = new PdfPCell(new Phrase("Basis of Design   : " + day + " days compressive strength", fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.AddCell(cell1);
                                break;
                            }
                        }
                    }
                }
                pdfDoc.Add(table1);
                table1 = new PdfPTable(1);
                table1.SpacingBefore = 10;
                table1.WidthPercentage = 100;
                table1.HorizontalAlignment = Element.ALIGN_CENTER;
                //table1.SetTotalWidth(new float[] { 58f });

                cell1 = new PdfPCell(new Phrase("Dear Sir,    \n", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("With reference to mix design carried out at the laboratory , please find enclosed the interim   mix design report. This interim report is being issued for site trial and is based on cube compressive strength data obtained in lab.  \n", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("You are requested to verify the mix on site for workability and strength. Site assistance for mix design trial will be provided on request.  \n", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Kindly inform whether the mix is as per your requirement in the feedback form enclosed.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Final mix design report will be issued after 28 day compressive strength test results are available. \n", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Any change in material specification will require correction in mix proportions.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("You are requested to make the correction with the help of Duorocrete mix design manual or get the mix design revalidated.  \n", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("We advise, that mix design should be revalidated / optimized for every  1000 m³ of concrete or 12 months whichever is earlier.  \n", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("  ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Thanking you ,  ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                pdfDoc.Add(table1);

                #endregion
                table1 = new PdfPTable(2);
                table1.SpacingBefore = 10;
                table1.WidthPercentage = 90;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;

                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Yours Sincerely \n \n  ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                //name of approved by
                if (MDLApprby > 0)
                {
                    bool sign = false;
                    #region Signature
                    if (MDLApprby > 0)
                    {
                        var data = dc.Sign_View(MDLApprby);
                        foreach (var g in data)
                        {
                            cell1 = new PdfPCell(new Phrase("     ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell1);

                            byte[] imageBytes = g.UserSign.ToArray();
                            MemoryStream mxs1 = new MemoryStream(imageBytes);
                            iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                            //table1 = new PdfPTable(1);
                            //table1.WidthPercentage = 100;
                            //table1.SetWidths(new float[] { 1.7f });
                            PdfPCell cell = new PdfPCell(image);
                            cell.FixedHeight = 25;
                            //cell.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell.HorizontalAlignment = Element.ALIGN_RIGHT;
                            cell.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell);
                            //pdfDoc.Add(table1);

                            sign = true;
                            break;
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }

                    var U = dc.User_View(MDLApprby, -1, "", "", "");
                    foreach (var r1 in U)
                    {
                        cell1 = new PdfPCell(new Phrase(" ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(r1.USER_Name_var.ToString() + "  ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("     ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        if (r1.USER_Designation_var.Contains("(") == false)
                        {
                            cell1 = new PdfPCell(new Phrase("(" + r1.USER_Designation_var + ")   ", fontH4));
                            cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            cell1.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(r1.USER_Designation_var + "   ", fontH4));
                            cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            cell1.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell1);
                        }
                    }

                    cell1 = new PdfPCell(new Phrase("Encl : 1) Interim mix design report.   \n     2) Aggregate test report.", fontH4));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                }

                pdfDoc.Add(table1);
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void MF_MDLetter_PDFReport_Old30072018(string ReferenceNo, int TrialId, string RecType, string ReportType, string Action)
        {
            Paragraph paragraph = new Paragraph();
            float marginTop = 100;
            int nablStatus = -1, SiteRouteId = 0;
            if (Action == "Print")
                nablStatus = getNablLogoStatus("MF," + ReportType, ReferenceNo);
            if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
            {
                marginTop = 21;
            }
            Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
            var fileName = "MF_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
            if (!Directory.Exists(@foldername))
                Directory.CreateDirectory(@foldername);
            string Subfoldername = foldername + "/MF";
            if (!Directory.Exists(@Subfoldername))
                Directory.CreateDirectory(@Subfoldername);
            string Subfoldername1 = Subfoldername;
            if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
            {
                fileName = "MF_" + ReferenceNo.Replace('/', '_') + ".pdf";
                Subfoldername1 = foldername;
                //Subfoldername1 = System.Web.HttpContext.Current.Server.MapPath("~") + "Reports/";
            }
            PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
            //var fileName = "MF_" + ReferenceNo.Replace('/', '_') + ".pdf";
            //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));

            pdfDoc.Open(); bool flagFooter = false;
            var MFDtls = dc.ReportStatus_View("Mix Design", null, null, 0, 0, 0, ReferenceNo, 0, 0, 0).ToList();
            if (MFDtls.Count() > 0)
            {
                if (MFDtls.FirstOrDefault().MFINWD_TestedAt_bit == true)
                {
                    writer.PageEvent = new clsPdfFooter();
                    flagFooter = true;
                }
            }

            if (!flagFooter)
                writer.PageEvent = new classPdfFooter1();

            PdfPTable table1 = new PdfPTable(7);  //tbl
            table1.WidthPercentage = 90;
            pdfDoc.Open();
            PdfPTable MaindataTable = new PdfPTable(6);  //tbl
            MaindataTable.WidthPercentage = 100;

            paragraph = new Paragraph();
            Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
            Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
            Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
            Font fontH1_5 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.BOLD);
            Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
            Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

            if (Action.Contains("Print") == true)
                LogoToPdf(pdfDoc, nablStatus);
            else if (Action.Contains("Display") == true || Action.Contains("Email") == true)
                LogoToPdfOld(pdfDoc, Action);

            DateTime? ApproveDt = null;
            //float[] widths = new float[] { 20f, 1f, 55f, 15f, 1f, 15f };
            float[] widths = new float[] { 21f, 1f, 50f, 15f, 1f, 15f };
            MaindataTable.SetWidths(widths);

            Boolean flgFlyAsh = false;
            Boolean flgGGBS = false;
            Boolean flgMicroSilica = false;
            Boolean flgAdmixture = false, flgMetakaolin = false;
            Int32 apprBy = 0, chkBy = 0;
            decimal wcRatio = 0;
            decimal totCemtitious = 0;
            string[] myStr = new string[8];
            string mySql = "";
            DateTime? dtTesting = null;
            #region header
            for (int x1 = 0; x1 < 8; x1++)
            {
                myStr[x1] = "";
            }
            string flyashUsed = "---";
            string admUsed = "---";
            string cemtUsed = "---";
            string natureofwork = "---";
            string mGrade = "";
            string supersedeNote = "";
            bool flgFlow = false;
            clsData obj = new clsData();
            DataTable dt = obj.getGeneralData(" select * from tbl_Trial where Trial_RefNo = '" + ReferenceNo + "' and Trial_MDletter_Status=1");
            if (dt.Rows.Count > 0)
            {
                if (dt.Rows[0]["Trial_OtherInfo"].ToString() != "")
                {
                    myStr = Convert.ToString(dt.Rows[0]["Trial_OtherInfo"]).Split('|');
                }
                cemtUsed = dt.Rows[0]["Trial_CementUsed"].ToString();
                flyashUsed = dt.Rows[0]["Trial_FlyashUsed"].ToString();
                admUsed = dt.Rows[0]["Trial_Admixture"].ToString();
                natureofwork = dt.Rows[0]["Trial_NatureofWork"].ToString();
                if (dt.Rows[0]["Trial_Flow"].ToString() == "")
                    flgFlow = false;
                else if (dt.Rows[0]["Trial_Flow"].ToString() == "True")
                    flgFlow = true;

            }
            dt.Dispose();


            string IssueDt = "", CustName = "", SiteName = "", Address = "";
            //var MFDtls = dc.ReportStatus_View("Mix Design", null, null, 0, 0, 0, ReferenceNo, 0, 0, 0);
            foreach (var mf in MFDtls)
            {
                if (mf.INWD_RptSITE_Id != null && mf.INWD_RptCL_Id != null)
                {
                    CustName = mf.RptCL_Name_var;
                    SiteName = mf.RptST_Name_var;
                    Address = mf.RptCL_OfficeAddress_var;
                }
                else
                {
                    CustName = mf.CL_Name_var;
                    SiteName = mf.SITE_Name_var;
                    Address = mf.CL_OfficeAddress_var;
                }
                SiteRouteId = Convert.ToInt32(mf.SITE_Route_Id);

                paragraph.Alignment = Element.ALIGN_CENTER;
                // paragraph.Add(" "); pdfDoc.Add(paragraph);
                if (Action == "Print" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                {
                    paragraph.Font = fontTitle1;
                    paragraph.Add("Report");
                }
                else
                {
                    paragraph.Font = fontH1;
                    paragraph.Add("Office Copy");
                }
                paragraph.SpacingBefore = 2;
                pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = fontTitle;
                paragraph.SpacingAfter = 5;
                if (ReportType == "MDL")
                {
                    if (myStr[5] == "")
                    {
                        paragraph.Add("Interim Concrete Mix Design for  " + Convert.ToString(mf.MFINWD_Grade_var) + "  Grade");
                    }
                    else
                    {
                        paragraph.Add("Interim Concrete Mix Design for  " + myStr[5].ToString() + "  Grade");
                    }
                }
                else if (ReportType == "Final")
                {
                    if (myStr[5] == "")//error out of bound
                    {
                        paragraph.Add("Final Concrete Mix Design for  " + Convert.ToString(mf.MFINWD_Grade_var) + "  Grade");
                    }
                    else
                    {
                        paragraph.Add("Final Concrete Mix Design for  " + myStr[5].ToString() + "  Grade");
                    }
                }
                if (((mf.MFINWD_Status_tint < 6 && ReportType != "Final") ||
                    (mf.MFINWD_FinalRptStatus < 6 && ReportType == "Final")) || Action != "Print")
                {
                    //paragraph.SpacingAfter = 20;
                }
                pdfDoc.Add(paragraph);
                string authCode = reportAuthenticateCode();
                clsData cd = new clsData();
                string RouteName = cd.getRouteName(SiteRouteId);
                if (RouteName == "")
                    RouteName = "NA";
                PdfPCell Cust_Namecell;
                MaindataTable.SpacingBefore = 1;
                MaindataTable.SpacingAfter = 5;
                //if (authCode != "00")
                //{
                //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                //    MaindataTable.AddCell(Cust_Namecell);
                //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                //    MaindataTable.AddCell(Cust_Namecell);
                //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                   Route : " + RouteName, fontH2));
                //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                //    MaindataTable.AddCell(Cust_Namecell);
                //}
                //else
                //{

                //    Cust_Namecell = new PdfPCell(new Phrase(""));
                //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                //    Cust_Namecell.Colspan = 3;
                //    MaindataTable.AddCell(Cust_Namecell);
                //}
                if ((mf.MFINWD_Status_tint >= 6 && Action == "Print" && ReportType != "Final")
                    || (mf.MFINWD_FinalRptStatus >= 6 && Action == "Print" && ReportType == "Final"))
                {
                    var blackListText = FontFactory.GetFont("italic", 8);
                    Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                    Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 6;
                    MaindataTable.AddCell(Cust_Namecell);

                }
                //else
                //{

                //    Cust_Namecell = new PdfPCell(new Phrase(""));
                //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                //    Cust_Namecell.Colspan = 3;
                //    MaindataTable.AddCell(Cust_Namecell);
                //}


                if (ReportType == "MDL")
                {
                    if (mf.MFINWD_MDLIssueDt != null)
                    {
                        IssueDt = Convert.ToDateTime(mf.MFINWD_MDLIssueDt).ToString("dd/MMM/yyyy");
                    }
                    else
                    {
                        IssueDt = "-";
                    }
                    apprBy = Convert.ToInt32(mf.MFINWD_ApprovedBy_tint.ToString());
                    chkBy = Convert.ToInt32(mf.MFINWD_CheckedBy_tint.ToString());
                }
                else if (ReportType == "Final")
                {
                    if (mf.MFINWD_FinalIssueDt != null)
                    {
                        IssueDt = Convert.ToDateTime(mf.MFINWD_FinalIssueDt).ToString("dd/MMM/yyyy");
                    }
                    else
                    {
                        IssueDt = "-";
                    }
                    apprBy = Convert.ToInt32(mf.MFINWD_FinalApprovedBy_int.ToString());
                    chkBy = Convert.ToInt32(mf.MFINWD_FinalCheckedBy_int.ToString());
                }


                Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                if (authCode != "00")
                {
                    Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                }
                else
                {
                    Cust_Namecell = new PdfPCell(new Phrase(""));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 3;
                    MaindataTable.AddCell(Cust_Namecell);
                }

                Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                Cust_Namecell.Rowspan = 2;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                Cust_Namecell.Rowspan = 2;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                Cust_Namecell.Rowspan = 2;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("MF", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(mf.MFINWD_ReferenceNo_var, fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);


                Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                string strRecNo = mf.MFINWD_SetOfRecord_var;
                if (mf.MFINWD_SupersedeStatus_tint > 0)
                {
                    supersedeNote = "This report supersedes " + strRecNo;
                    if (mf.MFINWD_SupersedeStatus_tint > 1)
                        supersedeNote += "-R" + (mf.MFINWD_SupersedeStatus_tint - 1).ToString();
                    supersedeNote += " report dated  " + Convert.ToDateTime(mf.MFINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                    strRecNo = strRecNo + "-R" + mf.MFINWD_SupersedeStatus_tint.ToString();
                }
                Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);


                Cust_Namecell = new PdfPCell(new Phrase("Mix Design Parameters", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                string tmpStr = "";
                if (myStr[5] == "")
                {
                    tmpStr = "Mix design for " + mf.MFINWD_Grade_var + " grade of concrete for  " + Convert.ToString(mf.MFINWD_NatureofWork_var);
                    mGrade = mf.MFINWD_Grade_var;
                }
                else
                {
                    tmpStr = "Mix design for " + myStr[5].ToString() + " grade of concrete for  " + Convert.ToString(mf.MFINWD_NatureofWork_var);
                    mGrade = myStr[5].ToString();
                }

                Cust_Namecell = new PdfPCell(new Phrase(tmpStr, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("Bill No.", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                if (mf.SITE_MonthlyBillingStatus_bit == true && mf.INWD_BILL_Id == "0")
                {
                    //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                    if (IssueDt != null && IssueDt != "-")
                    {
                        string monthlyBillNo = Convert.ToDateTime(IssueDt).ToString("MMM/yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                }
                else
                {
                    Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(mf.INWD_BILL_Id), fontH1));
                }
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);


                Cust_Namecell = new PdfPCell(new Phrase("Special Requirement / Considerations", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(mf.MFINWD_SpecialRequirement_var, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                if (ReportType == "Final")
                {
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                }
                else
                {
                    Cust_Namecell = new PdfPCell(new Phrase("Mat.Recd Date", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase(Convert.ToDateTime(mf.MFINWD_ReceivedDate_dt).ToString("dd/MMM/yyyy"), fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                }

                dtTesting = Convert.ToDateTime(mf.MFINWD_TestedDate_dt);

                // contact details
                Phrase phrase = new Phrase();
                phrase.Add(new Chunk(mf.CONT_Name_var + " - " + mf.CONT_ContactNo_var, fontH1));
                phrase.Add(new Chunk("   (Route : " + RouteName + ")", fontH2));
                Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(phrase);//person name
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(IssueDt, fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                if (mf.INWD_RptSITE_Id != null && mf.INWD_RptCL_Id != null)
                {
                    Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(mf.CL_Name_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 4;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(mf.SITE_Name_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 4;
                    MaindataTable.AddCell(Cust_Namecell);
                }

                //ULR No
                if (Convert.ToString(mf.MFINWD_ULRNo_var) != "" && Convert.ToString(mf.MFINWD_ULRNo_var) != null)
                {
                    //Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 3;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(mf.MFINWD_ULRNo_var), fontH1));
                    Cust_Namecell.Colspan = 3;
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                }
                //
                break;
            }
            pdfDoc.Add(MaindataTable);

            #endregion
            #region main table

            pdfDoc.Add(new Paragraph("Proposed Mix Proportions :(all weights in kg) ", fontH2));
            table1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfDoc.Add(new Paragraph(" ", fontH2));
            table1.HorizontalAlignment = Element.ALIGN_LEFT;

            PdfPCell cell1;
            table1.HorizontalAlignment = Element.ALIGN_LEFT;
            pdfDoc.Add(table1);
            var mddata = dc.MDLetter_View(ReferenceNo, ReportType).ToList();
            int count = mddata.Count();
            int i = 0;
            int j = 1;
            int materialId = 0;
            string materialName = "";
            //var data = dc.MDLetter_View(ReferenceNo, ReportType);
            foreach (var md in mddata)
            {

                if (i == 0)
                {

                    if (md.MD_Cement > 0)
                    {
                        j++;
                    }
                    if (md.MD_FlyAsh > 0)
                    {
                        flgFlyAsh = true;
                        j++;
                    }
                    if (md.MD_GGBS > 0)
                    {
                        flgGGBS = true;
                        j++;
                    }
                    if (md.MD_MicroSilica > 0)
                    {
                        flgMicroSilica = true;
                        j++;
                    }
                    if (md.MD_Metakaolin > 0)
                    {
                        flgMetakaolin = true;
                        j++;
                    }
                    if (md.MD_WaterBinder > 0 & (md.MD_FlyAsh > 0 || md.MD_GGBS > 0 || md.MD_MicroSilica > 0 || md.MD_Metakaolin > 0))
                    {
                        j++;
                    }
                    else
                    {
                        j++;
                    }
                    if (md.MD_WaterTobeAdded > 0)
                    {
                        j++;
                    }

                    if (md.MD_NaturalSand > 0)
                    {
                        j++;
                    }
                    if (md.MD_CrushedSand > 0)
                    {
                        j++;
                    }
                    if (md.MD_StoneDust > 0)
                    {
                        j++;
                    }
                    if (md.MD_Grit > 0)
                    {
                        j++;
                    }
                    if (md.MD_Tenmm > 0)
                    {
                        j++;
                    }
                    if (md.MD_Twentymm > 0)
                    {
                        j++;
                    }
                    if (md.MD_Fortymm > 0)
                    {
                        j++;
                    }

                    if (md.MD_Admixture > 0)
                    {
                        flgAdmixture = true;
                        j++;
                    }

                    table1 = new PdfPTable(j);
                    table1.WidthPercentage = 100;
                    if (j == 2)
                    {
                        table1.SetTotalWidth(new float[] { 10f, 50f });
                    }
                    else if (j == 3)
                    {
                        table1.SetTotalWidth(new float[] { 10f, 10f, 50f });
                    }
                    else if (j == 4)
                    {
                        table1.SetTotalWidth(new float[] { 10f, 10f, 20f, 10f });
                    }
                    else if (j == 5)
                    {
                        table1.SetTotalWidth(new float[] { 10f, 10f, 20f, 10f, 10f });
                    }
                    else if (j == 6)
                    {
                        table1.SetTotalWidth(new float[] { 10f, 10f, 20f, 10f, 12f, 12f, });
                    }
                    else if (j == 7)
                    {
                        table1.SetTotalWidth(new float[] { 10f, 10f, 15f, 10f, 12f, 12f, 10f });
                    }
                    else if (j == 8)
                    {
                        table1.SetTotalWidth(new float[] { 10f, 10f, 15f, 10f, 10f, 10f, 10f, 10f });
                    }
                    else if (j == 9)
                    {
                        table1.SetTotalWidth(new float[] { 10f, 10f, 12f, 10f, 10f, 10f, 10f, 10f, 10f });
                    }
                    else if (j == 10)
                    {
                        table1.SetTotalWidth(new float[] { 10f, 10f, 12f, 10f, 10f, 10f, 10f, 10f, 10f, 10f });
                    }
                    else if (j == 11)
                    {
                        table1.SetTotalWidth(new float[] { 10f, 12f, 12f, 10f, 8f, 12f, 14f, 15f, 12f, 12f, 10f });
                    }
                    else if (j == 12)
                    {
                        table1.SetTotalWidth(new float[] { 10f, 12f, 12f, 10f, 8f, 12f, 14f, 15f, 12f, 12f, 10f, 10f });
                    }
                    else if (j == 13)
                    {
                        table1.SetTotalWidth(new float[] { 10f, 12f, 12f, 10f, 8f, 12f, 14f, 15f, 12f, 12f, 10f, 10f, 10f });
                    }
                    else if (j == 14)
                    {
                        table1.SetTotalWidth(new float[] { 10f, 12f, 12f, 10f, 8f, 12f, 14f, 15f, 12f, 12f, 10f, 10f, 10f, 10f });
                    }
                    else if (j == 15)
                    {
                        table1.SetTotalWidth(new float[] { 10f, 12f, 12f, 10f, 8f, 12f, 14f, 15f, 12f, 12f, 10f, 10f, 10f, 10f, 10f });
                    }

                    cell1 = new PdfPCell(new Phrase("For", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    if (md.MD_Cement > 0)
                    {
                        materialName = "Cement";
                        var matId = dc.MaterialListView("", materialName, "");
                        materialId = matId.FirstOrDefault().Material_Id;
                        var MatName = dc.MaterialAlias_View(ReferenceNo, materialId).ToList();
                        if (MatName.Count() > 0)
                            materialName = MatName.FirstOrDefault().MATALIAS_AliasName_var;
                        cell1 = new PdfPCell(new Phrase(materialName, fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (md.MD_FlyAsh > 0)
                    {
                        materialName = "Fly Ash";
                        var matId = dc.MaterialListView("", materialName, "");
                        materialId = matId.FirstOrDefault().Material_Id;
                        var MatName = dc.MaterialAlias_View(ReferenceNo, materialId).ToList();
                        if (MatName.Count() > 0)
                            materialName = MatName.FirstOrDefault().MATALIAS_AliasName_var;
                        cell1 = new PdfPCell(new Phrase(materialName, fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (md.MD_MicroSilica > 0)
                    {
                        materialName = "Micro Silica";
                        var matId = dc.MaterialListView("", materialName, "");
                        materialId = matId.FirstOrDefault().Material_Id;
                        var MatName = dc.MaterialAlias_View(ReferenceNo, materialId).ToList();
                        if (MatName.Count() > 0)
                            materialName = MatName.FirstOrDefault().MATALIAS_AliasName_var;
                        cell1 = new PdfPCell(new Phrase(materialName, fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (md.MD_Metakaolin > 0)
                    {
                        materialName = "Metakaolin";
                        var matId = dc.MaterialListView("", materialName, "");
                        materialId = matId.FirstOrDefault().Material_Id;
                        var MatName = dc.MaterialAlias_View(ReferenceNo, materialId).ToList();
                        if (MatName.Count() > 0)
                            materialName = MatName.FirstOrDefault().MATALIAS_AliasName_var;
                        cell1 = new PdfPCell(new Phrase(materialName, fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (md.MD_GGBS > 0)
                    {
                        materialName = "G G B S";
                        var matId = dc.MaterialListView("", materialName, "");
                        materialId = matId.FirstOrDefault().Material_Id;
                        var MatName = dc.MaterialAlias_View(ReferenceNo, materialId).ToList();
                        if (MatName.Count() > 0)
                            materialName = MatName.FirstOrDefault().MATALIAS_AliasName_var;
                        cell1 = new PdfPCell(new Phrase(materialName, fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (md.MD_WaterBinder > 0 & (md.MD_FlyAsh > 0 || md.MD_GGBS > 0 || md.MD_MicroSilica > 0 || md.MD_Metakaolin > 0))
                    {
                        cell1 = new PdfPCell(new Phrase("W/B ratio", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else
                    {
                        cell1 = new PdfPCell(new Phrase("W/C ratio", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (md.MD_WaterTobeAdded > 0)
                    {
                        cell1 = new PdfPCell(new Phrase("Water", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }


                    if (md.MD_NaturalSand > 0)
                    {
                        if (md.MD_ReferenceNo == "1291/3-1" || md.MD_ReferenceNo == "1291/3-2" || md.MD_ReferenceNo == "1291/3-3")
                        {
                            cell1 = new PdfPCell(new Phrase("Crushed Sand (T)", fontH2));
                        }
                        else
                        {
                            materialName = "Natural Sand";
                            var matId = dc.MaterialListView("", materialName, "");
                            materialId = matId.FirstOrDefault().Material_Id;
                            var MatName = dc.MaterialAlias_View(ReferenceNo, materialId).ToList();
                            if (MatName.Count() > 0)
                                materialName = MatName.FirstOrDefault().MATALIAS_AliasName_var;
                            cell1 = new PdfPCell(new Phrase(materialName, fontH2));
                        }
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (md.MD_CrushedSand > 0)
                    {
                        materialName = "Crushed Sand";
                        var matId = dc.MaterialListView("", materialName, "");
                        materialId = matId.FirstOrDefault().Material_Id;
                        var MatName = dc.MaterialAlias_View(ReferenceNo, materialId).ToList();
                        if (MatName.Count() > 0)
                            materialName = MatName.FirstOrDefault().MATALIAS_AliasName_var;
                        cell1 = new PdfPCell(new Phrase(materialName, fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (md.MD_StoneDust > 0)
                    {
                        materialName = "Stone Dust";
                        var matId = dc.MaterialListView("", materialName, "");
                        materialId = matId.FirstOrDefault().Material_Id;
                        var MatName = dc.MaterialAlias_View(ReferenceNo, materialId).ToList();
                        if (MatName.Count() > 0)
                            materialName = MatName.FirstOrDefault().MATALIAS_AliasName_var;
                        cell1 = new PdfPCell(new Phrase(materialName, fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (md.MD_Grit > 0)
                    {
                        materialName = "Grit";
                        var matId = dc.MaterialListView("", materialName, "");
                        materialId = matId.FirstOrDefault().Material_Id;
                        var MatName = dc.MaterialAlias_View(ReferenceNo, materialId).ToList();
                        if (MatName.Count() > 0)
                            materialName = MatName.FirstOrDefault().MATALIAS_AliasName_var;
                        cell1 = new PdfPCell(new Phrase(materialName, fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (md.MD_Tenmm > 0)
                    {
                        materialName = "10 mm";
                        var matId = dc.MaterialListView("", materialName, "");
                        materialId = matId.FirstOrDefault().Material_Id;
                        var MatName = dc.MaterialAlias_View(ReferenceNo, materialId).ToList();
                        if (MatName.Count() > 0)
                            materialName = MatName.FirstOrDefault().MATALIAS_AliasName_var;
                        else
                            materialName = "10 mm aggt";
                        cell1 = new PdfPCell(new Phrase(materialName, fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (md.MD_Twentymm > 0)
                    {
                        materialName = "20 mm";
                        var matId = dc.MaterialListView("", materialName, "");
                        materialId = matId.FirstOrDefault().Material_Id;
                        var MatName = dc.MaterialAlias_View(ReferenceNo, materialId).ToList();
                        if (MatName.Count() > 0)
                            materialName = MatName.FirstOrDefault().MATALIAS_AliasName_var;
                        else
                            materialName = "20 mm aggt";
                        cell1 = new PdfPCell(new Phrase(materialName, fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (md.MD_Fortymm > 0)
                    {
                        materialName = "40 mm";
                        var matId = dc.MaterialListView("", materialName, "");
                        materialId = matId.FirstOrDefault().Material_Id;
                        var MatName = dc.MaterialAlias_View(ReferenceNo, materialId).ToList();
                        if (MatName.Count() > 0)
                            materialName = MatName.FirstOrDefault().MATALIAS_AliasName_var;
                        else
                            materialName = "40 mm aggt";
                        cell1 = new PdfPCell(new Phrase(materialName, fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (md.MD_Admixture > 0)
                    {
                        materialName = "Admixture";
                        var matId = dc.MaterialListView("", materialName, "");
                        materialId = matId.FirstOrDefault().Material_Id;
                        var MatName = dc.MaterialAlias_View(ReferenceNo, materialId).ToList();
                        if (MatName.Count() > 0)
                            materialName = MatName.FirstOrDefault().MATALIAS_AliasName_var;
                        else
                            materialName = "Admixture(ml)";
                        cell1 = new PdfPCell(new Phrase(materialName, fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }

                    cell1 = new PdfPCell(new Phrase("One bag", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                if (count == 3)
                {
                    if (i == 1)
                    {
                        cell1 = new PdfPCell(new Phrase("Volume (lit)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                }
                else
                {
                    if (i == 1)
                    {
                        cell1 = new PdfPCell(new Phrase("Per m³", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                }
                if (i == 2)
                {
                    cell1 = new PdfPCell(new Phrase("Wt kg/m³", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                if (md.MD_Cement > 0)
                {
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(md.MD_Cement), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    totCemtitious = Convert.ToDecimal(md.MD_Cement);
                }

                if (md.MD_FlyAsh > 0)
                {
                    cell1 = new PdfPCell(new Phrase(md.MD_FlyAsh.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    totCemtitious += Convert.ToDecimal(md.MD_FlyAsh);
                }

                if (md.MD_MicroSilica > 0)
                {
                    cell1 = new PdfPCell(new Phrase(md.MD_MicroSilica.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                if (md.MD_GGBS > 0)
                {
                    cell1 = new PdfPCell(new Phrase(md.MD_GGBS.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    totCemtitious += Convert.ToDecimal(md.MD_GGBS);
                }
                if (md.MD_Metakaolin > 0)
                {
                    cell1 = new PdfPCell(new Phrase(md.MD_Metakaolin.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                if (md.MD_WaterBinder > 0)
                {
                    cell1 = new PdfPCell(new Phrase(md.MD_WaterBinder.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    wcRatio = Convert.ToDecimal(md.MD_WaterBinder.ToString());
                }
                if (md.MD_WaterTobeAdded > 0)
                {
                    cell1 = new PdfPCell(new Phrase(md.MD_WaterTobeAdded.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }

                if (md.MD_NaturalSand > 0)
                {
                    cell1 = new PdfPCell(new Phrase(md.MD_NaturalSand.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                if (md.MD_CrushedSand > 0)
                {
                    cell1 = new PdfPCell(new Phrase(md.MD_CrushedSand.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                if (md.MD_StoneDust > 0)
                {
                    cell1 = new PdfPCell(new Phrase(md.MD_StoneDust.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                if (md.MD_Grit > 0)
                {
                    cell1 = new PdfPCell(new Phrase(md.MD_Grit.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                if (md.MD_Tenmm > 0)
                {
                    cell1 = new PdfPCell(new Phrase(md.MD_Tenmm.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                if (md.MD_Twentymm > 0)
                {
                    cell1 = new PdfPCell(new Phrase(md.MD_Twentymm.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                if (md.MD_Fortymm > 0)
                {
                    cell1 = new PdfPCell(new Phrase(md.MD_Fortymm.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                if (md.MD_Admixture > 0)
                {
                    cell1 = new PdfPCell(new Phrase(md.MD_Admixture.ToString(), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }

                i++;
            }
            table1.SpacingAfter = 3;
            pdfDoc.Add(table1);
            #endregion

            #region below main table

            string ggbsUsed = "---";
            string microsilicaUsed = "---";
            string metakaolinUsed = "---";

            var mat = dc.MaterialDetail_View(0, ReferenceNo, 0, "", null, null, "");
            foreach (var mt in mat)
            {
                if (mt.Material_List == "G G B S")
                {
                    ggbsUsed = mt.MaterialDetail_Information;
                }
                else if (mt.Material_List == "Micro Silica")
                {
                    microsilicaUsed = mt.MaterialDetail_Information;
                }
                else if (mt.Material_List == "Metakaolin")
                {
                    metakaolinUsed = mt.MaterialDetail_Information;
                }
            }
            table1 = new PdfPTable(2);
            table1.WidthPercentage = 100;

            table1.DefaultCell.Border = Rectangle.NO_BORDER;
            table1.SetTotalWidth(new float[] { 70f, 30f });

            mySql += "<tr>";
            if (flgFlyAsh == true || flgGGBS == true)
            {
                cell1 = new PdfPCell(new Phrase("Water Binder ratio = " + wcRatio.ToString(), fontH1));
            }
            else
            {
                cell1 = new PdfPCell(new Phrase("Water Cement ratio = " + wcRatio.ToString(), fontH1));
            }
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            cell1.Border = Rectangle.NO_BORDER;
            table1.AddCell(cell1);

            if (flgFlyAsh == true || flgGGBS == true)
            {
                if (myStr[0] == "")
                    //mySql += "<td  align=left valign=top height=15 colspan=3><font size=2>Total cementatious material = " + totCemtitious.ToString("0.00") + " kg/m<sup>3</sup> </font></td>";
                    cell1 = new PdfPCell(new Phrase("Total cementatious material = " + totCemtitious.ToString("0.00") + " kg/m³", fontH1));
                else
                    //mySql += "<td  align=left valign=top height=15 colspan=3><font size=2>Total cementatious material = " + myStr[0].ToString() + " kg/m<sup>3</sup> </font></td>";
                    cell1 = new PdfPCell(new Phrase("Total cementatious material = " + myStr[0].ToString() + " kg/m³", fontH1));

            }
            else
                //mySql += "<td  align=left valign=top height=15 colspan=3><font size=2> &nbsp; </font></td>";
                cell1 = new PdfPCell(new Phrase(" ", fontH1));

            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            cell1.Border = Rectangle.NO_BORDER;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase("Cement Used = " + cemtUsed, fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            cell1.Border = Rectangle.NO_BORDER;
            table1.AddCell(cell1);
            if (flgAdmixture == true)
                cell1 = new PdfPCell(new Phrase("Admixture Used  = " + admUsed, fontH1));
            else
                cell1 = new PdfPCell(new Phrase(" ", fontH1));

            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            cell1.Border = Rectangle.NO_BORDER;
            table1.AddCell(cell1);

            if (flgGGBS == true)
                cell1 = new PdfPCell(new Phrase("GGBS Used  = " + ggbsUsed, fontH1));
            else
                cell1 = new PdfPCell(new Phrase(" ", fontH1));

            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            cell1.Border = Rectangle.NO_BORDER;
            table1.AddCell(cell1);

            if (flgFlyAsh == true)
                cell1 = new PdfPCell(new Phrase("Fly Ash Used  = " + flyashUsed, fontH1));
            else
                cell1 = new PdfPCell(new Phrase(" ", fontH1));

            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            cell1.Border = Rectangle.NO_BORDER;
            table1.AddCell(cell1);


            if (flgMicroSilica == true)
                cell1 = new PdfPCell(new Phrase("Micro Silica Used  = " + microsilicaUsed, fontH1));
            else
                cell1 = new PdfPCell(new Phrase(" ", fontH1));

            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            cell1.Border = Rectangle.NO_BORDER;
            table1.AddCell(cell1);

            if (flgMetakaolin == true)
                cell1 = new PdfPCell(new Phrase("MEtakaolin Used  = " + metakaolinUsed, fontH1));
            else
                cell1 = new PdfPCell(new Phrase(" ", fontH1));

            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            cell1.Border = Rectangle.NO_BORDER;
            table1.AddCell(cell1);


            //cell1 = new PdfPCell(new Phrase(" ", fontH1));
            //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            //cell1.Border = Rectangle.NO_BORDER;
            //table1.AddCell(cell1);



            cell1 = new PdfPCell(new Phrase("Observations of Laboratory Trials", fontH2));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            cell1.Border = Rectangle.NO_BORDER;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase(" ", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            cell1.Border = Rectangle.NO_BORDER;
            table1.AddCell(cell1);

            Boolean flgRetention = false;
            string strRetention = "After ";
            int tSlump = 0, tSlump1 = 0;
            double plDensity = 0;
            var trdtl = dc.TrialDetail_View(ReferenceNo, TrialId);
            foreach (var trl in trdtl)
            {

                if (tSlump == 0)
                {
                    if (trl.Trial_RetentionStatus == true)
                    {
                        if (myStr[2] == "")
                        {
                            if (flgFlow == false)

                                strRetention += trl.Trial_RetTimeDuration.ToString() + " minutes Slump achieved = ";
                            else
                                strRetention += trl.Trial_RetTimeDuration.ToString() + " minutes Flow achieved = ";
                        }
                        else
                        {
                            if (flgFlow == false)
                                strRetention += myStr[2].ToString() + " minutes Slump achieved = ";
                            else
                                strRetention += myStr[2].ToString() + " minutes Flow achieved = ";
                        }
                        flgRetention = true;

                        string[] strSlump1 = Convert.ToString(trl.Trial_BatchSlumpValue).Split('|');
                        for (int il = 0; il < 3; il++)
                        {
                            tSlump1 += Convert.ToInt32(strSlump1[il]);
                        }
                    }

                    string[] strSlump = Convert.ToString(trl.Trial_BatchSlumpValue).Split('|');


                    for (int il = 0; il < 3; il++)
                    {
                        tSlump += Convert.ToInt32(strSlump[il]);
                    }
                }


                if (trl.TrialDetail_MaterialName == "Plastic Density")
                {
                    plDensity = Convert.ToDouble(trl.TrialDetail_Weight);
                }


            }
            if (tSlump > 0)
                tSlump = tSlump / 3;


            if (myStr[3] == "")
            {
                if (flgFlow == false)
                    cell1 = new PdfPCell(new Phrase("Slump achieved = " + tSlump.ToString() + " mm", fontH1));
                else
                    cell1 = new PdfPCell(new Phrase("Flow achieved = " + tSlump.ToString() + " mm", fontH1));
            }
            else
                if (flgFlow == false)
                cell1 = new PdfPCell(new Phrase("Slump achieved = " + myStr[3].ToString() + " mm", fontH1));
            else
                cell1 = new PdfPCell(new Phrase("Flow achieved = " + myStr[3].ToString() + " mm", fontH1));

            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            cell1.Border = Rectangle.NO_BORDER;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase(" ", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            cell1.Border = Rectangle.NO_BORDER;
            table1.AddCell(cell1);

            mySql += "<tr>";
            if (flgRetention == true)
            {
                if (tSlump1 > 0)
                    tSlump1 = tSlump1 / 3;
                if (myStr[4] == "")
                {
                    cell1 = new PdfPCell(new Phrase(strRetention + tSlump1.ToString() + "  mm", fontH1));
                }
                else
                {
                    cell1 = new PdfPCell(new Phrase(strRetention + myStr[4].ToString() + "  mm", fontH1));
                }

            }
            else
                cell1 = new PdfPCell(new Phrase(" ", fontH1));

            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            cell1.Border = Rectangle.NO_BORDER;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase(" ", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            cell1.Border = Rectangle.NO_BORDER;
            table1.AddCell(cell1);
            // targer mean strength
            if (ReportType == "Final")
            {
                cell1 = new PdfPCell(new Phrase("Target mean strength = Fck (N/mm²) + " + " ( K * Standard Deviation )", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = Rectangle.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = Rectangle.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("K = Himsworth Constant which is 1.65 for 5 % results to fall below the characteristic strength.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = Rectangle.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = Rectangle.NO_BORDER;
                table1.AddCell(cell1);

                if (myStr[6] == "")
                {
                    cell1 = new PdfPCell(new Phrase("Standard Deviation Assumed= 4 N/mm²" + " (As per IS 456-2000 Table 8, Clause 9.2.4.2)", fontH1));
                }
                else
                    cell1 = new PdfPCell(new Phrase("Standard Deviation Assumed= " + myStr[6] + " N/mm²" + " (As per IS 456-2000 Table 8, Clause 9.2.4.2)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = Rectangle.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = Rectangle.NO_BORDER;
                table1.AddCell(cell1);
                decimal abc = 0;

                if (myStr[6] == "")
                {
                    abc = Convert.ToDecimal(Convert.ToDecimal(mGrade.Replace("M", "")) + Convert.ToDecimal(1.65 * 4));
                    cell1 = new PdfPCell(new Phrase("Target mean strength = " + mGrade.Replace("M", "") + " + ( 1.65 x 4 )= " + abc.ToString("0.00") + " N/mm²", fontH1));
                }
                else
                {
                    abc = Convert.ToDecimal(Convert.ToDecimal(mGrade.Replace("M", "")) + (Convert.ToDecimal("1.65") * Convert.ToDecimal(myStr[6])));
                    cell1 = new PdfPCell(new Phrase("Target mean strength = " + mGrade.Replace("M", "") + " + ( 1.65 x " + myStr[6].ToString() + " ) =" + abc.ToString("0.00") + " N/mm²", fontH1));
                }
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = Rectangle.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = Rectangle.NO_BORDER;
                table1.AddCell(cell1);

            }
            //
            cell1 = new PdfPCell(new Phrase("Plastic Density = " + plDensity.ToString() + " kg/m³", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            cell1.Border = Rectangle.NO_BORDER;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase(" ", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            cell1.Border = Rectangle.NO_BORDER;
            table1.AddCell(cell1);

            if (ReportType == "Final")
            {
                var aa = dc.OtherCubeTestView(ReferenceNo, "MF", 0, TrialId, "Trial", false, false);
                string compStr = "";
                foreach (var cs in aa)
                {
                    if (cs.Days_tint == 28 && cs.Avg_var != null)
                    {
                        compStr = cs.Avg_var.ToString();
                        break;
                    }

                }
                cell1 = new PdfPCell(new Phrase("Average 28 days compressive strength = " + compStr + " N/mm²", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = Rectangle.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = Rectangle.NO_BORDER;
                table1.AddCell(cell1);

            }
            table1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.WidthPercentage = 100;
            table1.SpacingAfter = 5;
            pdfDoc.Add(table1);
            #endregion

            #region ref/remarks

            table1 = new PdfPTable(2);
            table1.SpacingAfter = 5;
            table1.DefaultCell.Border = PdfPCell.NO_BORDER;
            table1.SetWidths(new float[] { 2f, 70f });
            int SrNo = 0;

            var iscd = dc.ISCode_View(0, "", "MF", dtTesting).ToList();
            if (iscd.Count > 0)
            {
                foreach (var cd in iscd)
                {
                    if (SrNo == 0)
                    {
                        cell1 = new PdfPCell(new Phrase("References/Notes :", fontH2));
                        cell1.Colspan = 2;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                    }
                    SrNo++;
                    cell1 = new PdfPCell(new Phrase(SrNo.ToString() + ")", fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                }
                cell1 = new PdfPCell(new Phrase(" ", fontH2));
                cell1.FixedHeight = 5f;
                cell1.Border = PdfPCell.NO_BORDER;
                cell1.Colspan = 2;
                table1.AddCell(cell1);
            }

            SrNo = 0;
            var re = dc.TrialRemark_View("", ReferenceNo, 0, TrialId, ReportType);
            foreach (var r in re)
            {
                var remark = dc.TrialRemark_View("", "", Convert.ToInt32(r.TrialDetail_RemarkId), TrialId, ReportType);
                foreach (var remk in remark)
                {
                    if (SrNo == 0)
                    {
                        cell1 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell1.Colspan = 2;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                    }
                    SrNo++;
                    cell1 = new PdfPCell(new Phrase(SrNo.ToString() + ")", fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(remk.Trial_Remark_var, fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                }
            }


            if (supersedeNote != "")
            {
                cell1 = new PdfPCell(new Phrase(" ", fontH2));
                cell1.FixedHeight = 5f;
                cell1.Border = PdfPCell.NO_BORDER;
                cell1.Colspan = 2;
                table1.AddCell(cell1);
                if (SrNo == 0)
                {
                    cell1 = new PdfPCell(new Phrase("Remarks :", fontH2));
                    cell1.Colspan = 2;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                }
                SrNo++;
                cell1 = new PdfPCell(new Phrase(SrNo.ToString() + ")", fontH1));
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase(" ", fontH2));
                cell1.FixedHeight = 5f;
                cell1.Border = PdfPCell.NO_BORDER;
                cell1.Colspan = 2;
                table1.AddCell(cell1);
            }
            #region notes

            cell1 = new PdfPCell(new Phrase("Notes :", fontH2));
            cell1.Colspan = 2;
            cell1.Border = PdfPCell.NO_BORDER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("1) ", fontH3));
            cell1.Border = PdfPCell.NO_BORDER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase(notes[0], fontH3));
            cell1.Border = PdfPCell.NO_BORDER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("2) ", fontH3));
            cell1.Border = PdfPCell.NO_BORDER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase(notes[1], fontH3));
            cell1.Border = PdfPCell.NO_BORDER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("3) ", fontH3));
            cell1.Border = PdfPCell.NO_BORDER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase(notes[2], fontH3));
            cell1.Border = PdfPCell.NO_BORDER;
            table1.AddCell(cell1);
            table1.SpacingAfter = 8;
            table1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.WidthPercentage = 100;
            pdfDoc.Add(table1);

            #endregion
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH2;
            paragraph.Add("This report can be authenticated on our website www.durocrete.in");
            pdfDoc.Add(paragraph);

            #endregion
            #region approve by

            //if ((Action == "Duplicate Print" || Action == "Print") &&
            //    (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false))
            //if ((Action == "Duplicate Print" || Action == "Print" || Action == "Email") && Action.Contains("Display") == false)
            //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
            if (Action != "Check")
            {

                PdfPTable MaindataTable1 = new PdfPTable(1);
                MaindataTable1.SpacingBefore = 5;
                MaindataTable1.WidthPercentage = 100;
                PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                cellbottom.Border = PdfPCell.NO_BORDER;
                MaindataTable1.AddCell(cellbottom);
                //MaindataTable1.SpacingAfter = 25;
                pdfDoc.Add(MaindataTable1);

                bool sign = false;
                #region Signature
                //if (RemotelyAppv == true)
                //{
                if (apprBy > 0)
                {

                    var data = dc.Sign_View(apprBy);
                    foreach (var g in data)
                    {
                        byte[] imageBytes = g.UserSign.ToArray();
                        MemoryStream mxs1 = new MemoryStream(imageBytes);
                        iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                        table1 = new PdfPTable(1);
                        table1.WidthPercentage = 100;
                        table1.SetWidths(new float[] { 1.7f });
                        PdfPCell cell = new PdfPCell(image);
                        cell.FixedHeight = 25;
                        cell.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell);
                        pdfDoc.Add(table1);
                        //bytes = memoryStream.ToArray();

                        sign = true;
                        break;
                    }
                }
                //}
                #endregion
                if (sign == false)
                {
                    pdfDoc.Add(new Paragraph(" ", fontH1));
                    pdfDoc.Add(new Paragraph(" ", fontH1));
                }

                var U = dc.User_View(apprBy, -1, "", "", "");
                foreach (var r1 in U)
                {

                    pdfDoc.Add(new Paragraph(r1.USER_Name_var, fontH1));
                    if (r1.USER_Designation_var.Contains("(") == false)
                        pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                    else
                        pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));

                    if (Action == "Print" || Action == "Email" && ApproveDt != null)
                    {

                        //MaindataTable1.SpacingAfter = 25;
                        pdfDoc.Add(MaindataTable1);
                        pdfDoc.Add(new Paragraph(Convert.ToDateTime(ApproveDt).ToString("dd/MM/yy"), fontH3));
                    }
                    break;
                }

                var U1 = dc.User_View(chkBy, -1, "", "", "");
                foreach (var r1 in U1)
                {
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_RIGHT;
                    paragraph.Font = fontH1;
                    paragraph.Add("Checked By: " + r1.USER_Name_var.ToString());
                    pdfDoc.Add(paragraph);
                    break;
                }

            }
            else
            {
                //paragraph = new Paragraph();
                //paragraph.Font = fontH1;
                //paragraph.Add("  ");
                //pdfDoc.Add(paragraph);
                //paragraph = new Paragraph();

                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH1;
                paragraph.SpacingBefore = 5;
                paragraph.Add("This is electronically generated report hence does not require signature. ");
                pdfDoc.Add(paragraph);

                //paragraph = new Paragraph();
                //paragraph.Font = fontH1;
                //paragraph.Add("  ");
                //pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                paragraph.Font = fontH1;
                paragraph.SpacingBefore = 5;
                paragraph.Add("For all technical queries contact on " + tollFree + ".");
                pdfDoc.Add(paragraph);

                //paragraph = new Paragraph();
                //paragraph.Font = fontH1;
                //paragraph.Add("  ");
                //pdfDoc.Add(paragraph);

            }


            var blackListTextFont = FontFactory.GetFont("Verdana", 3);
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = blackListTextFont;
            paragraph.Add("Encl : Aggregate Test Teport.");
            pdfDoc.Add(paragraph);
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_CENTER;
            paragraph.Font = blackListTextFont;
            paragraph.Add("--End of Report--");
            pdfDoc.Add(paragraph);

            pdfDoc.Add(new Paragraph("Page 1 of 1", fontH1));
            //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
            //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
            pdfDoc.Close();
            if (Action != "Email" && Action.Contains("Email") == false)
            {
                string pdfPath = @Subfoldername1 + "/" + fileName;
                DownloadReport(fileName, pdfPath);
            }
            #endregion
        }
        public void MF_MDLetter_PDFReport(string ReferenceNo, int TrialId, string RecType, string ReportType, string Action)
        {
            var mddata = dc.MixDesignLetter_View(ReferenceNo, ReportType).ToList();
            if (mddata.Count == 0)
            {
                MF_MDLetter_PDFReport_Old30072018(ReferenceNo, TrialId, RecType, ReportType, Action);
            }
            else
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("MF," + ReportType, ReferenceNo);
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);

                var fileName = "MF_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";

                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/MF";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);

                string Subfoldername1 = Subfoldername + "/";


                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    //@foldername=="C:/temp/veena                   
                    //fileName = "MDL_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername + "/";
                    fileName = "MF_" + ReferenceNo.Replace('/', '_') + ".pdf";
                }



                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + fileName, FileMode.Create));
                //var fileName = "MF_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));

                pdfDoc.Open(); bool flagFooter = false, flagAdmInKg = false;
                var MFDtls = dc.ReportStatus_View("Mix Design", null, null, 0, 0, 0, ReferenceNo, 0, 0, 0).ToList();
                if (MFDtls.Count() > 0)
                {
                    if (MFDtls.FirstOrDefault().MFINWD_TestedAt_bit == true)
                    {
                        writer.PageEvent = new clsPdfFooter();
                        flagFooter = true;
                    }
                    if (MFDtls.FirstOrDefault().MFINWD_AdmInKgStatus_bit == true)
                    {
                        flagAdmInKg = true;
                    }
                }

                if (!flagFooter)
                    writer.PageEvent = new classPdfFooter1();

                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 13, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.UNDEFINED);
                //Font fontH1_5 = new Font(Font.FontFamily.TIMES_ROMAN, 8, Font.BOLD);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);
                Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true || Action.Contains("Email") == true)
                    LogoToPdfOld(pdfDoc, Action);

                DateTime? ApproveDt = null;
                float[] widths = new float[] { 24f, 1f, 60f, 17f, 1f, 20f };
                MaindataTable.SetWidths(widths);

                Boolean flgFlyAsh = false, flgGGBS = false, flgMicroSilica = false;

                Int32 apprBy = 0, chkBy = 0;
                decimal wcRatio = 0, plDensity = 0, water = 0, cement = 0, flyash = 0, ggbs = 0, microsilica = 0, admixture = 0, temprature = 0; ;
                DateTime? dtTesting = null;

                #region header
                string natureofwork = "---";
                string mGrade = "";
                string supersedeNote = "";
                string strSlumpDetails = "";
                string strBatching = "";
                clsData obj = new clsData();
                DataTable dt = obj.getGeneralData(" select * from tbl_Trial where Trial_RefNo = '" + ReferenceNo + "' and Trial_MDletter_Status=1");
                if (dt.Rows.Count > 0)
                {
                    strBatching = dt.Rows[0]["Trial_OtherInfo"].ToString();
                    natureofwork = dt.Rows[0]["Trial_NatureofWork"].ToString();
                    strSlumpDetails = dt.Rows[0]["Trial_SlumpDetails"].ToString();

                    int monthOfCasting = Convert.ToInt32(Convert.ToDateTime(dt.Rows[0]["Trial_Date"].ToString()).ToString("MM"));
                    if (monthOfCasting == 1)
                        monthOfCasting = 20;
                    else if (monthOfCasting == 2)
                        monthOfCasting = 22;
                    else if (monthOfCasting == 3)
                        monthOfCasting = 21;
                    else if (monthOfCasting == 4)
                        monthOfCasting = 28;
                    else if (monthOfCasting == 5)
                        monthOfCasting = 30;
                    else if (monthOfCasting == 6)
                        monthOfCasting = 27;
                    else if (monthOfCasting == 7)
                        monthOfCasting = 25;
                    else if (monthOfCasting == 8)
                        monthOfCasting = 25;
                    else if (monthOfCasting == 9)
                        monthOfCasting = 25;
                    else if (monthOfCasting == 10)
                        monthOfCasting = 25;
                    else if (monthOfCasting == 11)
                        monthOfCasting = 22;
                    else if (monthOfCasting == 12)
                        monthOfCasting = 20;
                    temprature = monthOfCasting;
                }
                dt.Dispose();


                string IssueDt = "", CustName = "", SiteName = "", Address = "", castingDetails = "", Witnessby = "";
                foreach (var mf in MFDtls)
                {
                    castingDetails = mf.MFINWD_CoverSheetDetail;
                    if (mf.INWD_RptSITE_Id != null && mf.INWD_RptCL_Id != null)
                    {
                        CustName = mf.RptCL_Name_var;
                        SiteName = mf.RptST_Name_var;
                        Address = mf.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = mf.CL_Name_var;
                        SiteName = mf.SITE_Name_var;
                        Address = mf.CL_OfficeAddress_var;
                    }
                    SiteRouteId = Convert.ToInt32(mf.SITE_Route_Id);

                    paragraph.Alignment = Element.ALIGN_CENTER;
                    if (Action == "Print" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    //paragraph.SpacingBefore =1;
                    pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 2;
                    // paragraph.SpacingAfter = 20;
                    if (ReportType == "MDL")
                    {
                        paragraph.Add("Concrete Mix Design for  " + Convert.ToString(mf.MFINWD_Grade_var) + "  Grade" + " (Interim Report)");
                    }
                    else if (ReportType == "Final")
                    {
                        paragraph.Add("Concrete Mix Design for  " + Convert.ToString(mf.MFINWD_Grade_var) + "  Grade");
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData cd = new clsData();
                    string RouteName = cd.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    // MaindataTable.SpacingBefore = 5;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                   Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    if ((mf.MFINWD_Status_tint >= 6 && Action == "Print" && ReportType != "Final")
                        || (mf.MFINWD_FinalRptStatus >= 6 && Action == "Print" && ReportType == "Final"))
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }
                    //else
                    //{

                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    if (mf.MFINWD_WitnessBy_var != null && mf.MFINWD_WitnessBy_var != "")
                    {
                        Witnessby = mf.MFINWD_WitnessBy_var;
                    }

                    if (ReportType == "MDL")
                    {
                        if (mf.MFINWD_MDLIssueDt != null)
                        {
                            IssueDt = Convert.ToDateTime(mf.MFINWD_MDLIssueDt).ToString("dd/MMM/yyyy");
                        }
                        else
                        {
                            IssueDt = "-";
                        }
                        apprBy = Convert.ToInt32(mf.MFINWD_ApprovedBy_tint.ToString());
                        chkBy = Convert.ToInt32(mf.MFINWD_CheckedBy_tint.ToString());
                    }
                    else if (ReportType == "Final")
                    {
                        if (mf.MFINWD_FinalIssueDt != null)
                        {
                            IssueDt = Convert.ToDateTime(mf.MFINWD_FinalIssueDt).ToString("dd/MMM/yyyy");
                        }
                        else
                        {
                            IssueDt = "-";
                        }
                        apprBy = Convert.ToInt32(mf.MFINWD_FinalApprovedBy_int.ToString());
                        chkBy = Convert.ToInt32(mf.MFINWD_FinalCheckedBy_int.ToString());
                    }


                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(RecType, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(mf.MFINWD_ReferenceNo_var, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string strRecNo = mf.MFINWD_SetOfRecord_var;
                    if (mf.MFINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (mf.MFINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (mf.MFINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(mf.MFINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + mf.MFINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (mf.MFINWD_Description_var != null)
                        Cust_Namecell = new PdfPCell(new Phrase(mf.MFINWD_Description_var, fontH1));
                    else
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No.", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (mf.SITE_MonthlyBillingStatus_bit == true && mf.INWD_BILL_Id == "0")
                    {
                        if (IssueDt != null && IssueDt != "-")
                        {
                            string monthlyBillNo = Convert.ToDateTime(IssueDt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(mf.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Mix Design Requirement", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string tmpStr = "";
                    tmpStr = "Mix design for " + mf.MFINWD_Grade_var + " grade of concrete for  " + Convert.ToString(mf.MFINWD_NatureofWork_var);
                    mGrade = mf.MFINWD_Grade_var;
                    Cust_Namecell = new PdfPCell(new Phrase(tmpStr, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (ReportType == "Final")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Mat.Recd Date", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToDateTime(mf.MFINWD_ReceivedDate_dt).ToString("dd/MMM/yyyy"), fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    dtTesting = Convert.ToDateTime(mf.MFINWD_TestedDate_dt);

                    Cust_Namecell = new PdfPCell(new Phrase("Special Considerations (If Any)", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(mf.MFINWD_SpecialRequirement_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(mf.CONT_Name_var + " - " + mf.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("   (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(IssueDt, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (mf.INWD_RptSITE_Id != null && mf.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(mf.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(mf.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No

                    if (ReportType == "MDL")
                    {
                        if (Convert.ToString(mf.MFINWD_ULRNo_var) != "" && Convert.ToString(mf.MFINWD_ULRNo_var) != null)
                        {
                            //Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                            Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            Cust_Namecell.Colspan = 3;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(mf.MFINWD_ULRNo_var), fontH1));
                            Cust_Namecell.Colspan = 3;
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                        }
                    }
                    else if (ReportType == "Final")
                    {
                        if (Convert.ToString(mf.MFINWD_FinalULRNo_var) != "" && Convert.ToString(mf.MFINWD_FinalULRNo_var) != null)
                        {
                            //Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                            Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            Cust_Namecell.Colspan = 3;
                            MaindataTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(mf.MFINWD_FinalULRNo_var), fontH1));
                            Cust_Namecell.Colspan = 3;
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            MaindataTable.AddCell(Cust_Namecell);
                        }
                    }

                    //

                    break;
                }
                MaindataTable.SpacingAfter = 2;
                pdfDoc.Add(MaindataTable);

                #endregion

                #region main table
                paragraph = new Paragraph();
                paragraph.Font = fontH4;
                paragraph.Add("Proposed Mix Proportions : ");
                paragraph.SpacingAfter = 12;
                //paragraph.SpacingBefore = 15;
                pdfDoc.Add(paragraph);

                PdfPCell cell1;
                if (strBatching == "Volume Batching")
                {
                    table1 = new PdfPTable(5);
                    table1.SetTotalWidth(new float[] { 20f, 26f, 15f, 24f, 15f });
                }
                else
                {
                    table1 = new PdfPTable(4);
                    table1.SetTotalWidth(new float[] { 20f, 38f, 18f, 24f });
                }
                table1.WidthPercentage = 100;
                cell1 = new PdfPCell(new Phrase("Material", fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Description", fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Per m³", fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Per 50 Kg Cement bag", fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                if (strBatching == "Volume Batching")
                {
                    cell1 = new PdfPCell(new Phrase("Volumetric", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                //var mddata = dc.MixDesignLetter_View(ReferenceNo, ReportType).ToList();
                foreach (var md in mddata)
                {
                    if (md.MD_MaterialName_var == "W/C Ratio")
                    {
                        wcRatio = Convert.ToDecimal(md.MD_WeightPerM3_num);
                    }
                    else if (md.MD_MaterialName_var == "Plastic Density")
                    {
                        plDensity = Convert.ToDecimal(md.MD_WeightPerM3_num);
                    }
                    else if (md.MD_MaterialName_var == "Cement")
                    {
                        cement = Convert.ToDecimal(md.MD_WeightPerM3_num);
                    }
                    else if (md.MD_MaterialName_var == "Fly Ash")
                    {
                        flyash = Convert.ToDecimal(md.MD_WeightPerM3_num);
                    }
                    else if (md.MD_MaterialName_var == "G G B S")
                    {
                        ggbs = Convert.ToDecimal(md.MD_WeightPerM3_num);
                    }
                    else if (md.MD_MaterialName_var == "Micro Silica")
                    {
                        microsilica = Convert.ToDecimal(md.MD_WeightPerM3_num);
                    }
                    else if (md.MD_MaterialName_var == "Water")
                    {
                        water = Convert.ToDecimal(md.MD_WeightPerM3_num);
                    }
                    else if (md.MD_MaterialName_var == "Admixture")
                    {
                        admixture = Convert.ToDecimal(md.MD_WeightPerM3_num);
                    }
                }
                string strUnit = "";
                string cementAlias = "Cement", flyAshAlias = "Fly Ash", ggbsAlias = "G G B S", microSilicaAlias = "Micro Silica", admixtureAlias = "Admixture", metakaolinAlias = "Metakaolin";
                foreach (var md in mddata)
                {
                    if (md.MD_MaterialName_var == "Cement" || md.MD_MaterialName_var.Contains("Fly Ash") == true || md.MD_MaterialName_var.Contains("G G B S") == true
                        || md.MD_MaterialName_var.Contains("Micro Silica") == true || md.MD_MaterialName_var.Contains("Metakaolin") == true
                        || md.MD_MaterialName_var == "Water" || md.MD_MaterialName_var == "Admixture")
                    {
                        if (md.MD_MaterialName_var == "Fly Ash")
                            flgFlyAsh = true;
                        else if (md.MD_MaterialName_var == "G G B S")
                            flgGGBS = true;
                        else if (md.MD_MaterialName_var == "Micro Silica")
                            flgMicroSilica = true;

                        if (md.MATALIAS_AliasName_var != null && md.MATALIAS_AliasName_var != "")
                        {
                            if (md.MD_MaterialName_var == "Cement")
                                cementAlias = md.MATALIAS_AliasName_var;
                            else if (md.MD_MaterialName_var == "Fly Ash")
                                flyAshAlias = md.MATALIAS_AliasName_var;
                            else if (md.MD_MaterialName_var == "G G B S")
                                ggbsAlias = md.MATALIAS_AliasName_var;
                            else if (md.MD_MaterialName_var == "Micro Silica")
                                microSilicaAlias = md.MATALIAS_AliasName_var;
                            else if (md.MD_MaterialName_var == "Metakaolin")
                                metakaolinAlias = md.MATALIAS_AliasName_var;
                            else if (md.MD_MaterialName_var == "Admixture")
                                admixtureAlias = md.MATALIAS_AliasName_var;
                        }
                        if (md.MD_MaterialName_var == "Admixture" && flagAdmInKg == true ||
                            (cnStr.ToLower().Contains("veenalive") == true && (md.MD_ReferenceNo_var.Contains("65431/") == true || md.MD_ReferenceNo_var.Contains("66468/") == true)))
                        {
                            strUnit = " kg";
                        }
                        else if (md.MD_MaterialName_var == "Water" || md.MD_MaterialName_var == "Admixture")
                        {
                            strUnit = " lit";
                        }
                        else
                        {
                            strUnit = " kg";
                        }
                        if (md.MATALIAS_AliasName_var != null && md.MATALIAS_AliasName_var != "")
                            cell1 = new PdfPCell(new Phrase(md.MATALIAS_AliasName_var, fontH1));
                        else
                            cell1 = new PdfPCell(new Phrase(md.MD_MaterialName_var, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(md.MD_Description_var, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                        if (md.MD_MaterialName_var == "Admixture")
                        {
                            if (flagAdmInKg == true)
                            {
                                var trail = dc.TrialDetail_View(md.MD_ReferenceNo_var, TrialId);
                                foreach (var t in trail)
                                {
                                    if (t.TrialDetail_MaterialName.Contains("Admixture") == true)
                                    {
                                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(md.MD_WeightPerM3_num * t.TrialDetail_SpecificGravity).ToString("0.000") + strUnit, fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        string strUnit1 = " gm";
                                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(md.MD_WeightPer50Kg_num * t.TrialDetail_SpecificGravity * 1000).ToString("0.000") + strUnit1, fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);

                                        if (strBatching == "Volume Batching")
                                        {
                                            strUnit1 = " gm";
                                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(md.MD_Volume_num * t.TrialDetail_SpecificGravity * 1000).ToString("0.000") + strUnit1, fontH1));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            table1.AddCell(cell1);
                                        }
                                    }
                                }
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(md.MD_WeightPerM3_num.ToString() + strUnit, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                string strUnit1 = " ml";
                                if (cnStr.ToLower().Contains("veenalive") == true && md.MD_MaterialName_var == "Admixture" && (md.MD_ReferenceNo_var.Contains("65431/") == true || md.MD_ReferenceNo_var.Contains("66468/") == true))
                                {
                                    strUnit1 = " gm";
                                }
                                cell1 = new PdfPCell(new Phrase((md.MD_WeightPer50Kg_num * 1000).ToString() + strUnit1, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                if (strBatching == "Volume Batching")
                                {
                                    strUnit1 = " ml";
                                    if (cnStr.Contains("veenalive") == true && md.MD_MaterialName_var == "Admixture" && (md.MD_ReferenceNo_var.Contains("65431/") == true || md.MD_ReferenceNo_var.Contains("66468/") == true))
                                    {
                                        strUnit1 = " gm";
                                    }
                                    cell1 = new PdfPCell(new Phrase((md.MD_Volume_num * 1000).ToString() + strUnit1, fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                }
                            }
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(md.MD_WeightPerM3_num).ToString("0") + strUnit, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(md.MD_WeightPer50Kg_num).ToString("0") + strUnit, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            if (strBatching == "Volume Batching")
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(md.MD_Volume_num).ToString("0") + strUnit, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                        }
                    }
                }

                foreach (var md in mddata)
                {
                    if (md.MD_MaterialName_var != "Cement" && md.MD_MaterialName_var != "Fly Ash" && md.MD_MaterialName_var != "G G B S"
                        && md.MD_MaterialName_var != "Micro Silica" && md.MD_MaterialName_var != "Metakaolin"
                        && md.MD_MaterialName_var != "Water" && md.MD_MaterialName_var != "Admixture"
                        && md.MD_MaterialName_var != "W/C Ratio" && md.MD_MaterialName_var != "Plastic Density")
                    {
                        if (md.MATALIAS_AliasName_var != null && md.MATALIAS_AliasName_var != "")
                            cell1 = new PdfPCell(new Phrase(md.MATALIAS_AliasName_var, fontH1));
                        else
                            cell1 = new PdfPCell(new Phrase(md.MD_MaterialName_var, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(md.MD_Description_var, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(md.MD_WeightPerM3_num).ToString("0") + " kg", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(md.MD_WeightPer50Kg_num).ToString("0") + " kg", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        if (strBatching == "Volume Batching")
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(md.MD_Volume_num).ToString("0") + " lit", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                }
                table1.SpacingAfter = 8;
                pdfDoc.Add(table1);
                #endregion

                #region below main table
                table1 = new PdfPTable(2);
                table1.WidthPercentage = 100;
                table1.SpacingAfter = 10;
                table1.DefaultCell.Border = Rectangle.NO_BORDER;
                table1.SetTotalWidth(new float[] { 90f, 10f });

                if (flgFlyAsh == true || flgGGBS == true || flgMicroSilica == true)
                {
                    cell1 = new PdfPCell(new Phrase("Water Binder Ratio = " + wcRatio.ToString("0.00"), fontH2));
                }
                else
                {
                    cell1 = new PdfPCell(new Phrase("Water Cement Ratio = " + wcRatio.ToString("0.00"), fontH2));
                }
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = Rectangle.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = Rectangle.NO_BORDER;
                table1.AddCell(cell1);

                //string[] strTemp = (water / wcRatio).ToString().Split('.');
                //decimal tempAfterDecimal = Convert.ToDecimal("0."+ strTemp[1]);
                //tempAfterDecimal = water % wcRatio;
                //cell1 = new PdfPCell(new Phrase("Binder Content : " + (cement + ((water / wcRatio) - tempAfterDecimal - cement)).ToString("0") + " kg/m³", fontH2));
                decimal binderContent = flyash + ggbs + microsilica;
                if (flgFlyAsh == true || flgGGBS == true || flgMicroSilica == true)
                {
                    //cell1 = new PdfPCell(new Phrase("Binder Content : " + (cement + ((water / wcRatio) - cement)).ToString("0") + " kg/m³", fontH2));
                    cell1 = new PdfPCell(new Phrase("Binder Content : " + (cement + binderContent).ToString("0") + " kg/m³", fontH2));
                }
                else
                {
                    cell1 = new PdfPCell(new Phrase("Binder Content : " + cement.ToString("0") + " kg/m³", fontH2));
                }
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = Rectangle.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = Rectangle.NO_BORDER;
                table1.AddCell(cell1);

                //cell1 = new PdfPCell(new Phrase("                         " + "Cement = " + cement.ToString("0") + " kg/m³", fontH1));
                cell1 = new PdfPCell(new Phrase("                         " + cementAlias + " = " + cement.ToString("0") + " kg/m³", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = Rectangle.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = Rectangle.NO_BORDER;
                table1.AddCell(cell1);

                //if ((water / wcRatio) - cement > 0)
                if (flgFlyAsh == true || flgGGBS == true || flgMicroSilica == true)
                {
                    //if (flgFlyAsh == true)
                    //    cell1 = new PdfPCell(new Phrase("                         " + "Fly Ash = " + ((water / wcRatio) - cement).ToString("0") + " kg/m³", fontH1));
                    //else if (flgGGBS == true)
                    //    cell1 = new PdfPCell(new Phrase("                         " + "G G B S = " + ((water / wcRatio) - cement).ToString("0") + " kg/m³", fontH1));
                    //else if (flgMicroSilica == true)
                    //    cell1 = new PdfPCell(new Phrase("                         " + "Micro Silica = " + ((water / wcRatio) - cement).ToString("0") + " kg/m³", fontH1));

                    if (flgFlyAsh == true)
                        cell1 = new PdfPCell(new Phrase("                         " + flyAshAlias + " = " + (binderContent).ToString("0") + " kg/m³", fontH1));
                    else if (flgGGBS == true)
                        cell1 = new PdfPCell(new Phrase("                         " + ggbsAlias + " = " + (binderContent).ToString("0") + " kg/m³", fontH1));
                    else if (flgMicroSilica == true)
                        cell1 = new PdfPCell(new Phrase("                         " + microSilicaAlias + " = " + (binderContent).ToString("0") + " kg/m³", fontH1));

                    string strBinder = "";
                    //if (flgFlyAsh == true)
                    //{
                    //    strBinder = "Fly Ash";
                    //}
                    //if (flgGGBS == true)
                    //{
                    //    if (strBinder == "")
                    //        strBinder = "G G B S";
                    //    else
                    //        strBinder += " + G G B S";
                    //}
                    //if (flgMicroSilica == true)
                    //{
                    //    if (strBinder == "")
                    //        strBinder = "Micro Silica";
                    //    else
                    //        strBinder += " + Micro Silica";
                    //}
                    if (flgFlyAsh == true && flgGGBS == true && flgMicroSilica == true)
                    {
                        //strBinder = "Fly Ash" + ", " + "G G B S" + " & " + "Micro Silica";
                        strBinder = flyAshAlias + ", " + ggbsAlias + " & " + microSilicaAlias;
                    }
                    else if (flgFlyAsh == true && flgGGBS == true)
                    {
                        //strBinder = "Fly Ash" + " & " + "G G B S";
                        strBinder = flyAshAlias + " & " + ggbsAlias;
                    }
                    else if (flgFlyAsh == true && flgMicroSilica == true)
                    {
                        //strBinder = "Fly Ash" + " & " + "Micro Silica";
                        strBinder = flyAshAlias + " & " + microSilicaAlias;
                    }
                    else if (flgGGBS == true && flgMicroSilica == true)
                    {
                        //strBinder = "G G B S" + " & " + "Micro Silica";
                        strBinder = ggbsAlias + " & " + microSilicaAlias;
                    }
                    else if (flgFlyAsh == true)
                    {
                        strBinder = flyAshAlias;
                    }
                    else if (flgGGBS == true)
                    {
                        strBinder = ggbsAlias;
                    }
                    else if (flgMicroSilica == true)
                    {
                        strBinder = microSilicaAlias;
                    }
                    strBinder = "                         " + strBinder + " = ";
                    cell1 = new PdfPCell(new Phrase(strBinder + (binderContent).ToString("0") + " kg/m³", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);


                    decimal cementitiousMaterial = 0;
                    //cementitiousMaterial = cement + Math.Round((water / wcRatio) - cement);
                    //cementitiousMaterial = (Math.Round((water / wcRatio) - cement) / cementitiousMaterial) * 100;
                    cementitiousMaterial = cement + Math.Round(binderContent);
                    cementitiousMaterial = (Math.Round(binderContent) / cementitiousMaterial) * 100;

                    cell1 = new PdfPCell(new Phrase("                         " + "% Replacement by Secondary Cementitious Material = " + (cementitiousMaterial).ToString("0.00") + " %", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);
                }

                if ((Math.Round(flyash - ((water / wcRatio) - cement)) > 1 && flgFlyAsh == true)
                    || (Math.Round(ggbs - ((water / wcRatio) - cement)) > 1 && flgGGBS == true)
                    || (Math.Round(microsilica - ((water / wcRatio) - cement)) > 1 && flgMicroSilica == true))
                {
                    cell1 = new PdfPCell(new Phrase("Filler Content : ", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);

                    if (flgFlyAsh == true)
                        cell1 = new PdfPCell(new Phrase("                         " + flyAshAlias + " = " + (flyash - ((water / wcRatio) - cement)).ToString("0") + " kg/m³", fontH1));
                    else if (flgGGBS == true)
                        cell1 = new PdfPCell(new Phrase("                         " + ggbsAlias + " = " + (ggbs - ((water / wcRatio) - cement)).ToString("0") + " kg/m³", fontH1));
                    else if (flgMicroSilica == true)
                        cell1 = new PdfPCell(new Phrase("                         " + microSilicaAlias + " = " + (microsilica - ((water / wcRatio) - cement)).ToString("0") + " kg/m³", fontH1));

                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);
                }
                pdfDoc.Add(table1);

                paragraph = new Paragraph();
                paragraph.Font = fontH4;
                paragraph.Add("Observations of Laboratory Trials ");
                paragraph.SpacingBefore = 10;
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);

                table1 = new PdfPTable(2);
                table1.WidthPercentage = 100;
                table1.DefaultCell.Border = Rectangle.NO_BORDER;
                table1.SetTotalWidth(new float[] { 90f, 10f });

                cell1 = new PdfPCell(new Phrase("Plastic Density = " + plDensity.ToString("0") + " kg/m³", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = Rectangle.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = Rectangle.NO_BORDER;
                table1.AddCell(cell1);

                pdfDoc.Add(table1);

                //
                if (strSlumpDetails != "")
                {
                    int slumpCount = 0;
                    string[] slumpDetails = strSlumpDetails.Split('|');
                    for (int i = 0; i < slumpDetails.Count(); i++)
                    {
                        if (slumpDetails[i] != "")
                            slumpCount++;
                    }
                    table1 = new PdfPTable(slumpCount);
                    table1.WidthPercentage = 100;
                    table1.SpacingAfter = 12;
                    if (slumpCount == 2)
                        table1.SetTotalWidth(new float[] { 20f, 10f });
                    else if (slumpCount == 3)
                        table1.SetTotalWidth(new float[] { 20f, 10f, 10f });
                    else if (slumpCount == 4)
                        table1.SetTotalWidth(new float[] { 20f, 10f, 10f, 10f });
                    else if (slumpCount == 5)
                        table1.SetTotalWidth(new float[] { 20f, 10f, 10f, 10f, 10f });
                    else if (slumpCount == 6)
                        table1.SetTotalWidth(new float[] { 20f, 10f, 10f, 10f, 10f, 10f });
                    else if (slumpCount == 7)
                        table1.SetTotalWidth(new float[] { 20f, 10f, 10f, 10f, 10f, 10f, 10f });
                    else if (slumpCount == 8)
                        table1.SetTotalWidth(new float[] { 20f, 10f, 10f, 10f, 10f, 10f, 10f, 10f });

                    if (slumpDetails.Count() > 0)
                    {
                        //cell1 = new PdfPCell(new Phrase(slumpDetails[0].Replace(" (mm)", ""), fontH2));
                        string strSlumpFlow = slumpDetails[0].Replace(" (mm)", "");
                        var mfinwd = dc.AllInward_View("MF", 0, ReferenceNo);
                        foreach (var mf in mfinwd)
                        {
                            if (Convert.ToBoolean(mf.MFINWD_FlowStatus_bit) == true)
                                strSlumpFlow = "Flow";
                        }
                        cell1 = new PdfPCell(new Phrase(strSlumpFlow, fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        if (slumpCount == 2 && slumpDetails[1] != "")
                        {
                            cell1.Rowspan = 2;
                            cell1.VerticalAlignment = Element.ALIGN_CENTER;
                        }
                        table1.AddCell(cell1);

                        int result = 0;
                        if (slumpDetails[1] != "")
                        {
                            if (int.TryParse(slumpDetails[1], out result))
                                cell1 = new PdfPCell(new Phrase(slumpDetails[1] + " mm", fontH1));
                            else
                                cell1 = new PdfPCell(new Phrase(slumpDetails[1], fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (slumpDetails[2] != "")
                        {
                            if (int.TryParse(slumpDetails[2], out result))
                                cell1 = new PdfPCell(new Phrase(slumpDetails[2] + " mm", fontH1));
                            else
                                cell1 = new PdfPCell(new Phrase(slumpDetails[2], fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (slumpDetails[3] != "")
                        {
                            if (int.TryParse(slumpDetails[3], out result))
                                cell1 = new PdfPCell(new Phrase(slumpDetails[3] + " mm", fontH1));
                            else
                                cell1 = new PdfPCell(new Phrase(slumpDetails[3], fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (slumpDetails[4] != "")
                        {
                            if (int.TryParse(slumpDetails[4], out result))
                                cell1 = new PdfPCell(new Phrase(slumpDetails[4] + " mm", fontH1));
                            else
                                cell1 = new PdfPCell(new Phrase(slumpDetails[4], fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (slumpDetails[5] != "")
                        {
                            if (int.TryParse(slumpDetails[5], out result))
                                cell1 = new PdfPCell(new Phrase(slumpDetails[5] + " mm", fontH1));
                            else
                                cell1 = new PdfPCell(new Phrase(slumpDetails[5], fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (slumpDetails[6] != "")
                        {
                            if (int.TryParse(slumpDetails[6], out result))
                                cell1 = new PdfPCell(new Phrase(slumpDetails[6] + " mm", fontH1));
                            else
                                cell1 = new PdfPCell(new Phrase(slumpDetails[6], fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (slumpDetails[7] != "")
                        {
                            if (int.TryParse(slumpDetails[7], out result))
                                cell1 = new PdfPCell(new Phrase(slumpDetails[7] + " mm", fontH1));
                            else
                                cell1 = new PdfPCell(new Phrase(slumpDetails[7], fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }

                    if (slumpCount > 2 || slumpDetails[1] == "")
                    {
                        cell1 = new PdfPCell(new Phrase("Retention time ", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }

                    if (slumpDetails[1] != "")
                    {
                        cell1 = new PdfPCell(new Phrase("Initial", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (slumpDetails[2] != "")
                    {
                        cell1 = new PdfPCell(new Phrase("30 min", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (slumpDetails[3] != "")
                    {
                        cell1 = new PdfPCell(new Phrase("60 min", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (slumpDetails[4] != "")
                    {
                        cell1 = new PdfPCell(new Phrase("90 min", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (slumpDetails[5] != "")
                    {
                        cell1 = new PdfPCell(new Phrase("120 min", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (slumpDetails[6] != "")
                    {
                        cell1 = new PdfPCell(new Phrase("150 min", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (slumpDetails[7] != "")
                    {
                        cell1 = new PdfPCell(new Phrase("180 min", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    pdfDoc.Add(table1);
                }
                //
                var aa = dc.OtherCubeTestView(ReferenceNo, "MF", 0, TrialId, "Trial", false, false);
                int otherDay = 0;
                int actualDays = 0;

                string day1compStr = "", day3compStr = "", day7compStr = "", day28compStr = "", dayOtherCompStr = "";
                foreach (var cs in aa)
                {
                    if (cs.Days_tint == 1 && cs.Avg_var != null)
                    {
                        day1compStr = cs.Avg_var.ToString();
                    }
                    else if (cs.Days_tint == 3 && cs.Avg_var != null)
                    {
                        day3compStr = cs.Avg_var.ToString();
                    }
                    else if (cs.Days_tint == 7 && cs.Avg_var != null)
                    {
                        day7compStr = cs.Avg_var.ToString();
                    }
                    else if (cs.Days_tint == 28 && cs.Avg_var != null)
                    {
                        day28compStr = cs.Avg_var.ToString();
                        actualDays = Convert.ToInt32(cs.Days_tint);
                        //string CurrentDate = DateTime.Now.ToString("dd/MM/yyyy");                     
                        DateTime d3 = Convert.ToDateTime(cs.TestingDate.ToString());
                        //CurrentDate = d3.ToShortDateString();                        
                        DateTime d1 = DateTime.ParseExact(cs.CastingDate.ToString(), "dd/MM/yyyy", null);
                        actualDays = ((TimeSpan)(d3 - d1)).Days;
                    }//
                    else if (cs.Avg_var != null)
                    {
                        dayOtherCompStr = cs.Avg_var.ToString();
                        otherDay = Convert.ToInt32(cs.Days_tint);
                    }
                }
                table1 = new PdfPTable(2);
                table1.WidthPercentage = 100;
                table1.DefaultCell.Border = Rectangle.NO_BORDER;
                table1.SetTotalWidth(new float[] { 90f, 10f });

                if (day1compStr != "")
                {
                    cell1 = new PdfPCell(new Phrase("Average accelerated compressive strength = " + day1compStr + " N/mm²", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);
                }
                if (day3compStr != "")
                {
                    cell1 = new PdfPCell(new Phrase("Average 3 days compressive strength = " + day3compStr + " N/mm²", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);
                }
                if (day7compStr != "")
                {
                    cell1 = new PdfPCell(new Phrase("Average 7 days compressive strength = " + day7compStr + " N/mm²", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);
                }
                if (dayOtherCompStr != "")
                {
                    cell1 = new PdfPCell(new Phrase("Average " + otherDay.ToString() + " days compressive strength = " + dayOtherCompStr + " N/mm²", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);
                }

                if (ReportType != "Final" && (day3compStr != "" || day7compStr != ""))
                {
                    string[] strVal = castingDetails.Split('|');
                    if (strVal[2] != "")
                    {
                        cell1 = new PdfPCell(new Phrase("Expected 28 days compressive strength * = " + strVal[2] + " N/mm²", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = Rectangle.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(" ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = Rectangle.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("* Based on regression model using " + strVal[0] + " days strength." + " (R Value = " + strVal[5] + " , Standard Error = " + strVal[4] + ")", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = Rectangle.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(" ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = Rectangle.NO_BORDER;
                        table1.AddCell(cell1);
                    }
                }

                if (ReportType == "Final")
                {
                    cell1 = new PdfPCell(new Phrase("Average " + actualDays.ToString() + " days compressive strength = " + day28compStr + " N/mm²", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);
                }
                // targer mean strength
                if (ReportType == "Final")
                {
                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Target mean strength = Fck (N/mm²) + " + " ( K * Standard Deviation )", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("K = Himsworth Constant which is 1.65 for 5 % results to fall below the characteristic strength.", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);
                    if (Convert.ToDecimal(mGrade.Replace("M", "")) <= 15)
                        cell1 = new PdfPCell(new Phrase("Standard Deviation Assumed= 3.5 N/mm²" + " (As per IS 456-2000 Table 8, Clause 9.2.4.2)", fontH1));
                    else if (Convert.ToDecimal(mGrade.Replace("M", "")) >= 20 && Convert.ToDecimal(mGrade.Replace("M", "")) <= 25)
                        cell1 = new PdfPCell(new Phrase("Standard Deviation Assumed= 4 N/mm²" + " (As per IS 456-2000 Table 8, Clause 9.2.4.2)", fontH1));
                    else if (Convert.ToDecimal(mGrade.Replace("M", "")) >= 30)
                        cell1 = new PdfPCell(new Phrase("Standard Deviation Assumed= 5 N/mm²" + " (As per IS 456-2000 Table 8, Clause 9.2.4.2)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);
                    decimal abc = 0;

                    if (Convert.ToDecimal(mGrade.Replace("M", "")) <= 15)
                    {
                        abc = Convert.ToDecimal(Convert.ToDecimal(mGrade.Replace("M", "")) + Convert.ToDecimal(1.65 * 3.5));
                        cell1 = new PdfPCell(new Phrase("Target mean strength = " + mGrade.Replace("M", "") + " + ( 1.65 x 3.5 )= " + abc.ToString("0.00") + " N/mm²", fontH1));
                    }
                    else if (Convert.ToDecimal(mGrade.Replace("M", "")) >= 20 && Convert.ToDecimal(mGrade.Replace("M", "")) <= 25)
                    {
                        abc = Convert.ToDecimal(Convert.ToDecimal(mGrade.Replace("M", "")) + Convert.ToDecimal(1.65 * 4));
                        cell1 = new PdfPCell(new Phrase("Target mean strength = " + mGrade.Replace("M", "") + " + ( 1.65 x 4 )= " + abc.ToString("0.00") + " N/mm²", fontH1));
                    }
                    else if (Convert.ToDecimal(mGrade.Replace("M", "")) >= 30)

                    {
                        abc = Convert.ToDecimal(Convert.ToDecimal(mGrade.Replace("M", "")) + Convert.ToDecimal(1.65 * 5));
                        cell1 = new PdfPCell(new Phrase("Target mean strength = " + mGrade.Replace("M", "") + " + ( 1.65 x 5 )=" + abc.ToString("0.00") + " N/mm²", fontH1));
                    }
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = Rectangle.NO_BORDER;
                    table1.AddCell(cell1);

                }

                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);
                #endregion

                #region ref/remarks
                //new page
                pdfDoc.Add(new Paragraph("Page 1 of 2", fontH1));
                pdfDoc.NewPage();
                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true || Action.Contains("Email") == true)
                    LogoToPdfOld(pdfDoc, Action);
                //
                table1 = new PdfPTable(2);
                table1.SpacingBefore = 10;
                table1.SpacingAfter = 12;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                table1.WidthPercentage = 100;
                int SrNo = 0;

                var iscd = dc.ISCode_View(0, "", "MF", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (SrNo == 0)
                        {
                            cell1 = new PdfPCell(new Phrase("References/Notes :", fontH4));
                            cell1.Colspan = 2;
                            cell1.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell1);
                        }
                        SrNo++;
                        cell1 = new PdfPCell(new Phrase(SrNo.ToString() + ")", fontH1));
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                    }
                    cell1 = new PdfPCell(new Phrase(" ", fontH2));
                    cell1.FixedHeight = 5f;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);
                }

                SrNo = 0;
                if (ReportType == "MDL")
                {
                    string[] strVal = castingDetails.Split('|');
                    if (SrNo == 0)
                    {
                        cell1 = new PdfPCell(new Phrase("Remarks :", fontH4));
                        cell1.Colspan = 2;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                    }
                    SrNo++;
                    cell1 = new PdfPCell(new Phrase(SrNo.ToString() + ")", fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("This is interim report based on " + strVal[0] + " days strength. Final report will be given after 28 days strength is achieved.", fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(" ", fontH2));
                    cell1.FixedHeight = 5f;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);
                }
                var re = dc.TrialRemark_View("", ReferenceNo, 0, TrialId, ReportType).ToList();
                if (re.Count > 0)
                {
                    foreach (var r in re)
                    {
                        var remark = dc.TrialRemark_View("", "", Convert.ToInt32(r.TrialDetail_RemarkId), TrialId, ReportType);
                        foreach (var remk in remark)
                        {
                            if (SrNo == 0)
                            {
                                cell1 = new PdfPCell(new Phrase("Remarks :", fontH4));
                                cell1.Colspan = 2;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                            }
                            SrNo++;
                            cell1 = new PdfPCell(new Phrase(SrNo.ToString() + ")", fontH1));
                            cell1.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(remk.Trial_Remark_var, fontH1));
                            cell1.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell1);
                        }
                    }
                    cell1 = new PdfPCell(new Phrase(" ", fontH2));
                    cell1.FixedHeight = 5f;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);
                }
                if (supersedeNote != "")
                {
                    if (SrNo == 0)
                    {
                        cell1 = new PdfPCell(new Phrase("Remarks :", fontH4));
                        cell1.Colspan = 2;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                    }
                    SrNo++;
                    cell1 = new PdfPCell(new Phrase(SrNo.ToString() + ")", fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(" ", fontH2));
                    cell1.FixedHeight = 5f;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);
                }
                #endregion

                #region notes

                cell1 = new PdfPCell(new Phrase(" ", fontH2));
                cell1.Border = PdfPCell.NO_BORDER;
                cell1.Colspan = 2;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Notes :", fontH4));
                cell1.Colspan = 2;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("1) ", fontH1));
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase(notes[0], fontH1));
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("2) ", fontH1));
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase(notes[1], fontH1));
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("3) ", fontH1));
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase(notes[2], fontH1));
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                table1.SpacingAfter = 3;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);
                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);

                #region approve by

                //if ((Action == "Duplicate Print" || Action == "Print") &&
                //    (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false))
                // if ((Action == "Duplicate Print" || Action == "Print" || Action == "Email") && Action.Contains("Display") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {

                    PdfPTable MaindataTable2 = new PdfPTable(2);
                    MaindataTable2.SpacingBefore = 2;
                    MaindataTable2.WidthPercentage = 90;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    PdfPCell cellbottom1 = new PdfPCell(new Paragraph("Checked By", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    cellbottom1.Border = PdfPCell.NO_BORDER;
                    cellbottom.HorizontalAlignment = Element.ALIGN_LEFT;
                    //cellbottom1.Left = cellbottom.Left + 225;
                    MaindataTable2.AddCell(cellbottom);
                    cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    MaindataTable2.AddCell(cellbottom1);
                    MaindataTable2.HorizontalAlignment = Element.ALIGN_LEFT;
                    pdfDoc.Add(MaindataTable2);

                    bool sign = false;
                    #region Signature
                    //if (RemotelyAppv == true)
                    //{
                    string chkUser = "", chkDesign = "";
                    var U1 = dc.User_View(chkBy, -1, "", "", "");
                    foreach (var r1 in U1)
                    {
                        chkUser = r1.USER_Name_var.ToString();
                        chkDesign = r1.USER_Designation_var.ToString();
                        break;
                    }
                    if (apprBy > 0)
                    {
                        bool flgFound = false;

                        var data = dc.Sign_View(apprBy);
                        foreach (var g in data)
                        {
                            byte[] imageBytes = g.UserSign.ToArray();
                            MemoryStream mxs1 = new MemoryStream(imageBytes);
                            iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                            table1 = new PdfPTable(2);
                            table1.WidthPercentage = 90;
                            //table1.SetWidths(new float[] { 1.7f});
                            table1.SetWidths(new float[] { 2f, 2f });

                            PdfPCell cell = new PdfPCell(image);

                            cell.FixedHeight = 35;
                            cell.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell.Border = PdfPCell.NO_BORDER;
                            cell.Colspan = 1;
                            table1.AddCell(cell);
                            sign = true;
                            flgFound = false;
                            if (chkBy > 0)
                            {
                                var data1 = dc.Sign_View(chkBy);
                                foreach (var g1 in data1)
                                {
                                    byte[] imageBytes1 = g1.UserSign.ToArray();
                                    MemoryStream mxs11 = new MemoryStream(imageBytes1);
                                    iTextSharp.text.Image image1 = iTextSharp.text.Image.GetInstance(imageBytes1);
                                    PdfPCell cellChk = new PdfPCell(image1);
                                    cellChk.FixedHeight = 35;
                                    cellChk.HorizontalAlignment = Element.ALIGN_RIGHT;
                                    cellChk.Border = PdfPCell.NO_BORDER;
                                    cellChk.Colspan = 1;
                                    table1.AddCell(cellChk);
                                    flgFound = true;
                                    break;
                                }

                                if (flgFound == false)
                                {

                                    PdfPCell cellChk = new PdfPCell();
                                    cellChk.FixedHeight = 35;
                                    cellChk.HorizontalAlignment = Element.ALIGN_RIGHT;
                                    cellChk.Border = PdfPCell.NO_BORDER;
                                    cellChk.Colspan = 1;
                                    table1.AddCell(cellChk);
                                    flgFound = true;
                                }
                            }
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            pdfDoc.Add(table1);
                            sign = true;
                            break;
                        }

                    }

                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }


                    var U = dc.User_View(apprBy, -1, "", "", "");
                    foreach (var r1 in U)
                    {
                        PdfPTable MaindataTable1 = new PdfPTable(2);
                        MaindataTable1.SpacingBefore = 2;
                        MaindataTable1.WidthPercentage = 90;
                        PdfPCell cellapr = new PdfPCell(new Paragraph("(" + r1.USER_Name_var + ")", fontH3));
                        PdfPCell cellchk = new PdfPCell(new Paragraph("(" + chkUser + ")", fontH3));
                        cellapr.Border = PdfPCell.NO_BORDER;
                        cellchk.Border = PdfPCell.NO_BORDER;
                        MaindataTable1.AddCell(cellapr);
                        cellchk.HorizontalAlignment = Element.ALIGN_RIGHT;
                        //cellchk.Left = cellapr.Left + 225;                        
                        MaindataTable1.AddCell(cellchk);
                        MaindataTable1.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdfDoc.Add(MaindataTable1);

                        PdfPTable MaindataTable11 = new PdfPTable(2);
                        MaindataTable11.SpacingBefore = 2;
                        MaindataTable11.WidthPercentage = 90;
                        PdfPCell cellaprd = new PdfPCell(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                        PdfPCell cellchkd = new PdfPCell(new Paragraph("(" + chkDesign + ")", fontH3));
                        cellaprd.Border = PdfPCell.NO_BORDER;
                        cellchkd.Border = PdfPCell.NO_BORDER;
                        MaindataTable11.AddCell(cellaprd);
                        cellchkd.HorizontalAlignment = Element.ALIGN_RIGHT;
                        MaindataTable11.AddCell(cellchkd);
                        MaindataTable11.HorizontalAlignment = Element.ALIGN_LEFT;
                        pdfDoc.Add(MaindataTable11);


                        if (Action == "Print" || Action == "Email" && ApproveDt != null)
                        {

                            //MaindataTable1.SpacingAfter = 25;
                            //pdfDoc.Add(MaindataTable1);
                            pdfDoc.Add(new Paragraph(Convert.ToDateTime(ApproveDt).ToString("dd/MM/yy"), fontH3));
                        }
                        break;
                    }
                    MaindataTable2 = new PdfPTable(1);
                    MaindataTable2.SpacingBefore = 5;
                    MaindataTable2.WidthPercentage = 90;
                    if (Witnessby != string.Empty && Witnessby.Trim() != "")
                    {
                        cellbottom1 = new PdfPCell(new Phrase("Witness by :  " + Witnessby, fontH1));
                        cellbottom1.Border = PdfPCell.NO_BORDER;
                        cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                        MaindataTable2.AddCell(cellbottom1);
                        MaindataTable2.HorizontalAlignment = Element.ALIGN_LEFT;
                    }
                    pdfDoc.Add(MaindataTable2);

                }
                else
                {
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 10;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 10;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                }


                var blackListTextFont = FontFactory.GetFont("Verdana", 3);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = blackListTextFont;
                Phrase phrase1 = new Phrase();
                phrase1.Add(new Chunk("Encl : Aggregate Test Teport.", blackListTextFont));
                phrase1.Add(new Chunk("                                                                                                                         --End of Report--", blackListTextFont));
                // paragraph.Add("Encl : Aggregate Test Teport.");
                pdfDoc.Add(phrase1);
                //paragraph = new Paragraph();
                //paragraph.Alignment = Element.ALIGN_CENTER;
                //paragraph.Font = blackListTextFont;
                //paragraph.Add("--End of Report--");
                //pdfDoc.Add(paragraph);
                pdfDoc.Add(new Paragraph("Page 2 of 2", fontH1));
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();

                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
                #endregion
            }
        }
        public void MF_FinalReport(string ReferenceNo, int TrialId, string Action)
        {
            #region Heading
            Paragraph paragraph = new Paragraph();
            float marginTop = 21;
            bool flg10 = false, flg20 = false, flg40 = false, flgNS = false, flgCS = false, flgSD = false, flgGrit = false;

            Document pdfDoc = new Document(PageSize.A4, 55f, 45f, marginTop, 10f);
            var fileName = "MF_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
            if (!Directory.Exists(@foldername))
                Directory.CreateDirectory(@foldername);
            string Subfoldername = foldername + "/MFSOP";
            if (!Directory.Exists(@Subfoldername))
                Directory.CreateDirectory(@Subfoldername);
            string Subfoldername1 = Subfoldername;

            if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
            {
                //@foldername=="C:/temp/veena
                @Subfoldername1 = foldername;

                @Subfoldername1 = "/";
                fileName = "MF_" + ReferenceNo.Replace('/', '_') + ".pdf";
            }


            Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11, Font.BOLD);
            Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
            Font fontH11 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.UNDEFINED);
            Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 7, Font.UNDEFINED);
            Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLD);
            Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 7.5f, Font.UNDEFINED);
            Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 9, Font.BOLDITALIC);
            //PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
            PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
            writer.PageEvent = new classPdfFooter1();

            PdfPTable table1 = null;
            pdfDoc.Open();

            var MFDtls = dc.ReportStatus_View("Mix Design", null, null, 0, 0, 0, ReferenceNo, 0, 0, 0).ToList();
            clsData obj = new clsData();
            DataTable dt = obj.getGeneralData(" select * from tbl_Trial where Trial_RefNo = '" + ReferenceNo + "' and Trial_MDletter_Status=1");
            string[] myStr = new string[8];
            string[,] matDetailArr = new string[12, 3];
            for (int i = 0; i < 12; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    matDetailArr[i, j] = "";
                }
            }

            for (int x1 = 0; x1 < 8; x1++)
            {
                myStr[x1] = "";
            }
            string cemtUsed = "---";
            string flyashUsed = "---";
            string admUsed = "---";
            string natureofwork = "---";
            bool flgRention = false;
            int retentionTime = 0;
            string[] retSlump = new string[3];
            if (dt.Rows.Count > 0)
            {
                if (dt.Rows[0]["Trial_OtherInfo"].ToString() != "")
                {
                    myStr = Convert.ToString(dt.Rows[0]["Trial_OtherInfo"]).Split('|');
                }
                cemtUsed = dt.Rows[0]["Trial_CementUsed"].ToString();
                flyashUsed = dt.Rows[0]["Trial_FlyashUsed"].ToString();
                admUsed = dt.Rows[0]["Trial_Admixture"].ToString();
                natureofwork = dt.Rows[0]["Trial_NatureofWork"].ToString();
                if (dt.Rows[0]["Trial_RetentionStatus"] != null)
                {
                    if (Convert.ToBoolean(dt.Rows[0]["Trial_RetentionStatus"].ToString()) == true)
                    {
                        flgRention = true;
                        retentionTime = Convert.ToInt32(dt.Rows[0]["Trial_RetTimeDuration"].ToString());
                        retSlump = dt.Rows[0]["Trial_RetentionSlumpValue"].ToString().Split('|');
                    }
                }
                if (flgRention == false)
                {
                    retSlump = dt.Rows[0]["Trial_BatchSlumpValue"].ToString().Split('|');
                }
            }

            dt.Dispose();

            string specGrvCemt = "";
            int maxSize = 0;
            int cnt = 0;
            var trialData = dc.TrialDetail_View(ReferenceNo, TrialId).ToList();
            foreach (var t in trialData)
            {

                if (t.TrialDetail_MaterialName.Contains("Cement") == true)
                {
                    specGrvCemt = t.TrialDetail_SpecificGravity.ToString();
                    //break;
                }
                else if (t.TrialDetail_MaterialName.Contains("10 mm") == true && maxSize < 10)
                {
                    maxSize = 10;

                }
                else if (t.TrialDetail_MaterialName.Contains("20 mm") == true && maxSize < 20)
                {
                    maxSize = 20;

                }
                else if (t.TrialDetail_MaterialName.Contains("40 mm") == true && maxSize < 40)
                {
                    maxSize = 40;
                }
                matDetailArr[cnt, 0] = t.TrialDetail_MaterialName.ToString();
                matDetailArr[cnt, 1] = t.TrialDetail_Weight.ToString();
                matDetailArr[cnt, 2] = t.TrialDetail_SpecificGravity.ToString();
                cnt++;
            }
            #endregion
            int SiteRouteId = 0;
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_CENTER;
            paragraph.Font = fontTitle1;
            paragraph.Add("Base method used : IS 10262 - 2009 Concrete mix proportioning - Guidelines");
            paragraph.SpacingAfter = 3;
            pdfDoc.Add(paragraph);
            PdfPTable MaindataTable = new PdfPTable(6);  //tbl
            MaindataTable.WidthPercentage = 100;
            float[] widths = new float[] { 20f, 1f, 50f, 18f, 1f, 15f };
            MaindataTable.SetWidths(widths);
            #region Header
            DateTime? dtTesting = null;
            string IssueDt = "", mGrade = "", CustName = "", SiteName = "", Address = "";
            //var MFDtls = dc.ReportStatus_View("Mix Design", null, null, 0, 0, 0, ReferenceNo, 0, 0, 0);
            foreach (var mf in MFDtls)
            {
                if (mf.INWD_RptSITE_Id != null && mf.INWD_RptCL_Id != null)
                {
                    CustName = mf.RptCL_Name_var;
                    SiteName = mf.RptST_Name_var;
                    Address = mf.RptCL_OfficeAddress_var;
                }
                else
                {
                    CustName = mf.CL_Name_var;
                    SiteName = mf.SITE_Name_var;
                    Address = mf.CL_OfficeAddress_var;
                }

                clsData cd = new clsData();
                SiteRouteId = Convert.ToInt32(mf.SITE_Route_Id);

                string RouteName = cd.getRouteName(SiteRouteId);
                if (RouteName == "")
                    RouteName = "NA";

                //paragraph = new Paragraph();
                //paragraph.Alignment = Element.ALIGN_CENTER;
                //paragraph.Font = fontTitle;
                PdfPCell Cust_Namecell;
                //MaindataTable.SpacingBefore = 1;

                if (mf.MFINWD_FinalIssueDt != null)
                {
                    IssueDt = Convert.ToDateTime(mf.MFINWD_FinalIssueDt).ToString("dd/MMM/yyyy");
                }
                else
                {
                    IssueDt = "-";
                }
                string authCode = reportAuthenticateCode();


                Cust_Namecell = new PdfPCell(new Phrase("Customer name", fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                if (authCode != "00")
                {
                    Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                }
                else
                {
                    Cust_Namecell = new PdfPCell(new Phrase(""));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 3;
                    MaindataTable.AddCell(Cust_Namecell);
                }


                Cust_Namecell = new PdfPCell(new Phrase("Office address", fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                Cust_Namecell.Rowspan = 2;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                Cust_Namecell.Rowspan = 2;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(Address, fontH11));
                Cust_Namecell.Rowspan = 2;
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("MF", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(mf.MFINWD_ReferenceNo_var, fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);


                Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                //Cust_Namecell = new PdfPCell(new Phrase("MF-" + mf.MFINWD_SetOfRecord_var, fontH11));
                string strRecNo = mf.MFINWD_SetOfRecord_var;
                string supersedeNote = "";
                if (mf.MFINWD_SupersedeStatus_tint > 0)
                {
                    supersedeNote = "This report supersedes " + strRecNo;
                    if (mf.MFINWD_SupersedeStatus_tint > 1)
                        supersedeNote += "-R" + (mf.MFINWD_SupersedeStatus_tint - 1).ToString();
                    supersedeNote += " report dated  " + Convert.ToDateTime(mf.MFINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                    strRecNo = strRecNo + "-R" + mf.MFINWD_SupersedeStatus_tint.ToString();
                }
                Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);



                Cust_Namecell = new PdfPCell(new Phrase("Mix Design Parameters", fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                string tmpStr1 = "";
                if (myStr[5] == "")
                {
                    tmpStr1 = "Mix design for " + mf.MFINWD_Grade_var + " grade of concrete for  " + Convert.ToString(mf.MFINWD_NatureofWork_var);
                    mGrade = mf.MFINWD_Grade_var;
                }
                else
                {
                    tmpStr1 = "Mix design for " + myStr[5].ToString() + " grade of concrete for  " + Convert.ToString(mf.MFINWD_NatureofWork_var);
                    mGrade = myStr[5].ToString();
                }
                Cust_Namecell = new PdfPCell(new Phrase(tmpStr1, fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("Bill No.", fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                if (mf.SITE_MonthlyBillingStatus_bit == true && mf.INWD_BILL_Id == "0")
                {
                    //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH11));
                    if (IssueDt != null && IssueDt != "-")
                    {
                        string monthlyBillNo = Convert.ToDateTime(IssueDt).ToString("MMM/yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH11));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH11));
                    }
                }
                else
                {
                    Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(mf.INWD_BILL_Id), fontH11));
                }
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);


                Cust_Namecell = new PdfPCell(new Phrase("Special Requirement / Considerations", fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(mf.MFINWD_SpecialRequirement_var, fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(IssueDt, fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);


                dtTesting = Convert.ToDateTime(mf.MFINWD_TestedDate_dt);

                // contact details
                Phrase phrase = new Phrase();
                phrase.Add(new Chunk(mf.CONT_Name_var + " - " + mf.CONT_ContactNo_var, fontH1));
                phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(phrase);//person name
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("", fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("", fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);
                Cust_Namecell = new PdfPCell(new Phrase("", fontH11));
                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                MaindataTable.AddCell(Cust_Namecell);

                if (mf.INWD_RptSITE_Id != null && mf.INWD_RptCL_Id != null)
                {
                    Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH11));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": ", fontH11));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(mf.CL_Name_var, fontH11));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 4;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Site", fontH11));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": ", fontH11));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(mf.SITE_Name_var, fontH11));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 4;
                    MaindataTable.AddCell(Cust_Namecell);
                }
                break;
            }
            pdfDoc.Add(MaindataTable);
            #endregion
            #region I Page
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontTitle1;
            paragraph.Add("Following is the basic information required for concrete mix design.");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            //pdfDoc.Add(MaindataTable);
            table1 = new PdfPTable(2);
            float[] widths1 = new float[] { 30f, 30f };
            table1.SetWidths(widths1);
            table1.SpacingBefore = 5;

            PdfPCell cell1;

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            if (myStr[5].Trim() == "")
                paragraph.Add("A)  Grade designation = " + MFDtls.FirstOrDefault().MFINWD_Grade_var.ToString());
            else
                paragraph.Add("A)  Grade designation = " + myStr[5].ToString());
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("B)  Type of cement to be used = " + cemtUsed);
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("C)  Maximum nominal size of agg. = " + maxSize.ToString() + " mm");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("D)  Minimum cement content = 300 kg/cum");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("E)  Maximum water - cement ratio = 0.55 ");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            if (myStr[6].Trim() == "")
                paragraph.Add("F)  Statndard Deviation Assumed = 5 ");
            else
                paragraph.Add("F)  Statndard Deviation Assumed = " + myStr[6].ToString());
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("G)  Workability in terms of slump = After 60 Minutes 60 mm " + "                                           " + "Retention period required.(hrs.)");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("H)  Exposure condition = Mild");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("I)  Method of concrete placing =" + MFDtls.FirstOrDefault().MFINWD_SpecialRequirement_var);
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("J)  Type of aggregate = Crushed Fine aggregate and Coarse Aggregate");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("K)  Maximum cement content = 450 kg/Cum");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("L)  Chemical admixture type = " + admUsed);
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("M)   Other cementitious Materials = " + flyashUsed + " % replacement recommended if any :");
            paragraph.SpacingAfter = 10;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontTitle1;
            paragraph.Add("Test data for material and Combined Grading of Aggregate");
            paragraph.SpacingAfter = 10;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("a) Cement used - " + cemtUsed);
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("b) Specific gravity of cement - " + specGrvCemt);
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("c) Chemical admixture - " + admUsed);
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("d) Specific gravity and water absorption");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            string[] header = { "Description", "Specific Gravity", "Water Absorption" };
            table1 = new PdfPTable(3);
            float[] widths3 = new float[] { 30f, 30f, 30f };
            table1.SetWidths(widths3);
            table1.SpacingBefore = 5;
            table1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.WidthPercentage = 100;
            for (int h = 0; h < header.Count(); h++)
            {
                cell1 = new PdfPCell(new Phrase(header[h], fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);
            }

            foreach (var t in trialData)
            {
                if ((t.TrialDetail_MaterialName.Contains("Natural Sand") == true || t.TrialDetail_MaterialName.Contains("Crushed Sand") == true ||
                    t.TrialDetail_MaterialName.Contains("Stone Dust") == true || t.TrialDetail_MaterialName.Contains("Grit") == true ||
                        t.TrialDetail_MaterialName.Contains("Mix Aggregate") == true || t.TrialDetail_MaterialName.Contains("10 mm") == true ||
                        t.TrialDetail_MaterialName.Contains("20 mm") == true || t.TrialDetail_MaterialName.Contains("40 mm") == true))
                {
                    specGrvCemt = t.TrialDetail_SpecificGravity.ToString();
                    cell1 = new PdfPCell(new Phrase(t.TrialDetail_MaterialName, fontH11));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(t.TrialDetail_SpecificGravity.ToString(), fontH11));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    var MfInwd = dc.MF_View1(ReferenceNo, t.Material_Id);
                    foreach (var aggt in MfInwd)
                    {
                        cell1 = new PdfPCell(new Phrase(aggt.AGGTINWD_WaterAborp_var, fontH11));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        break;
                    }
                    if (t.TrialDetail_MaterialName.Contains("10 mm") == true)
                    {
                        flg10 = true;
                    }
                    else if (t.TrialDetail_MaterialName.Contains("20 mm") == true)
                    {
                        flg20 = true;
                    }
                    else if (t.TrialDetail_MaterialName.Contains("40 mm") == true)
                    {
                        flg40 = true;
                    }
                    else if (t.TrialDetail_MaterialName.Contains("Natural Sand") == true)
                    {
                        flgNS = true;
                    }
                    else if (t.TrialDetail_MaterialName.Contains("Crushed Sand") == true)
                    {
                        flgCS = true;
                    }
                    else if (t.TrialDetail_MaterialName.Contains("Stone Dust") == true)
                    {
                        flgSD = true;
                    }
                    else if (t.TrialDetail_MaterialName.Contains("Grit") == true)
                    {
                        flgGrit = true;
                    }
                }
            }

            pdfDoc.Add(table1);


            #endregion I page

            #region II Page             //2nd page

            pdfDoc.NewPage();
            PdfPTable MaindataTable1 = new PdfPTable(6);
            MaindataTable1.WidthPercentage = 100;
            MaindataTable1.DefaultCell.Border = PdfPCell.NO_BORDER;


            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("e) Sieve Analysis");
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("1) Coarse Aggregate : ");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            DataTable dtAllInAGGT1 = LoadAllInAGGTData_Coarse(ReferenceNo, TrialId);
            int colCount = 0;
            for (int j = 0; j < dtAllInAGGT1.Columns.Count; j++)
            {
                if (dtAllInAGGT1.Rows[0][j].ToString() != "")
                {
                    colCount++;
                }
            }
            table1 = new PdfPTable(colCount);
            table1.WidthPercentage = 100;
            table1.HorizontalAlignment = Element.ALIGN_CENTER;
            for (int i = 0; i < dtAllInAGGT1.Rows.Count; i++)
            {
                for (int j = 0; j < dtAllInAGGT1.Columns.Count; j++)
                {
                    if (dtAllInAGGT1.Rows[0][j].ToString() != "")
                    {
                        if (i == 0)
                            cell1 = new PdfPCell(new Phrase(dtAllInAGGT1.Rows[i][j].ToString(), fontH2));
                        else
                            cell1 = new PdfPCell(new Phrase(dtAllInAGGT1.Rows[i][j].ToString(), fontH11));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                }
            }
            pdfDoc.Add(table1);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("2) Fine Aggregate :");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            DataTable dtAllInAGGT2 = LoadAllInAGGTData_Fine(ReferenceNo, TrialId);
            colCount = 0;
            for (int j = 0; j < dtAllInAGGT2.Columns.Count; j++)
            {
                if (dtAllInAGGT2.Rows[0][j].ToString() != "")
                {
                    colCount++;
                }
            }
            table1 = new PdfPTable(colCount);
            table1.WidthPercentage = 100;
            table1.HorizontalAlignment = Element.ALIGN_CENTER;
            for (int i = 0; i < dtAllInAGGT2.Rows.Count; i++)
            {
                for (int j = 0; j < dtAllInAGGT2.Columns.Count; j++)
                {
                    if (dtAllInAGGT2.Rows[0][j].ToString() != "")
                    {
                        if (i == 0)
                            cell1 = new PdfPCell(new Phrase(dtAllInAGGT2.Rows[i][j].ToString(), fontH2));
                        else
                            cell1 = new PdfPCell(new Phrase(dtAllInAGGT2.Rows[i][j].ToString(), fontH11));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                }
            }
            pdfDoc.Add(table1);

            //
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("Conforming to grading Zone I of Table 4 of IS 383");
            paragraph.SpacingAfter = 10;
            pdfDoc.Add(paragraph);

            DataTable dtAllInAGGT = LoadAllInAGGTData(ReferenceNo, TrialId);
            colCount = 0;
            for (int j = 0; j < dtAllInAGGT.Columns.Count; j++)
            {
                if (dtAllInAGGT.Rows[0][j].ToString() != "")
                {
                    colCount++;
                }
            }
            table1 = new PdfPTable(colCount);
            table1.WidthPercentage = 100;
            table1.HorizontalAlignment = Element.ALIGN_CENTER;
            for (int i = 0; i < dtAllInAGGT.Rows.Count; i++)
            {
                for (int j = 0; j < dtAllInAGGT.Columns.Count; j++)
                {
                    if (dtAllInAGGT.Rows[0][j].ToString() != "")
                    {
                        if (i == 0)
                            cell1 = new PdfPCell(new Phrase(dtAllInAGGT.Rows[i][j].ToString(), fontH2));
                        else
                            cell1 = new PdfPCell(new Phrase(dtAllInAGGT.Rows[i][j].ToString(), fontH11));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                }
            }
            pdfDoc.Add(table1);
            #endregion

            #region III page
            pdfDoc.NewPage();
            PdfPTable MaindataTable2 = new PdfPTable(6);
            MaindataTable2.WidthPercentage = 100;
            MaindataTable2.DefaultCell.Border = PdfPCell.NO_BORDER;

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontTitle1;
            paragraph.Add("Determination of Target mean Strength for mix design proportioning");
            paragraph.SpacingAfter = 10;
            pdfDoc.Add(paragraph);

            pdfDoc.Add(MaindataTable2);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("Generally No data made available for standard deviation from site for the perticular grade, hence we have to adopt the standard deviations.");
            paragraph.SpacingAfter = 2;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("data from IS 456-2000 form Table 8 page no.23 as below;");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            table1 = new PdfPTable(2);
            table1.WidthPercentage = 100;
            table1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.SetTotalWidth(new float[] { 7f, 7f });
            string[] header5 = { "Grade of concrete", "Assumed standard deviation (N/mm" + "\xB2" + ")" };
            for (int h = 0; h < header5.Count(); h++)
            {
                cell1 = new PdfPCell(new Phrase(header5[h], fontH2));
                if (h == 0)
                {
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                }
                if (h == 1)
                {
                    cell1 = new PdfPCell(new Phrase(header5[h], fontH2));
                }
                table1.AddCell(cell1);
            }
            cell1 = new PdfPCell(new Phrase("M10", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("3.5", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            cell1.Rowspan = 2;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M15", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase("M20", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("4.0", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            cell1.Rowspan = 2;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M25", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase("M30", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("5.0", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            cell1.Rowspan = 5;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M35", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M40", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M45", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M50", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            pdfDoc.Add(table1);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("fck =  fck + 1.65 X Standard Deviation");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add(" grade of concrete (fck) = " + myStr[5].ToString() + ", and standard deviation =" + myStr[6].ToString());
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_CENTER;
            paragraph.Font = fontH11;
            paragraph.Add("= " + myStr[5].ToString().Replace("M ", "") + " ( 1.65 * " + myStr[6].ToString() + " )");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_CENTER;
            paragraph.Font = fontH11;
            decimal targetMeanStr = 0;
            targetMeanStr = Convert.ToDecimal(myStr[5].ToString().Replace("M ", "")) + (Convert.ToDecimal("1.65") * Convert.ToDecimal(myStr[6].ToString()));

            paragraph.Add("= " + targetMeanStr.ToString("0.0") + " N/mm" + "\xB2");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH2;
            paragraph.Add("Selection of water cement ratio");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);
            #region fixed table
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("Table 5 from IS456-2000 can be used to arrive at the desired water cement ratio, The table gives verious option based on condition of exposure for a typical water cement ratio and minimum cement content.");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            table1 = new PdfPTable(8);
            table1.WidthPercentage = 100;
            table1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.SetTotalWidth(new float[] { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f });
            string[] header6 = { "", "", "Plain Concrete", "Reinforced cement Concrete" };
            for (int h = 0; h < header6.Count(); h++)
            {
                cell1 = new PdfPCell(new Phrase(header6[h], fontH2));
                if (h == 0)
                {
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1.Rowspan = 2;
                }

                if (h == 1)
                {
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1 = new PdfPCell(new Phrase(header6[h], fontH2));
                    cell1.Rowspan = 2;
                }
                if (h == 2)
                {
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1 = new PdfPCell(new Phrase(header6[h], fontH2));
                    cell1.Colspan = 3;
                }
                if (h == 3)
                {
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1 = new PdfPCell(new Phrase(header6[h], fontH2));
                    cell1.Colspan = 3;
                }

                table1.AddCell(cell1);
            }
            cell1 = new PdfPCell(new Phrase("Sr. No", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("exposure conditions", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Minimum cement content (kg/m" + "\xB3" + ")", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Max. free water cement ratio", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Min. grade of concrete", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Minimum cement content (kg/m" + "\xB3" + ")", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Max. free water cement ratio", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Min. grade of concrete", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);

            ///add row data
            cell1 = new PdfPCell(new Phrase("1", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Mild", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("220", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.60", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("--", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("300", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.55", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M20", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);


            cell1 = new PdfPCell(new Phrase("2", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Moderate", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("240", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.60", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M15", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("300", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.50", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M25", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase("3", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("sever", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("250", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.50", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M20", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("320", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.50", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M30", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase("4", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Very sever", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase(" ", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.45", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M20", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("340", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.45", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M35", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase("5", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("extreme", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("280", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.40", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M25", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("360", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.45", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M40", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.AddCell(cell1);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("Cement content prescribed in this table is irrapeetive of the grades of cement and it is inclusive of additions such as Fly ash, GGBS etc.The additions such as flyash or ground granulated blast furnace slag may he taken in to account in the concrete composition with respect to the cement content and water-cement ratio if the suitability is established and as long as the maximum amounts taken in to account do not exceed the limit of pozzolona and slag as specified in IS 1489 (Part I) and IS 455 respectively.");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("To start with, as athumb rule we can adopt the following Water- cement ratios for various grades of concrete.");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);


            table1 = new PdfPTable(11);
            table1.WidthPercentage = 100;
            table1.HorizontalAlignment = Element.ALIGN_LEFT;
            table1.SetTotalWidth(new float[] { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f });
            string[] header7 = { "Sr. No", "Exposure condition: Mild", "Expo.condition:Moderate", "Expo.condition:Severe", "Expo.condition:V.Severe", "Expo.condition:Extreme" };
            for (int h = 0; h < header7.Count(); h++)
            {
                cell1 = new PdfPCell(new Phrase(header7[h], fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;

                if (h == 0)
                {
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1.Rowspan = 2;
                }

                if (h == 1)
                {
                    cell1 = new PdfPCell(new Phrase(header7[h], fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1.Colspan = 2;
                }
                if (h == 2)
                {
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1 = new PdfPCell(new Phrase(header7[h], fontH2));
                    cell1.Colspan = 2;
                }
                if (h == 3)
                {
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1 = new PdfPCell(new Phrase(header7[h], fontH2));
                    cell1.Colspan = 2;
                }
                if (h == 4)
                {
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1 = new PdfPCell(new Phrase(header7[h], fontH2));
                    cell1.Colspan = 2;
                }
                if (h == 5)
                {
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1 = new PdfPCell(new Phrase(header7[h], fontH2));
                    cell1.Colspan = 2;
                }


                table1.AddCell(cell1);
            }
            cell1 = new PdfPCell(new Phrase("Grade designation", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Water/cement ratio", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Grade designation", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Water/cement ratio", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Grade designation", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Water/cement ratio", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Grade designation", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Water/cement ratio", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Grade designation", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Water/ cement ratio", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);


            //add row data
            cell1 = new PdfPCell(new Phrase("1", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M15", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("above 0.6", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase("2", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M20", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.55", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase("3", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M25", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.50", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M25", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.50", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("NA", fontH1));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);

            pdfDoc.Add(table1);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("For the gardes above M60, W/C ratios may be found out by trial and error method by taking actual trials of the concrete mixes. The above W/C  ratios are required to be modified for the mixes with additional cementitious materials like fly ash, GGBFS, etc.");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);
            #endregion
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH2;
            paragraph.Add("Selection of water content");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("From, table- 2, Maximum water content for 20 mm aggregate for 75 mm slump =  186 Litre ");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("(Increase 3 %water  for each 25mm increase in slump)");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);


            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("Estimate the water content based on the slump requirement and use of admixture.");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);


            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("Estimated water content for 100 mm Slump    =  186 + 3 / 100 x 186 ");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.IndentationLeft = 165;
            paragraph.Font = fontH11;
            paragraph.Add(" =  191 Litre ");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);
            #endregion III page
            #region IV page

            pdfDoc.NewPage();
            PdfPTable MaindataTable3 = new PdfPTable(6);
            MaindataTable2.WidthPercentage = 100;
            MaindataTable2.DefaultCell.Border = PdfPCell.NO_BORDER;

            pdfDoc.Add(MaindataTable3);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("As Plasticizer is used, the water content can be reduced by 15-20 % (depending on the dosage of admixture) the approximate reduction in water content can be taken as below, ");
            paragraph.SpacingAfter = 10;
            pdfDoc.Add(paragraph);

            table1 = new PdfPTable(3);
            table1.WidthPercentage = 100;
            table1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.SetTotalWidth(new float[] { 7f, 7f, 7f });
            string[] header8 = { "Sr. No.", "Type of admixture", "% reduction in water content" };

            cell1 = new PdfPCell(new Phrase(header8[0], fontH2));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase(header8[1], fontH2));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase(header8[2], fontH2));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);

            //aadd row
            cell1 = new PdfPCell(new Phrase("1", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Plasticizer", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("15-20%", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase("2", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Super Plasticizer", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("20-25%", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase("3", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("High performance ", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("25-30%", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("Based on trials with admixture decide the water content and arrive at the water cement ratio.");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("As a general guideline, following cement contents and W/C ratios can be taken to start trials.");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            #region fix table1
            table1 = new PdfPTable(8);
            table1.WidthPercentage = 100;
            table1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.SetTotalWidth(new float[] { 7f, 7f, 7f, 7f, 7f, 7f, 7f, 7f });
            string[] header9 = { "Sr. No", "Grade", "For OPC", "For Pure PPC", "For Pure PSC" };
            for (int h = 0; h < header9.Count(); h++)
            {
                cell1 = new PdfPCell(new Phrase(header9[h], fontH2));

                if (h == 0)
                {
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1.Rowspan = 2;
                }

                if (h == 1)
                {
                    cell1 = new PdfPCell(new Phrase(header9[h], fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1.Rowspan = 2;
                }
                if (h == 2)
                {
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1 = new PdfPCell(new Phrase(header9[h], fontH2));
                    cell1.Colspan = 2;
                }
                if (h == 3)
                {
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1 = new PdfPCell(new Phrase(header9[h], fontH2));
                    cell1.Colspan = 2;
                }
                if (h == 4)
                {
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1 = new PdfPCell(new Phrase(header9[h], fontH2));
                    cell1.Colspan = 2;
                }

                table1.AddCell(cell1);
            }

            cell1 = new PdfPCell(new Phrase("W/C ratio", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Cement content (kg/m" + "\xB3" + ")", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("W/C ratio", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Cement content (kg/m" + "\xB3" + ")", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("W/C ratio", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("Cement content (kg/m" + "\xB3" + ")", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);

            //add row
            cell1 = new PdfPCell(new Phrase("1", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M20", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.55", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("300-320", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.55", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("300-330", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.54", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("300-340", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);

            cell1 = new PdfPCell(new Phrase("2", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M25", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.50", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("320-360", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.50", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("330-370", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.49", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("330-370", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);


            cell1 = new PdfPCell(new Phrase("3", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("M30", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.45", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("370-390", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.45", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("370-390", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("0.43", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);
            cell1 = new PdfPCell(new Phrase("380-390", fontH11));
            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
            table1.AddCell(cell1);

            pdfDoc.Add(table1);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("1) Minimum cement content criteria to be followed as mentioned in clause for condition of exposure.");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("2) For onsite blending of cement with other cementitious materials, use OPC criteria for total cement content.");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);
            #endregion
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH2;
            paragraph.Add("Calculation of cement content and Fly Ash content");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            decimal wcratio = 0, cemtContent = 0;
            decimal water = 0;
            decimal flyAshContent = 0;
            for (int i = 0; i < 12; i++)
            {
                if (matDetailArr[i, 0].ToString().Contains("Ratio"))
                {
                    wcratio = Convert.ToDecimal(matDetailArr[i, 1].ToString());
                }
                if (matDetailArr[i, 0].ToString().Contains("Water"))
                {
                    water = Convert.ToDecimal(matDetailArr[i, 1].ToString());
                }
                if (matDetailArr[i, 0].ToString().Contains("Fly Ash"))
                {
                    flyAshContent = Convert.ToDecimal(matDetailArr[i, 1].ToString());
                }
            }
            cemtContent = water / wcratio;
            cemtContent = Math.Round(cemtContent, 0);
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("Water Cement Ratio   : " + wcratio.ToString("0.00"));
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);


            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("Cement Content : water content/(W/C ratio) " + cemtContent.ToString("000") + " kg/m" + "\xB3");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);


            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("Compare the cement content with the minimum cement content criteria and finalize.");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("From table 5 of IS 456, Minimum cement content for Mild exposure condition = 300 kg/Cum");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.IndentationLeft = 80;
            paragraph.Add(" =         kg / Cum > 300 kg / Cum, Hence, OK");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("a) In certain situations increase in cementitious material content may be warranted. The decision on     increase in cementitious material content and its percentage may be based on experience & Trials ");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("Cementitious material content                         = " + cemtContent.ToString("000") + "  kg/Cum");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("So, Water Cement Ratio                                = " + water.ToString() + " / " + cemtContent.ToString("000") + " = " + (water / cemtContent).ToString("0.00"));
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("Fly ash content or replacement level may be depend on various facotrs. Decide the replacement level based on;");
            paragraph.SpacingAfter = 3;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("1) Customer request");
            paragraph.SpacingAfter = 1;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("2) Arrangement of weigh batching on site.");
            paragraph.SpacingAfter = 1;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("3) Technical Stipulations in contract.");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("as ageneral guideline maximum allowable cement replacement by fly ash is 35% and GGBFS is 65%.");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            //paragraph = new Paragraph();
            //paragraph.Alignment = Element.ALIGN_LEFT;
            //paragraph.Font = fontH11;
            //paragraph.Add("for example");
            //paragraph.SpacingAfter = 5;
            //pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("Fly Ash @ 15 % of total cementitious material content = " + cemtContent.ToString("000") + " X 15 % " + " = " + (cemtContent * Convert.ToDecimal("0.15")).ToString("000") + " kg/Cum");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.IndentationLeft = 230;
            paragraph.Add("Hence " + flyAshContent.ToString("000") + " kg/Cum");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);


            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("Saving of cement while using flyash                               = " + cemtContent.ToString() + " - " + flyAshContent.ToString() + " = " + (cemtContent - flyAshContent).ToString() + " kg/Cum");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("Fly Ash being utilized                                                                            =  60 kg/Cum");
            paragraph.SpacingAfter = 10;
            pdfDoc.Add(paragraph);

            #endregion
            #region V page

            pdfDoc.NewPage();

            pdfDoc.Add(new Paragraph(" ", fontH11));
            pdfDoc.Add(new Paragraph(" ", fontH11));

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH2;
            paragraph.Add("Proportion of volume of coarse aggregate and fine aggregate content for I m" + "\xB3");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("Therefor, Volume of coarse aggregate  = " + wcratio.ToString("0.00") + " x 1.0 = " + wcratio.ToString("0.00"));
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("Volume of fine aggregate content        =  1 – " + wcratio.ToString("0.00") + " = " + (1 - wcratio).ToString("0.00"));
            paragraph.SpacingAfter = 10;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("Mix Calculations : ");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("a) Volume of concrete                                   = 1 Cum ");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);
            #region cement
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("b) Volume of cement                                     = (Mass of cement/Sp. Gravity of cement) * (1/1000)");
            paragraph.SpacingAfter = 1;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            // cement
            string tmpStr;
            decimal btot = 0, ctot = 0, dtot = 0, etot = 0;
            tmpStr = "                                                                       = (";
            for (int i = 0; i < 12; i++)
            {
                if (matDetailArr[i, 0].ToString() == "Cement")
                {
                    tmpStr += matDetailArr[i, 1].ToString() + " / " + matDetailArr[i, 2].ToString() + " * (1/1000) ";
                    btot = Convert.ToDecimal(matDetailArr[i, 1].ToString()) / Convert.ToDecimal(matDetailArr[i, 2].ToString()) * 1 / 1000;
                    break;
                }
            }

            paragraph.Add(tmpStr);
            paragraph.SpacingAfter = 1;
            pdfDoc.Add(paragraph);
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("                                                                       = " + btot.ToString("0.000") + " Cum ");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);
            tmpStr = "";
            #endregion
            pdfDoc.Add(new Paragraph(" ", fontH11));
            #region flyash
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("c) Volume of Fly Ash                                    = (Mass of FlyAsh/Sp. Gravity of FlyAsh) * (1/1000)");
            paragraph.SpacingAfter = 1;
            pdfDoc.Add(paragraph);

            //if (flyashUsed != "" &&  flyashUsed !="---")
            //{
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;

            for (int i = 0; i < 12; i++)
            {
                if (matDetailArr[i, 0].ToString() == "Fly Ash")
                {
                    tmpStr = "                                                                       = (";
                    tmpStr += matDetailArr[i, 1].ToString() + " / " + matDetailArr[i, 2].ToString() + " * (1/1000) ";
                    ctot = Convert.ToDecimal(matDetailArr[i, 1].ToString()) / Convert.ToDecimal(matDetailArr[i, 2].ToString()) * 1 / 1000;
                    break;
                }
            }
            paragraph.Add(tmpStr);
            paragraph.SpacingAfter = 1;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("                                                                       = " + ctot.ToString("0.000") + " Cum ");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            //}            
            tmpStr = "";
            #endregion
            pdfDoc.Add(new Paragraph(" ", fontH11));
            #region Water
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("d) Volume of water                                       = (Mass of  water/Sp. Gravity of water) * (1/1000)");
            paragraph.SpacingAfter = 1;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;

            tmpStr = "                                                                       = (";
            for (int i = 0; i < 12; i++)
            {
                if (matDetailArr[i, 0].ToString() == "Water")
                {
                    tmpStr += matDetailArr[i, 1].ToString() + " / " + matDetailArr[i, 2].ToString() + " * (1/1000) ";
                    dtot = Convert.ToDecimal(matDetailArr[i, 1].ToString()) / Convert.ToDecimal(matDetailArr[i, 2].ToString()) * 1 / 1000;
                    break;
                }
            }

            paragraph.Add(tmpStr);
            paragraph.SpacingAfter = 1;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("                                                                       = " + dtot.ToString("0.000") + " Cum ");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);
            tmpStr = "";
            #endregion
            pdfDoc.Add(new Paragraph(" ", fontH11));
            #region All in Aggt
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("e) Volume of all in aggregate                        = (a - ( b + c + d ) ");
            paragraph.SpacingAfter = 1;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            etot = 1 - (btot + ctot + dtot);
            paragraph.Add("                                                                       = 1 -( " + btot.ToString("0.000") + " + " + ctot.ToString("0.000") + " + " + dtot.ToString("0.000") + ")");

            paragraph.SpacingAfter = 1;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("                                                                       = " + etot.ToString("0.000") + " Cum ");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);
            #endregion
            int mcnt = 1;
            if (flg40 == true)
            {
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH11;
                paragraph.Add(mcnt.ToString() + ") Mass of coarse aggregate 40 mm              = e x Volume of coarse aggregate x Sp. Gravity of C. Agg.x1000 ");
                mcnt++;
                paragraph.SpacingAfter = 1;
                pdfDoc.Add(paragraph);

                tmpStr = "                                                                       = ";

                dtot = 0;
                for (int i = 0; i < 12; i++)
                {
                    if (matDetailArr[i, 0].ToString() == "40 mm")
                    {

                        tmpStr += etot.ToString("0.000") + " X " + matDetailArr[i, 1].ToString() + " X " + matDetailArr[i, 2].ToString();
                        dtot = etot * Convert.ToDecimal(matDetailArr[i, 1].ToString()) / 100 * Convert.ToDecimal(matDetailArr[i, 2].ToString()) * 1000;

                        break;
                    }
                }
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH11;
                paragraph.Add(tmpStr);
                paragraph.SpacingAfter = 1;
                pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH11;
                paragraph.Add("                                                                       = " + dtot.ToString("000") + " kg ");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);
            }
            pdfDoc.Add(new Paragraph(" ", fontH11));
            if (flg20 == true)
            {
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH11;
                paragraph.Add(mcnt.ToString() + ") Mass of coarse aggregate 20 mm              = e x Volume of coarse aggregate x Sp. Gravity of C. Agg.x1000 ");
                mcnt++;
                paragraph.SpacingAfter = 1;
                pdfDoc.Add(paragraph);


                dtot = 0;
                for (int i = 0; i < 12; i++)
                {
                    if (matDetailArr[i, 0].ToString() == "20 mm")
                    {
                        tmpStr = "                                                                       = ";
                        tmpStr += etot.ToString("0.000") + " X " + matDetailArr[i, 1].ToString() + " X " + matDetailArr[i, 2].ToString();
                        dtot = etot * Convert.ToDecimal(matDetailArr[i, 1].ToString()) / 100 * Convert.ToDecimal(matDetailArr[i, 2].ToString()) * 1000;
                        break;
                    }
                }
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH11;
                paragraph.Add(tmpStr);
                paragraph.SpacingAfter = 1;
                pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH11;
                paragraph.Add("                                                                       = " + dtot.ToString("000") + " kg ");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);
            }
            pdfDoc.Add(new Paragraph(" ", fontH11));
            if (flg10 == true)
            {
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH11;
                paragraph.Add(mcnt.ToString() + ") Mass of coarse aggregate 10 mm              =  e  x Volume of coarse aggregate x Sp. Gravity of C. Agg.x1000 ");
                paragraph.SpacingAfter = 1;
                pdfDoc.Add(paragraph);
                mcnt++;

                dtot = 0;
                for (int i = 0; i < 12; i++)
                {
                    if (matDetailArr[i, 0].ToString() == "10 mm")
                    {
                        tmpStr = "                                                                       = ";
                        tmpStr += etot.ToString("0.000") + " X " + matDetailArr[i, 1].ToString() + " X " + matDetailArr[i, 2].ToString();
                        dtot = etot * Convert.ToDecimal(matDetailArr[i, 1].ToString()) / 100 * Convert.ToDecimal(matDetailArr[i, 2].ToString()) * 1000;
                        break;
                    }
                }
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH11;
                paragraph.Add(tmpStr);
                paragraph.SpacingAfter = 1;
                pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH11;
                paragraph.Add("                                                                       = " + dtot.ToString("000") + " kg ");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);
            }
            pdfDoc.Add(new Paragraph(" ", fontH11));
            if (flgNS == true)
            {
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH11;
                paragraph.Add(mcnt.ToString() + ") Mass of fine aggregate (Natural Sand)      = e x Volume of fine aggregate x Sp. Gravity of F. Agg.x1000 ");
                paragraph.SpacingAfter = 1;
                pdfDoc.Add(paragraph);
                mcnt++;
                dtot = 0;
                for (int i = 0; i < 12; i++)
                {
                    if (matDetailArr[i, 0].ToString() == "Natural Sand")
                    {
                        tmpStr = "                                                                       = ";
                        tmpStr += etot.ToString("0.000") + " X " + matDetailArr[i, 1].ToString() + " X " + matDetailArr[i, 2].ToString();
                        dtot = etot * Convert.ToDecimal(matDetailArr[i, 1].ToString()) / 100 * Convert.ToDecimal(matDetailArr[i, 2].ToString()) * 1000;
                        break;
                    }
                }
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH11;
                paragraph.Add(tmpStr);
                paragraph.SpacingAfter = 1;
                pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH11;
                paragraph.Add("                                                                       = " + dtot.ToString("000") + " kg ");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);

            }
            pdfDoc.Add(new Paragraph(" ", fontH11));
            if (flgCS == true)
            {
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH11;
                paragraph.Add(mcnt.ToString() + ") Mass of fine aggregate (Crushed Sand)      = e x Volume of fine aggregate x Sp. Gravity of F. Agg.x1000 ");
                paragraph.SpacingAfter = 1;
                pdfDoc.Add(paragraph);
                mcnt++;
                dtot = 0;
                for (int i = 0; i < 12; i++)
                {
                    if (matDetailArr[i, 0].ToString() == "Crushed Sand")
                    {
                        tmpStr = "                                                                       = ";
                        tmpStr += etot.ToString("0.000") + " X " + matDetailArr[i, 1].ToString() + " X " + matDetailArr[i, 2].ToString();
                        dtot = etot * Convert.ToDecimal(matDetailArr[i, 1].ToString()) / 100 * Convert.ToDecimal(matDetailArr[i, 2].ToString()) * 1000;
                        break;
                    }
                }

                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH11;
                paragraph.Add(tmpStr);
                paragraph.SpacingAfter = 1;
                pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH11;
                paragraph.Add("                                                                       = " + dtot.ToString("000") + " kg ");
                paragraph.SpacingAfter = 10;
                pdfDoc.Add(paragraph);
            }

            pdfDoc.Add(new Paragraph(" ", fontH11));
            ///
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH2;
            paragraph.Add("Mix Proportion");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH2;
            paragraph.Add("Slump Achieved at the time of trial");
            paragraph.SpacingAfter = 5;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            if (retSlump[0] == "")
                retSlump[0] = "0";

            if (retSlump[1] == "")
                retSlump[1] = "0";

            if (retSlump[2] == "")
                retSlump[2] = "0";

            Int32 xx = Convert.ToInt32(retSlump[0].ToString()) + Convert.ToInt32(retSlump[1].ToString()) + Convert.ToInt32(retSlump[2].ToString());
            xx = xx / 3;

            if (flgRention == true)
            {
                paragraph.Add("Slump  Achieved   = " + xx.ToString("###") + "  After 60 nminutes Slump achieved = " + xx.ToString("###"));
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);

            }
            else
            {
                paragraph.Add("Slump  Achieved   = " + xx.ToString("###"));
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);
            }

            #endregion
            #region VI
            pdfDoc.NewPage();

            pdfDoc.Add(new Paragraph(" ", fontH11));
            pdfDoc.Add(new Paragraph(" ", fontH11));

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH2;
            paragraph.Add("Compressive Strength:");
            paragraph.SpacingAfter = 3;
            pdfDoc.Add(paragraph);
            string str3 = "NA", str7 = "NA", str28 = "NA";
            var cubeCast = dc.OtherCubeTestView(ReferenceNo, "MF", 0, TrialId, "Trial", false, false);
            foreach (var c in cubeCast)
            {
                if (Convert.ToInt32(c.Days_tint) == 3)
                {
                    str3 = c.Avg_var;
                }
                else if (Convert.ToInt32(c.Days_tint) == 7)
                {
                    str7 = c.Avg_var;
                }
                else if (Convert.ToInt32(c.Days_tint) == 28)
                {
                    str28 = c.Avg_var;
                }
            }
            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("A) 3 days Compressive strength achieved at our laboratory  = " + str3 + " N/mm²");
            paragraph.SpacingAfter = 3;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("B) 7 days Compressive strength achieved at our laboratory  = " + str7 + " N/mm²");
            paragraph.SpacingAfter = 3;
            pdfDoc.Add(paragraph);

            paragraph = new Paragraph();
            paragraph.Alignment = Element.ALIGN_LEFT;
            paragraph.Font = fontH11;
            paragraph.Add("C) 28 days Compressive strength achieved at our laboratory = " + str28 + " N/mm²");
            paragraph.SpacingAfter = 3;
            pdfDoc.Add(paragraph);


            pdfDoc.Add(new Paragraph(" ", fontH11));
            pdfDoc.Add(new Paragraph(" ", fontH11));
            pdfDoc.Add(new Paragraph("Authorized Signatory ", fontH11));

            bool sign = false;

            var RecNo = dc.ReportStatus_View("Mix Design", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
            foreach (var r in RecNo)
            {
                if (r.MFINWD_ApprovedBy_tint != null && r.MFINWD_ApprovedBy_tint.ToString() != "" && r.MFINWD_ApprovedBy_tint > 0)
                {
                    #region Signature
                    //if (RemotelyAppv == true)
                    //{
                    if (r.MFINWD_ApprovedBy_tint > 0)
                    {

                        var data = dc.Sign_View(r.MFINWD_ApprovedBy_tint);
                        foreach (var g in data)
                        {
                            byte[] imageBytes = g.UserSign.ToArray();
                            MemoryStream mxs1 = new MemoryStream(imageBytes);
                            iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                            table1 = new PdfPTable(1);
                            table1.WidthPercentage = 100;
                            table1.SetWidths(new float[] { 1.7f });
                            PdfPCell cell = new PdfPCell(image);
                            cell.FixedHeight = 25;
                            cell.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell);
                            pdfDoc.Add(table1);
                            //bytes = memoryStream.ToArray();

                            sign = true;
                            break;
                        }
                    }
                    //}
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH11));
                        pdfDoc.Add(new Paragraph(" ", fontH11));
                    }

                    var U = dc.User_View(r.MFINWD_ApprovedBy_tint, -1, "", "", "");
                    foreach (var r1 in U)
                    {
                        pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH11));
                        if (r1.USER_Designation_var.Contains("(") == false)
                            pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                        else
                            pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                    }
                }
                else
                {
                    pdfDoc.Add(new Paragraph(" ", fontH11));
                    pdfDoc.Add(new Paragraph(" ", fontH11));
                    pdfDoc.Add(new Paragraph(" ", fontH11));
                }
            }
            #endregion
            pdfDoc.Close();
            string pdfPath = @Subfoldername1 + "/" + fileName;
            DownloadReport(fileName, pdfPath);
        }
        #endregion

        #region Pavement
        public void Pavement_CS_PDFReport(string ReferenceNo, string Action)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("PT", ReferenceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "PT_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Pavement";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername + "/CS";
                if (!Directory.Exists(@Subfoldername1))
                    Directory.CreateDirectory(@Subfoldername1);
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "PT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                //PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "PT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action == "Automail" || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data
                // float[] widths = new float[] { 18f, 1f, 52f, 15f, 1f, 15f };
                float[] widths = new float[] { 18f, 1f, 50f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                DateTime ApproveDt = new DateTime();
                string Witnessby = string.Empty, CustName = "", SiteName = "", Address = "";
                int TestId = 0;
                bool RemotelyAppv = false;

                int Approveby = 0;
                string supersedeNote = "";
                DateTime? dtTesting = null;
                var pt = dc.ReportStatus_View("Pavement Block Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var pavmt in pt)
                {
                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        CustName = pavmt.RptCL_Name_var;
                        SiteName = pavmt.RptST_Name_var;
                        Address = pavmt.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = pavmt.CL_Name_var;
                        SiteName = pavmt.SITE_Name_var;
                        Address = pavmt.CL_OfficeAddress_var;
                    }

                    SiteRouteId = Convert.ToInt32(pavmt.SITE_Route_Id);
                    if (pavmt.PTINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(pavmt.PTINWD_ApprovedBy_tint);
                    }
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //     paragraph.Add(" "); pdfDoc.Add(paragraph);
                    //if (pavmt.PTINWD_Status_tint == 4 || pavmt.PTINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);

                    if (pavmt.PTINWD_WitnessBy_var != null && pavmt.PTINWD_WitnessBy_var != "")
                    {
                        Witnessby = pavmt.PTINWD_WitnessBy_var;
                    }
                    if (Convert.ToString(pavmt.PTINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(pavmt.PTINWD_ApprovedDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 5;
                    paragraph.Add("Precast Concrete Blocks for Paving - Compressive Strength");
                    if (pavmt.PTINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{

                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    if (pavmt.PTINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }


                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("PT", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("PT - " + pavmt.PTINWD_SetOfRecord_var, fontH1));
                    string strRecNo = pavmt.PTINWD_SetOfRecord_var;
                    if (pavmt.PTINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (pavmt.PTINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (pavmt.PTINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(pavmt.PTINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + pavmt.PTINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Nature of work", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(pavmt.PTINWD_WorkingNature_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.SITE_MonthlyBillingStatus_bit == true && pavmt.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (pavmt.PTINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(pavmt.PTINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(pavmt.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);




                    Cust_Namecell = new PdfPCell(new Phrase("Grade of concrete", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(pavmt.PTINWD_Grade_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.PTINWD_ReceivedDate_dt != null)
                    {
                        DateTime cDT = Convert.ToDateTime(pavmt.PTINWD_ReceivedDate_dt);
                        string ReceiptDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(ReceiptDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(pavmt.PTINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Casting", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.PTINWD_CastingDate_dt != null && Convert.ToString(pavmt.PTINWD_CastingDate_dt) != "NA")
                    {
                        //DateTime rDT = Convert.ToDateTime(pavmt.PTINWD_CastingDate_dt);
                        string CastingDt = DateTime.ParseExact(pavmt.PTINWD_CastingDate_dt.ToString(), "dd/MM/yyyy", null).ToString("dd-MMM-yyyy");// rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(CastingDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("NA", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(pavmt.CONT_Name_var + " - " + pavmt.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.PTINWD_TestingDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(pavmt.PTINWD_TestingDate_dt);
                        DateTime cDT = Convert.ToDateTime(pavmt.PTINWD_TestingDate_dt);
                        string TestingDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(TestingDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    TestId = Convert.ToInt32(pavmt.PTINWD_TEST_Id);
                    if (pavmt.PTINWD_RemoteApproved == true && pavmt.PTINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }



                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //if (Convert.ToString(pavmt.PTINWD_IssueDate_dt) != "")
                    //{
                    //    DateTime rDT = Convert.ToDateTime(pavmt.PTINWD_IssueDate_dt);
                    //    Cust_Namecell = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH1));
                    //}
                    if (Convert.ToString(pavmt.PTINWD_ApprovedDate_dt) != "")
                    {
                        DateTime rDT = Convert.ToDateTime(pavmt.PTINWD_ApprovedDate_dt);
                        Cust_Namecell = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(pavmt.PTINWD_ULRNo_var) != "" && Convert.ToString(pavmt.PTINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(pavmt.PTINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //
                }
                //MaindataTable.SpacingAfter = 2;
                pdfDoc.Add(MaindataTable);

                #endregion

                var PT_CS = dc.Pavement_Test_View(ReferenceNo, TestId, "CS").ToList();
                var count = PT_CS.Count();

                //pdfDoc.Add(Chunk.NEWLINE);
                //table1.SpacingBefore = 10;
                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(new Paragraph(" ", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                #region tbldata

                PdfPCell cell1;
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(table1);
                table1 = new PdfPTable(10);
                table1.WidthPercentage = 100;
                int j = 0;
                for (int i = 0; i < count; i++)
                {
                    if (i == 0)
                    {
                        table1.SetTotalWidth(new float[] { 5f, 15f, 8f, 10f, 10f, 10f, 12f, 10f, 10f, 10f });
                        cell1 = new PdfPCell(new Phrase("Sr.No", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("ID Mark", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Age \n \n (Days)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Plan Area \n\n (mm²)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Actual Thickness (mm)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Weight \n\n (kg)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Density \n\n(kg/m³)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Load \n\n(kN)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Comp Strength (N/mm²)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Average \n\n (N/mm²)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    string srNo = Convert.ToString(i + 1);
                    cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(PT_CS[i].IdMark_var, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_CS[i].Age_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_CS[i].PlanArea_num), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_CS[i].ActualThickness_int), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_CS[i].Weight_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_CS[i].Density_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_CS[i].Reading_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_CS[i].CompStr_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    if (j == 0)
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_CS[i].PTINWD_AvgStr_var), fontH1));
                        cell1.Rowspan = count;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        table1.AddCell(cell1);
                    }
                    j++;
                }
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SpacingAfter = 5;
                pdfDoc.Add(table1);
                #endregion

                //table1.SpacingBefore = 10;

                #region iscode/remarks
                table1 = new PdfPTable(2);
                table1.SpacingAfter = 5;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                var iscd = dc.ISCode_View(0, "", "PT", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                serial_no = 0;
                var re = dc.Pavement_Test_Remark_View("", ReferenceNo, 0, TestId).ToList();
                if (re.Count > 0)
                {
                    foreach (var r in re)
                    {
                        var remark = dc.Pavement_Test_Remark_View("", "", Convert.ToInt32(r.RemarkId_int), TestId);
                        foreach (var remk in remark)
                        {
                            if (serial_no == 0)
                            {
                                //pdfDoc.Add(new Paragraph("Remarks :", fontH2));
                                cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(serial_no + ")" + remk.Remark_var.ToString(), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remk.Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {

                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 8;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);

                #endregion

                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 12;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("Pavement Block Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
                    foreach (var r in RecNo)
                    {
                        if (r.PTINWD_ApprovedBy_tint != null && r.PTINWD_ApprovedBy_tint.ToString() != "" && r.PTINWD_ApprovedBy_tint > 0)
                        {
                            var U = dc.User_View(r.PTINWD_ApprovedBy_tint, -1, "", "", "");
                            foreach (var r1 in U)
                            {

                                pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                                if (r1.USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Automail" || Action == "Email")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }
                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (r.PTINWD_CheckedBy_tint != null && r.PTINWD_CheckedBy_tint.ToString() != "" && r.PTINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(r.PTINWD_CheckedBy_tint, -1, "", "", "");
                            foreach (var loginusr in lgin)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by : " + loginusr.USER_Name_var.ToString(), fontH1));
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                pdfDoc.Add(new Paragraph("Page 1 of 1", fontH1));
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }

            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void Pavement_FS_PDFReport(string ReferenceNo, string Action)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("PT", ReferenceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "PT_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Pavement";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername + "/FS";
                if (!Directory.Exists(@Subfoldername1))
                    Directory.CreateDirectory(@Subfoldername1);
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "PT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                //PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "PT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action == "Automail" || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data
                float[] widths = new float[] { 18f, 1f, 52f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                DateTime ApproveDt = new DateTime();
                string Witnessby = string.Empty;
                int TestId = 0;
                bool RemotelyAppv = false;

                int Approveby = 0;
                string supersedeNote = "", CustName = "", SiteName = "", Address = "";
                DateTime? dtTesting = null;
                var pt = dc.ReportStatus_View("Pavement Block Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var pavmt in pt)
                {
                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        CustName = pavmt.RptCL_Name_var;
                        SiteName = pavmt.RptST_Name_var;
                        Address = pavmt.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = pavmt.CL_Name_var;
                        SiteName = pavmt.SITE_Name_var;
                        Address = pavmt.CL_OfficeAddress_var;
                    }

                    SiteRouteId = Convert.ToInt32(pavmt.SITE_Route_Id);

                    if (pavmt.PTINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(pavmt.PTINWD_ApprovedBy_tint);
                    }

                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //   paragraph.Add(" "); pdfDoc.Add(paragraph);
                    //if (pavmt.PTINWD_Status_tint == 4 || pavmt.PTINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);
                    //
                    if (pavmt.PTINWD_WitnessBy_var != null && pavmt.PTINWD_WitnessBy_var != string.Empty)
                    {
                        Witnessby = pavmt.PTINWD_WitnessBy_var;
                    }
                    if (Convert.ToString(pavmt.PTINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(pavmt.PTINWD_ApprovedDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 5;
                    paragraph.Add("Precast Concrete Blocks for Paving - Flexural Strength");
                    if (pavmt.PTINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{

                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    if (pavmt.PTINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("PT", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("PT - " + pavmt.PTINWD_SetOfRecord_var, fontH1));
                    string strRecNo = pavmt.PTINWD_SetOfRecord_var;
                    if (pavmt.PTINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (pavmt.PTINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (pavmt.PTINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(pavmt.PTINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + pavmt.PTINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Nature of work", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(pavmt.PTINWD_WorkingNature_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.SITE_MonthlyBillingStatus_bit == true && pavmt.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (pavmt.PTINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(pavmt.PTINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(pavmt.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Grade of concrete", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(pavmt.PTINWD_Grade_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.PTINWD_ReceivedDate_dt != null)
                    {
                        DateTime cDT = Convert.ToDateTime(pavmt.PTINWD_ReceivedDate_dt);
                        string ReceiptDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(ReceiptDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(pavmt.PTINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Casting", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.PTINWD_CastingDate_dt != null && Convert.ToString(pavmt.PTINWD_CastingDate_dt) != "NA")
                    {
                        //  DateTime rDT = Convert.ToDateTime(pavmt.PTINWD_CastingDate_dt);
                        string CastingDt = DateTime.ParseExact(pavmt.PTINWD_CastingDate_dt.ToString(), "dd/MM/yyyy", null).ToString("dd-MMM-yyyy"); //rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(CastingDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("NA", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    TestId = Convert.ToInt32(pavmt.PTINWD_TEST_Id);
                    if (pavmt.PTINWD_RemoteApproved == true && pavmt.PTINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }

                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(pavmt.CONT_Name_var + " - " + pavmt.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.PTINWD_TestingDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(pavmt.PTINWD_TestingDate_dt);
                        DateTime cDT = Convert.ToDateTime(pavmt.PTINWD_TestingDate_dt);
                        string TestingDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(TestingDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //if (Convert.ToString(pavmt.PTINWD_IssueDate_dt) != "")
                    //{
                    //    DateTime rDT = Convert.ToDateTime(pavmt.PTINWD_IssueDate_dt);
                    //    Cust_Namecell = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH1));
                    //}
                    if (Convert.ToString(pavmt.PTINWD_IssueDate_dt) != "")
                    {
                        DateTime rDT = Convert.ToDateTime(pavmt.PTINWD_ApprovedDate_dt);
                        Cust_Namecell = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //ULR No
                    if (Convert.ToString(pavmt.PTINWD_ULRNo_var) != "" && Convert.ToString(pavmt.PTINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(pavmt.PTINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //
                }
                //MaindataTable.SpacingAfter = 2;
                pdfDoc.Add(MaindataTable);

                #endregion

                var PT_FS = dc.Pavement_Test_View(ReferenceNo, TestId, "FS").ToList();
                var count = PT_FS.Count();

                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);
                #region tbldata

                PdfPCell cell1;
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(table1);
                table1 = new PdfPTable(7);
                table1.WidthPercentage = 100;
                int j = 0;
                for (int i = 0; i < count; i++)
                {
                    if (i == 0)
                    {
                        table1.SetTotalWidth(new float[] { 5f, 15f, 6f, 10f, 10f, 10f, 10f });
                        cell1 = new PdfPCell(new Phrase("Sr.No", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("ID Mark", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Age\n (Days)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Thickness\n (mm)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Breaking Load \n (kN)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Flexural Strength \n (N/mm²)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Average \n (N/mm²)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    string srNo = Convert.ToString(i + 1);
                    cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(PT_FS[i].IdMark_var, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_FS[i].Age_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_FS[i].Thickness_var).Replace("mm", ""), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_FS[i].BreakingLoad_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_FS[i].FlexuralStrength_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    if (j == 0)
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_FS[i].PTINWD_AvgStr_var), fontH1));
                        cell1.Rowspan = count;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        table1.AddCell(cell1);
                    }
                    j++;
                }
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SpacingAfter = 5;
                pdfDoc.Add(table1);
                #endregion

                #region iscode
                table1 = new PdfPTable(2);
                table1.SpacingAfter = 5;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                var iscd = dc.ISCode_View(0, "", "PT", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                serial_no = 0;
                var re = dc.Pavement_Test_Remark_View("", ReferenceNo, 0, TestId);
                foreach (var r in re)
                {
                    var remark = dc.Pavement_Test_Remark_View("", "", Convert.ToInt32(r.RemarkId_int), TestId);
                    foreach (var remk in remark)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("Remarks :", fontH2));
                            cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph(serial_no + ")" + remk.Remark_var.ToString(), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(remk.Remark_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                }
                if (supersedeNote != "")
                {
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 8;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);

                #endregion

                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 12;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);
                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("Pavement Block Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
                    foreach (var r in RecNo)
                    {
                        if (r.PTINWD_ApprovedBy_tint != null && r.PTINWD_ApprovedBy_tint.ToString() != "" && r.PTINWD_ApprovedBy_tint > 0)
                        {
                            var U = dc.User_View(r.PTINWD_ApprovedBy_tint, -1, "", "", "");
                            foreach (var r1 in U)
                            {

                                pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                                if (r1.USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Automail" || Action == "Email")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }
                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (r.PTINWD_CheckedBy_tint != null && r.PTINWD_CheckedBy_tint.ToString() != "" && r.PTINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(r.PTINWD_CheckedBy_tint, -1, "", "", "");
                            foreach (var loginusr in lgin)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by : " + loginusr.USER_Name_var.ToString(), fontH1));
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);


                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                pdfDoc.Add(new Paragraph("Page 1 of 1", fontH1));
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }

            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void Pavement_TS_PDFReport(string ReferenceNo, string Action)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("PT", ReferenceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "PT_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Pavement";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername + "/TS";
                if (!Directory.Exists(@Subfoldername1))
                    Directory.CreateDirectory(@Subfoldername1);
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "PT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                //PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "PT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);
                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action == "Automail" || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data
                float[] widths = new float[] { 18f, 1f, 52f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                DateTime ApproveDt = new DateTime();
                string Witnessby = string.Empty;
                int TestId = 0;
                bool RemotelyAppv = false;
                int Approveby = 0;
                string supersedeNote = "", CustName = "", SiteName = "", Address = "";
                DateTime? dtTesting = null;
                var pt = dc.ReportStatus_View("Pavement Block Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var pavmt in pt)
                {

                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        CustName = pavmt.RptCL_Name_var;
                        SiteName = pavmt.RptST_Name_var;
                        Address = pavmt.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = pavmt.CL_Name_var;
                        SiteName = pavmt.SITE_Name_var;
                        Address = pavmt.CL_OfficeAddress_var;
                    }
                    SiteRouteId = Convert.ToInt32(pavmt.SITE_Route_Id);

                    if (pavmt.PTINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(pavmt.PTINWD_ApprovedBy_tint);
                    }

                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //  paragraph.Add(" "); pdfDoc.Add(paragraph);
                    //if (pavmt.PTINWD_Status_tint == 4 || pavmt.PTINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);

                    if (pavmt.PTINWD_WitnessBy_var != null && pavmt.PTINWD_WitnessBy_var != string.Empty)
                    {
                        Witnessby = pavmt.PTINWD_WitnessBy_var;
                    }
                    if (Convert.ToString(pavmt.PTINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(pavmt.PTINWD_ApprovedDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                    paragraph.Add("Precast Concrete Blocks for Paving - Splitting Tensile Strength");
                    if (pavmt.PTINWD_Status_tint < 6 || Action != "Print")
                    {
                        // paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{

                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    if (pavmt.PTINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("PT", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("PT - " + pavmt.PTINWD_SetOfRecord_var, fontH1));
                    string strRecNo = pavmt.PTINWD_SetOfRecord_var;
                    if (pavmt.PTINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (pavmt.PTINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (pavmt.PTINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(pavmt.PTINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + pavmt.PTINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Nature of work", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(pavmt.PTINWD_WorkingNature_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.SITE_MonthlyBillingStatus_bit == true && pavmt.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (pavmt.PTINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(pavmt.PTINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(pavmt.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);




                    Cust_Namecell = new PdfPCell(new Phrase("Grade of concrete", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(pavmt.PTINWD_Grade_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.PTINWD_ReceivedDate_dt != null)
                    {
                        DateTime cDT = Convert.ToDateTime(pavmt.PTINWD_ReceivedDate_dt);
                        string ReceiptDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(ReceiptDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(pavmt.PTINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Casting", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.PTINWD_CastingDate_dt != null && Convert.ToString(pavmt.PTINWD_CastingDate_dt) != "NA")
                    {
                        // DateTime rDT = Convert.ToDateTime(pavmt.PTINWD_CastingDate_dt);
                        string CastingDt = DateTime.ParseExact(pavmt.PTINWD_CastingDate_dt.ToString(), "dd/MM/yyyy", null).ToString("dd-MMM-yyyy");// rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(CastingDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("NA", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    TestId = Convert.ToInt32(pavmt.PTINWD_TEST_Id);
                    if (pavmt.PTINWD_RemoteApproved == true && pavmt.PTINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }

                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(pavmt.CONT_Name_var + " - " + pavmt.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.PTINWD_TestingDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(pavmt.PTINWD_TestingDate_dt);
                        DateTime cDT = Convert.ToDateTime(pavmt.PTINWD_TestingDate_dt);
                        string TestingDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(TestingDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //if (Convert.ToString(pavmt.PTINWD_IssueDate_dt) != "")
                    //{
                    //    DateTime rDT = Convert.ToDateTime(pavmt.PTINWD_IssueDate_dt);
                    //    Cust_Namecell = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH1));
                    //}
                    if (Convert.ToString(pavmt.PTINWD_ApprovedDate_dt) != "")
                    {
                        DateTime rDT = Convert.ToDateTime(pavmt.PTINWD_ApprovedDate_dt);
                        Cust_Namecell = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(pavmt.PTINWD_ULRNo_var) != "" && Convert.ToString(pavmt.PTINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(pavmt.PTINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //
                }
                //MaindataTable.SpacingAfter = 2;
                pdfDoc.Add(MaindataTable);

                #endregion

                var PT_TS = dc.Pavement_Test_View(ReferenceNo, TestId, "TS").ToList();
                var count = PT_TS.Count();

                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);

                #region tbldata
                PdfPCell cell1;

                int j = 0;

                table1 = new PdfPTable(10);
                table1.WidthPercentage = 100;
                table1.SetTotalWidth(new float[] { 5f, 15f, 6f, 10f, 10f, 12f, 12f, 10f, 10f, 10f });
                string[] headers = { "Sr no.", "ID Mark", "Age \n\n (Days)", "Thickness \n\n\n (mm)", "Failure Load \n\n (N)", "Mean Failure", "Failure Load per unit Length \n (N/mm)", "Splitting tensile strength (N/mm²)", "Average splitting strength (N/mm²) ", };
                for (int h = 0; h < headers.Count(); h++)
                {
                    cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    if (h == 5)
                    {
                        cell1.Colspan = 2;
                    }
                    else
                    {
                        cell1.Rowspan = 2;
                    }
                    table1.AddCell(cell1);
                }
                cell1 = new PdfPCell(new Phrase("Failure Length \n (mm)", fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Failure Thickness \n (mm)", fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                for (int i = 0; i < count; i++)
                {
                    string srNo = Convert.ToString(i + 1);
                    cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(PT_TS[i].IdMark_var, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_TS[i].Age_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_TS[i].Thickness_var.Replace("mm", "")), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_TS[i].FailureLoad_num), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_TS[i].FailureLength_num), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_TS[i].FailureThickness_int), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_TS[i].FailureLoadPerUnitLen_num), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_TS[i].TensileStrength_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    if (j == 0)
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_TS[i].PTINWD_AvgStr_var), fontH1));
                        cell1.Rowspan = count;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        table1.AddCell(cell1);
                    }
                    j++;
                }
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SpacingAfter = 5;
                pdfDoc.Add(table1);
                #endregion

                #region iscode
                table1 = new PdfPTable(2);
                table1.SpacingAfter = 5;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 3f, 97 });
                PdfPCell cell2;
                int serial_no = 0;
                var iscd = dc.ISCode_View(0, "", "PT", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell2);

                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                serial_no = 0;
                var re = dc.Pavement_Test_Remark_View("", ReferenceNo, 0, TestId);
                foreach (var r in re)
                {
                    var remark = dc.Pavement_Test_Remark_View("", "", Convert.ToInt32(r.RemarkId_int), TestId);
                    foreach (var remk in remark)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("Remarks :", fontH2));
                            cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                            cell2.Colspan = 2;
                            cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell2);

                        cell2 = new PdfPCell(new Phrase(remk.Remark_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        cell2.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell2);
                    }
                }
                if (supersedeNote != "")
                {
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 8;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);

                #endregion

                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 12;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }

                    var RecNo = dc.ReportStatus_View("Pavement Block Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
                    foreach (var r in RecNo)
                    {
                        if (r.PTINWD_ApprovedBy_tint != null && r.PTINWD_ApprovedBy_tint.ToString() != "" && r.PTINWD_ApprovedBy_tint > 0)
                        {
                            var U = dc.User_View(r.PTINWD_ApprovedBy_tint, -1, "", "", "");
                            foreach (var r1 in U)
                            {

                                pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                                if (r1.USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Automail" || Action == "Email")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }
                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (r.PTINWD_CheckedBy_tint != null && r.PTINWD_CheckedBy_tint.ToString() != "" && r.PTINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(r.PTINWD_CheckedBy_tint, -1, "", "", "");
                            foreach (var loginusr in lgin)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by : " + loginusr.USER_Name_var.ToString(), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }

                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);


                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                pdfDoc.Add(new Paragraph("Page 1 of 1", fontH1));
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }

            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void Pavement_WA_PDFReport(string ReferenceNo, string Action)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("PT", ReferenceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "PT_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Pavement";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername + "/WA";
                if (!Directory.Exists(@Subfoldername1))
                    Directory.CreateDirectory(@Subfoldername1);
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "PT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                //PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "PT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action == "Automail" || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);

                #region data
                // float[] widths = new float[] { 18f, 1f, 52f, 15f, 1f, 15f };
                float[] widths = new float[] { 18f, 1f, 50f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                DateTime ApproveDt = new DateTime();
                int TestId = 0;
                string Witnessby = string.Empty;
                bool RemotelyAppv = false;

                int Approveby = 0;
                string supersedeNote = "", CustName = "", SiteName = "", Address = "";
                DateTime? dtTesting = null;
                var pt = dc.ReportStatus_View("Pavement Block Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var pavmt in pt)
                {
                    if (pavmt.PTINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(pavmt.PTINWD_ApprovedBy_tint);
                    }

                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        CustName = pavmt.RptCL_Name_var;
                        SiteName = pavmt.RptST_Name_var;
                        Address = pavmt.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = pavmt.CL_Name_var;
                        SiteName = pavmt.SITE_Name_var;
                        Address = pavmt.CL_OfficeAddress_var;
                    }

                    SiteRouteId = Convert.ToInt32(pavmt.SITE_Route_Id);


                    paragraph.Alignment = Element.ALIGN_CENTER;
                    // paragraph.Add(" "); pdfDoc.Add(paragraph);
                    //if (pavmt.PTINWD_Status_tint == 4 || pavmt.PTINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);

                    if (Convert.ToString(pavmt.PTINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(pavmt.PTINWD_ApprovedDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 5;
                    paragraph.Add("Precast Concrete Blocks for Paving - Water Absorption");
                    if (pavmt.PTINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{

                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}

                    if (pavmt.PTINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }


                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("PT", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string strRecNo = pavmt.PTINWD_SetOfRecord_var;
                    if (pavmt.PTINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (pavmt.PTINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (pavmt.PTINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(pavmt.PTINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + pavmt.PTINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    Cust_Namecell = new PdfPCell(new Phrase("Nature of work", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(pavmt.PTINWD_WorkingNature_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.SITE_MonthlyBillingStatus_bit == true && pavmt.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (pavmt.PTINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(pavmt.PTINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(pavmt.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);




                    Cust_Namecell = new PdfPCell(new Phrase("Grade of concrete", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(pavmt.PTINWD_Grade_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.PTINWD_ReceivedDate_dt != null)
                    {
                        DateTime cDT = Convert.ToDateTime(pavmt.PTINWD_ReceivedDate_dt);
                        string ReceiptDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(ReceiptDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(pavmt.PTINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Casting", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (pavmt.PTINWD_CastingDate_dt != null && Convert.ToString(pavmt.PTINWD_CastingDate_dt) != "NA")
                    {
                        // DateTime rDT = Convert.ToDateTime(pavmt.PTINWD_CastingDate_dt);
                        string CastingDt = DateTime.ParseExact(pavmt.PTINWD_CastingDate_dt.ToString(), "dd/MM/yyyy", null).ToString("dd-MMM-yyyy");//rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(CastingDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("NA", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    if (pavmt.PTINWD_WitnessBy_var != null && pavmt.PTINWD_WitnessBy_var != string.Empty)
                    {
                        Witnessby = pavmt.PTINWD_WitnessBy_var.ToString();
                    }
                    TestId = Convert.ToInt32(pavmt.PTINWD_TEST_Id);
                    if (pavmt.PTINWD_RemoteApproved == true && pavmt.PTINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }

                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(pavmt.CONT_Name_var + " - " + pavmt.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pavmt.PTINWD_TestingDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(pavmt.PTINWD_TestingDate_dt);
                        DateTime cDT = Convert.ToDateTime(pavmt.PTINWD_TestingDate_dt);
                        string TestingDt = cDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(TestingDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);




                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //if (Convert.ToString(pavmt.PTINWD_IssueDate_dt) != "")
                    //{
                    //    DateTime rDT = Convert.ToDateTime(pavmt.PTINWD_IssueDate_dt);
                    //    Cust_Namecell = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH1));
                    //}
                    if (Convert.ToString(pavmt.PTINWD_ApprovedDate_dt) != "")
                    {
                        DateTime rDT = Convert.ToDateTime(pavmt.PTINWD_ApprovedDate_dt);
                        Cust_Namecell = new PdfPCell(new Phrase(rDT.ToString("dd-MMM-yyyy"), fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (pavmt.INWD_RptSITE_Id != null && pavmt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(pavmt.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(pavmt.PTINWD_ULRNo_var) != "" && Convert.ToString(pavmt.PTINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(pavmt.PTINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //

                }
                //MaindataTable.SpacingAfter = 2;
                pdfDoc.Add(MaindataTable);

                #endregion
                int ddd = TestId;

                var PT_WA = dc.Pavement_Test_View(ReferenceNo, TestId, "WA").ToList();
                var count = PT_WA.Count();

                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);
                #region tbldata

                PdfPCell cell1;
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(table1);
                table1 = new PdfPTable(6);
                table1.WidthPercentage = 100;
                int j = 0;
                for (int i = 0; i < count; i++)
                {
                    if (i == 0)
                    {
                        table1.SetTotalWidth(new float[] { 5f, 20f, 20f, 20f, 20f, 20f });
                        cell1 = new PdfPCell(new Phrase("Sr.No", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("ID Mark", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Dry Weight (g)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Wet Weight (g)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Water Absorption (%)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Average (%)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    string srNo = Convert.ToString(i + 1);
                    cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(PT_WA[i].IdMark_var, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_WA[i].DryWeight_int), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_WA[i].Wet_Weight_int), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_WA[i].WaterAbsorption_dec), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    if (j == 0)
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(PT_WA[i].PTINWD_AvgStr_var), fontH1));
                        cell1.Rowspan = count;
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        table1.AddCell(cell1);
                    }
                    j++;
                }
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SpacingAfter = 5;
                pdfDoc.Add(table1);
                #endregion


                #region iscode
                table1 = new PdfPTable(2);
                table1.SpacingAfter = 5;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                var iscd = dc.ISCode_View(0, "", "PT", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                serial_no = 0;
                var re = dc.Pavement_Test_Remark_View("", ReferenceNo, 0, TestId);
                foreach (var r in re)
                {
                    var remark = dc.Pavement_Test_Remark_View("", "", Convert.ToInt32(r.RemarkId_int), TestId);
                    foreach (var remk in remark)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("Remarks :", fontH2));
                            cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph(serial_no + ")" + remk.Remark_var.ToString(), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(remk.Remark_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                }
                if (supersedeNote != "")
                {
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 8;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);
                #endregion

                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 12;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);
                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("Pavement Block Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0);
                    foreach (var r in RecNo)
                    {
                        if (r.PTINWD_ApprovedBy_tint != null && r.PTINWD_ApprovedBy_tint.ToString() != "" && r.PTINWD_ApprovedBy_tint > 0)
                        {
                            var U = dc.User_View(r.PTINWD_ApprovedBy_tint, -1, "", "", "");
                            foreach (var r1 in U)
                            {

                                pdfDoc.Add(new Paragraph(r1.USER_Name_var.ToString(), fontH1));
                                if (r1.USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + r1.USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(r1.USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Automail" || Action == "Email")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }
                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (r.PTINWD_CheckedBy_tint != null && r.PTINWD_CheckedBy_tint.ToString() != "" && r.PTINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(r.PTINWD_CheckedBy_tint, -1, "", "", "");
                            foreach (var loginusr in lgin)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by : " + loginusr.USER_Name_var.ToString(), fontH1));
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);


                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                pdfDoc.Add(new Paragraph("Page 1 of 1", fontH1));
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }

            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        #endregion

        public void Pile_PDFReport(string ReferenceNo, string Action)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("PILE", ReferenceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "PILE_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Pile";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "PILE_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                //PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "PILE_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.5f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.3f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 8.7f, Font.UNDEFINED);


                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action == "Automail" || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data
                DateTime ApproveDt = new DateTime();
                //float[] widths = new float[] { 18f, 1f, 52f, 15f, 1f, 15f };
                float[] widths = new float[] { 16f, 1f, 55f, 18f, 1f, 15f };

                MaindataTable.SetWidths(widths);
                string Witnessby = string.Empty, CustName = "", SiteName = "", Address = "";

                int TestId = 0;
                bool RemotelyAppv = false;
                int Approveby = 0;
                string supersedeNote = "";
                DateTime? dtTesting = null;
                var PileInward = dc.ReportStatus_View("Pile Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var pile in PileInward)
                {
                    if (pile.INWD_RptSITE_Id != null && pile.INWD_RptCL_Id != null)
                    {
                        CustName = pile.RptCL_Name_var;
                        SiteName = pile.RptST_Name_var;
                        Address = pile.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = pile.CL_Name_var;
                        SiteName = pile.SITE_Name_var;
                        Address = pile.CL_OfficeAddress_var;
                    }

                    SiteRouteId = Convert.ToInt32(pile.SITE_Route_Id);
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //   paragraph.Add(" "); pdfDoc.Add(paragraph);
                    //if (pile.PILEINWD_Status_tint == 4 || pile.PILEINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    pdfDoc.Add(paragraph);


                    if (pile.PILEINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(pile.PILEINWD_ApprovedBy_tint);
                    }


                    if (Convert.ToString(pile.PILEINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(pile.PILEINWD_ApprovedDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle; paragraph.SpacingAfter = 2;
                    paragraph.Add("Pile Integrity");
                    if (pile.PILEINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    //MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}

                    if (pile.PILEINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }


                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("PILE", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);




                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("PILE - " + pile.PILEINWD_SetOfRecord_var, fontH1));
                    string strRecNo = pile.PILEINWD_SetOfRecord_var;
                    if (pile.PILEINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (pile.PILEINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (pile.PILEINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(pile.PILEINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + pile.PILEINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(pile.PILEINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pile.SITE_MonthlyBillingStatus_bit == true && pile.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (pile.PILEINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(pile.PILEINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(pile.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(pile.CONT_Name_var + " - " + pile.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (pile.PILEINWD_TestedDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(pile.PILEINWD_TestedDate_dt);
                        DateTime rDT = Convert.ToDateTime(pile.PILEINWD_TestedDate_dt);
                        string TestingDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(TestingDt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    ////Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);
                    //if (pile.PILEINWD_ReceivedDate_dt != null)
                    //{
                    //    DateTime rDT = Convert.ToDateTime(pile.PILEINWD_ReceivedDate_dt);
                    //    string receiptDt = rDT.ToString("dd-MMM-yyyy");
                    //    Cust_Namecell = new PdfPCell(new Phrase(receiptDt, fontH1));
                    //    //Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    //}
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);



                    if (pile.PILEINWD_WitnessBy_var != null && pile.PILEINWD_WitnessBy_var != string.Empty)
                    {
                        Witnessby = pile.PILEINWD_WitnessBy_var.ToString();
                    }
                    TestId = Convert.ToInt32(pile.PILEINWD_TEST_Id);

                    if (pile.PILEINWD_RemoteApproved == true && pile.PILEINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }


                    if (pile.INWD_RptSITE_Id != null && pile.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(pile.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    //if (pile.PILEINWD_IssueDate_dt != null)
                    //{
                    //    DateTime iDT = Convert.ToDateTime(pile.PILEINWD_IssueDate_dt);
                    //    string issuedt = iDT.ToString("dd-MMM-yyyy");
                    //    Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    //}
                    if (pile.PILEINWD_ApprovedDate_dt != null)
                    {
                        DateTime iDT = Convert.ToDateTime(pile.PILEINWD_ApprovedDate_dt);
                        string issuedt = iDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    if (pile.INWD_RptSITE_Id != null && pile.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(pile.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                        //Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        //Cust_Namecell.Colspan = 3;
                        //MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(pile.PILEINWD_ULRNo_var) != "" && Convert.ToString(pile.PILEINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "NDT" + "    " + "Group : " + "Building Materials - Reinforced Concrete Structures", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(pile.PILEINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //

                }
                //MaindataTable.SpacingAfter = 2;
                pdfDoc.Add(MaindataTable);

                #endregion

                var PileInwartd_PILE = dc.PileDetailsView("", 0, "").ToList();
                var count = PileInwartd_PILE.Count();

                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5; // 10;
                pdfDoc.Add(paragraph);

                #region tbldata

                PdfPCell cell1;
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(table1);
                table1 = new PdfPTable(4);
                table1.WidthPercentage = 100;

                int CountPiles = 0;
                for (int i = 0; i < count; i++)
                {
                    if (i == 0)
                    {
                        table1.SetTotalWidth(new float[] { 9f, 13f, 70f, 65f });
                        cell1 = new PdfPCell(new Phrase("Sr.No", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Category", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Inference", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Pile Identification", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    string srNo = Convert.ToString(i + 1);
                    cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(PileInwartd_PILE[i].PILE_Name_var, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(PileInwartd_PILE[i].PILE_Description_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.AddCell(cell1);

                    bool valid = true;
                    string Identi = "";
                    var PileInward_iD = dc.PileDetailsView(ReferenceNo, 0, "").ToList();
                    var Pilecount = PileInward_iD.Count();
                    for (int p = 0; p < Pilecount; p++)
                    {
                        if (Convert.ToInt32(PileInward_iD[p].PILEDETAIL_CatagoryId_int) > 0)
                        {
                            var PileIdentification = dc.PileDetailsView("", Convert.ToInt32(PileInward_iD[p].PILEDETAIL_CatagoryId_int), "").ToList();
                            var PileIdentifccount = PileIdentification.Count();
                            for (int pd = 0; pd < PileIdentifccount; pd++)
                            {
                                if (Convert.ToString(PileInward_iD[p].PILEDETAIL_Identification_var) != null)
                                {
                                    if (Convert.ToString(PileIdentification[pd].PILE_Name_var) == Convert.ToString(PileInwartd_PILE[i].PILE_Name_var))
                                    {
                                        CountPiles++;
                                        valid = false;
                                        if (Identi == "")
                                            Identi = Convert.ToString(PileInward_iD[p].PILEDETAIL_Identification_var);
                                        else
                                            Identi = Identi + "," + Convert.ToString(PileInward_iD[p].PILEDETAIL_Identification_var);
                                    }
                                }
                            }
                        }
                    }
                    if (valid == true)
                    {
                        cell1 = new PdfPCell(new Phrase("NA", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else
                    {
                        cell1 = new PdfPCell(new Phrase(Identi.ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                }
                cell1 = new PdfPCell(new Phrase("Total No Of Piles Tested :", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                cell1.Colspan = 3;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase(Convert.ToString(CountPiles), fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SpacingAfter = 1;
                pdfDoc.Add(table1);
                #endregion


                #region iscode/remarks
                table1 = new PdfPTable(2);
                table1.SpacingAfter = 1;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                var iscd = dc.ISCode_View(0, "", "PILE", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                serial_no = 0;
                var reference = dc.AllRemark_View("", ReferenceNo, 0, "PILE").ToList();
                var referencecount = reference.Count();
                if (referencecount > 0)
                {
                    for (int r = 0; r < referencecount; r++)
                    {
                        if (r == 0)
                        {
                            //pdfDoc.Add(new Paragraph("Remarks", fontH2));
                            cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        var remark = dc.AllRemark_View("", "", Convert.ToInt32(reference[r].PILEDetail_RemarkId_int), "PILE").ToList();
                        var remarkcount = remark.Count();
                        for (int remk = 0; remk < remarkcount; remk++)
                        {
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(serial_no + ")" + Convert.ToString(remark[remk].PILE_Remark_var), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remark[remk].PILE_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }


                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 3;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);

                #endregion
                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 5;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("Pile Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0).ToList();
                    var RecNocount = RecNo.Count();
                    for (int r = 0; r < RecNocount; r++)
                    {
                        if (RecNo[r].PILEINWD_ApprovedBy_tint != null && RecNo[r].PILEINWD_ApprovedBy_tint.ToString() != "" && RecNo[r].PILEINWD_ApprovedBy_tint > 0)
                        {
                            var User = dc.User_View(Convert.ToInt32(RecNo[r].PILEINWD_ApprovedBy_tint), -1, "", "", "").ToList();
                            var ucount = User.Count();
                            for (int userId = 0; userId < ucount; userId++)
                            {

                                pdfDoc.Add(new Paragraph(Convert.ToString(User[userId].USER_Name_var), fontH1));
                                if (User[userId].USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + User[userId].USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(User[userId].USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Automail" || Action == "Email")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }

                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 1;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (RecNo[r].PILEINWD_CheckedBy_tint != null && RecNo[r].PILEINWD_CheckedBy_tint.ToString() != "" && RecNo[r].PILEINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(Convert.ToInt32(RecNo[r].PILEINWD_CheckedBy_tint), -1, "", "", "").ToList();
                            var lginCount = lgin.Count();
                            for (int loginusr = 0; loginusr < lginCount; loginusr++)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by :  " + Convert.ToString(lgin[loginusr].USER_Name_var), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);


                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                pdfDoc.Add(new Paragraph("Page 1 of 1", fontH1));
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void Soil_PDFReport(string RefNo, string SampleName, string Action, bool pageBrk)
        {
            try
            {
                int nablStatus = -1, SiteRouteId = 0;
                bool flagFooter = false;
                string CustName = "", SiteName = "", Address = "";
                var soilInwardData = dc.SoilInward_View(RefNo, 0).ToList();
                foreach (var soilInward in soilInwardData)
                {
                    if (soilInward.INWD_RptSITE_Id != null && soilInward.INWD_RptCL_Id != null)
                    {
                        CustName = soilInward.RptCL_Name_var;
                        SiteName = soilInward.RptST_Name_var;
                        Address = soilInward.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = soilInward.CL_Name_var;
                        SiteName = soilInward.SITE_Name_var;
                        Address = soilInward.CL_OfficeAddress_var;
                    }

                    SiteRouteId = Convert.ToInt32(soilInward.SITE_Route_Id);


                    Paragraph paragraph = new Paragraph();
                    float marginTop = 100;

                    if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                        nablStatus = getNablLogoStatus("SO", RefNo);//1 for priting nabl logo
                    if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                    {
                        marginTop = 21;
                    }
                    Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 2f);
                    var fileName = "SO_" + RefNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                    if (!Directory.Exists(@foldername))
                        Directory.CreateDirectory(@foldername);
                    string Subfoldername = foldername + "/Soil";
                    if (!Directory.Exists(@Subfoldername))
                        Directory.CreateDirectory(@Subfoldername);
                    string Subfoldername1 = Subfoldername;
                    if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                    {
                        fileName = "SO_" + RefNo.Replace('/', '_') + ".pdf";
                        Subfoldername1 = foldername;
                    }
                    //PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                    PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                    //var fileName = "SO_" + RefNo.Replace('/', '_') + ".pdf";
                    //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                    pdfDoc.Open();
                    Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                    Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                    Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                    Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                    Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);
                    Font fontH6 = new Font(Font.FontFamily.TIMES_ROMAN, 8f, Font.BOLD);
                    if (soilInward.SOINWD_TestedAt_bit == true)
                    {
                        writer.PageEvent = new clsPdfFooter();
                        flagFooter = true;
                    }
                    if (!flagFooter)
                        writer.PageEvent = new classPdfFooter1();

                    DateTime? ApproveDt = null;
                    bool RemotelyAppv = false;
                    PdfPTable table1 = null;
                    pdfDoc.Open();
                    PdfPTable MaindataTable = new PdfPTable(6);
                    MaindataTable.WidthPercentage = 100;
                    MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                    if (Action.Contains("Print") == true)
                        LogoToPdf(pdfDoc, nablStatus);
                    else if (Action == "Automail" || Action.Contains("Email") == true)
                        LogoToPdfEmail(pdfDoc, nablStatus);

                    else if (Action.Contains("Display") == true)
                        LogoToPdfOld(pdfDoc, Action);
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //  paragraph.Add(" "); pdfDoc.Add(paragraph);//if (soilInward.SOINWD_Status_tint == 4 || soilInward.SOINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2;
                    pdfDoc.Add(paragraph);
                    float[] widths = new float[] { 18f, 1f, 50f, 18f, 1f, 15f };
                    //float[] widths = new float[] { 18f, 52f, 15f, 15f };
                    MaindataTable.SetWidths(widths);
                    paragraph = new Paragraph();
                    paragraph.SpacingBefore = 1;
                    paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Add("Soil");
                    pdfDoc.Add(paragraph);

                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 2;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 4;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    int Approveby = 0;
                    DateTime? dtTesting = null;


                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (soilInward.SOINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(soilInward.SOINWD_ApprovedBy_tint);
                    }

                    if (Convert.ToString(soilInward.SOINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(soilInward.SOINWD_ApprovedDate_dt);
                    }
                    try
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    }
                    catch (Exception ex)
                    {

                        Cust_Namecell = new PdfPCell(new Phrase(": -", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("SO", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(RefNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string supersedeNote = "";
                    string strRecNo = soilInward.SOINWD_SetOfRecord_var;
                    if (soilInward.SOINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (soilInward.SOINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (soilInward.SOINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(soilInward.SOINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + soilInward.SOINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (Convert.ToString(soilInward.SOINWD_Description_var) != "")
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(soilInward.SOINWD_Description_var), fontH1));
                    else
                        Cust_Namecell = new PdfPCell(new Phrase(" -", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No.", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        if (soilInward.SITE_MonthlyBillingStatus_bit == true && soilInward.INWD_BILL_Id == "0")
                        {
                            if (soilInward.SOINWD_IssueDate_dt != null)
                            {
                                string monthlyBillNo = Convert.ToDateTime(soilInward.SOINWD_IssueDate_dt).ToString("MMM/yyyy");
                                Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                            }
                            else
                            {
                                Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                            }
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(soilInward.INWD_BILL_Id), fontH1));
                        }
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (soilInward.SOINWD_SupplierName_var != "")
                        Cust_Namecell = new PdfPCell(new Phrase(soilInward.SOINWD_SupplierName_var, fontH1));
                    else
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        DateTime rDT = soilInward.SOINWD_CollectionDate_dt.Value;
                        string receiptDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(receiptDt, fontH1));
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }

                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(soilInward.CONT_Name_var + " - " + soilInward.SOINWD_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        dtTesting = Convert.ToDateTime(soilInward.SOINWD_TestedDate_dt);
                        DateTime tDT = Convert.ToDateTime(soilInward.SOINWD_TestedDate_dt);
                        string testingDt = tDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(testingDt, fontH1));
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    if (soilInward.SOINWD_RemoteApproved == true && soilInward.SOINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (soilInward.INWD_RptSITE_Id != null && soilInward.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(soilInward.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(soilInward.SOINWD_IssueDate_dt.Value.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase(soilInward.SOINWD_ApprovedDate_dt.Value.ToString("dd-MMM-yyyy"), fontH1));
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (soilInward.INWD_RptSITE_Id != null && soilInward.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(soilInward.SITE_Name_var, fontH1));
                        Cust_Namecell.Colspan = 4;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(soilInward.SOINWD_ULRNo_var) != "" && Convert.ToString(soilInward.SOINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(soilInward.SOINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //

                    Cust_Namecell = new PdfPCell(new Phrase("Identification mark given by client : " + soilInward.SOINWD_IdMark_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Colspan = 6;
                    MaindataTable.AddCell(Cust_Namecell);

                    pdfDoc.Add(MaindataTable);

                    #region Headers for table.
                    string[] headers = { "Test", "Unit", "Results Obtained", "Specification" };
                    string[] headersForCoreCutterPlusSand = { "Sr.No.", "ID Mark", "Insitu Bulk Density (g/cm³)", "Moisture Content (%)", "Insitu Dry Density (g/cm³)", "% Compaction" };

                    #endregion

                    #region pdf code
                    var SoilInwardData = dc.SoilSampleTest_View(RefNo, SampleName).ToList();

                    foreach (var soilInword in SoilInwardData)
                    {
                        string strTestResult = "Awaited", strTestName = "";

                        if (soilInword.TEST_Sr_No == 1)
                        {
                            pdfDoc.Add(new Paragraph("Free Swell Index :", fontH2));

                            #region Free Swell Index
                            var fsi = dc.SoilFSI_View(RefNo, SampleName);
                            foreach (var sofsi in fsi)
                            {
                                if (sofsi.SOFSI_Average_var != "" && sofsi.SOFSI_Average_var != null)
                                    strTestResult = sofsi.SOFSI_Average_var;
                            }

                            table1 = new PdfPTable(4);
                            float[] widthsSh = new float[] { 30f, 10f, 20f, 25f };
                            table1.SetWidths(widthsSh);
                            table1.SpacingBefore = 3;

                            int b = 0;
                            PdfPCell cell1;
                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            #region tbldata
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;

                            cell1 = new PdfPCell(new Phrase(Convert.ToString("Free Swell Index"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString("%"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(strTestResult, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (b == 0)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString("IS 2720 : Part 40 : 1977: 2021"), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = 2;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                                b = 1;
                            }
                            pdfDoc.Add(table1);

                            #endregion
                            #endregion
                        }
                        else if (soilInword.TEST_Sr_No == 2)
                        {
                            pdfDoc.Add(new Paragraph("Natural Moisture Content Test :", fontH2));

                            #region Water content
                            var wc = dc.SoilWC_View(RefNo, SampleName, soilInword.TEST_Sr_No);
                            foreach (var sowc in wc)
                            {
                                if (sowc.SOWC_WaterContent_dec != null)
                                    strTestResult = sowc.SOWC_WaterContent_dec.ToString();
                            }

                            table1 = new PdfPTable(4);
                            float[] widthsSh = new float[] { 30f, 10f, 20f, 25f };
                            table1.SetWidths(widthsSh);
                            table1.SpacingBefore = 3;

                            int b = 0;
                            PdfPCell cell1;
                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            #region tbldata
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;

                            cell1 = new PdfPCell(new Phrase(Convert.ToString("Natural Moisture Content"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString("%"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(strTestResult, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (b == 0)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString("IS 2720 : Part 2 : 1973: 2020"), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = 2;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                                b = 1;
                            }
                            pdfDoc.Add(table1);

                            #endregion
                            #endregion
                        }
                        else if (soilInword.TEST_Sr_No == 3 || soilInword.TEST_Sr_No == 4)
                        {
                            if (soilInword.TEST_Sr_No == 3)
                            {
                                pdfDoc.Add(new Paragraph("Proctor Test - Standard :", fontH2));
                                strTestName = "Standard";
                            }
                            else
                            {
                                pdfDoc.Add(new Paragraph("Proctor Test - Modified :", fontH2));
                                strTestName = "Modified";
                            }

                            #region Proctor Test

                            string[] arryResult = new string[] { "Awaited", "Awaited" };
                            var mdd = dc.SoilMDD_View(RefNo, SampleName, Convert.ToByte(strTestName == "Modified"));
                            foreach (var somdd in mdd)
                            {
                                string[] strMddResult = somdd.SOMDD_Result_var.Split('|');
                                arryResult = new string[] { strMddResult[0], strMddResult[1] };
                            }
                            table1 = new PdfPTable(4);
                            float[] widthsSh = new float[] { 30f, 10f, 20f, 25f };
                            table1.SetWidths(widthsSh);
                            table1.SpacingBefore = 3;


                            int b = 0;
                            PdfPCell cell1;
                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            #region tbldata
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;
                            string[] arryForTest = new string[] { "Maximum Dry Density (MDD)", "Optimum Moisture Content (OMC)" };
                            string[] arryForUnit = new string[] { "g/cm³", "%" };

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForTest[0]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForUnit[0]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryResult[0]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (b == 0)
                            {
                                if (soilInword.TEST_Sr_No == 3)
                                {
                                    cell1 = new PdfPCell(new Phrase(Convert.ToString("IS 2720 : Part 7 : 1980 : 2021"), fontH1));
                                }
                                else
                                {
                                    cell1 = new PdfPCell(new Phrase(Convert.ToString("IS 2720 : Part 8 : 1983: 2020"), fontH1));
                                }
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = 2;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                                b = 1;
                            }

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForTest[1]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);


                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForUnit[1]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryResult[1]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            pdfDoc.Add(table1);


                            #endregion
                            #endregion
                        }

                        else if (soilInword.TEST_Sr_No == 8 || soilInword.TEST_Sr_No == 9)
                        {
                            if (soilInword.TEST_Sr_No == 8)
                            {
                                pdfDoc.Add(new Paragraph("California Bearing Ratio (Soaked) :", fontH2));
                            }
                            else
                            {
                                pdfDoc.Add(new Paragraph("California Bearing Ratio (Unsoaked) :", fontH2));
                            }
                            #region CBR
                            strTestResult = "Awaited";
                            var cbrData = dc.SoilCBR_View(RefNo, SampleName, 0, 0);
                            if (soilInwardData.FirstOrDefault().SOINWD_ReportDetails_var != null)
                            {
                                string[] arryCBRData = soilInwardData.FirstOrDefault().SOINWD_ReportDetails_var.Split(',');
                                string[] arryCBR = arryCBRData[1].Split('=');
                                strTestResult = arryCBR[1];
                            }
                            table1 = new PdfPTable(4);
                            float[] widthsSh = new float[] { 30f, 10f, 20f, 25f };
                            table1.SetWidths(widthsSh);
                            table1.SpacingBefore = 3;

                            int b = 0;
                            PdfPCell cell1;
                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            #region tbldata
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;

                            cell1 = new PdfPCell(new Phrase(Convert.ToString("CBR Value"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString("%"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            try
                            {
                                cell1 = new PdfPCell(new Phrase(strTestResult, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            catch
                            {
                                cell1 = new PdfPCell(new Phrase(" ", fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }
                            if (b == 0)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString("IS 2720 : Part 16 : 1987: 2021"), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = 2;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                                b = 1;
                            }
                            pdfDoc.Add(table1);
                            #endregion
                            #endregion
                        }
                        else if (soilInword.TEST_Sr_No == 6 || soilInword.TEST_Sr_No == 7)
                        {
                            pdfDoc.Add(new Paragraph("Grain Size Analysis :", fontH2));

                            #region Gradation
                            string[] arryResult = new string[] { "Awaited", "Awaited", "Awaited", "Awaited" };
                            table1 = new PdfPTable(4);
                            float[] widthsSh = new float[] { 30f, 10f, 20f, 25f };
                            table1.SetWidths(widthsSh);
                            table1.SpacingBefore = 3;

                            int b = 0;
                            PdfPCell cell1;
                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            #region tbldata
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;

                            bool cobbleFlag = false;
                            if (soilInward.SOINWD_ReportDetails_var != null)
                            {
                                string[] strResult = soilInward.SOINWD_ReportDetails_var.Split(',');
                                if (strResult[0] != "")
                                {
                                    string[] strGradation = strResult[0].Split('~');

                                    for (int i = 0; i < strGradation.Length; i++)
                                    {
                                        if (i == 0 || i == 1 || i == 3 || i == 6)
                                        {
                                            string[] strGradationDetails = strGradation[i].Split('|');
                                            //for (int j = 0; j < strGradationDetails.Length; j++)
                                            //{
                                            arryResult[b] = strGradationDetails[4];
                                            if (i == 0 && Convert.ToDouble(arryResult[b]) > 0)
                                            {
                                                cobbleFlag = true;
                                            }
                                            b++;
                                            //}
                                        }
                                    }
                                }
                                //pdfDoc.Add(table1);
                            }

                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;
                            string[] arryForTest = new string[] { "Cobble", "Gravel", "Sand", "Clay & Silt" };
                            string[] arryForUnit = new string[] { "%", "%", "%", "%" };

                            if (cobbleFlag == true)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForTest[0]), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForUnit[0]), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(arryResult[0]), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString("IS 2720 : Part 4 : 1985: 2021"), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = 4;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                            }

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForTest[1]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForUnit[1]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryResult[1]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            if (cobbleFlag == false)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString("IS 2720 : Part 4 : 1985: 2021"), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = 3;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                            }

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForTest[2]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForUnit[2]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryResult[2]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForTest[3]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForUnit[3]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryResult[3]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            pdfDoc.Add(table1);

                            #endregion
                            #endregion
                        }
                        else if (soilInword.TEST_Sr_No == 5)
                        {
                            pdfDoc.Add(new Paragraph("Liquid Limit & Plastic Limit :", fontH2));

                            #region LL/PL/PI
                            int cnt = 0;
                            string[] arryResult = new string[] { "Awaited", "Awaited", "Awaited" };
                            var llpl = dc.SoilLLPL_View(RefNo, SampleName, false);
                            foreach (var sollpl in llpl)
                            {
                                if (cnt == 0 || sollpl.SOLLPL_PI_dec != 0)
                                {
                                    arryResult[2] = Convert.ToDecimal(sollpl.SOLLPL_PI_dec).ToString("0");
                                }
                                cnt++;
                                if (sollpl.SOLLPL_LLPL_var != "" && sollpl.SOLLPL_LLPL_var != null)
                                {
                                    arryResult[0] = sollpl.SOLLPL_LLPL_var;
                                    break;
                                }
                            }
                            llpl = dc.SoilLLPL_View(RefNo, SampleName, true);
                            foreach (var sollpl in llpl)
                            {
                                if (sollpl.SOLLPL_LLPL_var != "" && sollpl.SOLLPL_LLPL_var != null)
                                {
                                    arryResult[1] = sollpl.SOLLPL_LLPL_var;
                                    break;
                                }
                            }
                            //if (arryResult[0] != "Awaited" && arryResult[0] != "0" && arryResult[1] == "0")
                            if (arryResult[0] != "Awaited")
                            {
                                if (arryResult[0] == "0")
                                    arryResult[0] = "Non Plastic";
                                if (arryResult[1] == "0")
                                {
                                    arryResult[1] = "Non Plastic";
                                    arryResult[2] = "Non Plastic";
                                }
                            }
                            table1 = new PdfPTable(4);
                            float[] widthsSh = new float[] { 30f, 10f, 20f, 25f };
                            table1.SetWidths(widthsSh);
                            table1.SpacingBefore = 3;

                            int b = 0;
                            PdfPCell cell1;
                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            #region tbldata
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;
                            string[] arryForTest = new string[] { "Liquid Limit", "Plastic Limit", "Plasticity Index" };
                            string[] arryForUnit = new string[] { "%", "%", "%" };

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForTest[0]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForUnit[0]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryResult[0]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (b == 0)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString("IS 2720 : Part 5 : 1985 : 2020"), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = 3;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                                b = 1;
                            }

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForTest[1]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForUnit[1]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryResult[1]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForTest[2]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForUnit[2]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryResult[2]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            pdfDoc.Add(table1);

                            #endregion
                            #endregion
                        }
                        else if (soilInword.TEST_Sr_No == 12)
                        {
                            pdfDoc.Add(new Paragraph("Classification of given Soil :", fontH2));

                            #region Classification
                            strTestName = "The given Soil sample is classified as ---    Mapping colour --- ";
                            var wc = dc.SoilWC_View(RefNo, SampleName, soilInword.TEST_Sr_No);
                            foreach (var sowc in wc)
                            {
                                if (sowc.SOWC_ContainerNo_var != "" && sowc.SOWC_ContainerNo_var != null)
                                {
                                    strTestName = "The given Soil sample is classified as " + sowc.SOWC_ContainerNo_var + "    Mapping colour - " + sowc.SOWC_ContainerWeight_var;
                                }
                            }
                            pdfDoc.Add(new Paragraph(strTestName, fontH1));
                            #endregion
                        }
                        else if (soilInword.TEST_Sr_No == 13)
                        {
                            pdfDoc.Add(new Paragraph("Direct Shear(Unconsoilidated Undrained) :", fontH2));

                            #region Direct Shear

                            string[] arryResult = new string[] { "Awaited", "Awaited" };
                            var wc = dc.SoilWC_View(RefNo, SampleName, soilInword.TEST_Sr_No);
                            foreach (var sowc in wc)
                            {
                                if (sowc.SOWC_ContainerNo_var != "" && sowc.SOWC_ContainerNo_var != null)
                                {
                                    arryResult = new string[] { sowc.SOWC_ContainerNo_var, sowc.SOWC_ContainerWeight_var };
                                }
                            }

                            table1 = new PdfPTable(4);
                            float[] widthsSh = new float[] { 30f, 10f, 20f, 25f };
                            table1.SetWidths(widthsSh);
                            table1.SpacingBefore = 3;

                            int b = 0;
                            PdfPCell cell1;
                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            #region tbldata
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;
                            string[] arryForTest = new string[] { "Cohesion - C", "Angle of Internal Friction - Ø" };
                            string[] arryForUnit = new string[] { "(kg/cm2)", "degree" };

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForTest[0]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForUnit[0]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryResult[0]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (b == 0)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString("IS 2720 : Part 13 : 1986: 2021"), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = 2;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                                b = 1;
                            }

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForTest[1]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryForUnit[1]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(arryResult[1]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            pdfDoc.Add(table1);


                            #endregion
                            #endregion
                        }
                        else if (soilInword.TEST_Sr_No == 14)
                        {
                            pdfDoc.Add(new Paragraph("pH Test :", fontH2));

                            #region pH
                            var wc = dc.SoilWC_View(RefNo, SampleName, soilInword.TEST_Sr_No);
                            foreach (var sowc in wc)
                            {
                                if (sowc.SOWC_ContainerNo_var != "" && sowc.SOWC_ContainerNo_var != null)
                                    strTestResult = sowc.SOWC_ContainerNo_var;
                            }

                            table1 = new PdfPTable(4);
                            float[] widthsSh = new float[] { 30f, 10f, 20f, 25f };
                            table1.SetWidths(widthsSh);
                            table1.SpacingBefore = 3;

                            int b = 0;
                            PdfPCell cell1;
                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            #region tbldata
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;

                            cell1 = new PdfPCell(new Phrase(Convert.ToString("pH"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString("%"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(strTestResult, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (b == 0)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString("IS 2720 : Pt 26 : 1987"), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = 2;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                                b = 1;
                            }
                            pdfDoc.Add(table1);

                            #endregion
                            #endregion
                        }
                        else if (soilInword.TEST_Sr_No == 10)
                        {
                            pdfDoc.Add(new Paragraph("Field Density / Dry Density of Soils in Place(By Sand Replacement Method):", fontH2));

                            #region Sand Replacement Method
                            var soilSandTestData = dc.SoilFDTBySand_View(RefNo, SampleName).ToList();
                            table1 = new PdfPTable(6);
                            float[] widthsSh = new float[] { 10f, 27f, 18f, 18f, 18f, 15f };
                            table1.SetWidths(widthsSh);
                            table1.SpacingBefore = 3;


                            int b = 0;
                            PdfPCell cell1;
                            for (int h = 0; h < headersForCoreCutterPlusSand.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headersForCoreCutterPlusSand[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            #region tbldata
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;

                            foreach (var soildata in soilSandTestData)
                            {
                                string srNo = Convert.ToString(b + 1);
                                cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(soildata.SOFDTS_Location_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                //cell1 = new PdfPCell(new Phrase(Convert.ToString(soildata.SOFDTS_BulkDensityOfSand_dec.ToString()), fontH1));
                                cell1 = new PdfPCell(new Phrase(Convert.ToString(soildata.SOFDTS_WetDensity_dec.ToString()), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(soildata.SOFDTS_WC_dec.ToString()), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(soildata.SOFDTS_DryDensity_dec.ToString()), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(soildata.SOFDTS_Compaction_dec.ToString()), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                                b++;
                            }
                            pdfDoc.Add(table1);

                            #endregion
                            #endregion
                        }

                        else if (soilInword.TEST_Sr_No == 11)
                        {
                            pdfDoc.Add(new Paragraph("Field Density / Dry Density of Soils in Place(By Core Cutter Method):", fontH2));

                            #region Core Cutter Method
                            var soilSandTestData = dc.SoilFDTByCore_View(RefNo, SampleName).ToList();
                            table1 = new PdfPTable(6);
                            float[] widthsSh = new float[] { 10f, 27f, 18f, 18f, 18f, 15f };
                            table1.SetWidths(widthsSh);
                            table1.SpacingBefore = 3;


                            int b = 0;
                            PdfPCell cell1;
                            for (int h = 0; h < headersForCoreCutterPlusSand.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headersForCoreCutterPlusSand[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            #region tbldata
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;

                            foreach (var soildata in soilSandTestData)
                            {
                                string srNo = Convert.ToString(b + 1);
                                cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(soildata.SOFDTC_Location_var), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(soildata.SOFDTC_BulkDensity_dec.ToString()), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(soildata.SOFDTC_MoistureContent_dec.ToString()), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(soildata.SOFDTC_DryDensity_dec.ToString()), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                cell1 = new PdfPCell(new Phrase(Convert.ToString(soildata.SOFDTC_Compaction_dec.ToString()), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);

                                b++;
                            }
                            table1.SpacingAfter = 5;
                            pdfDoc.Add(table1);

                            #endregion
                            #endregion
                        }
                        if (soilInword.TEST_Sr_No == 15)
                        {
                            pdfDoc.Add(new Paragraph("Shrinkage Limit :", fontH2));

                            #region Shrinkage Limit  
                            var shlim = dc.SoilShrinkageLimit_View(RefNo, SampleName);
                            foreach (var soshlim in shlim)
                            {
                                if (soshlim.SOShLim_AverageShrinkageLimit_dec.ToString() != "" && soshlim.SOShLim_AverageShrinkageLimit_dec != null)
                                {
                                    strTestResult = soshlim.SOShLim_AverageShrinkageLimit_dec.ToString();
                                    break;
                                }
                            }

                            table1 = new PdfPTable(4);
                            float[] widthsSh = new float[] { 30f, 10f, 20f, 25f };
                            table1.SetWidths(widthsSh);
                            table1.SpacingBefore = 3;

                            int b = 0;
                            PdfPCell cell1;
                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            #region tbldata
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;

                            cell1 = new PdfPCell(new Phrase(Convert.ToString("Shrinkage Limit"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString("%"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(strTestResult, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (b == 0)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString("IS 2720 : Part 6 : 1972: 2021"), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                                b = 1;
                            }
                            pdfDoc.Add(table1);

                            #endregion
                            #endregion
                        }
                        if (soilInword.TEST_Sr_No == 16)
                        {
                            pdfDoc.Add(new Paragraph("Sp.Gravity :", fontH2));

                            #region Sp.Gravity
                            var spgrv = dc.SoilSpecificGravity_View(RefNo, SampleName);
                            foreach (var sospgrv in spgrv)
                            {
                                if (sospgrv.SOSpGrv_AverageSpecificGravity_dec.ToString() != "" && sospgrv.SOSpGrv_AverageSpecificGravity_dec != null)
                                {
                                    strTestResult = sospgrv.SOSpGrv_AverageSpecificGravity_dec.ToString();
                                    break;
                                }
                            }

                            table1 = new PdfPTable(4);
                            float[] widthsSh = new float[] { 30f, 10f, 20f, 25f };
                            table1.SetWidths(widthsSh);
                            table1.SpacingBefore = 3;

                            int b = 0;
                            PdfPCell cell1;
                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            #region tbldata
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.WidthPercentage = 100;

                            cell1 = new PdfPCell(new Phrase(Convert.ToString("Sp.Gravity"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(""), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(strTestResult, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (b == 0)
                            {
                                cell1 = new PdfPCell(new Phrase(Convert.ToString("IS 2720 : Part 3 : Sec 1 : 1980: 2021"), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                                b = 1;
                            }
                            pdfDoc.Add(table1);

                            #endregion
                            #endregion
                        }
                    }

                    #region Remark Data
                    table1 = new PdfPTable(2);
                    table1.SpacingAfter = 5;
                    table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                    table1.SetWidths(new float[] { 3f, 70f });
                    PdfPCell cell2;
                    int serial_no = 0;

                    if (pageBrk == true)
                    {
                        //table1.SpacingAfter = 5;
                        //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //table1.WidthPercentage = 100;
                        //pdfDoc.Add(table1);
                        //table1.FlushContent();

                        pdfDoc.Add(new Paragraph("Page 1 of 2", fontH6));

                        //table1 = new PdfPTable(2);
                        //table1.SpacingAfter = 5;
                        //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //table1.SetWidths(new float[] { 3f, 70f });
                        //table1.WidthPercentage = 100;

                        pdfDoc.NewPage();

                        if (Action.Contains("Print") == true)
                            LogoToPdf(pdfDoc, nablStatus);
                        else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                            LogoToPdfEmail(pdfDoc, nablStatus);
                        else if (Action.Contains("Display") == true)
                            LogoToPdfOld(pdfDoc, Action);
                    }

                    var remarklist = dc.SoilRemarkDetail_View(RefNo).ToList();
                    string iscode = "";
                    if (SoilInwardData.Count() != 0 || remarklist.Count() != 0)
                    {
                        foreach (var item in SoilInwardData)
                        {
                            if (item.TEST_Sr_No == 3) //if (item.SOSMPLTEST_TEST_Id == 84)
                            {
                                iscode = "IS 2720 : Part 7 : 1980 : 2021 Determination of Water Content-Dry Density Relation Using Light Compaction.";
                            }
                            else if (item.TEST_Sr_No == 4) //else if (item.SOSMPLTEST_TEST_Id == 85)
                            {
                                iscode = "IS 2720 : Part 8 : 1983: 2020 Determination of Water Content-Dry Density Relation Using Heavy Compaction.";
                            }
                            else if (item.TEST_Sr_No == 10) //else if (item.SOSMPLTEST_TEST_Id == 91)
                            {
                                iscode = "IS 2720 : Part 28 : 1974: 2020 Determination of Dry Density of Soils In-place, by the Sand Replacement Method.";
                            }
                            else if (item.TEST_Sr_No == 11) //else if (item.SOSMPLTEST_TEST_Id == 92)
                            {
                                iscode = "IS 2720 : Part 29 : 1975: 2020  Determination of Dry Density of Soils In-place, by the Core-cutter Method.";
                            }
                            if (item.TEST_Sr_No == 3 || item.TEST_Sr_No == 4 || item.TEST_Sr_No == 10 || item.TEST_Sr_No == 11) //if (item.SOSMPLTEST_TEST_Id == 84 || item.SOSMPLTEST_TEST_Id == 85 || item.SOSMPLTEST_TEST_Id == 91 || item.SOSMPLTEST_TEST_Id == 92)
                            {
                                if (serial_no == 0)
                                {
                                    //pdfDoc.Add(new Paragraph("References/Notes", fontH2));
                                    cell2 = new PdfPCell(new Phrase("References :", fontH2));
                                    cell2.Colspan = 2;
                                    cell2.Border = PdfPCell.NO_BORDER;
                                    table1.AddCell(cell2);
                                }
                                serial_no = serial_no + 1;
                                //pdfDoc.Add(new Paragraph((serial_no) + "." + item.Isc_Description_var, fontH1));
                                cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ") ", fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                                cell2 = new PdfPCell(new Phrase(iscode, fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                        }
                        foreach (var item in remarklist)
                        {
                            if (serial_no == 0)
                            {
                                //pdfDoc.Add(new Paragraph("References/Notes", fontH2));
                                cell2 = new PdfPCell(new Phrase("References :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            //pdfDoc.Add(new Paragraph((serial_no + 1) + "." + item.BTREM_Remark_var, fontH1));
                            serial_no = serial_no + 1;
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ") ", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(item.SOREM_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        cell2 = new PdfPCell(new Phrase(" ", fontH2));
                        cell2.FixedHeight = 5f;
                        cell2.Border = PdfPCell.NO_BORDER;
                        cell2.Colspan = 2;
                        table1.AddCell(cell2);
                    }
                    serial_no = 0;
                    if (supersedeNote != "")
                    {
                        if (serial_no == 0)
                        {
                            cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(" ", fontH2));
                        cell2.FixedHeight = 5f;
                        cell2.Border = PdfPCell.NO_BORDER;
                        cell2.Colspan = 2;
                        table1.AddCell(cell2);
                    }

                    #region notes

                    cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                    cell2.Colspan = 2;
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    table1.SpacingAfter = 8;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;
                    pdfDoc.Add(table1);

                    #endregion
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH2;
                    paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                    pdfDoc.Add(paragraph);

                    #endregion

                    PdfPTable MaindataTable1 = null;
                    //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                    //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                    if (Action != "Check")
                    {
                        MaindataTable1 = new PdfPTable(1); //tbl
                        MaindataTable1.SpacingBefore = 12;
                        MaindataTable1.WidthPercentage = 100;
                        PdfPCell cellbottom = null;
                        cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                        cellbottom.Border = PdfPCell.NO_BORDER;
                        MaindataTable1.AddCell(cellbottom);
                        //MaindataTable1.SpacingAfter = 25;
                        pdfDoc.Add(MaindataTable1);

                        #region Signature
                        bool sign = false;
                        //byte[] bytes = null;
                        if (RemotelyAppv == true)
                        {
                            if (Approveby > 0)
                            {
                                var data = dc.Sign_View(Approveby);
                                foreach (var g in data)
                                {
                                    byte[] imageBytes = g.UserSign.ToArray();
                                    MemoryStream mxs1 = new MemoryStream(imageBytes);
                                    iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                    table1 = new PdfPTable(1);
                                    table1.WidthPercentage = 100;
                                    table1.SetWidths(new float[] { 1.7f });
                                    PdfPCell cell = new PdfPCell(image);
                                    cell.FixedHeight = 25;
                                    cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                    cell.Border = PdfPCell.NO_BORDER;
                                    table1.AddCell(cell);

                                    pdfDoc.Add(table1);
                                    //bytes = memoryStream.ToArray();
                                    sign = true;
                                    break;
                                }
                            }
                        }
                        #endregion

                        if (sign == false)
                        {
                            pdfDoc.Add(new Paragraph(" ", fontH1));
                            pdfDoc.Add(new Paragraph(" ", fontH1));
                        }
                        try
                        {
                            if (soilInward.SOINWD_ApprovedBy_tint != null)
                            {
                                pdfDoc.Add(new Paragraph(soilInward.ApprovedByUser, fontH1));
                            }
                            else
                            {
                                pdfDoc.Add(new Paragraph("-", fontH1));
                            }
                        }

                        catch (Exception ex)
                        {
                            pdfDoc.Add(new Paragraph("-", fontH1));
                        }
                        try
                        {
                            if (soilInward.ApprovedByUserDesig != null)
                            {
                                pdfDoc.Add(new Paragraph("(" + soilInward.ApprovedByUserDesig.Replace("(", "").Replace(")", "") + ")", fontH1));
                            }
                            if (Action == "Print" || Action == "Automail" || Action == "Email" && ApproveDt != null)
                            {
                                pdfDoc.Add(new Paragraph(Convert.ToDateTime(ApproveDt).ToString("dd/MM/yy"), fontH3));
                            }
                            else
                            {
                                pdfDoc.Add(new Paragraph("", fontH3));
                            }

                        }
                        catch
                        {
                        }

                        MaindataTable1 = new PdfPTable(2);
                        float[] widthWTBy = new float[] { 65f, 35f };
                        MaindataTable1.SetWidths(widthWTBy);
                        MaindataTable1.SpacingBefore = 5;
                        MaindataTable1.WidthPercentage = 100;
                        try
                        {
                            if (soilInward.SOINWD_WitnessBy_var != null && soilInward.SOINWD_WitnessBy_var != "")
                            {
                                cellbottom = new PdfPCell(new Paragraph("Witness By : " + soilInward.SOINWD_WitnessBy_var, fontH1));
                            }
                            else
                            {
                                cellbottom = new PdfPCell(new Paragraph("", fontH1));
                            }
                        }
                        catch (Exception ex)
                        {
                            cellbottom = new PdfPCell(new Paragraph("", fontH1));
                        }

                        cellbottom.Border = PdfPCell.NO_BORDER;
                        MaindataTable1.AddCell(cellbottom);
                        try
                        {
                            if (soilInward.SOINWD_CheckedBy_tint != null)
                            {
                                cellbottom = new PdfPCell(new Paragraph("Checked By : " + soilInward.CheckedByUser, fontH1));
                            }
                            else
                            {
                                cellbottom = new PdfPCell(new Paragraph("Checked By : ", fontH1));
                            }
                        }
                        catch (Exception ex)
                        {
                            cellbottom = new PdfPCell(new Paragraph("Checked By : ", fontH1));
                        }

                        cellbottom.Border = PdfPCell.NO_BORDER;
                        MaindataTable1.AddCell(cellbottom);
                        pdfDoc.Add(MaindataTable1);
                    }
                    else
                    {
                        //paragraph = new Paragraph();
                        //paragraph.Font = fontH1;
                        //paragraph.Add("  ");
                        //pdfDoc.Add(paragraph);
                        //paragraph = new Paragraph();

                        paragraph = new Paragraph();
                        paragraph.Alignment = Element.ALIGN_LEFT;
                        paragraph.Font = fontH1;
                        paragraph.SpacingBefore = 5;
                        paragraph.Add("This is electronically generated report hence does not require signature. ");
                        pdfDoc.Add(paragraph);

                        //paragraph = new Paragraph();
                        //paragraph.Font = fontH1;
                        //paragraph.Add("  ");
                        //pdfDoc.Add(paragraph);

                        paragraph = new Paragraph();
                        paragraph.Font = fontH1;
                        paragraph.SpacingBefore = 5;
                        paragraph.Add("For all technical queries contact on " + tollFree + ".");
                        pdfDoc.Add(paragraph);

                        //paragraph = new Paragraph();
                        //paragraph.Font = fontH1;
                        //paragraph.Add("  ");
                        //pdfDoc.Add(paragraph);

                    }
                    var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = blackListTextFont;
                    paragraph.Add("--End of Report--");
                    pdfDoc.Add(paragraph);
                    pdfDoc.Close();
                    if (Action != "Email" && Action.Contains("Email") == false)
                    {
                        string pdfPath = @Subfoldername1 + "/" + fileName;
                        DownloadReport(fileName, pdfPath);
                    }
                    #endregion
                }
            }
            catch
            {

            }
        }
        public void STC_PDFReport(string ReferenceNo, string Action)
        {
            try
            {
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("STC", ReferenceNo);//1 for priting nabl logo

                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "STC_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/SteelChemical";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "STC_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                //PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "STC_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;
                MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                {
                    LogoToPdfEmail(pdfDoc, nablStatus);
                }
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);

                #region data
                float[] widths = new float[] { 18f, 1f, 52f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                DateTime ApproveDt = new DateTime();
                int TestId = 0;
                string Grdae = "", CustName = "", SiteName = "", Address = "";
                string Witnessby = string.Empty;
                bool RemotelyAppv = false;
                int Approveby = 0;
                string supersedeNote = "";
                DateTime? dtTesting = null;
                var STCInward = dc.ReportStatus_View("Steel Chemical Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var STC in STCInward)
                {

                    if (STC.INWD_RptSITE_Id != null && STC.INWD_RptCL_Id != null)
                    {
                        CustName = STC.RptCL_Name_var;
                        SiteName = STC.RptST_Name_var;
                        Address = STC.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = STC.CL_Name_var;
                        SiteName = STC.SITE_Name_var;
                        Address = STC.CL_OfficeAddress_var;
                    }
                    SiteRouteId = Convert.ToInt32(STC.SITE_Route_Id);

                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //   paragraph.Add(" "); pdfDoc.Add(paragraph);
                    //if (STC.STCINWD_Status_tint == 4 || STC.STCINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);

                    if (STC.STCINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(STC.STCINWD_ApprovedBy_tint);
                    }
                    if (Convert.ToString(STC.STCINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(STC.STCINWD_ApprovedDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                    paragraph.Add("Reinforcement Steel (Chemical)");
                    if (STC.STCINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    if (STC.STCINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }


                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("STC", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string strRecNo = STC.STCINWD_SetOfRecord_var;
                    if (STC.STCINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (STC.STCINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (STC.STCINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(STC.STCINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + STC.STCINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Type of steel", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(STC.STCINWD_SteelType_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (STC.SITE_MonthlyBillingStatus_bit == true && STC.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (STC.STCINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(STC.STCINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(STC.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Grade of steel", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(STC.STCINWD_Grade_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (STC.INWD_ReceivedDate_dt != null)
                    {
                        DateTime rDT = Convert.ToDateTime(STC.INWD_ReceivedDate_dt);
                        string receiptDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(receiptDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(STC.STCINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (STC.STCINWD_TestedDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(STC.STCINWD_TestedDate_dt);
                        DateTime rDT = Convert.ToDateTime(STC.STCINWD_TestedDate_dt);
                        string TestingDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(TestingDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(STC.STCINWD_SupplierName_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //if (STC.STCINWD_IssueDate_dt != null)
                    //{
                    //    DateTime iDT = Convert.ToDateTime(STC.STCINWD_IssueDate_dt);
                    //    string issuedt = iDT.ToString("dd-MMM-yyyy");
                    //    Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    //}
                    if (STC.STCINWD_ApprovedDate_dt != null)
                    {
                        DateTime iDT = Convert.ToDateTime(STC.STCINWD_ApprovedDate_dt);
                        string issuedt = iDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Grdae = Convert.ToString(STC.STCINWD_Grade_var);
                    if (STC.STCINWD_WitnessBy_var != null && STC.STCINWD_WitnessBy_var != string.Empty)
                    {
                        Witnessby = STC.STCINWD_WitnessBy_var.ToString();
                    }
                    TestId = Convert.ToInt32(STC.STCINWD_TEST_Id);
                    if (STC.STCINWD_RemoteApproved == true && STC.STCINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }
                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(STC.CONT_Name_var + " - " + STC.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    if (STC.INWD_RptSITE_Id != null && STC.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(STC.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(STC.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(STC.STCINWD_ULRNo_var) != "" && Convert.ToString(STC.STCINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Chemical" + "    " + "Group : " + "Steel", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(STC.STCINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //
                }
                //MaindataTable.SpacingAfter = 2;
                pdfDoc.Add(MaindataTable);

                #endregion
                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(Chunk.NEWLINE);
                //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(new Paragraph(" ", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                #region tbldata

                PdfPCell cell1;
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(table1);
                table1 = new PdfPTable(8);  //tbl
                table1.WidthPercentage = 100;

                int i = 0;
                bool valid = false;
                decimal Sulphur = 0;
                decimal Phosphorous = 0;
                decimal SumOfSulPhos = 0;

                var SteelChemicalInwd_STC = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, true, 0, "", 0, 0, 0, 0, 0, "", 0, "STC").ToList();
                var Count = SteelChemicalInwd_STC.Count();
                for (int STC = 0; STC < Count; STC++)
                {
                    if (i == 0)
                    {
                        table1.SetTotalWidth(new float[] { 7f, 25f, 12f, 10f, 10f, 15f, 25f, 18f });
                        cell1 = new PdfPCell(new Phrase("Sr.No", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_TOP;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Id Mark", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_TOP;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Diameter \n (mm)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Carbon \n (%)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Manganese \n (%)", fontH2));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Sulphur \n (%)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Phosphorous \n (%)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Sulphur + Phosphorous \n (%)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Compliance", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }

                    string srNo = Convert.ToString(STC + 1);
                    string[] line = Convert.ToString(SteelChemicalInwd_STC[STC].STCTEST_Sulphur_var).Split('*');
                    foreach (string line1 in line)
                    {
                        if (line1 != "")
                        {
                            if (decimal.TryParse(line1, out Sulphur))
                            {
                                Sulphur = Convert.ToDecimal(line1);
                            }
                        }
                    }
                    string[] line3 = Convert.ToString(SteelChemicalInwd_STC[STC].STCTEST_Phosphorous_var).Split('*');
                    foreach (string line4 in line3)
                    {
                        if (line4 != "")
                        {
                            if (decimal.TryParse(line4, out Phosphorous))
                            {
                                Phosphorous = Convert.ToDecimal(line4);
                            }
                        }
                    }

                    SumOfSulPhos = Sulphur + Phosphorous;
                    cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(SteelChemicalInwd_STC[STC].STCTEST_IdMark_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(SteelChemicalInwd_STC[STC].STCTEST_Diameter_tint), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(SteelChemicalInwd_STC[STC].STCTEST_Carbon_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    //if (dc.Connection.ConnectionString.ToString().ToLower().Contains("=veenalive"))
                    //{
                    //    cell1 = new PdfPCell(new Phrase(Convert.ToString(SteelChemicalInwd_STC[STC].STCTEST_Manganese_var), fontH1));
                    //}
                    //else
                    //{
                    //    cell1 = new PdfPCell(new Phrase(Convert.ToString("# " + SteelChemicalInwd_STC[STC].STCTEST_Manganese_var), fontH1));
                    //}
                    //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    //table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(SteelChemicalInwd_STC[STC].STCTEST_Sulphur_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(SteelChemicalInwd_STC[STC].STCTEST_Phosphorous_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(SumOfSulPhos.ToString("0.000")), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    decimal SpecifiedLmt = 0;
                    decimal result = 0;
                    decimal Variation = 0;
                    valid = false;
                    var gInwd = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, false, 0, "", 0, 0, 0, 0, 0, Convert.ToString(SteelChemicalInwd_STC[STC].STCINWD_Grade_var), 0, "STC").ToList();
                    var gInwdcount = gInwd.Count();

                    for (int grd = 0; grd < gInwdcount; grd++)
                    {
                        decimal Value = 0;
                        if (Convert.ToString(gInwd[grd].Constituents) == "Carbon")
                        {
                            SpecifiedLmt = Convert.ToDecimal(gInwd[grd].SpecifiedLimit);
                            var variat = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, false, 0, "", 0, 0, 0, 0, 0, "% Variation", 0, "STC").ToList();
                            var variatcount = variat.Count();

                            for (int vat = 0; vat < variatcount; vat++)
                            {
                                if (Convert.ToString(variat[vat].Constituents) == "Carbon")
                                {
                                    Variation = Convert.ToDecimal(variat[vat].SpecifiedLimit);
                                    result = Variation + SpecifiedLmt;
                                    string[] s = Convert.ToString(SteelChemicalInwd_STC[STC].STCTEST_Carbon_var).Split('*');
                                    foreach (string line1 in s)
                                    {
                                        if (line1 != "")
                                        {
                                            if (decimal.TryParse(line1, out Value))
                                            {
                                                Value = Convert.ToDecimal(line1);
                                            }
                                        }
                                    }
                                    if (Value > result)
                                    {
                                        valid = true;
                                    }
                                    else
                                    {

                                    }
                                    break;
                                }
                            }

                        }
                        if (Convert.ToString(gInwd[grd].Constituents) == "Sulphur")
                        {
                            SpecifiedLmt = Convert.ToDecimal(gInwd[grd].SpecifiedLimit);
                            var variat = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, false, 0, "", 0, 0, 0, 0, 0, "% Variation", 0, "STC").ToList();
                            var variatCount = variat.Count();

                            for (int vat = 0; vat < variatCount; vat++)
                            {
                                if (Convert.ToString(variat[vat].Constituents) == "Sulphur")
                                {
                                    Variation = Convert.ToDecimal(variat[vat].SpecifiedLimit);
                                    result = Variation + SpecifiedLmt;
                                    string[] s = Convert.ToString(SteelChemicalInwd_STC[STC].STCTEST_Sulphur_var).Split('*');
                                    foreach (string line1 in s)
                                    {
                                        if (line1 != "")
                                        {
                                            if (decimal.TryParse(line1, out Value))
                                            {
                                                Value = Convert.ToDecimal(line1);
                                            }
                                        }
                                    }

                                    if (Value > result)
                                    {
                                        valid = true;
                                    }
                                    else
                                    {

                                    }
                                    break;
                                }
                            }
                        }


                        if (Convert.ToString(gInwd[grd].Constituents) == "Phosphorous")
                        {
                            SpecifiedLmt = Convert.ToDecimal(gInwd[grd].SpecifiedLimit);
                            var variat = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, false, 0, "", 0, 0, 0, 0, 0, "% Variation", 0, "STC").ToList();
                            var variatCount = variat.Count();

                            for (int vat = 0; vat < variatCount; vat++)
                            {
                                if (Convert.ToString(variat[vat].Constituents) == "Phosphorous")
                                {
                                    Variation = Convert.ToDecimal(variat[vat].SpecifiedLimit);
                                    result = Variation + SpecifiedLmt;
                                    string[] s = Convert.ToString(SteelChemicalInwd_STC[STC].STCTEST_Phosphorous_var).Split('*');
                                    foreach (string line1 in s)
                                    {
                                        if (line1 != "")
                                        {
                                            if (decimal.TryParse(line1, out Value))
                                            {
                                                Value = Convert.ToDecimal(line1);
                                            }
                                        }
                                    }
                                    if (Value > result)
                                    {
                                        valid = true;
                                    }
                                    else
                                    {

                                    }
                                    break;
                                }
                            }


                        }
                        if (Convert.ToString(gInwd[grd].Constituents) == "Sulphur + Phosphorous")
                        {
                            SpecifiedLmt = Convert.ToDecimal(gInwd[grd].SpecifiedLimit);
                            var variat = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, false, 0, "", 0, 0, 0, 0, 0, "% Variation", 0, "STC").ToList();
                            var variatcount = variat.Count();

                            for (int vat = 0; vat < variatcount; vat++)
                            {
                                if (Convert.ToString(variat[vat].Constituents) == "Sulphur + Phosphorous")
                                {
                                    Variation = Convert.ToDecimal(variat[vat].SpecifiedLimit);
                                    result = Variation + SpecifiedLmt;
                                    //if (SumOfSulPhos > Variation)
                                    if (SumOfSulPhos > result)
                                    {
                                        valid = true;
                                    }
                                    else
                                    {

                                    }
                                    break;
                                }
                            }
                        }
                    }

                    if (valid == true)
                    {
                        cell1 = new PdfPCell(new Phrase("Fail", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    else
                    {
                        cell1 = new PdfPCell(new Phrase("Pass", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    i++;
                }
                cell1 = new PdfPCell(new Phrase("  ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Colspan = 9;
                table1.AddCell(cell1);

                i = 0;
                if (i == 0)
                {
                    //cell1 = new PdfPCell(new Phrase("Specified Limits as per IS 1786-2018", fontH2));
                    cell1 = new PdfPCell(new Phrase("Specified Limits as per IS:1786-2008 (R.A 2018)", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1.VerticalAlignment = Element.ALIGN_CENTER;
                    cell1.Colspan = 3;
                    cell1.Rowspan = 2;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Carbon \n (%)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    //cell1 = new PdfPCell(new Phrase("Manganese \n (%)", fontH1));
                    //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    //table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Sulphur \n (%)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Phosphorous \n (%)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Sulphur + Phosphorous \n (%)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("---", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                //cell1 = new PdfPCell(new Phrase("", fontH1));
                //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                //cell1.Colspan = 3;
                //table1.AddCell(cell1);
                string SteelOfGrade = "";
                int ApprvUserId = 0;
                int CheckedUserId = 0;
                var InwardSTC = dc.ReportStatus_View("Steel Chemical Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0).ToList();
                var InwardSTCcount = InwardSTC.Count();
                for (int STC = 0; STC < InwardSTCcount; STC++)
                {
                    SteelOfGrade = Convert.ToString(InwardSTC[STC].STCINWD_Grade_var);
                    if (Convert.ToString(InwardSTC[STC].STCINWD_ApprovedBy_tint) != null)
                    {
                        ApprvUserId = Convert.ToByte(InwardSTC[STC].STCINWD_ApprovedBy_tint);
                    }
                    if (Convert.ToString(InwardSTC[STC].STCINWD_CheckedBy_tint) != null)
                    {
                        CheckedUserId = Convert.ToByte(InwardSTC[STC].STCINWD_CheckedBy_tint);
                    }
                }
                string Grade = Grdae;
                var gradeSteel = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, false, 0, "", 0, 0, 0, 0, 0, Convert.ToString(Grade), 0, "STC").ToList();
                var gradeSteelcount = gradeSteel.Count();

                for (int stlgrd = 0; stlgrd < gradeSteelcount; stlgrd++)
                {
                    if (Convert.ToString(gradeSteel[stlgrd].Constituents) == "Carbon")
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(gradeSteel[stlgrd].SpecifiedLimit), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("---", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                    }

                    if (Convert.ToString(gradeSteel[stlgrd].Constituents) == "Sulphur")
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(gradeSteel[stlgrd].SpecifiedLimit), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (Convert.ToString(gradeSteel[stlgrd].Constituents) == "Phosphorous")
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(gradeSteel[stlgrd].SpecifiedLimit), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (Convert.ToString(gradeSteel[stlgrd].Constituents) == "Sulphur + Phosphorous")
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(gradeSteel[stlgrd].SpecifiedLimit), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }

                }
                cell1 = new PdfPCell(new Phrase("---", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Variation, over specified maximum limit,% max", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                cell1.Colspan = 3;
                table1.AddCell(cell1);


                var FixVariation = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, false, 0, "", 0, 0, 0, 0, 0, "% Variation", 0, "STC").ToList();
                var FixVariationcount = FixVariation.Count();
                for (int stlvar = 0; stlvar < FixVariationcount; stlvar++)
                {
                    if (Convert.ToString(FixVariation[stlvar].Constituents) == "Carbon")
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(FixVariation[stlvar].SpecifiedLimit).ToString("0.00"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("---", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                    }

                    if (Convert.ToString(FixVariation[stlvar].Constituents) == "Sulphur")
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(FixVariation[stlvar].SpecifiedLimit).ToString("0.000"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (Convert.ToString(FixVariation[stlvar].Constituents) == "Phosphorous")
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(FixVariation[stlvar].SpecifiedLimit).ToString("0.000"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (Convert.ToString(FixVariation[stlvar].Constituents) == "Sulphur + Phosphorous")
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(FixVariation[stlvar].SpecifiedLimit).ToString("0.000"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }

                }
                cell1 = new PdfPCell(new Phrase("---", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                table1.AddCell(cell1);
                table1.SpacingAfter = 5;
                pdfDoc.Add(table1);

                #endregion

                //table1.SpacingBefore = 10;
                #region iscode
                table1 = new PdfPTable(2);
                table1.SpacingAfter = 5;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;

                int serial_no = 0;
                var iscd = dc.ISCode_View(0, "", "STC", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                serial_no = 0;
                var reference = dc.AllRemark_View("", ReferenceNo, 0, "STC").ToList();
                var referencecount = reference.Count();
                if (referencecount > 0)
                {
                    for (int r = 0; r < referencecount; r++)
                    {
                        if (r == 0 && referencecount > 0)
                        {
                            //pdfDoc.Add(new Paragraph("Remarks :", fontH2));
                            cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        var remark = dc.AllRemark_View("", "", Convert.ToInt32(reference[r].STCDetail_RemarkId_int), "STC").ToList();
                        var remarkcount = remark.Count();
                        for (int remk = 0; remk < remarkcount; remk++)
                        {
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(serial_no + ")" + " " + Convert.ToString(remark[remk].STC_Remark_var), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remark[remk].STC_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (serial_no == 0)
                {
                    cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                    cell2.Colspan = 2;
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                }
                //if (dc.Connection.ConnectionString.ToString().ToLower().Contains("=veenalive"))
                //{
                //    ///
                //}
                //else
                //{
                //    serial_no++;
                //    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                //    cell2.Border = PdfPCell.NO_BORDER;
                //    table1.AddCell(cell2);
                //    cell2 = new PdfPCell(new Phrase("'#' This test does not cover under NABL scope.", fontH1));
                //    cell2.Border = PdfPCell.NO_BORDER;
                //    table1.AddCell(cell2);
                //    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                //    cell2.FixedHeight = 5f;
                //    cell2.Border = PdfPCell.NO_BORDER;
                //    cell2.Colspan = 2;
                //    table1.AddCell(cell2);
                //}

                if (supersedeNote != "")
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 8;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);

                #endregion

                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 12;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("Steel Chemical Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0).ToList();
                    var RecNocount = RecNo.Count();
                    for (int r = 0; r < RecNocount; r++)
                    {
                        if (RecNo[r].STCINWD_ApprovedBy_tint != null && RecNo[r].STCINWD_ApprovedBy_tint.ToString() != "" && RecNo[r].STCINWD_ApprovedBy_tint > 0)
                        {
                            var User = dc.User_View(Convert.ToInt32(RecNo[r].STCINWD_ApprovedBy_tint), -1, "", "", "").ToList();
                            var ucount = User.Count();
                            for (int userId = 0; userId < ucount; userId++)
                            {

                                pdfDoc.Add(new Paragraph(Convert.ToString(User[userId].USER_Name_var), fontH1));
                                if (User[userId].USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + User[userId].USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(User[userId].USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }

                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (RecNo[r].STCINWD_CheckedBy_tint != null && RecNo[r].STCINWD_CheckedBy_tint.ToString() != "" && RecNo[r].STCINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(Convert.ToInt32(RecNo[r].STCINWD_CheckedBy_tint), -1, "", "", "").ToList();
                            var lginCount = lgin.Count();
                            for (int loginusr = 0; loginusr < lginCount; loginusr++)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by :  " + Convert.ToString(lgin[loginusr].USER_Name_var), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                pdfDoc.Add(new Paragraph("Page 1 of 1", fontH1));
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void ST_PDFReport(string ReferenceNo, string Action)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("ST", ReferenceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "ST_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Steel";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "ST_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                    //Subfoldername1 = System.Web.HttpContext.Current.Server.MapPath("~") + "Reports/";
                }
                //PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "ST_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                {
                    LogoToPdfEmail(pdfDoc, nablStatus);
                }
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);

                #region data
                //DateTime ApproveDt = new DateTime();
                DateTime? ApproveDt = null;
                float[] widths = new float[] { 18f, 1f, 50f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                string Witnessby = string.Empty, CustName = "", SiteName = "", Address = "";
                bool RemotelyAppv = false;
                int Approveby = 0;
                string supersedeNote = "";
                bool compNoteFlg = false;
                DateTime? dtTesting = null;
                var Steel = dc.ReportStatus_View("Steel Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var st in Steel)
                {
                    if (st.INWD_RptSITE_Id != null && st.INWD_RptCL_Id != null)
                    {
                        CustName = st.RptCL_Name_var;
                        SiteName = st.RptST_Name_var;
                        Address = st.RptCL_OfficeAddress_var;

                    }
                    else
                    {
                        CustName = st.CL_Name_var;
                        SiteName = st.SITE_Name_var;
                        Address = st.CL_OfficeAddress_var;
                    }
                    SiteRouteId = Convert.ToInt32(st.SITE_Route_Id);

                    if (st.STINWD_ComplianceNote_var == "Add")
                    {
                        compNoteFlg = true;
                    }
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    //  paragraph.Add(" "); pdfDoc.Add(paragraph);

                    //if (st.STINWD_Status_tint == 4 || st.STINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2;
                    pdfDoc.Add(paragraph);

                    if (st.STINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(st.STINWD_ApprovedBy_tint);
                    }


                    if (Convert.ToString(st.STINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(st.STINWD_ApprovedDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 5;
                    paragraph.Add("Reinforcement Steel / Rebars");
                    if (st.STINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}


                    if (st.STINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }


                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("ST", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("ST - " + Convert.ToString(st.STINWD_SetOfRecord_var), fontH1));
                    string strRecNo = st.STINWD_SetOfRecord_var;
                    if (st.STINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (st.STINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (st.STINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(st.STINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + st.STINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    Cust_Namecell = new PdfPCell(new Phrase("Type of Steel", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (st.STINWD_SteelType_var == "Ribbed Steel")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("High Yield Strength Deformed Bars(Ribbed)", fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(st.STINWD_SteelType_var, fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    //Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);
                    //if (st.SITE_MonthlyBillingStatus_bit == true && st.INWD_BILL_Id == "0")
                    //{
                    //    //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                    //    if (st.STINWD_IssueDate_dt != null)
                    //    {
                    //        string monthlyBillNo = Convert.ToDateTime(st.STINWD_IssueDate_dt).ToString("MMM/yyyy");
                    //        Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                    //    }
                    //    else
                    //    {
                    //        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    //    }
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(st.INWD_BILL_Id), fontH1));
                    //}
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);
                    Boolean flgCoupon = false;
                     if (st.STINWD_CouponNo_Var != null)
                    {
                        if (st.STINWD_CouponNo_Var != "")
                        {
                            flgCoupon = true;
                        }
                    }

                    if (flgCoupon==false )
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Coupon No", fontH1));
                    }

                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (flgCoupon==false )
                    {

                        if (st.SITE_MonthlyBillingStatus_bit == true && st.INWD_BILL_Id == "0")
                        {
                            //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                            if (st.STINWD_IssueDate_dt != null)
                            {
                                string monthlyBillNo = Convert.ToDateTime(st.STINWD_IssueDate_dt).ToString("MMM/yyyy");
                                Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                            }
                            else
                            {
                                Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                            }
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(st.INWD_BILL_Id), fontH1));
                        }
                    }
                    else if (flgCoupon==true)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(st.STINWD_CouponNo_Var), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    Cust_Namecell = new PdfPCell(new Phrase("Grade of Steel", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(st.STINWD_Grade_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (st.STINWD_ReceivedDate_dt != null)
                    {
                        DateTime rDT = Convert.ToDateTime(st.STINWD_ReceivedDate_dt);
                        string receiptDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(receiptDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(st.STINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (st.STINWD_TestedDate_dt != null)
                    {
                        dtTesting = Convert.ToDateTime(st.STINWD_TestedDate_dt);
                        DateTime rDT = Convert.ToDateTime(st.STINWD_TestedDate_dt);
                        string TestingDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(TestingDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (Convert.ToString(st.STINWD_SupplierName_var) != "")
                        Cust_Namecell = new PdfPCell(new Phrase(st.STINWD_SupplierName_var, fontH1));
                    else
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    //if (st.STINWD_IssueDate_dt != null)
                    //{
                    //    DateTime iDT = Convert.ToDateTime(st.STINWD_IssueDate_dt);
                    //    string issuedt = iDT.ToString("dd-MMM-yyyy");
                    //    Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    //}
                    if (st.STINWD_ApprovedDate_dt != null)
                    {
                        DateTime iDT = Convert.ToDateTime(st.STINWD_ApprovedDate_dt);
                        string issuedt = iDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    if (st.STINWD_WitnessBy_var != null && st.STINWD_WitnessBy_var != string.Empty)
                    {
                        Witnessby = st.STINWD_WitnessBy_var;
                    }
                    if (st.STINWD_RemoteApproved == true && st.STINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }

                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(st.CONT_Name_var + " - " + st.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    if (st.INWD_RptSITE_Id != null && st.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(st.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(st.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(st.STINWD_ULRNo_var) != "" && Convert.ToString(st.STINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(st.STINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //
                }
                //MaindataTable.SpacingAfter = 2;
                pdfDoc.Add(MaindataTable);

                #endregion

                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);
                #region tbldata
                bool wtpermetr = false, tensile = false, bend = false, usysratio = false;

                var stInwd = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, true, 0, "", 0, 0, 0, 0, 0, "", 0, "ST");
                foreach (var st in stInwd)
                {
                    if (st.TEST_Sr_No == 4)
                    {
                        wtpermetr = true;
                    }
                    if (st.TEST_Sr_No == 1 || st.TEST_Sr_No == 2 || st.TEST_Sr_No == 6 || st.TEST_Sr_No == 7 || st.TEST_Sr_No == 8)
                    {
                        tensile = true;
                    }
                    if (st.TEST_Sr_No == 5)
                    {
                        bend = true;
                    }
                }

                PdfPCell cell1;
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(table1);
                //table1 = new PdfPTable(6);
                // table1.WidthPercentage = 100;
                int j = 3;
                var SteeInward_ST = dc.SteelDetailInward_Update(ReferenceNo, 0, "", 0, 0, 0, 0, 0, "", "", 0, 0, 0, 0, 0, 0, "", "", 0, 0, "", "", "", "", "", "", false, true, false).ToList();
                var Count = SteeInward_ST.Count();
                for (int ST = 0; ST < Count; ST++)
                {
                    if (ST == 0)
                    {
                        if (SteeInward_ST[ST].STDETAIL_CSArea_dec != null && Convert.ToDecimal(SteeInward_ST[ST].STDETAIL_CSArea_dec) != 0)
                        {
                            j++;
                        }
                        if (SteeInward_ST[ST].STDETAIL_WtMeter_dec != null && Convert.ToDecimal(SteeInward_ST[ST].STDETAIL_WtMeter_dec) != 0 && wtpermetr == true)
                        {
                            j++;
                        }
                        //if (SteeInward_ST[ST].STINWD_AvgWtMeter_dec != null && Convert.ToDecimal(SteeInward_ST[ST].STINWD_AvgWtMeter_dec) != 0 && wtpermetr == true)
                        if (SteeInward_ST[ST].STINWD_AvgWtMeter_dec != null && wtpermetr == true)
                        {
                            j++;
                        }
                        if (SteeInward_ST[ST].STDETAIL_Rebend_var != null && Convert.ToString(SteeInward_ST[ST].STDETAIL_Rebend_var) != "")
                        {
                            j++;
                        }
                        if (SteeInward_ST[ST].STDETAIL_Bend_var != null && Convert.ToString(SteeInward_ST[ST].STDETAIL_Bend_var) != "")
                        {
                            j++;
                        }
                        if (SteeInward_ST[ST].STDETAIL_Elongation_dec != null && SteeInward_ST[ST].STDETAIL_Elongation_dec != 0 && tensile == true)
                        {
                            j++;
                        }
                        if (SteeInward_ST[ST].STDETAIL_YieldStress_dec != null && SteeInward_ST[ST].STDETAIL_YieldStress_dec != 0 && tensile == true)
                        {
                            j++;
                        }
                        if (SteeInward_ST[ST].STDETAIL_UltimateStress_dec != null && SteeInward_ST[ST].STDETAIL_UltimateStress_dec != 0 && tensile == true)
                        {
                            j++;
                        }
                        if (Convert.ToDateTime(SteeInward_ST[ST].STINWD_ReceivedDate_dt) >= DateTime.ParseExact("20/01/2022", "dd/MM/yyyy", null))
                        {
                            if (SteeInward_ST[ST].STDETAIL_YieldStress_dec != null && SteeInward_ST[ST].STDETAIL_YieldStress_dec != 0
                                && SteeInward_ST[ST].STDETAIL_UltimateStress_dec != null && SteeInward_ST[ST].STDETAIL_UltimateStress_dec != 0
                                && tensile == true)
                            {
                                j++;
                                usysratio = true;
                            }
                        }
                        table1 = new PdfPTable(j);
                        table1.WidthPercentage = 100;
                    }
                    if (ST == 0)
                    {
                        if (j == 3)
                        {
                            table1.SetTotalWidth(new float[] { 3f, 10f, 50f });
                        }
                        if (j == 4)
                        {
                            table1.SetTotalWidth(new float[] { 3f, 10f, 20f, 10f });
                        }
                        if (j == 5)
                        {
                            table1.SetTotalWidth(new float[] { 5f, 10f, 20f, 10f, 10f });
                        }
                        if (j == 6)
                        {
                            table1.SetTotalWidth(new float[] { 5f, 10f, 20f, 10f, 12f, 12f, });
                        }
                        if (j == 7)
                        {
                            table1.SetTotalWidth(new float[] { 5f, 10f, 15f, 10f, 12f, 12f, 10f });
                        }
                        if (j == 8)
                        {
                            table1.SetTotalWidth(new float[] { 5f, 10f, 15f, 10f, 10f, 10f, 10f, 10f });
                        }
                        if (j == 9)
                        {
                            table1.SetTotalWidth(new float[] { 5f, 10f, 12f, 10f, 10f, 10f, 10f, 10f, 10f });
                        }
                        if (j == 10)
                        {
                            table1.SetTotalWidth(new float[] { 5f, 10f, 12f, 10f, 10f, 10f, 10f, 10f, 10f, 10f });
                        }
                        if (j == 11)
                        {
                            table1.SetTotalWidth(new float[] { 7f, 12f, 12f, 10f, 8f, 12f, 14f, 15f, 12f, 12f, 10f });
                        }
                        if (j == 12)
                        {
                            table1.SetTotalWidth(new float[] { 7f, 12f, 12f, 10f, 8f, 11f, 14f, 15f, 13f, 10f, 11f, 9f });
                        }
                        cell1 = new PdfPCell(new Phrase("Sr. No", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Rowspan = 2;

                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Dia of bar", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Id Mark", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);

                        if (SteeInward_ST[ST].STDETAIL_CSArea_dec != null && Convert.ToDecimal(SteeInward_ST[ST].STDETAIL_CSArea_dec) != 0)
                        {
                            cell1 = new PdfPCell(new Phrase("C/S Area", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (SteeInward_ST[ST].STDETAIL_WtMeter_dec != null && Convert.ToDecimal(SteeInward_ST[ST].STDETAIL_WtMeter_dec) != 0 && wtpermetr == true)
                        {
                            cell1 = new PdfPCell(new Phrase("Wt/m", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        //if (SteeInward_ST[ST].STINWD_AvgWtMeter_dec != null && Convert.ToDecimal(SteeInward_ST[ST].STINWD_AvgWtMeter_dec) != 0 && wtpermetr == true)
                        if (SteeInward_ST[ST].STINWD_AvgWtMeter_dec != null && wtpermetr == true)
                        {
                            cell1 = new PdfPCell(new Phrase("Avg Wt/m", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (SteeInward_ST[ST].STDETAIL_Rebend_var != null && Convert.ToString(SteeInward_ST[ST].STDETAIL_Rebend_var) != "")
                        {
                            cell1 = new PdfPCell(new Phrase("Rebend Test", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (SteeInward_ST[ST].STDETAIL_Bend_var != null && Convert.ToString(SteeInward_ST[ST].STDETAIL_Bend_var) != "")
                        {
                            cell1 = new PdfPCell(new Phrase("Bend Test", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                        }
                        if (SteeInward_ST[ST].STDETAIL_Elongation_dec != null && SteeInward_ST[ST].STDETAIL_Elongation_dec != 0 && tensile == true)
                        {
                            cell1 = new PdfPCell(new Phrase("Elongation", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (SteeInward_ST[ST].STDETAIL_UltimateStress_dec != null && Convert.ToDecimal(SteeInward_ST[ST].STDETAIL_UltimateStress_dec) != 0 && Convert.ToString(SteeInward_ST[ST].STDETAIL_YieldStress_dec) != null && Convert.ToDecimal(SteeInward_ST[ST].STDETAIL_YieldStress_dec) != 0 && tensile == true)
                        {
                            cell1 = new PdfPCell(new Phrase("Tensile Stress(N/mm²)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Colspan = 2;
                            table1.AddCell(cell1);

                        }
                        if (usysratio == true)
                        {
                            cell1 = new PdfPCell(new Phrase("US/YS Ratio", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);
                        }

                        cell1 = new PdfPCell(new Phrase("(mm)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        if (SteeInward_ST[ST].STDETAIL_CSArea_dec != null && SteeInward_ST[ST].STDETAIL_CSArea_dec != 0)
                        {
                            cell1 = new PdfPCell(new Phrase("(mm²)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (SteeInward_ST[ST].STDETAIL_WtMeter_dec != null && SteeInward_ST[ST].STDETAIL_WtMeter_dec != 0 && wtpermetr == true)
                        {
                            cell1 = new PdfPCell(new Phrase("(kg)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        //if (SteeInward_ST[ST].STINWD_AvgWtMeter_dec != null && SteeInward_ST[ST].STINWD_AvgWtMeter_dec != 0 && wtpermetr == true)
                        if (SteeInward_ST[ST].STINWD_AvgWtMeter_dec != null && wtpermetr == true)
                        {
                            cell1 = new PdfPCell(new Phrase("(kg)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (SteeInward_ST[ST].STDETAIL_Rebend_var != null && SteeInward_ST[ST].STDETAIL_Rebend_var != "")
                        {
                            cell1 = new PdfPCell(new Phrase("(135° /157.5°)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (SteeInward_ST[ST].STDETAIL_Bend_var != null && SteeInward_ST[ST].STDETAIL_Bend_var != "")
                        {
                            cell1 = new PdfPCell(new Phrase("(180°)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (SteeInward_ST[ST].STDETAIL_Elongation_dec != null && SteeInward_ST[ST].STDETAIL_Elongation_dec != 0 && tensile == true)
                        {
                            cell1 = new PdfPCell(new Phrase("(%)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (SteeInward_ST[ST].STDETAIL_YieldStress_dec != null && SteeInward_ST[ST].STDETAIL_YieldStress_dec != 0 && tensile == true)
                        {
                            //cell1 = new PdfPCell(new Phrase("0.2 % Proof", fontH2));yield
                            cell1 = new PdfPCell(new Phrase("Yield", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                        }
                        if (SteeInward_ST[ST].STDETAIL_UltimateStress_dec != null && SteeInward_ST[ST].STDETAIL_UltimateStress_dec != 0 && tensile == true)
                        {
                            cell1 = new PdfPCell(new Phrase("Ultimate", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                    string strStarFlag = ",,,,,";
                    if (SteeInward_ST[ST].STDETAIL_StarFlag_var != null && SteeInward_ST[ST].STDETAIL_StarFlag_var != "")
                        strStarFlag = SteeInward_ST[ST].STDETAIL_StarFlag_var;
                    string[] strStar = strStarFlag.Split(',');

                    string srNo = Convert.ToString(ST + 1);
                    cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(SteeInward_ST[ST].STINWD_Diameter_tint), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(SteeInward_ST[ST].STDETAIL_IdMark_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    if (SteeInward_ST[ST].STDETAIL_CSArea_dec != null && Convert.ToDecimal(SteeInward_ST[ST].STDETAIL_CSArea_dec) != 0)
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SteeInward_ST[ST].STDETAIL_CSArea_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (SteeInward_ST[ST].STDETAIL_WtMeter_dec != null && Convert.ToDecimal(SteeInward_ST[ST].STDETAIL_WtMeter_dec) != 0 && wtpermetr == true)
                    {
                        cell1 = new PdfPCell(new Phrase(strStar[0] + " " + Convert.ToString(SteeInward_ST[ST].STDETAIL_WtMeter_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (ST == 0)
                    {
                        //if (SteeInward_ST[ST].STINWD_AvgWtMeter_dec != null && Convert.ToDecimal(SteeInward_ST[ST].STINWD_AvgWtMeter_dec) != 0 && wtpermetr == true)
                        if (SteeInward_ST[ST].STINWD_AvgWtMeter_dec != null && wtpermetr == true)
                        {
                            if (Convert.ToDecimal(SteeInward_ST[ST].STINWD_AvgWtMeter_dec) == 0)
                            {
                                cell1 = new PdfPCell(new Phrase("NA", fontH1));
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(strStar[4] + " " + Convert.ToString(SteeInward_ST[ST].STINWD_AvgWtMeter_dec), fontH1));
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                            }
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Rowspan = Count;
                            table1.AddCell(cell1);
                        }
                    }
                    if (SteeInward_ST[ST].STDETAIL_Rebend_var != null && Convert.ToString(SteeInward_ST[ST].STDETAIL_Rebend_var) != "")
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SteeInward_ST[ST].STDETAIL_Rebend_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (SteeInward_ST[ST].STDETAIL_Bend_var != null && Convert.ToString(SteeInward_ST[ST].STDETAIL_Bend_var) != "")
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(SteeInward_ST[ST].STDETAIL_Bend_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (SteeInward_ST[ST].STDETAIL_Elongation_dec != null && Convert.ToDecimal(SteeInward_ST[ST].STDETAIL_Elongation_dec) != 0 && tensile == true)
                    {
                        cell1 = new PdfPCell(new Phrase(strStar[1] + " " + Convert.ToString(SteeInward_ST[ST].STDETAIL_Elongation_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (SteeInward_ST[ST].STDETAIL_YieldStress_dec != null && Convert.ToDecimal(SteeInward_ST[ST].STDETAIL_YieldStress_dec) != 0 && tensile == true)
                    {
                        cell1 = new PdfPCell(new Phrase(strStar[2] + " " + Convert.ToString(SteeInward_ST[ST].STDETAIL_YieldStress_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (SteeInward_ST[ST].STDETAIL_UltimateStress_dec != null && Convert.ToDecimal(SteeInward_ST[ST].STDETAIL_UltimateStress_dec) != 0 && tensile == true)
                    {
                        cell1 = new PdfPCell(new Phrase(strStar[3] + " " + Convert.ToString(SteeInward_ST[ST].STDETAIL_UltimateStress_dec), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    string strTemp = "";
                    if (SteeInward_ST[ST].STDETAIL_UltimateStress_dec != null && SteeInward_ST[ST].STDETAIL_YieldStress_dec != null && SteeInward_ST[ST].STDETAIL_YieldStress_dec != 0)
                    {
                        strTemp = Convert.ToDecimal(SteeInward_ST[ST].STDETAIL_UltimateStress_dec / SteeInward_ST[ST].STDETAIL_YieldStress_dec).ToString("0.00");
                    }
                    if (usysratio == true)
                    {
                        cell1 = new PdfPCell(new Phrase(strTemp, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                }
                table1.SpacingAfter = 5;
                pdfDoc.Add(table1);

                #endregion

                //table1.SpacingBefore = 10;

                #region iscode
                table1 = new PdfPTable(2);
                //table1.SpacingAfter = 5;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                if (compNoteFlg == true)
                {
                    serial_no++;
                    //pdfDoc.Add(new Paragraph("Compliance :", fontH2));
                    cell2 = new PdfPCell(new Phrase("Compliance :", fontH2));
                    cell2.Colspan = 2;
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    //pdfDoc.Add(new Paragraph("1)" + "Sample satisfies the criteria as per IS 1786-2008 for the test(s) conducted.", fontH1));
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("Sample satisfies the criteria as per IS 1786-2008(RA-2018) for the test(s) conducted.", fontH2));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                serial_no = 0;
                //

                //
                var iscd = dc.ISCode_View(0, "", "ST", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if ((bend == true && cd.Isc_Description_var.Contains("Bend"))
                            || cd.Isc_Description_var.Contains("Bend") == false)
                        {
                            if (serial_no == 0)
                            {
                                //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                                cell2 = new PdfPCell(new Phrase("References :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            serial_no++;
                            //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            if (cd.Isc_Description_var.Contains("IS 1786 - 2018") && (ReferenceNo == "75678/2-1" || ReferenceNo == "75678/2-2" || ReferenceNo == "81851/1-1"))
                            {
                                cell2 = new PdfPCell(new Phrase("IS 432 : Part 2: 1982 (RA :2015), Mild Steel and Medium Tensile Steel Bars and Hard-Drawn Steel Wire for Concrete Reinforcement: Part1 Mild Steel Tensile Steel Bars.", fontH1));
                            }
                            else
                            {
                                cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                            }
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                serial_no = 0;
                var reference = dc.AllRemark_View("", ReferenceNo, 0, "ST").ToList();
                var referencecount = reference.Count();
                if (referencecount > 0)
                {
                    for (int r = 0; r < referencecount; r++)
                    {
                        var remark = dc.AllRemark_View("", "", Convert.ToInt32(reference[r].STDetail_RemarkId_int), "ST").ToList();
                        var remarkcount = remark.Count();
                        for (int remk = 0; remk < remarkcount; remk++)
                        {

                            if (serial_no == 0)
                            {
                                //pdfDoc.Add(new Paragraph("Remarks :", fontH2));
                                cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(serial_no + ")" + Convert.ToString(remark[remk].ST_Remark_var), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remark[remk].ST_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);

                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 5;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);
                #endregion

                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 5;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("Steel Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0).ToList();
                    var RecNocount = RecNo.Count();
                    for (int r = 0; r < RecNocount; r++)
                    {
                        if (RecNo[r].STINWD_ApprovedBy_tint != null && RecNo[r].STINWD_ApprovedBy_tint.ToString() != "" && RecNo[r].STINWD_ApprovedBy_tint > 0)
                        {
                            var User = dc.User_View(Convert.ToInt32(RecNo[r].STINWD_ApprovedBy_tint), -1, "", "", "").ToList();
                            var ucount = User.Count();
                            for (int userId = 0; userId < ucount; userId++)
                            {

                                pdfDoc.Add(new Paragraph(Convert.ToString(User[userId].USER_Name_var), fontH1));
                                if (User[userId].USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + User[userId].USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(User[userId].USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Email" && ApproveDt != null)
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(Convert.ToDateTime(ApproveDt).ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }
                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (RecNo[r].STINWD_CheckedBy_tint != null && RecNo[r].STINWD_CheckedBy_tint.ToString() != "" && RecNo[r].STINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(Convert.ToInt32(RecNo[r].STINWD_CheckedBy_tint), -1, "", "", "").ToList();
                            var lginCount = lgin.Count();
                            for (int loginusr = 0; loginusr < lginCount; loginusr++)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by :  " + Convert.ToString(lgin[loginusr].USER_Name_var), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                pdfDoc.Add(new Paragraph("Page 1 of 1", fontH1));
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    //string pdfPath = @Subfoldername1 + "/" + fileName;
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void Tile_PDFReport(string RefNo, string Action)
        {
            try
            {
                string tileType = "", CustName = "", SiteName = "", Address = "", testName = "";
                var tileInwardData = dc.TileInward_View(RefNo, 0);
                foreach (var tileInword in tileInwardData)
                {
                    testName = tileInword.TEST_Name_var.ToString();
                    if (tileInword.INWD_RptSITE_Id != null && tileInword.INWD_RptCL_Id != null)
                    {
                        CustName = tileInword.RptCL_Name_var;
                        SiteName = tileInword.RptST_Name_var;
                        Address = tileInword.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = tileInword.CL_Name_var;
                        SiteName = tileInword.SITE_Name_var;
                        Address = tileInword.CL_OfficeAddress_var;
                    }

                    Paragraph paragraph = new Paragraph();
                    float marginTop = 100;
                    int nablStatus = -1, SiteRouteId = 0;
                    if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                        nablStatus = getNablLogoStatus("TILE", RefNo);//1 for priting nabl logo
                    if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                    {
                        marginTop = 21;
                    }
                    Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                    var fileName = "TILE_" + RefNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                    if (!Directory.Exists(@foldername))
                        Directory.CreateDirectory(@foldername);
                    string Subfoldername = foldername + "/Tile";
                    if (!Directory.Exists(@Subfoldername))
                        Directory.CreateDirectory(@Subfoldername);
                    string Subfoldername1 = Subfoldername;
                    if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                    {
                        fileName = "TILE_" + RefNo.Replace('/', '_') + ".pdf";
                        Subfoldername1 = foldername;
                    }
                    // PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                    PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                    //var fileName = "TILE_" + RefNo.Replace('/', '_') + ".pdf";
                    //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                    writer.PageEvent = new classPdfFooter1();

                    SiteRouteId = Convert.ToInt32(tileInword.SITE_Route_Id);

                    Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                    Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                    Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                    Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                    Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

                    pdfDoc.Open();
                    #region Header
                    PdfPTable table1 = null;
                    pdfDoc.Open();
                    PdfPTable MaindataTable = new PdfPTable(6);
                    MaindataTable.WidthPercentage = 100;
                    // float[] widths = new float[] { 18f, 47f, 18f, 17f };
                    float[] widths = new float[] { 18f, 1f, 50f, 16f, 1f, 17f };
                    MaindataTable.SetWidths(widths);
                    MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                    if (tileInword.TEST_Sr_No == 4 && testName.Equals("Crazing Resistance") && cnStr.ToLower().Contains("mumbai") == false)
                        nablStatus = 0;

                    if (Action.Contains("Print") == true)
                        LogoToPdf(pdfDoc, nablStatus);
                    else if (Action == "Automail" || Action.Contains("Email") == true)
                        LogoToPdfEmail(pdfDoc, nablStatus);
                    else if (Action.Contains("Display") == true)
                        LogoToPdfOld(pdfDoc, Action);
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Add(" ");
                    pdfDoc.Add(paragraph);
                    //if (tileInword.TILEINWD_Status_tint == 4 || tileInword.TILEINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    bool RemotelyAppv = false;
                    if (tileInword.TEST_Sr_No == 1 && tileInword.Test_RecType_var == "TILE") tileType = "Dimensions & Surface Quality";
                    else if (tileInword.TEST_Sr_No == 2 && tileInword.Test_RecType_var == "TILE") tileType = "Water Absorption";
                    else if (tileInword.TEST_Sr_No == 3 && tileInword.Test_RecType_var == "TILE") tileType = "Modulus Of Rupture";
                    else if (tileInword.TEST_Sr_No == 4 && tileInword.Test_RecType_var == "TILE") tileType = "Crazing Resistance";
                    else if (tileInword.TEST_Sr_No == 5 && tileInword.Test_RecType_var == "TILE") tileType = "Wet Transverse";
                    else if (tileInword.TEST_Sr_No == 7 && tileInword.Test_RecType_var == "TILE") tileType = "Scratch Hardness";

                    paragraph.Font = fontTitle; paragraph.SpacingAfter = 5;
                    paragraph.Add(tileInword.TILEINWD_RptTileType_var + " Tiles - " + tileType);
                    if (tileInword.TILEINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";

                    PdfPCell Cust_Namecell;
                    // MaindataTable.SpacingBefore = 1;
                    //MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);

                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);

                    //}

                    if (tileInword.TILEINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }


                    DateTime ApproveDt = new DateTime();
                    DateTime? dtTesting = null;

                    Cust_Namecell = new PdfPCell(new Phrase("Client Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (Convert.ToString(tileInword.TILEINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(tileInword.TILEINWD_ApprovedDate_dt);
                    }
                    try
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    }
                    catch (Exception ex)
                    {

                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    if (tileInword.TILEINWD_RemoteApproved == true && tileInword.TILEINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("TILE", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        string[] RefNo1 = Convert.ToString(RefNo).Split('/');
                        Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    }
                    catch (Exception ex)
                    {

                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH2));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase(": TILE - " + tileInword.TILEINWD_SetOfRecord_var, fontH1));
                    string supersedeNote = "";
                    string strRecNo = tileInword.TILEINWD_SetOfRecord_var;
                    if (tileInword.TILEINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (tileInword.TILEINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (tileInword.TILEINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(tileInword.TILEINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + tileInword.TILEINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));

                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Tile Type", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(tileInword.TILEINWD_RptTileType_var, fontH1));
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }

                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Bill No.", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        if (tileInword.SITE_MonthlyBillingStatus_bit == true && tileInword.INWD_BILL_Id == "0")
                        {
                            //Cust_Namecell = new PdfPCell(new Phrase(": " + "Monthly", fontH1));
                            if (tileInword.TILEINWD_IssueDate_dt != null)
                            {
                                string monthlyBillNo = Convert.ToDateTime(tileInword.TILEINWD_IssueDate_dt).ToString("MMM/yyyy");
                                Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                            }
                            else
                            {
                                Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                            }
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(tileInword.INWD_BILL_Id), fontH1));
                        }
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    }

                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(tileInword.TILEINWD_Description_var, fontH1));
                    }
                    catch (Exception ex)
                    {

                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        DateTime rDT = tileInword.INWD_ReceivedDate_dt.Value;
                        string receiptDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(receiptDt, fontH1));
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }

                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(tileInword.TILEINWD_SupplierName_var, fontH1));
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }

                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        dtTesting = Convert.ToDateTime(tileInword.TILEINWD_TestedDate_dt);
                        DateTime tDT = Convert.ToDateTime(tileInword.TILEINWD_TestedDate_dt);
                        string testingDt = tDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(testingDt, fontH1));
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }

                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(tileInword.CONT_Name_var + " - " + tileInword.INWD_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    try
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(tileInword.TILEINWD_IssueDate_dt.Value.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase(tileInword.TILEINWD_ApprovedDate_dt.Value.ToString("dd-MMM-yyyy"), fontH1));
                    }
                    catch (Exception ex)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    if (tileInword.INWD_RptSITE_Id != null && tileInword.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(tileInword.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(tileInword.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    //MaindataTable.SpacingAfter = 2;
                    pdfDoc.Add(MaindataTable);
                    #endregion
                    #region    SAMPLE DESCRIPTION CODE
                    PdfPTable sampleDescTable = new PdfPTable(6);
                    sampleDescTable.WidthPercentage = 100;
                    sampleDescTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                    // float[] tablewidth = new float[] { 18f, 47f, 18f, 17f };
                    float[] tablewidth = new float[] { 18f, 1f, 50f, 16f, 1f, 17f };
                    sampleDescTable.SetWidths(tablewidth);
                    if (tileInword.TEST_Sr_No == 1 && tileInword.Test_RecType_var == "TILE")
                    {
                        //    pdfDoc.Add(new Paragraph("SAMPLE DESCRIPTION :", fontH2));

                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        sampleDescTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        sampleDescTable.AddCell(Cust_Namecell);
                        var tile_DA = dc.TileDA_View(RefNo).ToList();
                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        sampleDescTable.AddCell(Cust_Namecell);

                        Cust_Namecell = new PdfPCell(new Phrase("No. of Specimen", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        sampleDescTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        sampleDescTable.AddCell(Cust_Namecell);
                        try
                        {
                            Cust_Namecell = new PdfPCell(new Phrase(tile_DA.Count().ToString(), fontH1));
                        }
                        catch (Exception ex)
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        sampleDescTable.AddCell(Cust_Namecell);
                        pdfDoc.Add(sampleDescTable);
                    }
                    string strISCode = "";
                    if (tileInword.TEST_Sr_No == 2 && tileInword.Test_RecType_var == "TILE")
                    {
                        // pdfDoc.Add(new Paragraph("SAMPLE DESCRIPTION :", fontH2));

                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        sampleDescTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        sampleDescTable.AddCell(Cust_Namecell);
                        var tile_WA = dc.TileWA_View(RefNo).ToList();
                        Cust_Namecell = new PdfPCell(new Phrase(" ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        sampleDescTable.AddCell(Cust_Namecell);


                        Cust_Namecell = new PdfPCell(new Phrase("No. of Specimen", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        sampleDescTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        sampleDescTable.AddCell(Cust_Namecell);
                        try
                        {
                            Cust_Namecell = new PdfPCell(new Phrase(tile_WA.Count().ToString(), fontH1));
                        }
                        catch (Exception ex)
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        sampleDescTable.AddCell(Cust_Namecell);
                        pdfDoc.Add(sampleDescTable);

                        strISCode = tileInword.TILEINWD_ReportDetails_var;
                    }

                    if (tileInword.TEST_Sr_No == 3 && tileInword.Test_RecType_var == "TILE")
                    {

                        string[] reportDt = tileInword.TILEINWD_ReportDetails_var.Split('|');
                        try
                        {
                            string splanL = reportDt[1];
                            string diameter = reportDt[3];
                            string thicknessOfRubber = reportDt[4];
                            string overlap = reportDt[5];
                            strISCode = reportDt[6];

                            Cust_Namecell = new PdfPCell(new Phrase("Diameter of Support Rod", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            sampleDescTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            sampleDescTable.AddCell(Cust_Namecell);
                            try
                            {
                                Cust_Namecell = new PdfPCell(new Phrase(diameter + " mm", fontH1));
                            }
                            catch (Exception ex)
                            {
                                Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                            }
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            sampleDescTable.AddCell(Cust_Namecell);

                            Cust_Namecell = new PdfPCell(new Phrase("Overlap Beyond Edge(l)", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            sampleDescTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            sampleDescTable.AddCell(Cust_Namecell);
                            try
                            {
                                Cust_Namecell = new PdfPCell(new Phrase(overlap + " mm", fontH1));
                            }
                            catch (Exception ex)
                            {
                                Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                            }
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            sampleDescTable.AddCell(Cust_Namecell);


                            Cust_Namecell = new PdfPCell(new Phrase("Span(L)", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            sampleDescTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            sampleDescTable.AddCell(Cust_Namecell);
                            try
                            {
                                Cust_Namecell = new PdfPCell(new Phrase(splanL + " mm", fontH1));
                            }
                            catch (Exception ex)
                            {
                                Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                            }
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            sampleDescTable.AddCell(Cust_Namecell);


                            Cust_Namecell = new PdfPCell(new Phrase("Thickness of Rubber(t)", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            sampleDescTable.AddCell(Cust_Namecell);
                            Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            sampleDescTable.AddCell(Cust_Namecell);
                            try
                            {
                                Cust_Namecell = new PdfPCell(new Phrase(thicknessOfRubber + " mm", fontH1));
                            }
                            catch (Exception ex)
                            {
                                Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                            }
                            Cust_Namecell.Border = PdfPCell.NO_BORDER;
                            sampleDescTable.AddCell(Cust_Namecell);
                            pdfDoc.Add(sampleDescTable);
                        }
                        catch { }
                    }
                    //ULR No
                    if (Convert.ToString(tileInword.TILEINWD_ULRNo_var) != "" && Convert.ToString(tileInword.TILEINWD_ULRNo_var) != null)
                    {
                        sampleDescTable = new PdfPTable(6);
                        sampleDescTable.WidthPercentage = 100;
                        sampleDescTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                        tablewidth = new float[] { 18f, 1f, 50f, 18f, 1f, 15f };
                        sampleDescTable.SetWidths(tablewidth);

                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Mechanical" + "    " + "Group : " + "Building Materials", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        sampleDescTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(tileInword.TILEINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        sampleDescTable.AddCell(Cust_Namecell);
                        pdfDoc.Add(sampleDescTable);
                    }
                    //
                    #endregion

                    #region Headers for table.

                    string[] headerWA = { "Sr.No.", "ID Mark", "Dry Weight (g)", "Wet Weight (g)", "Water absorption (%)", "Average water absorption (%)", "Specified limits as per IS " + strISCode };
                    string[] headerWT = { "Sr.No.", "ID Mark", "Wet transverse strength (N/mm²)", "Average wet transverse strength (N/mm²)", "Specified limit" };
                    string[] headerSH = { "Sr.No.", "ID Mark", "Moh's Scratch Hardness" };
                    string[] headerCR = { "Sr.No.", "ID Mark", "Crazing" };
                    //string[] headerMR = { "Sr.No.", "ID Mark", "Breaking Load", "Average Breaking Load", "Breaking Strength", "Average Breaking Strength", "Modulus of rupture(N/mm²)", "Average modulus of rupture(N/mm²)", "Specified Limits as per IS 4457:2007" };
                    string[] headerMR = { "Sr.No.", "ID Mark", "Breaking Load \n\n(N)", "Average Breaking Load \n(N)", "Breaking Strength \n\n(N)", "Average Breaking Strength (N)", "Modulus of rupture \n \n(N/mm²)", "Average modulus of rupture (N/mm²)", "Specified Limits as per IS " + strISCode };
                    string[] headerDA = { "Sr.No", "ID Mark", "Dimensions(mm)", "Average dimensions(mm)", "Specified limit(mm)" };

                    string[] subheaderDA = { "", "", "Length", "Width", "Thickness", "Length", "Width", "Thickness", "Length|Width|Thickness" };
                    #endregion

                    #region pdf code

                    string strMinSampleNote = "";
                    //   pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));
                    paragraph = new Paragraph();
                    paragraph.Font = fontH2;
                    paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                    paragraph.SpacingAfter = 5;
                    pdfDoc.Add(paragraph); string strTestName = "";
                    if (tileInword.TEST_Sr_No == 4 && tileInword.Test_RecType_var == "TILE")
                    {
                        #region Crazing Resistance

                        table1 = new PdfPTable(3);
                        float[] widthsCR = new float[] { 7f, 50f, 40f };
                        table1.SetWidths(widthsCR);
                        table1.SpacingBefore = 5;
                        var tile_CR = dc.TileCR_View(RefNo).ToList();
                        var count = tile_CR.Count();
                        //if (count < 5)
                        //    strMinSampleNote = "'**' Sample constitutes of minimum five specimens.";
                        int b = 0;
                        PdfPCell cell1;
                        for (int h = 0; h < headerCR.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headerCR[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        strTestName += "crazing,";
                        #region tbldata
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.WidthPercentage = 100;
                        for (int j = 0; j < count; j++)
                        {
                            string srNo = Convert.ToString(b + 1);
                            cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (tile_CR[j].TILECR_IdMark_var == "" || tile_CR[j].TILECR_IdMark_var == null)
                            {
                                cell1 = new PdfPCell(new Phrase("-", fontH1));
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(tile_CR[j].TILECR_IdMark_var, fontH1));
                            }
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(tile_CR[j].TILECR_Crazing_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            b++;
                        }
                        table1.SpacingAfter = 5;

                        pdfDoc.Add(table1);
                        #endregion
                        #endregion
                    }
                    else if (tileInword.TEST_Sr_No == 7 && tileInword.Test_RecType_var == "TILE")
                    {
                        #region Scratch Hardness

                        table1 = new PdfPTable(3);
                        float[] widthsSh = new float[] { 9f, 30f, 30f };
                        table1.SetWidths(widthsSh);
                        table1.SpacingBefore = 5;
                        var tile_SH = dc.TileSH_View(RefNo).ToList();
                        var count = tile_SH.Count();
                        //if (count < 5)
                        //    strMinSampleNote = "'**' Sample constitutes of minimum five specimens.";
                        int b = 0;
                        PdfPCell cell1;
                        for (int h = 0; h < headerSH.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headerSH[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        strTestName += "scratch,";
                        #region tbldata
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.WidthPercentage = 100;
                        for (int j = 0; j < count; j++)
                        {
                            string srNo = Convert.ToString(b + 1);
                            cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (tile_SH[j].TILESH_IdMark_var == "" || tile_SH[j].TILESH_IdMark_var == null)
                            {
                                cell1 = new PdfPCell(new Phrase("-", fontH1));
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(tile_SH[j].TILESH_IdMark_var, fontH1));
                            }
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(tile_SH[j].TILESH_ScratchHardness_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            b++;
                        }

                        table1.SpacingAfter = 5;
                        pdfDoc.Add(table1);
                        #endregion
                        #endregion
                    }
                    else if (tileInword.TEST_Sr_No == 5 && tileInword.Test_RecType_var == "TILE")
                    {
                        #region Wet Transverse

                        table1 = new PdfPTable(5);
                        float[] widthsWT = new float[] { 7f, 25f, 25f, 28f, 15f };
                        table1.SetWidths(widthsWT);
                        table1.SpacingBefore = 5;
                        var tile_WT = dc.TileWT_View(RefNo).ToList();
                        var count = tile_WT.Count();
                        //if (count < 6)
                        //    strMinSampleNote = "'**' Sample constitutes of minimum six specimens.";
                        int b = 0;
                        PdfPCell cell1;
                        for (int h = 0; h < headerWT.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headerWT[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        strTestName += "wet,";
                        #region tbldata
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.WidthPercentage = 100;
                        for (int j = 0; j < count; j++)
                        {
                            string srNo = Convert.ToString(b + 1);
                            cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (tile_WT[j].TILEWT_IdMark_var == "" || tile_WT[j].TILEWT_IdMark_var == null)
                            {
                                cell1 = new PdfPCell(new Phrase("-", fontH1));
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(tile_WT[j].TILEWT_IdMark_var, fontH1));
                            }
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(tile_WT[j].TILEWT_WetTransverse_dec), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            if (b == 0)
                            {
                                for (int jj = 0; jj < count; jj++)
                                {
                                    if (tile_WT[jj].TILEWT_Average_var != "" && tile_WT[jj].TILEWT_Average_var != null)
                                    {

                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(tile_WT[jj].TILEWT_Average_var), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        cell1.Rowspan = count;
                                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                        table1.AddCell(cell1);
                                    }
                                }
                            }

                            if (b == 0)
                            {

                                cell1 = new PdfPCell(new Phrase("Not less than 3", fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = count;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);

                            }
                            b++;
                        }
                        table1.SpacingAfter = 5;
                        pdfDoc.Add(table1);
                        #endregion
                        #endregion
                    }
                    else if (tileInword.TEST_Sr_No == 2 && tileInword.Test_RecType_var == "TILE")
                    {
                        #region Water Absorption

                        table1 = new PdfPTable(7);
                        float[] widthsWA = new float[] { 9f, 20f, 15f, 15f, 20f, 23f, 23f };
                        table1.SetWidths(widthsWA);
                        table1.SpacingBefore = 5;
                        var tile_WA = dc.TileWA_View(RefNo).ToList();
                        var count = tile_WA.Count();
                        if (count < 5)
                            strMinSampleNote = "'**' Sample constitutes of minimum five specimens.";
                        int b = 0;
                        PdfPCell cell1;
                        for (int h = 0; h < headerWA.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headerWA[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        strTestName += "water,";
                        #region tbldata
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.WidthPercentage = 100;
                        for (int j = 0; j < count; j++)
                        {
                            string srNo = Convert.ToString(b + 1);
                            cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (tile_WA[j].TILEWA_IdMark_var == "" || tile_WA[j].TILEWA_IdMark_var == null)
                            {
                                cell1 = new PdfPCell(new Phrase("-", fontH1));
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(tile_WA[j].TILEWA_IdMark_var, fontH1));
                            }
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(tile_WA[j].TILEWA_DryWt_dec), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(tile_WA[j].TILEWA_WetWt_dec), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(tile_WA[j].TILEWA_WaterAbsorption_dec), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            var tileWASpec = dc.TileSpecLimitsWA_View(RefNo).ToList();


                            if (b == 0)
                            {
                                for (int jj = 0; jj < count; jj++)
                                {
                                    try
                                    {
                                        if (tile_WA[jj].TILEWA_Average_var.ToString() != null && tile_WA[jj].TILEWA_Average_var.ToString() != "")
                                        {
                                            cell1 = new PdfPCell(new Phrase(Convert.ToString(tile_WA[jj].TILEWA_Average_var.ToString()), fontH1));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            cell1.Rowspan = count;
                                            cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                            table1.AddCell(cell1);
                                        }
                                    }
                                    catch
                                    {
                                    }
                                }
                            }


                            if (b == 0)
                            {
                                string strSpec = "";
                                foreach (var tiles in tileWASpec)
                                {
                                    strSpec = strSpec + tiles.TILESPLWA_Description_var + "\n";
                                }

                                if (strSpec != "")
                                {
                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(strSpec), fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.Rowspan = count;
                                    cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                    table1.AddCell(cell1);
                                }
                            }
                            b++;
                        }
                        table1.SpacingAfter = 5;
                        pdfDoc.Add(table1);
                        #endregion
                        #endregion
                    }
                    else if (tileInword.TEST_Sr_No == 3 && tileInword.Test_RecType_var == "TILE")
                    {
                        #region Modulus of Rupture

                        table1 = new PdfPTable(9);

                        float[] widthsMR = new float[] { 9f, 25f, 13f, 13f, 15f, 13f, 15f, 16f, 33f };
                        table1.SetWidths(widthsMR);
                        table1.SpacingBefore = 5;
                        var tile_MR = dc.TileMOR_View(RefNo).ToList();
                        var count = tile_MR.Count();
                        if (count < 5)
                            strMinSampleNote = "'**' Sample constitutes of minimum five specimens.";
                        int b = 0;
                        PdfPCell cell1;
                        for (int h = 0; h < headerMR.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(headerMR[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        strTestName += "modulus,";
                        #region tbldata
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.WidthPercentage = 100;
                        for (int j = 0; j < count; j++)
                        {
                            string srNo = Convert.ToString(b + 1);
                            cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (tile_MR[j].TILEMOR_IdMark_var == "" || tile_MR[j].TILEMOR_IdMark_var == null)
                            {
                                cell1 = new PdfPCell(new Phrase("-", fontH1));
                            }
                            else
                            {
                                cell1 = new PdfPCell(new Phrase(tile_MR[j].TILEMOR_IdMark_var, fontH1));
                            }
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(tile_MR[j].TILEMOR_N_dec), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);



                            if (b == 0)
                            {
                                for (int jj = 0; jj < count; jj++)
                                {
                                    string[] avgData = tile_MR[jj].TILEMOR_Average_var.Split('|');
                                    if (avgData[0] != "")
                                    {
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(avgData[0]), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        cell1.Rowspan = count;
                                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                        table1.AddCell(cell1);
                                    }
                                }
                            }

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(tile_MR[j].TILEMOR_BreakingStrength_dec), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            if (b == 0)
                            {
                                for (int jj = 0; jj < count; jj++)
                                {
                                    string[] avgData = tile_MR[jj].TILEMOR_Average_var.Split('|');
                                    if (avgData[1] != "")
                                    {
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(avgData[1]), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        cell1.Rowspan = count;
                                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                        table1.AddCell(cell1);
                                    }
                                }
                            }

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(tile_MR[j].TILEMOR_MOR_dec), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            if (b == 0)
                            {
                                for (int jj = 0; jj < count; jj++)
                                {
                                    string[] avgData = tile_MR[jj].TILEMOR_Average_var.Split('|');
                                    if (avgData[2] != "")
                                    {
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(avgData[2]), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        cell1.Rowspan = count;
                                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                        table1.AddCell(cell1);
                                    }
                                }

                            }

                            if (b == 0)
                            {
                                var tileMRSpec = dc.TileSpecLimitsMOR_View(RefNo).ToList();

                                string Arraycellvalue = "";
                                int g = 0;
                                foreach (var tileData in tileMRSpec)
                                {
                                    Arraycellvalue = Arraycellvalue + tileData.TILESPLMOR_Description_var;
                                    Arraycellvalue = Arraycellvalue + "\n";
                                    //Arraycellvalue = Arraycellvalue + "------------------------------------------";
                                    Arraycellvalue = Arraycellvalue + tileData.TILESPLMOR_Limits_var;
                                    Arraycellvalue = Arraycellvalue + "\n";
                                    if (g != tileMRSpec.Count() - 1)
                                    {
                                        Arraycellvalue = Arraycellvalue + "-----------------------------------";
                                    }
                                    g++;
                                }
                                cell1 = new PdfPCell(new Phrase(Arraycellvalue, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.Rowspan = count;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                            }
                            b++;
                        }
                        table1.SpacingAfter = 5;
                        pdfDoc.Add(table1);
                        #endregion
                        #endregion
                    }
                    else if (tileInword.TEST_Sr_No == 1 && tileInword.Test_RecType_var == "TILE")
                    {
                        #region Dimension Analysis

                        table1 = new PdfPTable(9);
                        //float[] widthsDA = new float[] { 9f, 15f, 15f, 15f, 15f, 13f, 13f, 13f, 40f };
                        float[] widthsDA = new float[] { 5f, 24f, 13f, 13f, 13f, 13f, 13f, 13f, 40f };
                        table1.SetWidths(widthsDA);
                        table1.SpacingBefore = 5;
                        var tile_DA = dc.TileDA_View(RefNo).ToList();
                        var count = tile_DA.Count();
                        if (count < 10)
                            strMinSampleNote = "'***' Sample constitutes of minimum ten specimens.";
                        int b = 0;
                        PdfPCell cell1;
                        for (int h = 0; h < headerDA.Count(); h++)
                        {
                            if (h < 2)
                            {
                                cell1 = new PdfPCell(new Phrase(headerDA[h], fontH2));
                                cell1.Rowspan = 2;
                            }
                            else
                            {
                                if (h == 2 || h == 3)
                                {
                                    cell1 = new PdfPCell(new Phrase(headerDA[h], fontH2));
                                    cell1.Colspan = 3;
                                }
                                else
                                {
                                    cell1 = new PdfPCell(new Phrase(headerDA[h], fontH2));

                                }
                            }
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }

                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1 = new PdfPCell();

                        for (int h = 2; h < 9; h++)
                        {
                            cell1 = new PdfPCell(new Phrase(subheaderDA[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        strTestName += "dimension,";
                        #region tbldata
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.WidthPercentage = 100;
                        for (int j = 0; j < count; j++)
                        {
                            string srNo = Convert.ToString(b + 1);
                            cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            if (j == 0)
                            {
                                if (tile_DA[j].TILEDA_IdMark_var == "" || tile_DA[j].TILEDA_IdMark_var == null)
                                {
                                    cell1 = new PdfPCell(new Phrase("-", fontH1));
                                }
                                else
                                {
                                    cell1 = new PdfPCell(new Phrase(tile_DA[j].TILEDA_IdMark_var, fontH1));
                                }
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                cell1.Rowspan = count;
                                table1.AddCell(cell1);
                            }
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(tile_DA[j].TILEDA_AvgLength_dec), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToString(tile_DA[j].TILEDA_AvgWidth_dec), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);


                            cell1 = new PdfPCell(new Phrase(Convert.ToString(tile_DA[j].TILEDA_AvgThickness_dec), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);


                            if (b == 0)
                            {
                                for (int jj = 0; jj < count; jj++)
                                {
                                    string[] avgData = tile_DA[jj].TILEDA_Average_var.Split('|');

                                    if (avgData.Length == 3)
                                    {
                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(avgData[0]), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        cell1.Rowspan = count;
                                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                        table1.AddCell(cell1);

                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(avgData[1]), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        cell1.Rowspan = count;
                                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                        table1.AddCell(cell1);

                                        cell1 = new PdfPCell(new Phrase(Convert.ToString(avgData[2]), fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        cell1.Rowspan = count;
                                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                        table1.AddCell(cell1);
                                    }

                                }
                            }


                            if (b == 0)
                            {
                                var tileDASpec = dc.TileSpecLimitsDA_View(RefNo).ToList();

                                string Arraycellvalue = "";
                                int g = 0;
                                foreach (var tileData in tileDASpec)
                                {
                                    Arraycellvalue = Arraycellvalue + tileData.TILESPLDA_Description_var;
                                    Arraycellvalue = Arraycellvalue + "\n";
                                    Arraycellvalue = Arraycellvalue + "-------------------------------------------";
                                    Arraycellvalue = Arraycellvalue + Convert.ToString(tileData.TILESPLDA_Length_var + " | " + tileData.TILESPLDA_Width_var) + " | " + tileData.TILESPLDA_Thickness_var;
                                    Arraycellvalue = Arraycellvalue + "\n";
                                    if (g != tileDASpec.Count() - 1)
                                    {
                                        Arraycellvalue = Arraycellvalue + "-------------------------------------------";
                                    }
                                    g++;
                                }
                                cell1 = new PdfPCell(new Phrase(Arraycellvalue, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = count;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                table1.AddCell(cell1);
                            }
                            b++;
                        }
                        table1.SpacingAfter = 5;
                        pdfDoc.Add(table1);

                        #endregion
                        #endregion
                    }

                    #region Remark Data
                    table1 = new PdfPTable(2);
                    table1.SpacingAfter = 5;
                    table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                    table1.SetWidths(new float[] { 2f, 70f });
                    PdfPCell cell2;
                    int serial_no = 0;

                    int mID = 0;
                    var material = dc.Material_View(tileInword.TILEINWD_RecordType_var, "");
                    foreach (var m in material)
                    {
                        mID = m.MATERIAL_Id;
                    }

                    var iscodelist = dc.ISCode_View(mID, tileInword.TILEINWD_TileType_var, "TILE", dtTesting).ToList();
                    var remarklist = dc.TileRemarkDetail_View(RefNo).ToList();

                    if (iscodelist.Count() != 0 || remarklist.Count() != 0)
                    {
                        foreach (var item in iscodelist)
                        {
                            if (item.Isc_Criteria_var != "Ceramic" ||
                                (item.Isc_Criteria_var == "Ceramic" &&
                                (item.Isc_Description_var.ToLower().Contains("ceramic") == true) ||
                                (item.Isc_Description_var.ToLower().Contains("water") == true && strTestName.Contains("water") == true) ||
                                (item.Isc_Description_var.ToLower().Contains("dimension") == true && strTestName.Contains("dimension") == true) ||
                                (item.Isc_Description_var.ToLower().Contains("modulus") == true && strTestName.Contains("modulus") == true) ||
                                (item.Isc_Description_var.ToLower().Contains("crazing") == true && strTestName.Contains("crazing") == true)))
                            {
                                if (serial_no == 0)
                                {
                                    //pdfDoc.Add(new Paragraph("References/Notes", fontH2));
                                    cell2 = new PdfPCell(new Phrase("References :", fontH2));
                                    cell2.Colspan = 2;
                                    cell2.Border = PdfPCell.NO_BORDER;
                                    table1.AddCell(cell2);
                                }
                                serial_no = serial_no + 1;
                                //pdfDoc.Add(new Paragraph((serial_no) + "." + item.Isc_Description_var, fontH1));
                                cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ") ", fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                                cell2 = new PdfPCell(new Phrase(item.Isc_Description_var, fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                        }
                        foreach (var item in remarklist)
                        {
                            if (serial_no == 0)
                            {
                                //pdfDoc.Add(new Paragraph("References/Notes", fontH2));
                                cell2 = new PdfPCell(new Phrase("References :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            //pdfDoc.Add(new Paragraph((serial_no + 1) + "." + item.BTREM_Remark_var, fontH1));
                            serial_no = serial_no + 1;
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ") ", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(item.TILEREM_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);

                        }
                        cell2 = new PdfPCell(new Phrase(" ", fontH2));
                        cell2.FixedHeight = 5f;
                        cell2.Border = PdfPCell.NO_BORDER;
                        cell2.Colspan = 2;
                        table1.AddCell(cell2);
                    }
                    serial_no = 0;
                    if (supersedeNote != "")
                    {
                        if (serial_no == 0)
                        {
                            cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(" ", fontH2));
                        cell2.FixedHeight = 5f;
                        cell2.Border = PdfPCell.NO_BORDER;
                        cell2.Colspan = 2;
                        table1.AddCell(cell2);
                    }

                    if (strMinSampleNote != "")
                    {
                        if (serial_no == 0)
                        {
                            cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(strMinSampleNote, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(" ", fontH2));
                        cell2.FixedHeight = 5f;
                        cell2.Border = PdfPCell.NO_BORDER;
                        cell2.Colspan = 2;
                        table1.AddCell(cell2);
                    }

                    #region notes

                    cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                    cell2.Colspan = 2;
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    table1.SpacingAfter = 8;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;
                    pdfDoc.Add(table1);

                    #endregion
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH2;
                    paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                    pdfDoc.Add(paragraph);

                    #endregion

                    //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                    //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                    if (Action != "Check")
                    {
                        PdfPTable MaindataTable1 = null;
                        MaindataTable1 = new PdfPTable(1); //tbl
                        //MaindataTable1.SpacingBefore = 5;
                        MaindataTable1.SpacingBefore = 12;
                        MaindataTable1.WidthPercentage = 100;
                        PdfPCell cellbottom = null;
                        cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                        cellbottom.Border = PdfPCell.NO_BORDER;
                        MaindataTable1.AddCell(cellbottom);

                        pdfDoc.Add(MaindataTable1);

                        #region Signature
                        bool sign = false;
                        //byte[] bytes = null;
                        if (RemotelyAppv == true)
                        {
                            if (tileInword.TILEINWD_ApprovedBy_tint != null)
                            {
                                var data = dc.Sign_View(tileInword.TILEINWD_ApprovedBy_tint);
                                foreach (var g in data)
                                {
                                    byte[] imageBytes = g.UserSign.ToArray();
                                    MemoryStream mxs1 = new MemoryStream(imageBytes);
                                    iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                    table1 = new PdfPTable(1);
                                    table1.WidthPercentage = 100;
                                    table1.SetWidths(new float[] { 1.7f });
                                    PdfPCell cell = new PdfPCell(image);
                                    cell.FixedHeight = 25;
                                    cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                    cell.Border = PdfPCell.NO_BORDER;
                                    table1.AddCell(cell);
                                    pdfDoc.Add(table1);
                                    //bytes = memoryStream.ToArray();
                                    sign = true;
                                    break;
                                }
                            }
                        }
                        #endregion

                        if (sign == false)
                        {
                            pdfDoc.Add(new Paragraph(" ", fontH1));
                            pdfDoc.Add(new Paragraph(" ", fontH1));
                        }
                        try
                        {
                            if (tileInword.TILEINWD_ApprovedBy_tint != null)
                            {
                                pdfDoc.Add(new Paragraph(tileInword.ApprovedByUser, fontH1));
                            }
                            else
                            {
                                pdfDoc.Add(new Paragraph("-", fontH1));
                            }
                        }

                        catch (Exception ex)
                        {
                            pdfDoc.Add(new Paragraph("-", fontH1));
                        }
                        try
                        {
                            if (tileInword.ApprovedByUserDesig != null)
                            {
                                pdfDoc.Add(new Paragraph("(" + tileInword.ApprovedByUserDesig.Replace("(", "").Replace(")", "") + ")", fontH1));
                            }
                            else
                            {
                                pdfDoc.Add(new Paragraph("", fontH1));
                            }
                            if ((Action == "Print" || Action == "Email" || Action == "Automail") && ApproveDt != null)
                            {
                                pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                            }
                            else
                            {
                                pdfDoc.Add(new Paragraph(" ", fontH3));
                            }

                        }
                        catch
                        {
                        }
                        //pdfDoc.Add(paragraph);

                        MaindataTable1 = new PdfPTable(2);
                        float[] widthWTBy = new float[] { 65f, 35f };
                        MaindataTable1.SetWidths(widthWTBy);
                        MaindataTable1.SpacingBefore = 5;
                        MaindataTable1.WidthPercentage = 100;
                        try
                        {
                            if (tileInword.TILEINWD_WitnessBy_var != null)
                            {
                                cellbottom = new PdfPCell(new Paragraph("Witness By : " + tileInword.TILEINWD_WitnessBy_var, fontH1));
                            }
                            else
                            {
                                cellbottom = new PdfPCell(new Paragraph("", fontH1));
                            }
                        }
                        catch (Exception ex)
                        {
                            cellbottom = new PdfPCell(new Paragraph("", fontH1));
                        }

                        cellbottom.Border = PdfPCell.NO_BORDER;
                        MaindataTable1.AddCell(cellbottom);
                        try
                        {
                            if (tileInword.TILEINWD_CheckedBy_tint != null)
                            {
                                cellbottom = new PdfPCell(new Paragraph("Checked By : " + tileInword.CheckedByUser, fontH1));
                            }
                            else
                            {
                                cellbottom = new PdfPCell(new Paragraph("Checked By : ", fontH1));
                            }
                        }
                        catch (Exception ex)
                        {
                            cellbottom = new PdfPCell(new Paragraph("Checked By : ", fontH1));
                        }

                        cellbottom.Border = PdfPCell.NO_BORDER;
                        MaindataTable1.AddCell(cellbottom);
                        pdfDoc.Add(MaindataTable1);
                    }
                    else
                    {
                        //paragraph = new Paragraph();
                        //paragraph.Font = fontH1;
                        //paragraph.Add("  ");
                        //pdfDoc.Add(paragraph);
                        //paragraph = new Paragraph();

                        paragraph = new Paragraph();
                        paragraph.Alignment = Element.ALIGN_LEFT;
                        paragraph.Font = fontH1;
                        paragraph.SpacingBefore = 5;
                        paragraph.Add("This is electronically generated report hence does not require signature. ");
                        pdfDoc.Add(paragraph);

                        //paragraph = new Paragraph();
                        //paragraph.Font = fontH1;
                        //paragraph.Add("  ");
                        //pdfDoc.Add(paragraph);

                        paragraph = new Paragraph();
                        paragraph.Font = fontH1;
                        paragraph.SpacingBefore = 5;
                        paragraph.Add("For all technical queries contact on " + tollFree + ".");
                        pdfDoc.Add(paragraph);

                        //paragraph = new Paragraph();
                        //paragraph.Font = fontH1;
                        //paragraph.Add("  ");
                        //pdfDoc.Add(paragraph);

                    }
                    var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = blackListTextFont;
                    paragraph.Add("--End of Report--");
                    pdfDoc.Add(paragraph);
                    pdfDoc.Close();
                    if (Action != "Email" && Action.Contains("Email") == false)
                    {
                        string pdfPath = @Subfoldername1 + "/" + fileName;
                        DownloadReport(fileName, pdfPath);
                    }
                    #endregion

                }
            }
            catch
            {
            }
        }
        public void WT_PDFReport(string ReferenceNo, string Action)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("WT", ReferenceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "WT_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Water";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "WT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                //PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "WT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;
                MaindataTable.DefaultCell.Border = PdfPCell.NO_BORDER;
                //paragraph.Alignment = Element.ALIGN_CENTER;
                //paragraph.Add("Office Copy");
                //pdfDoc.Add(paragraph);

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action.Contains("Automail") == true || Action.Contains("Email") == true)
                {
                    LogoToPdfEmail(pdfDoc, nablStatus);
                }
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data
                DateTime ApproveDt = new DateTime();
                float[] widths = new float[] { 18f, 1f, 50f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                string Witnessby = string.Empty, CustName = "", SiteName = "", Address = "";
                bool RemotelyAppv = false;
                int Approveby = 0;
                string supersedeNote = "";
                DateTime? dtTesting = null;
                var water = dc.ReportStatus_View("Water Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var wt in water)
                {
                    if (wt.INWD_RptSITE_Id != null && wt.INWD_RptCL_Id != null)
                    {
                        CustName = wt.RptCL_Name_var;
                        SiteName = wt.RptST_Name_var;
                        Address = wt.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = wt.CL_Name_var;
                        SiteName = wt.SITE_Name_var;
                        Address = wt.CL_OfficeAddress_var;
                    }
                    SiteRouteId = Convert.ToInt32(wt.SITE_Route_Id);

                    paragraph.Alignment = Element.ALIGN_CENTER;
                    // paragraph.Add(" "); pdfDoc.Add(paragraph);//if (wt.WTINWD_Status_tint == 4 || wt.WTINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);

                    if (Convert.ToString(wt.WTINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(wt.WTINWD_ApprovedDate_dt);
                    }
                    if (wt.WTINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(wt.WTINWD_ApprovedBy_tint);
                    }

                    paragraph = new Paragraph();
                    paragraph.Font = fontTitle;
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Add("Water for Construction Purpose");
                    if (wt.WTINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;
                    MaindataTable.SpacingBefore = 1;
                    //if (authCode != "00")
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("Authentication Code", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //    Cust_Namecell = new PdfPCell(new Phrase(authCode + "                                Route : " + RouteName, fontH2));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase(""));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}

                    if (wt.WTINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);
                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }


                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("WT", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string strRecNo = wt.WTINWD_SetOfRecord_var;
                    if (wt.WTINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (wt.WTINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (wt.WTINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(wt.WTINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + wt.WTINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(wt.WTINWD_Description_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (wt.SITE_MonthlyBillingStatus_bit == true && wt.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (wt.WTINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(wt.WTINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(wt.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Supplier Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(wt.WTINWD_SupplierName_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (wt.WTINWD_ReceivedDate_dt != null)
                    {
                        DateTime rDT = Convert.ToDateTime(wt.WTINWD_ReceivedDate_dt);
                        string receiptDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(receiptDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(wt.CONT_Name_var + " - " + wt.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);//person name
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (Convert.ToString(wt.WTINWD_TestedDate_dt) != null)
                    {
                        dtTesting = Convert.ToDateTime(wt.WTINWD_TestedDate_dt);
                        DateTime rDT = Convert.ToDateTime(wt.WTINWD_TestedDate_dt);
                        string TestingDt = rDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(TestingDt, fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase(System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    if (wt.WTINWD_WitnessBy_var != null && wt.WTINWD_WitnessBy_var != string.Empty)
                    {
                        Witnessby = wt.WTINWD_WitnessBy_var.ToString();
                    }
                    if (wt.WTINWD_RemoteApproved == true && wt.WTINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }

                    if (wt.INWD_RptSITE_Id != null && wt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(wt.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //if (wt.WTINWD_IssueDate_dt != null)
                    //{
                    //    DateTime iDT = Convert.ToDateTime(wt.WTINWD_IssueDate_dt);
                    //    string issuedt = iDT.ToString("dd-MMM-yyyy");
                    //    Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    //}
                    if (wt.WTINWD_ApprovedDate_dt != null)
                    {
                        DateTime iDT = Convert.ToDateTime(wt.WTINWD_ApprovedDate_dt);
                        string issuedt = iDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    if (wt.INWD_RptSITE_Id != null && wt.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(wt.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                    //    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //    Cust_Namecell.Colspan = 3;
                    //    MaindataTable.AddCell(Cust_Namecell);
                    //}

                    //ULR No
                    if (Convert.ToString(wt.WTINWD_ULRNo_var) != "" && Convert.ToString(wt.WTINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "Chemical" + "    " + "Group : " + "Water (Construction purpose)", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(wt.WTINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //
                }
                //MaindataTable.SpacingAfter = 2;
                pdfDoc.Add(MaindataTable);

                #endregion

                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5;
                pdfDoc.Add(paragraph);
                #region tbldata

                PdfPCell cell1;
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(table1);
                table1 = new PdfPTable(7);
                table1.WidthPercentage = 100;

                var WaterInward_WT = dc.AllInwdDetails_View(ReferenceNo, "", 0, "", 0, null, "", "", 0, false, false, false, 0, "", 0, 0, 0, 0, 0, "", 0, "WT").ToList();
                var Count = WaterInward_WT.Count();
                for (int wt = 0; wt < Count; wt++)
                {
                    if (wt == 0)
                    {
                        table1.SetTotalWidth(new float[] { 5f, 20f, 8f, 12f, 10f, 16f, 20f });
                        cell1 = new PdfPCell(new Phrase("Sr.No", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Test Parameters", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Unit", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Observations", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Compliance", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Permissible Limit     IS:456-2000", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Test Specification Used", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Mixing and Curing Water Clause 5:4 Table 1", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    string srNo = Convert.ToString(wt + 1);
                    cell1 = new PdfPCell(new Phrase(srNo, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    string testName = WaterInward_WT[wt].TEST_Name_var;
                    if (testName == "Acidity" || testName == "Alkalinity")
                    {
                        testName = getTestNameToDisplay(testName);
                        // sub sup
                        if (testName.Contains("<Sub>") == true)
                        {
                            Phrase phrase = new Phrase(15, "", fontH1);
                            string[] strTemp = testName.Split(new[] { "<Sub>" }, StringSplitOptions.None);
                            foreach (string str in strTemp)
                            {
                                if (str.Contains("</Sub>") == true)
                                {
                                    string[] strTemp2 = str.Split(new[] { "</Sub>" }, StringSplitOptions.None);
                                    Chunk ck = new Chunk(strTemp2[0], fontH3).SetTextRise(-1);
                                    phrase.Add(ck);
                                    phrase.Add(strTemp2[1]);
                                }
                                else
                                {
                                    phrase.Add(str);
                                }
                            }
                            cell1 = new PdfPCell(phrase);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(testName, fontH1));
                        }
                    }
                    else
                    {
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(testName), fontH1));
                    }
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(WaterInward_WT[wt].splmt_Unit_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(WaterInward_WT[wt].WTTEST_Result_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    //Complaince 
                    string SpecifiedLmt = "";
                    double Obsns = 0;
                    int result = 0;
                    string PRC = "";
                    bool valid = false;
                    string Compliance = "";
                    string Observations = Convert.ToString(WaterInward_WT[wt].WTTEST_Result_var);

                    if (double.TryParse(Observations, out Obsns))
                    {
                        Obsns = Convert.ToDouble(Observations);
                    }
                    SpecifiedLmt = Convert.ToString(WaterInward_WT[wt].splmt_SpecifiedLimit_var);
                    string[] line = SpecifiedLmt.Split(' ', ',', '-');
                    string res = "";
                    foreach (string line1 in line)
                    {
                        if (line1 != " ")
                        {
                            if (line1 == "PCC" || line1 == "RCC")
                            {
                                PRC = line1.ToString();
                                if (Convert.ToInt32(res) > 0)
                                {
                                    //Maximum 2000 - PCC,Maximum 500 - RCC
                                    if (Obsns < Convert.ToInt32(res))
                                    {
                                        Compliance = Compliance + "Pass " + " " + "-" + " " + PRC + "," + "\n";
                                        valid = true;
                                    }
                                    else
                                    {
                                        Compliance = Compliance + "Fail " + " " + "-" + " " + PRC + "," + "\n";
                                        valid = true;
                                    }
                                }
                            }
                            if (int.TryParse(line1, out result))
                            {
                                result = Convert.ToInt32(line1);
                                res = result.ToString();
                                // ViewState["res"] = Session["res"].ToString();
                            }
                        }
                    }
                    if (valid == true)
                    {
                        cell1 = new PdfPCell(new Phrase(Compliance, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    if (valid == false)
                    {
                        if (Convert.ToString(WaterInward_WT[wt].WTTEST_Result_var) == "NIL" || SpecifiedLmt == "---")
                        {
                            cell1 = new PdfPCell(new Phrase("---", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else if (Obsns <= result && SpecifiedLmt.Contains("Maximum") == true)
                        {
                            cell1 = new PdfPCell(new Phrase("Pass", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else if (Obsns >= result && SpecifiedLmt.Contains("Minimum") == true)
                        {
                            cell1 = new PdfPCell(new Phrase("Pass", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase("Fail", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                    }
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(WaterInward_WT[wt].splmt_SpecifiedLimit_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(Convert.ToString(WaterInward_WT[wt].splmt_testingMethod_var), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                }
                table1.SpacingAfter = 5;
                pdfDoc.Add(table1);

                #endregion

                //table1.SpacingBefore = 10;
                #region iscode/remarks
                table1 = new PdfPTable(2);
                table1.SpacingAfter = 5;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                var iscd = dc.ISCode_View(0, "", "WT", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (serial_no == 0)
                        {
                            //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                            cell2 = new PdfPCell(new Phrase("References :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        serial_no++;
                        //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));
                        cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                        cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);

                }
                serial_no = 0;
                var reference = dc.AllRemark_View("", ReferenceNo, 0, "WT").ToList();
                var referencecount = reference.Count();
                if (referencecount > 0)
                {
                    for (int r = 0; r < referencecount; r++)
                    {
                        if (r == 0)
                        {
                            //pdfDoc.Add(new Paragraph("Remarks :", fontH2));
                            cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        var remark = dc.AllRemark_View("", "", Convert.ToInt32(reference[r].WTDetail_RemarkId_int), "WT").ToList();
                        var remarkcount = remark.Count();
                        for (int remk = 0; remk < remarkcount; remk++)
                        {
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(serial_no + ")" + Convert.ToString(remark[remk].WT_Remark_var), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remark[remk].WT_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);

                }
                if (supersedeNote != "")
                {
                    if (serial_no == 0)
                    {
                        cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);

                }


                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 8;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);

                #endregion

                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 12;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    //MaindataTable1.SpacingAfter = 25;
                    pdfDoc.Add(MaindataTable1);

                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion
                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }

                    var RecNo = dc.ReportStatus_View("Water Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0).ToList();
                    var RecNocount = RecNo.Count();
                    for (int r = 0; r < RecNocount; r++)
                    {
                        if (RecNo[r].WTINWD_ApprovedBy_tint != null && RecNo[r].WTINWD_ApprovedBy_tint.ToString() != "" && RecNo[r].WTINWD_ApprovedBy_tint > 0)
                        {
                            var User = dc.User_View(Convert.ToInt32(RecNo[r].WTINWD_ApprovedBy_tint), -1, "", "", "").ToList();
                            var ucount = User.Count();
                            for (int userId = 0; userId < ucount; userId++)
                            {

                                pdfDoc.Add(new Paragraph(Convert.ToString(User[userId].USER_Name_var), fontH1));
                                if (User[userId].USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + User[userId].USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(User[userId].USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Email" || Action == "Automail")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }

                            }
                        }
                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.SpacingBefore = 5;
                        MaindataTable2.WidthPercentage = 100;
                        PdfPCell cellbottom1;
                        if (Witnessby != string.Empty)
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("Witness by :  " + Witnessby, fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        if (RecNo[r].WTINWD_CheckedBy_tint != null && RecNo[r].WTINWD_CheckedBy_tint.ToString() != "" && RecNo[r].WTINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(Convert.ToInt32(RecNo[r].WTINWD_CheckedBy_tint), -1, "", "", "").ToList();
                            var lginCount = lgin.Count();
                            for (int loginusr = 0; loginusr < lginCount; loginusr++)
                            {
                                cellbottom1 = new PdfPCell(new Paragraph("Checked by : " + Convert.ToString(lgin[loginusr].USER_Name_var), fontH1));
                                cellbottom1.Border = PdfPCell.NO_BORDER;
                                cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                                MaindataTable2.AddCell(cellbottom1);
                            }
                        }
                        else
                        {
                            cellbottom1 = new PdfPCell(new Paragraph("", fontH1));
                            cellbottom1.Border = PdfPCell.NO_BORDER;
                            cellbottom1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom1);
                        }
                        pdfDoc.Add(MaindataTable2);
                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);


                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(new Paragraph("CIN-U28939PN1999PTC014212", fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void NDT_SummaryReport(string ReferenceNo, string Action, string PageBrk)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }

                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "NDT_Summary_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/NDT";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "NDT_Summary_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                writer.PageEvent = new classPdfFooter1();
                pdfDoc.Open();

                int nablStatus = -1;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("NDT", ReferenceNo);//1 for priting nabl logo

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action == "Automail" || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);

                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = fontTitle;
                paragraph.SpacingAfter = 10;
                paragraph.Add("Summary - NDT Report");
                pdfDoc.Add(paragraph);

                clsData obj = new clsData();
                PdfPCell Cust_Namecell;

                #region data
                PdfPTable MaindataTable = new PdfPTable(3);  //tbl
                MaindataTable.WidthPercentage = 100;
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;

                float[] widths = new float[] { 18f, 1f, 70f };
                MaindataTable.SetWidths(widths);
                string strTemp = "";
                var ndtreport = dc.NDTReport_View(ReferenceNo).ToList();
                foreach (var ndtrpt in ndtreport)
                {
                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(ndtrpt.CL_Name_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Project Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(ndtrpt.SITE_Name_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(ndtrpt.SITE_Address_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Reference No.", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string strRecNo = ndtrpt.NDTINWD_SetOfRecord_var;
                    if (ndtrpt.NDTINWD_SupersedeStatus_tint > 0)
                    {
                        strRecNo = strRecNo + "-R" + ndtrpt.NDTINWD_SupersedeStatus_tint.ToString();
                    }

                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("Project Description", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(ndtrpt.NDTRPT_ProjectDesc_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    Cust_Namecell = new PdfPCell(new Phrase("RCC Structure", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(ndtrpt.NDTRPT_RCCStructure_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (ndtrpt.NDTRPT_AgeOfConcr_int > 0)
                    {
                        strTemp = "where age of concrete is " + ndtrpt.NDTRPT_AgeOfConcr_int.ToString() + " " + ndtrpt.NDTRPT_AgeOfConcrIn_var;
                        Cust_Namecell = new PdfPCell(new Phrase(strTemp, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);

                        strTemp = "was tested using non destructive testing to estimate compressive strength of RCC members.";
                        Cust_Namecell = new PdfPCell(new Phrase(strTemp, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    MaindataTable.SpacingAfter = 10;
                    pdfDoc.Add(MaindataTable);

                    PdfPCell cell1;
                    string[] strVal;
                    int serial_no = 0;

                    #region Purpose of Evaluation
                    if (ndtrpt.NDTRPT_PurposeOfEvaluation_var.Replace("~", "") != "")
                    {
                        serial_no = 0;

                        table1 = new PdfPTable(2);
                        table1.SpacingAfter = 10;
                        table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                        table1.SetWidths(new float[] { 2f, 70f });

                        cell1 = new PdfPCell(new Phrase("Purpose of Evaluation :", fontH2));
                        cell1.Colspan = 2;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        strVal = ndtrpt.NDTRPT_PurposeOfEvaluation_var.Split('~');
                        for (int i = 0; i < strVal.Length; i++)
                        {
                            if (i != 3 && strVal[i] != "")
                            {
                                serial_no++;
                                cell1 = new PdfPCell(new Phrase(serial_no.ToString(), fontH1));
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(strVal[i], fontH1));
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                            }
                        }
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.WidthPercentage = 100;
                        pdfDoc.Add(table1);
                    }
                    #endregion

                    #region NDT Coverage (Population)
                    paragraph = new Paragraph();
                    paragraph.Font = fontH2;
                    paragraph.Add("NDT Coverage (Population) :");
                    paragraph.SpacingAfter = 7;
                    pdfDoc.Add(paragraph);

                    table1 = new PdfPTable(6);
                    table1.SpacingAfter = 10;
                    table1.WidthPercentage = 100;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetTotalWidth(new float[] { 5f, 10f, 10f, 10f, 10f, 8f });
                    string[] header = { "Sr.No.", "Building/Structure", "Floor/Stage", "Grade of Concrete", "Member Type", "No. of Members" };
                    for (int h = 0; h < header.Count(); h++)
                    {
                        cell1 = new PdfPCell(new Phrase(header[h], fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    strVal = ndtrpt.NDTRPT_NDTCoverage_var.Split('^');
                    for (int i = 0; i < strVal.Count() - 1; i++)
                    {
                        string[] strVal1 = strVal[i].Split('~');

                        cell1 = new PdfPCell(new Phrase((i + 1).ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[0]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[1]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[2]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[3]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[4]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    pdfDoc.Add(table1);
                    table1.FlushContent();
                    #endregion

                    #region Reason for NDT testing                    
                    if (ndtrpt.NDTRPT_ReasonForTesting_var.Replace("~", "") != "")
                    {
                        serial_no = 0;

                        table1 = new PdfPTable(2);
                        table1.SpacingAfter = 10;
                        table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                        table1.SetWidths(new float[] { 2f, 70f });

                        cell1 = new PdfPCell(new Phrase("Reason for NDT testing :", fontH2));
                        cell1.Colspan = 2;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        strVal = ndtrpt.NDTRPT_ReasonForTesting_var.Split('~');
                        for (int i = 0; i < strVal.Length; i++)
                        {
                            if (i != 7 && strVal[i] != "")
                            {
                                serial_no++;
                                cell1 = new PdfPCell(new Phrase(serial_no.ToString(), fontH1));
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(strVal[i], fontH1));
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                            }
                        }
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.WidthPercentage = 100;
                        pdfDoc.Add(table1);
                    }
                    #endregion

                    #region Type of NDT used for evaluation
                    paragraph = new Paragraph();
                    paragraph.Font = fontH2;
                    paragraph.Add("Type of NDT used for evaluation");
                    paragraph.SpacingAfter = 7;
                    pdfDoc.Add(paragraph);

                    table1 = new PdfPTable(2);
                    table1.SpacingAfter = 10;
                    table1.WidthPercentage = 100;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetTotalWidth(new float[] { 10f, 10f });
                    string[] header1 = { "Type of Test", "Testing method" }; //, "IS Reference" };
                    for (int h = 0; h < header1.Count(); h++)
                    {
                        cell1 = new PdfPCell(new Phrase(header1[h], fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    strVal = ndtrpt.NDTRPT_TypeOfNDTUsed_var.Split('^');
                    for (int i = 0; i < strVal.Count() - 1; i++)
                    {
                        string[] strVal1 = strVal[i].Split('~');

                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[0]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[1]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[2]), fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //table1.AddCell(cell1);
                    }
                    pdfDoc.Add(table1);
                    table1.FlushContent();
                    #endregion

                    #region Sampling
                    if (ndtrpt.NDTRPT_SampleSize_var.Replace("~", "") != "")
                    {
                        serial_no = 0;

                        table1 = new PdfPTable(2);
                        table1.SpacingAfter = 10;
                        table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                        table1.SetWidths(new float[] { 2f, 70f });

                        cell1 = new PdfPCell(new Phrase("The recommended sample size was as follows :", fontH2));
                        cell1.Colspan = 2;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        serial_no++;
                        cell1 = new PdfPCell(new Phrase(serial_no.ToString(), fontH1));
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(ndtrpt.NDTRPT_SampleSize_var, fontH1));
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.WidthPercentage = 100;
                        pdfDoc.Add(table1);
                    }
                    #endregion

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.Add("Following sample was adopted based on recommendation of Structural Engineer / Client / Durocrete");
                    paragraph.SpacingAfter = 7;
                    pdfDoc.Add(paragraph);

                    #region NDT Sample
                    paragraph = new Paragraph();
                    paragraph.Font = fontH2;
                    paragraph.Add("NDT Sample");
                    paragraph.SpacingAfter = 7;
                    pdfDoc.Add(paragraph);

                    table1 = new PdfPTable(7);
                    table1.SpacingAfter = 10;
                    table1.WidthPercentage = 100;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetTotalWidth(new float[] { 5f, 10f, 10f, 10f, 10f, 10f, 8f });
                    string[] header2 = { "Sr.No.", "Building/Structure", "Floor/Stage", "Grade of Concrete", "Member Type", "No of members tested", "% of sample" };
                    for (int h = 0; h < header2.Count(); h++)
                    {
                        cell1 = new PdfPCell(new Phrase(header2[h], fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    strVal = ndtrpt.NDTRPT_NDTSample_var.Split('^');
                    for (int i = 0; i < strVal.Count() - 1; i++)
                    {
                        string[] strVal1 = strVal[i].Split('~');

                        cell1 = new PdfPCell(new Phrase((i + 1).ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[0]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[1]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[2]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[3]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[4]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[5]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    pdfDoc.Add(table1);
                    table1.FlushContent();
                    #endregion

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.Add("For Ultra sonic Pulse velocity and Schmitz Hammer tests -2 locations spaced less than 1m are tested on each member. In case of variation of more than 15% additional location is tested on the member. ");
                    paragraph.SpacingAfter = 7;
                    pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH2;
                    paragraph.Add("Method of Selection of Members : " + ndtrpt.NDTRPT_MethodOfSelOfMembers_var);
                    paragraph.SpacingAfter = 7;
                    pdfDoc.Add(paragraph);

                    //pdfDoc.NewPage();

                    #region Summary of Results of UPV
                    paragraph = new Paragraph();
                    paragraph.Font = fontH2;
                    paragraph.Add("Summary of Results of UPV");
                    paragraph.SpacingAfter = 7;
                    pdfDoc.Add(paragraph);

                    table1 = new PdfPTable(8);
                    table1.SpacingAfter = 10;
                    table1.WidthPercentage = 100;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetTotalWidth(new float[] { 5f, 10f, 10f, 10f, 10f, 10f, 10f, 10f });
                    string[] header3 = { "Sr.No.", "Building/Structure", "Floor/Stage", "Design Grade of Concrete", "Member Type", "Average UPV (km/s)", "Standard Deviation (km/s)", "Concrete Quality Grading" };
                    for (int h = 0; h < header3.Count(); h++)
                    {
                        cell1 = new PdfPCell(new Phrase(header3[h], fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    strVal = ndtrpt.NDTRPT_SummaryResultUPV_var.Split('^');
                    for (int i = 0; i < strVal.Count() - 1; i++)
                    {
                        string[] strVal1 = strVal[i].Split('~');

                        cell1 = new PdfPCell(new Phrase((i + 1).ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[0]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[1]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[2]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[3]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[4]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[5]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[6]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    pdfDoc.Add(table1);
                    table1.FlushContent();
                    #endregion

                    #region Summary of Results of RH
                    paragraph = new Paragraph();
                    paragraph.Font = fontH2;
                    paragraph.Add("Summary of Results of Rebound Hammer");
                    paragraph.SpacingAfter = 7;
                    pdfDoc.Add(paragraph);

                    table1 = new PdfPTable(7);
                    table1.SpacingAfter = 10;
                    table1.WidthPercentage = 100;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetTotalWidth(new float[] { 5f, 10f, 10f, 10f, 10f, 10f, 10f });
                    string[] header10 = { "Sr.No.", "Building/Structure", "Floor/Stage", "Design Grade of Concrete", "Member Type", "Average Readings", "Standard Deviation" };
                    for (int h = 0; h < header10.Count(); h++)
                    {
                        cell1 = new PdfPCell(new Phrase(header10[h], fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    strVal = ndtrpt.NDTRPT_SummaryResultRH_var.Split('^');
                    for (int i = 0; i < strVal.Count() - 1; i++)
                    {
                        string[] strVal1 = strVal[i].Split('~');

                        cell1 = new PdfPCell(new Phrase((i + 1).ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[0]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[1]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[2]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[3]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[4]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[5]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    pdfDoc.Add(table1);
                    table1.FlushContent();
                    #endregion

                    #region If  Rebound readings are below 3.5 km/s for M20 or 3.75 km/s for M25 
                    if ((ndtrpt.NDTRPT_ReadBelow3p5ForM20_var != null && ndtrpt.NDTRPT_ReadBelow3p5ForM20_var != "") ||
                        (ndtrpt.NDTRPT_ReadBelow3p75ForM25_var != null && ndtrpt.NDTRPT_ReadBelow3p75ForM25_var != ""))
                    {
                        serial_no = 0;

                        table1 = new PdfPTable(2);
                        table1.SpacingAfter = 10;
                        table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                        table1.SetWidths(new float[] { 2f, 70f });

                        cell1 = new PdfPCell(new Phrase("If UPV readings are below 3.5 km/s for M20 or 3.75 km/s for M 25 and above", fontH2));
                        cell1.Colspan = 2;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        serial_no++;
                        cell1 = new PdfPCell(new Phrase(serial_no.ToString(), fontH1));
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        strTemp = "As per IS 516 Part 4, rebound hammer readings should not be used for interpretation of results where UPV readings classify the concrete as doubtful .  Statistical data available with our laboratory suggests that combined use of Rebound hammer and UPV give significantly higher correlation with compressive strength than UPV readings alone. ";
                        cell1 = new PdfPCell(new Phrase(strTemp, fontH1));
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        serial_no++;
                        cell1 = new PdfPCell(new Phrase(serial_no.ToString(), fontH1));
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        strTemp = "We recommend testing by Cores to establish the grade of concrete ";
                        cell1 = new PdfPCell(new Phrase(strTemp, fontH1));
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.WidthPercentage = 100;
                        pdfDoc.Add(table1);

                        #region Following members have reading below 3.5 km/s for M 20
                        paragraph = new Paragraph();
                        paragraph.Font = fontH2;
                        paragraph.Add("Following members have reading below 3.5 km/s for M 20");
                        paragraph.SpacingAfter = 7;
                        pdfDoc.Add(paragraph);

                        table1 = new PdfPTable(6);
                        table1.SpacingAfter = 10;
                        table1.WidthPercentage = 100;
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.SetTotalWidth(new float[] { 5f, 10f, 10f, 10f, 10f, 10f });
                        string[] header8 = { "Sr.No.", "Building/Structure", "Floor/Stage", "Member Type", "Member Id", "Description" };
                        for (int h = 0; h < header8.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(header8[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        strVal = ndtrpt.NDTRPT_ReadBelow3p5ForM20_var.Split('^');
                        for (int i = 0; i < strVal.Count() - 1; i++)
                        {
                            string[] strVal1 = strVal[i].Split('~');

                            cell1 = new PdfPCell(new Phrase((i + 1).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[0]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[1]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[2]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[3]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[4]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                        }
                        pdfDoc.Add(table1);
                        table1.FlushContent();
                        #endregion

                        #region Following members have reading below 3.75 km/s for M 25
                        paragraph = new Paragraph();
                        paragraph.Font = fontH2;
                        paragraph.Add("Following members have reading below 3.75 km/s for M 25 and above");
                        paragraph.SpacingAfter = 7;
                        pdfDoc.Add(paragraph);

                        table1 = new PdfPTable(6);
                        table1.SpacingAfter = 10;
                        table1.WidthPercentage = 100;
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.SetTotalWidth(new float[] { 5f, 10f, 10f, 10f, 10f, 10f });
                        string[] header9 = { "Sr.No.", "Building/Structure", "Floor/Stage", "Member Type", "Member Id", "Description" };
                        for (int h = 0; h < header8.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(header9[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        strVal = ndtrpt.NDTRPT_ReadBelow3p75ForM25_var.Split('^');
                        for (int i = 0; i < strVal.Count() - 1; i++)
                        {
                            string[] strVal1 = strVal[i].Split('~');

                            cell1 = new PdfPCell(new Phrase((i + 1).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[0]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[1]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[2]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[3]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[4]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                        }
                        pdfDoc.Add(table1);
                        table1.FlushContent();
                        #endregion

                    }
                    #endregion

                    #region Method Used to determine strength and establish Grade of Concrete                    

                    serial_no = 0;

                    table1 = new PdfPTable(2);
                    table1.SpacingAfter = 10;
                    table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                    table1.SetWidths(new float[] { 2f, 70f });

                    cell1 = new PdfPCell(new Phrase("Method Used to determine strength and establish Grade of Concrete ", fontH2));
                    cell1.Colspan = 2;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    strTemp = "Durocrete uses multivariate methods for analysis including multiple regression and  cluster analysis .  Ultrasonic Pulse Velocity and Shmitz hammer readings are used to determine strength of concrete  in following steps .  ";
                    cell1 = new PdfPCell(new Phrase(strTemp, fontH1));
                    cell1.Colspan = 2;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    serial_no++;
                    cell1 = new PdfPCell(new Phrase(serial_no.ToString(), fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    strTemp = "Large database of  shmitz hammer readings and UPV readings with cube strengths   is maintained at laboratory.";
                    cell1 = new PdfPCell(new Phrase(strTemp, fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    serial_no++;
                    cell1 = new PdfPCell(new Phrase(serial_no.ToString(), fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    strTemp = "The data is classified in to  groups ( Clusters) using cluster analysis . Independent Regression equation is developed for each cluster using rebound hammer reading and UPV reading as independent variables. ";
                    cell1 = new PdfPCell(new Phrase(strTemp, fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    serial_no++;
                    cell1 = new PdfPCell(new Phrase(serial_no.ToString(), fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    strTemp = "UPV and hammer readings of Pours are used for identifying clusters and corresponding regression equation of cluster is used to determine in situ compressive strength. ";
                    cell1 = new PdfPCell(new Phrase(strTemp, fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    serial_no++;
                    cell1 = new PdfPCell(new Phrase(serial_no.ToString(), fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    strTemp = "95% confidence in situ compressive strengths  are calculated for each pour by using standard  error and distribution constant of Normal distribution or Students T distribution based on sample size. ";
                    cell1 = new PdfPCell(new Phrase(strTemp, fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    serial_no++;
                    cell1 = new PdfPCell(new Phrase(serial_no.ToString(), fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    strTemp = "Recommended Grade of concrete is derived by dividing 95% confidence compressive strength of Pour by 0.85.  This is factor recommended by IS456 for acceptance of concrete grade from equivalent cube strengths from core tests .";
                    cell1 = new PdfPCell(new Phrase(strTemp, fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    var ndtWbs = dc.NDTWBS_View_CoreStr(ReferenceNo).ToList();
                    if (ndtWbs.Count > 0)
                    {
                        serial_no++;
                        cell1 = new PdfPCell(new Phrase(serial_no.ToString(), fontH1));
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        strTemp = "The compressive strengths calculated above are co-related with core strengths of those members and appropriate correction factors are calculated.";
                        cell1 = new PdfPCell(new Phrase(strTemp, fontH1));
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                    }
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;
                    pdfDoc.Add(table1);

                    #endregion

                    #region Regression Data

                    serial_no = 0;

                    table1 = new PdfPTable(2);
                    table1.SpacingAfter = 10;
                    table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                    table1.SetWidths(new float[] { 2f, 70f });

                    cell1 = new PdfPCell(new Phrase("Regression Data", fontH2));
                    cell1.Colspan = 2;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    serial_no++;
                    cell1 = new PdfPCell(new Phrase(serial_no.ToString(), fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    strTemp = "R value  for Regression Equation of   compressive  strength as dependent variable and UPV reading and rebound hammer reading as independent variables after cluster analysis  is .91 ";
                    cell1 = new PdfPCell(new Phrase(strTemp, fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    serial_no++;
                    cell1 = new PdfPCell(new Phrase(serial_no.ToString(), fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    strTemp = "R value for  relation between  equivalent cube strength of Core as dependent variable and Predicted Strengths from the Past data is 0.85 ";
                    cell1 = new PdfPCell(new Phrase(strTemp, fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;
                    pdfDoc.Add(table1);

                    #endregion

                    #region The Net Standard Errors are as follows
                    paragraph = new Paragraph();
                    paragraph.Font = fontH2;
                    paragraph.Add("The Net Standard Errors are as follows :");
                    paragraph.SpacingAfter = 7;
                    pdfDoc.Add(paragraph);

                    table1 = new PdfPTable(6);
                    table1.SpacingAfter = 10;
                    table1.WidthPercentage = 100;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetTotalWidth(new float[] { 5f, 10f, 10f, 10f, 10f, 10f });
                    string[] header4 = { "Sr.No.", "Building/Structure", "Floor/Stage", "Concrete Grade", "Member Type", "Standard Error (MPa)" };
                    for (int h = 0; h < header4.Count(); h++)
                    {
                        cell1 = new PdfPCell(new Phrase(header4[h], fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    strVal = ndtrpt.NDTRPT_NetStdErrs_var.Split('^');
                    for (int i = 0; i < strVal.Count() - 1; i++)
                    {
                        string[] strVal1 = strVal[i].Split('~');

                        cell1 = new PdfPCell(new Phrase((i + 1).ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[0]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[1]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[2]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[3]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[4]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    pdfDoc.Add(table1);
                    table1.FlushContent();
                    #endregion

                    //pdfDoc.NewPage();

                    #region Summary of Compressive Strengths
                    paragraph = new Paragraph();
                    paragraph.Font = fontH2;
                    paragraph.Add("Summary of Compressive Strengths");
                    paragraph.SpacingAfter = 7;
                    pdfDoc.Add(paragraph);

                    table1 = new PdfPTable(7);
                    table1.SpacingAfter = 10;
                    table1.WidthPercentage = 100;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetTotalWidth(new float[] { 5f, 10f, 10f, 10f, 10f, 12f, 10f });
                    string[] header5 = { "Sr.No.", "Building/Structure", "Floor/Stage", "Design Grade of Concrete", "Member Type", "95% Confidence In Situ Compressive Strength (MPa)", "Recommended Grade of concrete (MPa)" };
                    for (int h = 0; h < header5.Count(); h++)
                    {
                        cell1 = new PdfPCell(new Phrase(header5[h], fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    strVal = ndtrpt.NDTRPT_SummaryCompStr_var.Split('^');
                    for (int i = 0; i < strVal.Count() - 1; i++)
                    {
                        string[] strVal1 = strVal[i].Split('~');

                        cell1 = new PdfPCell(new Phrase((i + 1).ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[0]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[1]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[2]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[3]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[4]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString("* " + strVal1[5]), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                    }
                    pdfDoc.Add(table1);
                    table1.FlushContent();

                    paragraph = new Paragraph();
                    paragraph.Font = fontH2;
                    paragraph.Add("* At the time of testing.");
                    paragraph.SpacingAfter = 10;
                    pdfDoc.Add(paragraph);

                    #endregion

                    #region Members in the sample having concrete grade Lower than (Design Grade - 5 MPa) 
                    if (ndtrpt.NDTRPT_MembersGrade5_var != "")
                    {
                        paragraph = new Paragraph();
                        paragraph.Font = fontH2;
                        paragraph.Add("Members in the sample having concrete grade 5 MPa lower than design grade");
                        paragraph.SpacingAfter = 7;
                        pdfDoc.Add(paragraph);

                        table1 = new PdfPTable(6);
                        table1.SpacingAfter = 10;
                        table1.WidthPercentage = 100;
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.SetTotalWidth(new float[] { 5f, 10f, 10f, 10f, 10f, 10f });
                        string[] header6 = { "Sr.No.", "Building/Structure", "Floor/Stage", "Member Type", "No of members", "Member Id" };
                        for (int h = 0; h < header6.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(header6[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        strVal = ndtrpt.NDTRPT_MembersGrade5_var.Split('^');
                        for (int i = 0; i < strVal.Count() - 1; i++)
                        {
                            string[] strVal1 = strVal[i].Split('~');

                            cell1 = new PdfPCell(new Phrase((i + 1).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[0]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[1]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[2]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[3]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[4]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                        }
                        pdfDoc.Add(table1);
                        table1.FlushContent();
                    }
                    #endregion

                    #region Members in the sample having concrete grade Lower than (Design Grade - 10 MPa) 
                    if (ndtrpt.NDTRPT_MembersGrade10_var != "")
                    {
                        paragraph = new Paragraph();
                        paragraph.Font = fontH2;
                        paragraph.Add("Members in the sample having concrete grade 10 MPa lower than design grade");
                        paragraph.SpacingAfter = 7;
                        pdfDoc.Add(paragraph);

                        table1 = new PdfPTable(6);
                        table1.SpacingAfter = 10;
                        table1.WidthPercentage = 100;
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.SetTotalWidth(new float[] { 5f, 10f, 10f, 10f, 10f, 10f });
                        string[] header7 = { "Sr.No.", "Building/Structure", "Floor/Stage", "Member Type", "No of members", "Member Id" };
                        for (int h = 0; h < header7.Count(); h++)
                        {
                            cell1 = new PdfPCell(new Phrase(header7[h], fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        strVal = ndtrpt.NDTRPT_MembersGrade10_var.Split('^');
                        for (int i = 0; i < strVal.Count() - 1; i++)
                        {
                            string[] strVal1 = strVal[i].Split('~');

                            cell1 = new PdfPCell(new Phrase((i + 1).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[0]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[1]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[2]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[3]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(strVal1[4]), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);
                        }
                        pdfDoc.Add(table1);
                        table1.FlushContent();
                    }
                    #endregion

                    #region Conclusion / Recommendation

                    serial_no = 0;

                    table1 = new PdfPTable(2);
                    table1.SpacingAfter = 10;
                    table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                    table1.SetWidths(new float[] { 2f, 70f });

                    cell1 = new PdfPCell(new Phrase("Conclusion / Recommendation :", fontH2));
                    cell1.Colspan = 2;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(" ", fontH1));
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);

                    strVal = ndtrpt.NDTRPT_ConclusionRecmd_var.Split('^');
                    for (int i = 0; i < strVal.Count() - 1; i++)
                    {
                        string[] strVal1 = strVal[i].Split('~');
                        //strTemp = "Building - " + strVal1[0] + ", Floor - " + strVal1[1] + ", Grade of concrete - " + strVal1[2] + ", Member Type - " + strVal1[3];
                        strTemp = strVal1[0] + " - " + strVal1[1] + " - " + strVal1[2] + " - " + strVal1[3];
                        cell1 = new PdfPCell(new Phrase(strTemp, fontH2));
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        serial_no = 0;
                        string[] strVal2 = strVal1[5].Split('#');
                        for (int j = 0; j < strVal2.Count(); j++)
                        {
                            if (strVal2[j] != "")
                            {
                                serial_no++;
                                cell1 = new PdfPCell(new Phrase(serial_no.ToString(), fontH1));
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(strVal2[j], fontH1));
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                            }
                        }
                        cell1 = new PdfPCell(new Phrase(" ", fontH1));
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);
                    }
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.WidthPercentage = 100;
                    pdfDoc.Add(table1);

                    #endregion

                    #region approved by
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 6;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    MaindataTable1.AddCell(cellbottom);
                    pdfDoc.Add(MaindataTable1);

                    if (ndtrpt.NDTRPT_ApprovedBy_tint > 0)
                    {
                        var data = dc.Sign_View(ndtrpt.NDTRPT_ApprovedBy_tint).ToList();
                        foreach (var g in data)
                        {
                            byte[] imageBytes = g.UserSign.ToArray();
                            MemoryStream mxs1 = new MemoryStream(imageBytes);
                            iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                            table1 = new PdfPTable(1);
                            table1.WidthPercentage = 100;
                            table1.SetWidths(new float[] { 1.7f });
                            PdfPCell cell = new PdfPCell(image);
                            cell.FixedHeight = 25;
                            cell.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell);
                            pdfDoc.Add(table1);
                            break;
                        }
                        if (data.Count() == 0)
                        {
                            pdfDoc.Add(new Paragraph(" ", fontH1));
                            pdfDoc.Add(new Paragraph(" ", fontH1));
                        }
                        var User = dc.User_View(ndtrpt.NDTRPT_ApprovedBy_tint, -1, "", "", "").ToList();
                        foreach (var u in User)
                        {
                            pdfDoc.Add(new Paragraph(u.USER_Name_var, fontH1));
                            if (u.USER_Designation_var.Contains("(") == false)
                                pdfDoc.Add(new Paragraph("(" + u.USER_Designation_var + ")", fontH3));
                            else
                                pdfDoc.Add(new Paragraph(u.USER_Designation_var, fontH3));
                        }
                    }
                    #endregion
                }
                #endregion

                //pdfDoc.Add(new Paragraph("Page " + pgno.ToString() + " of " + totPages.ToString(), fontH1));                
                NDT_PDFReport(ReferenceNo, Action, PageBrk, pdfDoc);
                pdfDoc.Close();

                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void NDT_PDFReport(string ReferenceNo, string Action, string PageBrk, Document pdfDocSummary)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                Boolean oldUPVGrading = false;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("NDT", ReferenceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                var fileName = "NDT_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/NDT";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "NDT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                if (pdfDocSummary != null)
                {
                    pdfDoc = pdfDocSummary;
                    pdfDoc.NewPage();
                }
                else
                {
                    PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                    writer.PageEvent = new classPdfFooter1();
                    pdfDoc.Open();
                }
                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action == "Automail" || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data
                DateTime ApproveDt = new DateTime();
                //float[] widths = new float[] { 18f, 1f, 52f, 15f, 1f, 15f };
                float[] widths = new float[] { 18f, 1f, 50f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                int TestId = 0;
                string NdtBy_type = string.Empty, CustName = "", SiteName = "", Address = "";
                bool RemotelyAppv = false;
                int Approveby = 0;
                string supersedeNote = "";
                bool flgIndirect = false;
                DateTime? dtTesting = null;
                var ndt_Test = dc.ReportStatus_View("Non Destructive Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var NDTtest in ndt_Test)
                {
                    //if (NdtBy_type.Trim() != "Both")
                    //{
                    //    //NDTbyType = "Both";
                    //    //flgIndirect = false;
                    //}
                    //else if (NdtBy_type.Trim() == "Rebound Hammer")
                    //{
                    //    flgIndirect = false;
                    //    // NDTbyType = "Hammer";
                    //}
                    //else
                    //{
                    //    //NDTbyType = "UPV";
                    //    // flgIndirect = true;
                    //}

                    if (NDTtest.NDTINWD_UPVIndirect_bit == true)
                    {
                        flgIndirect = true;
                    }
                    if (NDTtest.INWD_RptSITE_Id != null && NDTtest.INWD_RptCL_Id != null)
                    {
                        CustName = NDTtest.RptCL_Name_var;
                        SiteName = NDTtest.RptST_Name_var;
                        Address = NDTtest.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = NDTtest.CL_Name_var;
                        SiteName = NDTtest.SITE_Name_var;
                        Address = NDTtest.CL_OfficeAddress_var;
                    }

                    SiteRouteId = Convert.ToInt32(NDTtest.SITE_Route_Id);
                    oldUPVGrading = Convert.ToBoolean(NDTtest.NDTINWD_OldGradinig_bit);
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    // paragraph.Add(" "); pdfDoc.Add(paragraph);
                    //if (NDTtest.NDTINWD_Status_tint == 4 || NDTtest.NDTINWD_Status_tint == 6)
                    if (pdfDocSummary == null)
                    {
                        if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                        {
                            paragraph.Font = fontTitle1;
                            paragraph.Add("Test Report");
                        }
                        else
                        {
                            paragraph.Font = fontH1;
                            paragraph.Add("Office Copy");
                        }
                        paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);
                    }
                    if (Convert.ToString(NDTtest.NDTINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(NDTtest.NDTINWD_ApprovedDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 2;
                    if (pdfDocSummary == null)
                    {
                        paragraph.Add("Non Destructive Testing of R.C.C.");
                    }
                    else
                    {
                        paragraph.Add("Annexure - NDT Report");
                    }
                    if (NDTtest.NDTINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;

                    if (NDTtest.NDTINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);

                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("NDT", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("NDT - " + Convert.ToString(NDTtest.NDTINWD_SetOfRecord_var), fontH1));
                    string strRecNo = NDTtest.NDTINWD_SetOfRecord_var;
                    if (NDTtest.NDTINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (NDTtest.NDTINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (NDTtest.NDTINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(NDTtest.NDTINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + NDTtest.NDTINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Kind attention", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(NDTtest.NDTINWD_KindAttention_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No.", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (NDTtest.SITE_MonthlyBillingStatus_bit == true && NDTtest.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (NDTtest.NDTINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(NDTtest.NDTINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(NDTtest.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(NDTtest.CONT_Name_var + " - " + NDTtest.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (Convert.ToString(NDTtest.NDTINWD_TestingDate_dt) != null)
                    {
                        dtTesting = Convert.ToDateTime(NDTtest.NDTINWD_TestingDate_dt);
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToDateTime(NDTtest.NDTINWD_TestingDate_dt).ToString("dd-MMM-yy"), fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("- " + System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);
                    //if (NDTtest.NDTINWD_ReceivedDate_dt != null)
                    //{
                    //    DateTime cDT = Convert.ToDateTime(NDTtest.NDTINWD_ReceivedDate_dt);
                    //    string ReceiptDt = cDT.ToString("dd-MMM-yyyy");
                    //    Cust_Namecell = new PdfPCell(new Phrase(ReceiptDt, fontH1));
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    //}
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);


                    NdtBy_type = NDTtest.NDTINWD_NDTBy_var.ToString();
                    TestId = Convert.ToInt32(NDTtest.NDTINWD_TestId_int);

                    if (NDTtest.NDTINWD_RemoteApproved == true && NDTtest.NDTINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }
                    if (NDTtest.NDTINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(NDTtest.NDTINWD_ApprovedBy_tint);
                    }


                    if (NDTtest.INWD_RptSITE_Id != null && NDTtest.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(NDTtest.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    //if (NDTtest.NDTINWD_IssueDate_dt != null)
                    //{
                    //    DateTime iDT = Convert.ToDateTime(NDTtest.NDTINWD_IssueDate_dt);
                    //    string issuedt = iDT.ToString("dd-MMM-yyyy");
                    //    Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    //}
                    if (NDTtest.NDTINWD_ApprovedDate_dt != null)
                    {
                        DateTime iDT = Convert.ToDateTime(NDTtest.NDTINWD_ApprovedDate_dt);
                        string issuedt = iDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (NDTtest.INWD_RptSITE_Id != null && NDTtest.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(NDTtest.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(NDTtest.NDTINWD_ULRNo_var) != "" && Convert.ToString(NDTtest.NDTINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "NDT" + "    " + "Group : " + "Building Materials - Reinforced Concrete Structures", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(NDTtest.NDTINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //

                }

                //MaindataTable.SpacingAfter = 1;
                pdfDoc.Add(MaindataTable);
                #endregion

                // pdfDoc.Add(Chunk.NEWLINE);
                //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(new Paragraph(" ", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5; // 9;
                pdfDoc.Add(paragraph);

                #region tbldata

                PdfPCell cell1;

                var NDTTESTING = dc.TestDetail_Title_View(ReferenceNo, 0, "NDT", false).ToList();
                var Count = NDTTESTING.Count();

                int SrNo = 0;
                int cnt = 0;
                int pgno = 1;
                int totPages = 1;
                Boolean flgbreak = false;
                int prevWbsId = 0;
                for (int NDT = 0; NDT < Count; NDT++)
                {

                    if (cnt == 0)
                    {
                        //if (NdtBy_type.Trim() != "Both")
                        //{
                        //    NDTbyType = "BOTH";
                        //}

                        if (NdtBy_type.Trim() == "Rebound Hammer")
                        {

                            table1 = new PdfPTable(8);
                            table1.WidthPercentage = 100;
                            table1.SetTotalWidth(new float[] { 5f, 15f, 6f, 10f, 7f, 5f, 5f, 6f });
                        }
                        else
                        {
                            table1 = new PdfPTable(9);
                            table1.WidthPercentage = 100;
                            table1.SetTotalWidth(new float[] { 5f, 15f, 6f, 10f, 5f, 8f, 6f, 6f, 6f });
                        }
                        cell1 = new PdfPCell(new Phrase("Sr No.", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Location & Identification", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Grade of concrete", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Date of Casting", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Age \n(Days)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Mech. Sclerometer (Rebound Hammer)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        if (NdtBy_type.Trim() != "Rebound Hammer")
                        {
                            cell1 = new PdfPCell(new Phrase("Pulse Velocity \n(km/s)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase("Indicative Strength \n(N/mm²)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Angle of inclination", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Average reading", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        // }
                        if (NdtBy_type.Trim() == "UPV with Grading" || NdtBy_type.Trim() == "UPV")
                        {
                            if (flgIndirect == true)
                            {
                                table1 = new PdfPTable(8);
                                table1.WidthPercentage = 100;
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SetTotalWidth(new float[] { 5f, 18f, 6f, 6f, 5f, 10f, 10f, 10f });
                                string[] subheader = { "Sr No.", "Location & Identification", "Grade of concrete", "Date of Casting", "Age\n(Days)", "Pulse Velocity\n(km/s)", "Corr. Pulse Velocity\n(km/s)", "Concrete quality grading" };
                                for (int h = 0; h < subheader.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(subheader[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (NdtBy_type.Trim() == "UPV")
                                    {
                                        if (h == 7)
                                        {
                                            cell1 = new PdfPCell(new Phrase("Indicative Strength \n(N/mm²)", fontH2));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        }
                                    }
                                    table1.AddCell(cell1);
                                }
                            }
                            else
                            {
                                table1 = new PdfPTable(7);
                                table1.WidthPercentage = 100;
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SetTotalWidth(new float[] { 5f, 18f, 6f, 6f, 5f, 10f, 10f });
                                string[] subheader = { "Sr No.", "Location & Identification", "Grade of concrete", "Date of Casting", "Age\n(Days)", "Pulse Velocity\n(km/s)", "Concrete quality grading" };
                                for (int h = 0; h < subheader.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(subheader[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (NdtBy_type.Trim() == "UPV")
                                    {
                                        if (h == 6)
                                        {
                                            cell1 = new PdfPCell(new Phrase("Indicative Strength \n(N/mm²)", fontH2));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        }
                                    }
                                    table1.AddCell(cell1);
                                }
                            }
                        }
                    }

                    string[] strSr = PageBrk.Split(',');
                    if (Convert.ToString(NDTTESTING[NDT].Description_var) != "")
                    {
                        //print title  
                        if (NDTTESTING[NDT].NDTWBS_Id != null && NDTTESTING[NDT].NDTWBS_Id != prevWbsId)
                        {
                            int flagIndirect = 0;
                            //string strTemp = NDTTESTING[NDT].NDTWBS_Building_var + " " + NDTTESTING[NDT].NDTWBS_Floor_var + " " + NDTTESTING[NDT].NDTWBS_MemberType_var + " " + NDTTESTING[NDT].NDTWBS_MemberId_var + " ";
                            string strTemp = NDTTESTING[NDT].NDTWBS_Building_var + " " + NDTTESTING[NDT].NDTWBS_Floor_var + " " + NDTTESTING[NDT].NDTWBS_MemberType_var + " ";
                            for (int temp = 0; temp < Count; temp++)
                            {
                                if (NDTTESTING[temp].PulseVelocity_var != null && NDTTESTING[temp].PulseVelocity_var != "")
                                {
                                    if (NDTTESTING[temp].NDTWBS_Id == NDTTESTING[NDT].NDTWBS_Id && NDTTESTING[temp].PulseVelocity_var.Contains("|150-"))
                                    {
                                        flagIndirect = 2;
                                        break;
                                    }
                                    else
                                    {
                                        flagIndirect = 1;
                                    }
                                }
                            }
                            if (flagIndirect == 2)
                                strTemp += " (Indirect Probing Method)";
                            else if (flagIndirect == 1)
                                strTemp += " (Direct Probing Method)";
                            cell1 = new PdfPCell(new Phrase(strTemp, fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Colspan = 12;
                            table1.AddCell(cell1);
                            cnt++;
                        }
                        prevWbsId = Convert.ToInt32(NDTTESTING[NDT].NDTWBS_Id);
                        //
                        SrNo++;
                        cnt++;
                        //if (cnt == 36 || cnt == 72 || cnt == 108 || cnt == 144 || cnt == 177 || cnt==210 )
                        if (PageBrk != "")
                        {
                            flgbreak = false;
                            for (int i = 0; i < strSr.GetLength(0) - 1; i++)
                            {
                                if (SrNo == Convert.ToInt32(strSr[i]))
                                {
                                    flgbreak = true;
                                    break;
                                }
                            }
                        }
                        if (flgbreak == true)
                        {
                            totPages = Convert.ToInt32(strSr.GetLength(0));
                            pdfDoc.Add(table1);
                            table1.FlushContent();
                            table1 = new PdfPTable(1);
                            table1.WidthPercentage = 100;
                            cell1 = new PdfPCell(new Phrase("Page " + pgno.ToString() + " of " + totPages.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            pgno = pgno + 1;

                            pdfDoc.Add(table1);
                            table1.FlushContent();
                            pdfDoc.NewPage();
                            if (Action.Contains("Print") == true)
                                LogoToPdf(pdfDoc, nablStatus);
                            else if (Action.Contains("Display") == true || Action.Contains("Email") == true)
                                LogoToPdfOld(pdfDoc, Action);
                            if (NdtBy_type.Trim() == "Rebound Hammer")
                            {
                                table1 = new PdfPTable(8);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 5f, 15f, 5f, 10f, 5f, 5f, 5f, 6f });
                            }
                            else
                            {
                                table1 = new PdfPTable(9);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 5f, 15f, 5f, 10f, 5f, 6f, 6f, 6f, 6f });
                            }
                            cell1 = new PdfPCell(new Phrase("Sr No.", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Location & Identification", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Grade of concrete", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Date of Casting", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Age \n(Days)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Mech. Sclerometer (Rebound Hammer)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Colspan = 2;
                            table1.AddCell(cell1);

                            if (NdtBy_type.Trim() != "Rebound Hammer")
                            {
                                cell1 = new PdfPCell(new Phrase("Pulse Velocity \n(km/s)", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = 2;
                                table1.AddCell(cell1);
                            }
                            cell1 = new PdfPCell(new Phrase("Indicative Strength \n(N/mm²)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Angle of inclination", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Average reading", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            // }
                            if (NdtBy_type.Trim() == "UPV with Grading" || NdtBy_type.Trim() == "UPV")
                            {
                                if (flgIndirect == true)
                                {
                                    table1 = new PdfPTable(8);
                                    table1.WidthPercentage = 100;
                                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                    table1.SetTotalWidth(new float[] { 5f, 18f, 6f, 8f, 5f, 10f, 10f, 10f });
                                    string[] subheader = { "Sr No.", "Location & Identification", "Grade of concrete", "Date of Casting", "Age\n(Days)", "Pulse Velocity\n(km/s)", "Corr. Pulse Velocity\n(km/s)", "Concrete quality grading" };
                                    for (int h = 0; h < subheader.Count(); h++)
                                    {
                                        cell1 = new PdfPCell(new Phrase(subheader[h], fontH2));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        if (NdtBy_type.Trim() == "UPV")
                                        {
                                            if (h == 7)
                                            {
                                                cell1 = new PdfPCell(new Phrase("Indicative Strength \n(N/mm²)", fontH2));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            }
                                        }
                                        table1.AddCell(cell1);
                                    }
                                }
                                else
                                {
                                    table1 = new PdfPTable(7);
                                    table1.WidthPercentage = 100;
                                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                    table1.SetTotalWidth(new float[] { 5f, 18f, 6f, 6f, 5f, 10f, 10f });
                                    string[] subheader = { "Sr No.", "Location & Identification", "Grade of concrete", "Date of Casting", "Age\n(Days)", "Pulse Velocity\n(km/s)", "Concrete quality grading" };
                                    for (int h = 0; h < subheader.Count(); h++)
                                    {
                                        cell1 = new PdfPCell(new Phrase(subheader[h], fontH2));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        if (NdtBy_type.Trim() == "UPV")
                                        {
                                            if (h == 6)
                                            {
                                                cell1 = new PdfPCell(new Phrase("Indicative Strength \n(N/mm²)", fontH2));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            }
                                        }
                                        table1.AddCell(cell1);
                                    }
                                }
                            }


                        }
                        cell1 = new PdfPCell(new Phrase(SrNo.ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(NDTTESTING[NDT].Description_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(NDTTESTING[NDT].Grade_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(NDTTESTING[NDT].Castingdate_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(NDTTESTING[NDT].Age_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        if (NdtBy_type.Trim() != "UPV with Grading" && NdtBy_type.Trim() != "UPV")
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(NDTTESTING[NDT].AlphaAngle_var).Replace("°", "") + "°", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (Convert.ToString(NDTTESTING[NDT].ReboundIndex_var) != "")
                        {
                            string[] Rebound = Convert.ToString(NDTTESTING[NDT].ReboundIndex_var).Split('|');
                            foreach (var RebdIndex in Rebound)
                            {
                                if (RebdIndex != "")
                                {
                                    cell1 = new PdfPCell(new Phrase(RebdIndex, fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                    break;
                                }
                            }
                        }
                        if (NdtBy_type.Trim() != "Rebound Hammer")
                        {
                            if (Convert.ToString(NDTTESTING[NDT].PulseVelocity_var) != "")
                            {
                                string[] PulseVelc = Convert.ToString(NDTTESTING[NDT].PulseVelocity_var).Split('|');
                                foreach (var Pulse in PulseVelc)
                                {
                                    if (Pulse != "")
                                    {
                                        cell1 = new PdfPCell(new Phrase(Pulse, fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                        break;
                                    }
                                }
                            }
                            if (flgIndirect == true) //|| NDTTESTING[NDT].CorrectedPulseVelocity_var !="")
                            {
                                if (Convert.ToString(NDTTESTING[NDT].CorrectedPulseVelocity_var) != "")
                                {
                                    cell1 = new PdfPCell(new Phrase(NDTTESTING[NDT].CorrectedPulseVelocity_var.ToString(), fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);

                                }
                            }
                        }
                        if (NDTTESTING[NDT].EditedIndStr_var != null && NDTTESTING[NDT].EditedIndStr_var != string.Empty)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(NDTTESTING[NDT].EditedIndStr_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            string strIndStr = NDTTESTING[NDT].IndicativeStrength_var;
                            if (NdtBy_type.Trim() != "UPV with Grading")
                            {
                                double number = 0;
                                if (double.TryParse(strIndStr, out number))
                                {
                                    double mStr = Convert.ToDouble(strIndStr);
                                    if (mStr > 0)
                                    {
                                        if (mStr >= 5 && mStr <= 10.4)
                                        {
                                            strIndStr = "5 To 10";
                                        }
                                        else if (mStr > 0 && mStr < 5)
                                        {
                                            strIndStr = "Less Than 5";
                                        }
                                    }
                                    else if (NdtBy_type.Trim() == "Rebound Hammer Only"
                                        || NdtBy_type.Trim() == "DUCT")
                                    {
                                        if (mStr < 5)
                                        {
                                            strIndStr = "Less Than 5";
                                        }
                                    }
                                    else if (NdtBy_type.Trim() == "Both")
                                    {
                                        if (mStr != 0 && mStr < 5)
                                        {
                                            strIndStr = "Less Than 5";
                                        }
                                        else
                                        {
                                            strIndStr = "---";
                                        }
                                    }
                                }
                            }

                            //cell1 = new PdfPCell(new Phrase(Convert.ToString(NDTTESTING[NDT].IndicativeStrength_var), fontH1));
                            cell1 = new PdfPCell(new Phrase(strIndStr, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }

                    }
                    else
                    {
                        if (Convert.ToString(NDTTESTING[NDT].TitleId_int) != "")
                        {
                            if (Convert.ToInt32(NDTTESTING[NDT].TitleId_int) > 0)
                            {
                                var crr = dc.TestDetail_Title_View(ReferenceNo, Convert.ToInt32(NDTTESTING[NDT].TitleId_int), "NDT", false);
                                foreach (var title in crr)
                                {
                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(title.TitleDesc_var), fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.Colspan = 12;
                                    table1.AddCell(cell1);
                                    cnt++;
                                    break;
                                }
                            }
                        }
                    }

                }
                table1.SpacingAfter = 3;
                pdfDoc.Add(table1);
                #endregion

                //table1.SpacingBefore = 10;
                #region iscode/ remarks
                //if (Count >= 17 && Count <= 34)
                //{
                //    //pdfDoc.Add(table1);
                //    table1.FlushContent();
                //    pdfDoc.NewPage();
                //    }

                table1 = new PdfPTable(2);
                table1.SpacingAfter = 5;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                var iscd = dc.ISCode_View(0, "", "NDT", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {
                        if (dtTesting < DateTime.ParseExact("01/07/2022", "dd/MM/yyyy", null))
                        {
                            if ((cd.Isc_Description_var.Contains("Part I") == true && (NdtBy_type == "Both" || NdtBy_type == "UPV with Grading"))
                            || (cd.Isc_Description_var.Contains("Part II") == true && (NdtBy_type == "Both" || NdtBy_type == "Rebound Hammer"))
                            || (cd.Isc_Description_var.Contains("Part 5") == true && (NdtBy_type == "Both" || NdtBy_type == "UPV with Grading"))
                            )
                            {
                                if (serial_no == 0)
                                {
                                    //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                                    cell2 = new PdfPCell(new Phrase("References :", fontH2));
                                    cell2.Colspan = 2;
                                    cell2.Border = PdfPCell.NO_BORDER;
                                    table1.AddCell(cell2);
                                }
                                //serial_no++;
                                //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));

                                if (oldUPVGrading == true && cd.Isc_Description_var.Contains("13311"))
                                {
                                    serial_no = serial_no + 1;
                                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                                    cell2.Border = PdfPCell.NO_BORDER;
                                    table1.AddCell(cell2);
                                    cell2 = new PdfPCell(new Phrase("IS 13311 Part I:1992-RA(2018) Non destructive testing of concrete.", fontH1));
                                    cell2.Border = PdfPCell.NO_BORDER;
                                    table1.AddCell(cell2);

                                }
                                else if (oldUPVGrading == false)
                                {
                                    serial_no = serial_no + 1;
                                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                                    cell2.Border = PdfPCell.NO_BORDER;
                                    table1.AddCell(cell2);
                                    cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                                    cell2.Border = PdfPCell.NO_BORDER;
                                    table1.AddCell(cell2);
                                }

                            }
                        }
                        else
                        {
                            if ((cd.Isc_Description_var.Contains("Ultrasonic Pulse Velocity") == true && (NdtBy_type == "Both" || NdtBy_type == "UPV with Grading"))
                            || (cd.Isc_Description_var.Contains("Rebound Hammer") == true && (NdtBy_type == "Both" || NdtBy_type == "Rebound Hammer"))
                            )
                            {
                                if (serial_no == 0)
                                {
                                    cell2 = new PdfPCell(new Phrase("References :", fontH2));
                                    cell2.Colspan = 2;
                                    cell2.Border = PdfPCell.NO_BORDER;
                                    table1.AddCell(cell2);
                                }
                                serial_no = serial_no + 1;
                                cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                                cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                serial_no = 0;
                var reference = dc.AllRemark_View("", ReferenceNo, 0, "NDT").ToList();
                var referencecount = reference.Count();
                if (referencecount > 0)
                {
                    for (int r = 0; r < referencecount; r++)
                    {
                        if (r == 0)
                        {
                            //pdfDoc.Add(new Paragraph("Uncertainty levels : ", fontH2));
                            cell2 = new PdfPCell(new Phrase("Uncertainty levels :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        var remark = dc.AllRemark_View("", "", Convert.ToInt32(reference[r].NDTDetail_RemarkId_int), "NDT").ToList();
                        var remarkcount = remark.Count();
                        for (int remk = 0; remk < remarkcount; remk++)
                        {
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(serial_no + ")" + Convert.ToString(remark[remk].NDT_Remark_var), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remark[remk].NDT_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {

                    if (serial_no == 0)
                    {
                        //cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2 = new PdfPCell(new Phrase("Uncertainty levels :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                //cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                //cell2.Border = PdfPCell.NO_BORDER;
                //table1.AddCell(cell2);
                //cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                //cell2.Border = PdfPCell.NO_BORDER;
                //table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 4;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.com");
                pdfDoc.Add(paragraph);

                #endregion

                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 6;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    //MaindataTable1.SpacingAfter = 25;
                    MaindataTable1.AddCell(cellbottom);
                    pdfDoc.Add(MaindataTable1);
                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion

                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("Non Destructive Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0).ToList();
                    var RecNocount = RecNo.Count();
                    for (int r = 0; r < RecNocount; r++)
                    {
                        if (RecNo[r].NDTINWD_ApprovedBy_tint != null && RecNo[r].NDTINWD_ApprovedBy_tint.ToString() != "" && RecNo[r].NDTINWD_ApprovedBy_tint > 0)
                        {
                            var User = dc.User_View(Convert.ToInt32(RecNo[r].NDTINWD_ApprovedBy_tint), -1, "", "", "").ToList();
                            var ucount = User.Count();
                            for (int userId = 0; userId < ucount; userId++)
                            {

                                pdfDoc.Add(new Paragraph(Convert.ToString(User[userId].USER_Name_var), fontH1));

                                if (User[userId].USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + User[userId].USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(User[userId].USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Automail" || Action == "Email")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }
                            }
                        }

                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.WidthPercentage = 100;
                        if (RecNo[r].NDTINWD_WitnessBy_var != string.Empty)
                        {
                            cellbottom = new PdfPCell(new Paragraph("Witness by :  " + RecNo[r].NDTINWD_WitnessBy_var, fontH1));
                            cellbottom.Border = PdfPCell.NO_BORDER;
                            cellbottom.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom);
                        }
                        else
                        {
                            cellbottom = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom.Border = PdfPCell.NO_BORDER;
                            cellbottom.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom);
                        }
                        if (RecNo[r].NDTINWD_CheckedBy_tint != null && RecNo[r].NDTINWD_CheckedBy_tint.ToString() != "" && RecNo[r].NDTINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(Convert.ToInt32(RecNo[r].NDTINWD_CheckedBy_tint), -1, "", "", "").ToList();
                            var lginCount = lgin.Count();
                            for (int loginusr = 0; loginusr < lginCount; loginusr++)
                            {
                                cellbottom = new PdfPCell(new Paragraph("Checked by : " + Convert.ToString(lgin[loginusr].USER_Name_var), fontH1));
                            }
                            cellbottom.Border = PdfPCell.NO_BORDER;
                            cellbottom.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom);
                            pdfDoc.Add(MaindataTable2);
                        }

                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);


                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                //pdfDoc.Add(new Paragraph("Page " + pgno.ToString() + " of " + totPages.ToString(), fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                if (pdfDocSummary == null)
                {
                    pdfDoc.Close();
                    if (Action != "Email" && Action.Contains("Email") == false)
                    {
                        string pdfPath = @Subfoldername1 + "/" + fileName;
                        DownloadReport(fileName, pdfPath);
                    }
                }
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void NDT_PDFReport_Old_16082021(string ReferenceNo, string Action, string PageBrk)
        {
            try
            {
                string NDTbyType = "BOTH";
                Paragraph paragraph = new Paragraph();
                float marginTop = 100;
                Boolean oldUPVGrading = false;
                int nablStatus = -1, SiteRouteId = 0;
                if (Action == "Print" || Action == "Automail" || Action.Contains("Email") == true)
                    nablStatus = getNablLogoStatus("NDT", ReferenceNo);//1 for priting nabl logo
                if (Action.Contains("DisplayLogo") == true || Action == "Automail" || Action.Contains("Email") == true || Action.Contains("Print") == true)
                {
                    marginTop = 21;
                }
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, marginTop, 10f);
                var fileName = "NDT_" + ReferenceNo.Replace('/', '_') + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/NDT";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;
                if (Action == "Email" || Action == "Automail" || Action.Contains("Email") == true)
                {
                    fileName = "NDT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                    Subfoldername1 = foldername;
                }
                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                //var fileName = "NDT_" + ReferenceNo.Replace('/', '_') + ".pdf";
                //PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@foldername + "/" + fileName, FileMode.Create));

                writer.PageEvent = new classPdfFooter1();
                pdfDoc.Open();

                PdfPTable table1 = new PdfPTable(7);  //tbl
                table1.WidthPercentage = 90;
                pdfDoc.Open();
                PdfPTable MaindataTable = new PdfPTable(6);  //tbl
                MaindataTable.WidthPercentage = 100;

                paragraph = new Paragraph();
                Font fontTitle = new Font(Font.FontFamily.TIMES_ROMAN, 11.5f, Font.BOLD);
                Font fontTitle1 = new Font(Font.FontFamily.TIMES_ROMAN, 12.5f, Font.BOLD);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.UNDEFINED);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 9.8f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9f, Font.UNDEFINED);

                if (Action.Contains("Print") == true)
                    LogoToPdf(pdfDoc, nablStatus);
                else if (Action == "Automail" || Action.Contains("Email") == true)
                    LogoToPdfEmail(pdfDoc, nablStatus);
                else if (Action.Contains("Display") == true)
                    LogoToPdfOld(pdfDoc, Action);
                #region data
                DateTime ApproveDt = new DateTime();
                //float[] widths = new float[] { 18f, 1f, 52f, 15f, 1f, 15f };
                float[] widths = new float[] { 18f, 1f, 50f, 18f, 1f, 15f };
                MaindataTable.SetWidths(widths);
                int TestId = 0;
                string NdtBy_type = string.Empty, CustName = "", SiteName = "", Address = "";
                bool RemotelyAppv = false;
                int Approveby = 0;
                string supersedeNote = "";
                bool flgIndirect = false;
                DateTime? dtTesting = null;
                var ndt_Test = dc.ReportStatus_View("Non Destructive Testing", null, null, 0, 0, 0, ReferenceNo, 0, 2, 0);
                foreach (var NDTtest in ndt_Test)
                {
                    if (NdtBy_type.Trim() != "Both")
                    {
                        NDTbyType = "Both";
                        //flgIndirect = false;
                    }
                    else if (NdtBy_type.Trim() == "Rebound Hammer")
                    {
                        flgIndirect = false;
                        // NDTbyType = "Hammer";
                    }
                    else
                    {
                        NDTbyType = "UPV";
                        // flgIndirect = true;
                    }

                    if (NDTtest.NDTINWD_UPVIndirect_bit == true)
                    {
                        flgIndirect = true;
                    }
                    if (NDTtest.INWD_RptSITE_Id != null && NDTtest.INWD_RptCL_Id != null)
                    {
                        CustName = NDTtest.RptCL_Name_var;
                        SiteName = NDTtest.RptST_Name_var;
                        Address = NDTtest.RptCL_OfficeAddress_var;
                    }
                    else
                    {
                        CustName = NDTtest.CL_Name_var;
                        SiteName = NDTtest.SITE_Name_var;
                        Address = NDTtest.CL_OfficeAddress_var;
                    }

                    SiteRouteId = Convert.ToInt32(NDTtest.SITE_Route_Id);
                    oldUPVGrading = Convert.ToBoolean(NDTtest.NDTINWD_OldGradinig_bit);
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    // paragraph.Add(" "); pdfDoc.Add(paragraph);
                    //if (NDTtest.NDTINWD_Status_tint == 4 || NDTtest.NDTINWD_Status_tint == 6)
                    if (Action == "Print" || Action == "Automail" || Action == "Email" || Action.Contains("Display") || Action.Contains("Email"))
                    {
                        paragraph.Font = fontTitle1;
                        paragraph.Add("Test Report");
                    }
                    else
                    {
                        paragraph.Font = fontH1;
                        paragraph.Add("Office Copy");
                    }
                    paragraph.SpacingBefore = 2; pdfDoc.Add(paragraph);

                    if (Convert.ToString(NDTtest.NDTINWD_ApprovedDate_dt) != string.Empty)
                    {
                        ApproveDt = Convert.ToDateTime(NDTtest.NDTINWD_ApprovedDate_dt);
                    }
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_CENTER;
                    paragraph.Font = fontTitle;
                    paragraph.SpacingAfter = 2;
                    paragraph.Add("Non Destructive Testing of R.C.C.");
                    if (NDTtest.NDTINWD_Status_tint < 6 || Action != "Print")
                    {
                        //paragraph.SpacingAfter = 20;
                    }
                    pdfDoc.Add(paragraph);
                    string authCode = reportAuthenticateCode();
                    clsData obj = new clsData();
                    string RouteName = obj.getRouteName(SiteRouteId);
                    if (RouteName == "")
                        RouteName = "NA";
                    PdfPCell Cust_Namecell;

                    if (NDTtest.NDTINWD_Status_tint >= 6 && Action == "Print")
                    {
                        var blackListText = FontFactory.GetFont("italic", 8);

                        Cust_Namecell = new PdfPCell(new Phrase("DUPLICATE COPY", blackListText));
                        Cust_Namecell.HorizontalAlignment = PdfPCell.ALIGN_RIGHT;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 6;
                        MaindataTable.AddCell(Cust_Namecell);

                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Customer Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(CustName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (authCode != "00")
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Branch Code", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(authCode, fontH2));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(""));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    Cust_Namecell = new PdfPCell(new Phrase("Office Address", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(Address, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    Cust_Namecell.Rowspan = 2;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Material Code", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("NDT", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Sample Ref No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    string[] RefNo1 = Convert.ToString(ReferenceNo).Split('/');
                    Cust_Namecell = new PdfPCell(new Phrase(RefNo1[0], fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    Cust_Namecell = new PdfPCell(new Phrase("Site Name", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(SiteName, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Record No.", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("NDT - " + Convert.ToString(NDTtest.NDTINWD_SetOfRecord_var), fontH1));
                    string strRecNo = NDTtest.NDTINWD_SetOfRecord_var;
                    if (NDTtest.NDTINWD_SupersedeStatus_tint > 0)
                    {
                        supersedeNote = "This report supersedes " + strRecNo;
                        if (NDTtest.NDTINWD_SupersedeStatus_tint > 1)
                            supersedeNote += "-R" + (NDTtest.NDTINWD_SupersedeStatus_tint - 1).ToString();
                        supersedeNote += " report dated  " + Convert.ToDateTime(NDTtest.NDTINWD_SupersedeDate_dt).ToString("dd/MM/yyyy");
                        strRecNo = strRecNo + "-R" + NDTtest.NDTINWD_SupersedeStatus_tint.ToString();
                    }
                    Cust_Namecell = new PdfPCell(new Phrase(strRecNo, fontH2));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);



                    Cust_Namecell = new PdfPCell(new Phrase("Kind attention", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(NDTtest.NDTINWD_KindAttention_var, fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Bill No.", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (NDTtest.SITE_MonthlyBillingStatus_bit == true && NDTtest.INWD_BILL_Id == "0")
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("Monthly", fontH1));
                        if (NDTtest.NDTINWD_IssueDate_dt != null)
                        {
                            string monthlyBillNo = Convert.ToDateTime(NDTtest.NDTINWD_IssueDate_dt).ToString("MMM/yyyy");
                            Cust_Namecell = new PdfPCell(new Phrase(monthlyBillNo, fontH1));
                        }
                        else
                        {
                            Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                        }
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToString(NDTtest.INWD_BILL_Id), fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);


                    // contact details
                    Phrase phrase = new Phrase();
                    phrase.Add(new Chunk(NDTtest.CONT_Name_var + " - " + NDTtest.CONT_ContactNo_var, fontH1));
                    phrase.Add(new Chunk("    (Route : " + RouteName + ")", fontH2));
                    Cust_Namecell = new PdfPCell(new Phrase("Contact Details", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(phrase);
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Testing", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    if (Convert.ToString(NDTtest.NDTINWD_TestingDate_dt) != null)
                    {
                        dtTesting = Convert.ToDateTime(NDTtest.NDTINWD_TestingDate_dt);
                        Cust_Namecell = new PdfPCell(new Phrase(Convert.ToDateTime(NDTtest.NDTINWD_TestingDate_dt).ToString("dd-MMM-yy"), fontH1));
                    }
                    else
                    {
                        //Cust_Namecell = new PdfPCell(new Phrase("- " + System.DateTime.Now.ToString("dd-MMM-yyyy"), fontH1));
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase("Date of Mat. Recd", fontH1));
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);
                    //Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);
                    //if (NDTtest.NDTINWD_ReceivedDate_dt != null)
                    //{
                    //    DateTime cDT = Convert.ToDateTime(NDTtest.NDTINWD_ReceivedDate_dt);
                    //    string ReceiptDt = cDT.ToString("dd-MMM-yyyy");
                    //    Cust_Namecell = new PdfPCell(new Phrase(ReceiptDt, fontH1));
                    //}
                    //else
                    //{
                    //    Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    //}
                    //Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    //MaindataTable.AddCell(Cust_Namecell);


                    NdtBy_type = NDTtest.NDTINWD_NDTBy_var.ToString();
                    TestId = Convert.ToInt32(NDTtest.NDTINWD_TestId_int);

                    if (NDTtest.NDTINWD_RemoteApproved == true && NDTtest.NDTINWD_RemoteApproved != null)
                    {
                        RemotelyAppv = true;
                    }
                    if (NDTtest.NDTINWD_ApprovedBy_tint != null)
                    {
                        Approveby = Convert.ToInt32(NDTtest.NDTINWD_ApprovedBy_tint);
                    }


                    if (NDTtest.INWD_RptSITE_Id != null && NDTtest.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Bill To", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(NDTtest.CL_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    Cust_Namecell = new PdfPCell(new Phrase("Date of Issue", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);
                    Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    //if (NDTtest.NDTINWD_IssueDate_dt != null)
                    //{
                    //    DateTime iDT = Convert.ToDateTime(NDTtest.NDTINWD_IssueDate_dt);
                    //    string issuedt = iDT.ToString("dd-MMM-yyyy");
                    //    Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    //}
                    if (NDTtest.NDTINWD_ApprovedDate_dt != null)
                    {
                        DateTime iDT = Convert.ToDateTime(NDTtest.NDTINWD_ApprovedDate_dt);
                        string issuedt = iDT.ToString("dd-MMM-yyyy");
                        Cust_Namecell = new PdfPCell(new Phrase(issuedt, fontH1));
                    }
                    else
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("-", fontH1));
                    }
                    Cust_Namecell.Border = PdfPCell.NO_BORDER;
                    MaindataTable.AddCell(Cust_Namecell);

                    if (NDTtest.INWD_RptSITE_Id != null && NDTtest.INWD_RptCL_Id != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Site", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(": ", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase(NDTtest.SITE_Name_var, fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 4;
                        MaindataTable.AddCell(Cust_Namecell);
                    }

                    //ULR No
                    if (Convert.ToString(NDTtest.NDTINWD_ULRNo_var) != "" && Convert.ToString(NDTtest.NDTINWD_ULRNo_var) != null)
                    {
                        Cust_Namecell = new PdfPCell(new Phrase("Discipline : " + "NDT" + "    " + "Group : " + "Building Materials - Reinforced Concrete Structures", fontH1));
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        Cust_Namecell.Colspan = 3;
                        MaindataTable.AddCell(Cust_Namecell);
                        Cust_Namecell = new PdfPCell(new Phrase("ULR No : " + Convert.ToString(NDTtest.NDTINWD_ULRNo_var), fontH1));
                        Cust_Namecell.Colspan = 3;
                        Cust_Namecell.Border = PdfPCell.NO_BORDER;
                        MaindataTable.AddCell(Cust_Namecell);
                    }
                    //

                }

                //MaindataTable.SpacingAfter = 1;
                pdfDoc.Add(MaindataTable);

                #endregion
                // pdfDoc.Add(Chunk.NEWLINE);
                //pdfDoc.Add(new Paragraph("OBSERVATIONS & CALCULATIONS :", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(new Paragraph(" ", fontH2));
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                paragraph = new Paragraph();
                paragraph.Font = fontH2;
                paragraph.Add("OBSERVATIONS & CALCULATIONS :");
                paragraph.SpacingAfter = 5; // 9;
                pdfDoc.Add(paragraph);
                #region tbldata

                PdfPCell cell1;
                //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                //pdfDoc.Add(table1);

                var NDTTESTING = dc.TestDetail_Title_View(ReferenceNo, 0, "NDT", false).ToList();
                var Count = NDTTESTING.Count();

                int SrNo = 0;
                int cnt = 0;
                int pgno = 1;
                int totPages = 1;
                Boolean flgbreak = false;
                for (int NDT = 0; NDT < Count; NDT++)
                {

                    if (cnt == 0)
                    {
                        if (NdtBy_type.Trim() != "Both")
                        {
                            NDTbyType = "BOTH";
                        }

                        if (NdtBy_type.Trim() == "Rebound Hammer")
                        {

                            table1 = new PdfPTable(8);
                            table1.WidthPercentage = 100;
                            table1.SetTotalWidth(new float[] { 5f, 15f, 6f, 10f, 7f, 5f, 5f, 6f });
                        }
                        else
                        {
                            table1 = new PdfPTable(9);
                            table1.WidthPercentage = 100;
                            table1.SetTotalWidth(new float[] { 5f, 15f, 6f, 10f, 5f, 8f, 6f, 6f, 6f });
                        }
                        cell1 = new PdfPCell(new Phrase("Sr No.", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Location & Identification", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Grade of concrete", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Date of Casting", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Age \n(Days)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Mech. Sclerometer (Rebound Hammer)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        if (NdtBy_type.Trim() != "Rebound Hammer")
                        {
                            cell1 = new PdfPCell(new Phrase("Pulse Velocity \n(km/s)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);
                        }
                        cell1 = new PdfPCell(new Phrase("Indicative Strength \n(N/mm²)", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        cell1.Rowspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Angle of inclination", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Average reading", fontH2));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        // }
                        if (NdtBy_type.Trim() == "UPV with Grading" || NdtBy_type.Trim() == "UPV")
                        {
                            if (flgIndirect == true)
                            {
                                table1 = new PdfPTable(8);
                                table1.WidthPercentage = 100;
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SetTotalWidth(new float[] { 5f, 18f, 6f, 6f, 5f, 10f, 10f, 10f });
                                string[] subheader = { "Sr No.", "Location & Identification", "Grade of concrete", "Date of Casting", "Age\n(Days)", "Pulse Velocity\n(km/s)", "Corr. Pulse Velocity\n(km/s)", "Concrete quality grading" };
                                for (int h = 0; h < subheader.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(subheader[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (NdtBy_type.Trim() == "UPV")
                                    {
                                        if (h == 7)
                                        {
                                            cell1 = new PdfPCell(new Phrase("Indicative Strength \n(N/mm²)", fontH2));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        }
                                    }
                                    table1.AddCell(cell1);
                                }
                            }
                            else
                            {
                                table1 = new PdfPTable(7);
                                table1.WidthPercentage = 100;
                                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                table1.SetTotalWidth(new float[] { 5f, 18f, 6f, 6f, 5f, 10f, 10f });
                                string[] subheader = { "Sr No.", "Location & Identification", "Grade of concrete", "Date of Casting", "Age\n(Days)", "Pulse Velocity\n(km/s)", "Concrete quality grading" };
                                for (int h = 0; h < subheader.Count(); h++)
                                {
                                    cell1 = new PdfPCell(new Phrase(subheader[h], fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    if (NdtBy_type.Trim() == "UPV")
                                    {
                                        if (h == 6)
                                        {
                                            cell1 = new PdfPCell(new Phrase("Indicative Strength \n(N/mm²)", fontH2));
                                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        }
                                    }
                                    table1.AddCell(cell1);
                                }
                            }
                        }


                    }
                    string[] strSr = PageBrk.Split(',');

                    if (Convert.ToString(NDTTESTING[NDT].Description_var) != "")
                    {
                        SrNo++;
                        cnt++;
                        //if (cnt == 36 || cnt == 72 || cnt == 108 || cnt == 144 || cnt == 177 || cnt==210 )
                        if (PageBrk != "")
                        {
                            flgbreak = false;
                            for (int i = 0; i < strSr.GetLength(0) - 1; i++)
                            {
                                if (SrNo == Convert.ToInt32(strSr[i]))
                                {
                                    flgbreak = true;
                                    break;
                                }
                            }
                        }
                        if (flgbreak == true)
                        {
                            totPages = Convert.ToInt32(strSr.GetLength(0));
                            pdfDoc.Add(table1);
                            table1.FlushContent();
                            table1 = new PdfPTable(1);
                            table1.WidthPercentage = 100;
                            cell1 = new PdfPCell(new Phrase("Page " + pgno.ToString() + " of " + totPages.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            pgno = pgno + 1;

                            pdfDoc.Add(table1);
                            table1.FlushContent();
                            pdfDoc.NewPage();
                            if (Action.Contains("Print") == true)
                                LogoToPdf(pdfDoc, nablStatus);
                            else if (Action.Contains("Display") == true || Action.Contains("Email") == true)
                                LogoToPdfOld(pdfDoc, Action);
                            if (NdtBy_type.Trim() == "Rebound Hammer")
                            {
                                table1 = new PdfPTable(8);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 5f, 15f, 5f, 10f, 5f, 5f, 5f, 6f });
                            }
                            else
                            {
                                table1 = new PdfPTable(9);
                                table1.WidthPercentage = 100;
                                table1.SetTotalWidth(new float[] { 5f, 15f, 5f, 10f, 5f, 6f, 6f, 6f, 6f });
                            }
                            cell1 = new PdfPCell(new Phrase("Sr No.", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Location & Identification", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Grade of concrete", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Date of Casting", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Age \n(Days)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Mech. Sclerometer (Rebound Hammer)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Colspan = 2;
                            table1.AddCell(cell1);

                            if (NdtBy_type.Trim() != "Rebound Hammer")
                            {
                                cell1 = new PdfPCell(new Phrase("Pulse Velocity \n(km/s)", fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.Rowspan = 2;
                                table1.AddCell(cell1);
                            }
                            cell1 = new PdfPCell(new Phrase("Indicative Strength \n(N/mm²)", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Angle of inclination", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase("Average reading", fontH2));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            // }
                            if (NdtBy_type.Trim() == "UPV with Grading" || NdtBy_type.Trim() == "UPV")
                            {
                                if (flgIndirect == true)
                                {
                                    table1 = new PdfPTable(8);
                                    table1.WidthPercentage = 100;
                                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                    table1.SetTotalWidth(new float[] { 5f, 18f, 6f, 8f, 5f, 10f, 10f, 10f });
                                    string[] subheader = { "Sr No.", "Location & Identification", "Grade of concrete", "Date of Casting", "Age\n(Days)", "Pulse Velocity\n(km/s)", "Corr. Pulse Velocity\n(km/s)", "Concrete quality grading" };
                                    for (int h = 0; h < subheader.Count(); h++)
                                    {
                                        cell1 = new PdfPCell(new Phrase(subheader[h], fontH2));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        if (NdtBy_type.Trim() == "UPV")
                                        {
                                            if (h == 7)
                                            {
                                                cell1 = new PdfPCell(new Phrase("Indicative Strength \n(N/mm²)", fontH2));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            }
                                        }
                                        table1.AddCell(cell1);
                                    }
                                }
                                else
                                {
                                    table1 = new PdfPTable(7);
                                    table1.WidthPercentage = 100;
                                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                                    table1.SetTotalWidth(new float[] { 5f, 18f, 6f, 6f, 5f, 10f, 10f });
                                    string[] subheader = { "Sr No.", "Location & Identification", "Grade of concrete", "Date of Casting", "Age\n(Days)", "Pulse Velocity\n(km/s)", "Concrete quality grading" };
                                    for (int h = 0; h < subheader.Count(); h++)
                                    {
                                        cell1 = new PdfPCell(new Phrase(subheader[h], fontH2));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        if (NdtBy_type.Trim() == "UPV")
                                        {
                                            if (h == 6)
                                            {
                                                cell1 = new PdfPCell(new Phrase("Indicative Strength \n(N/mm²)", fontH2));
                                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                            }
                                        }
                                        table1.AddCell(cell1);
                                    }
                                }
                            }


                        }
                        cell1 = new PdfPCell(new Phrase(SrNo.ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(NDTTESTING[NDT].Description_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(NDTTESTING[NDT].Grade_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(NDTTESTING[NDT].Castingdate_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(Convert.ToString(NDTTESTING[NDT].Age_var), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        if (NdtBy_type.Trim() != "UPV with Grading" && NdtBy_type.Trim() != "UPV")
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(NDTTESTING[NDT].AlphaAngle_var).Replace("°", "") + "°", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (Convert.ToString(NDTTESTING[NDT].ReboundIndex_var) != "")
                        {
                            string[] Rebound = Convert.ToString(NDTTESTING[NDT].ReboundIndex_var).Split('|');
                            foreach (var RebdIndex in Rebound)
                            {
                                if (RebdIndex != "")
                                {
                                    cell1 = new PdfPCell(new Phrase(RebdIndex, fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);
                                    break;
                                }
                            }
                        }
                        if (NdtBy_type.Trim() != "Rebound Hammer")
                        {
                            if (Convert.ToString(NDTTESTING[NDT].PulseVelocity_var) != "")
                            {
                                string[] PulseVelc = Convert.ToString(NDTTESTING[NDT].PulseVelocity_var).Split('|');
                                foreach (var Pulse in PulseVelc)
                                {
                                    if (Pulse != "")
                                    {
                                        cell1 = new PdfPCell(new Phrase(Pulse, fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                        table1.AddCell(cell1);
                                        break;
                                    }
                                }
                            }
                            if (flgIndirect == true) //|| NDTTESTING[NDT].CorrectedPulseVelocity_var !="")
                            {
                                if (Convert.ToString(NDTTESTING[NDT].CorrectedPulseVelocity_var) != "")
                                {
                                    cell1 = new PdfPCell(new Phrase(NDTTESTING[NDT].CorrectedPulseVelocity_var.ToString(), fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    table1.AddCell(cell1);

                                }
                            }
                        }
                        if (NDTTESTING[NDT].EditedIndStr_var != null && NDTTESTING[NDT].EditedIndStr_var != string.Empty)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(NDTTESTING[NDT].EditedIndStr_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToString(NDTTESTING[NDT].IndicativeStrength_var), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }

                    }
                    else
                    {
                        if (Convert.ToString(NDTTESTING[NDT].TitleId_int) != "")
                        {
                            if (Convert.ToInt32(NDTTESTING[NDT].TitleId_int) > 0)
                            {
                                var crr = dc.TestDetail_Title_View(ReferenceNo, Convert.ToInt32(NDTTESTING[NDT].TitleId_int), "NDT", false);
                                foreach (var title in crr)
                                {
                                    cell1 = new PdfPCell(new Phrase(Convert.ToString(title.TitleDesc_var), fontH2));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.Colspan = 12;
                                    table1.AddCell(cell1);
                                    cnt++;
                                    break;
                                }
                            }
                        }
                    }

                }
                table1.SpacingAfter = 3;
                pdfDoc.Add(table1);

                #endregion
                //table1.SpacingBefore = 10;
                #region iscode/ remarks
                //if (Count >= 17 && Count <= 34)
                //{
                //    //pdfDoc.Add(table1);
                //    table1.FlushContent();
                //    pdfDoc.NewPage();
                //    }

                table1 = new PdfPTable(2);
                table1.SpacingAfter = 5;
                table1.DefaultCell.Border = PdfPCell.NO_BORDER;
                table1.SetWidths(new float[] { 2f, 70f });
                PdfPCell cell2;
                int serial_no = 0;
                var iscd = dc.ISCode_View(0, "", "NDT", dtTesting).ToList();
                if (iscd.Count > 0)
                {
                    foreach (var cd in iscd)
                    {

                        if ((cd.Isc_Description_var.Contains("Part I") == true && (NdtBy_type == "Both" || NdtBy_type == "UPV with Grading"))
                            || (cd.Isc_Description_var.Contains("Part II") == true && (NdtBy_type == "Both" || NdtBy_type == "Rebound Hammer"))
                            || (cd.Isc_Description_var.Contains("Part 5") == true && (NdtBy_type == "Both" || NdtBy_type == "UPV with Grading"))
                            )
                        {
                            if (serial_no == 0)
                            {
                                //pdfDoc.Add(new Paragraph("References/Notes :", fontH2));
                                cell2 = new PdfPCell(new Phrase("References :", fontH2));
                                cell2.Colspan = 2;
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }
                            //serial_no++;
                            //pdfDoc.Add(new Paragraph((serial_no) + ")" + Convert.ToString(cd.Isc_Description_var), fontH1));

                            if (oldUPVGrading == true && cd.Isc_Description_var.Contains("13311"))
                            {
                                serial_no = serial_no + 1;
                                cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                                cell2 = new PdfPCell(new Phrase("IS 13311 Part I:1992-RA(2018) Non destructive testing of concrete.", fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);

                            }
                            else if (oldUPVGrading == false)
                            {
                                serial_no = serial_no + 1;
                                cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                                cell2 = new PdfPCell(new Phrase(cd.Isc_Description_var, fontH1));
                                cell2.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell2);
                            }

                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                serial_no = 0;
                var reference = dc.AllRemark_View("", ReferenceNo, 0, "NDT").ToList();
                var referencecount = reference.Count();
                if (referencecount > 0)
                {
                    for (int r = 0; r < referencecount; r++)
                    {
                        if (r == 0)
                        {
                            //pdfDoc.Add(new Paragraph("Uncertainty levels : ", fontH2));
                            cell2 = new PdfPCell(new Phrase("Uncertainty levels :", fontH2));
                            cell2.Colspan = 2;
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                        var remark = dc.AllRemark_View("", "", Convert.ToInt32(reference[r].NDTDetail_RemarkId_int), "NDT").ToList();
                        var remarkcount = remark.Count();
                        for (int remk = 0; remk < remarkcount; remk++)
                        {
                            serial_no++;
                            //pdfDoc.Add(new Paragraph(serial_no + ")" + Convert.ToString(remark[remk].NDT_Remark_var), fontH1));
                            cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                            cell2 = new PdfPCell(new Phrase(remark[remk].NDT_Remark_var, fontH1));
                            cell2.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell2);
                        }
                    }
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }
                if (supersedeNote != "")
                {

                    if (serial_no == 0)
                    {
                        //cell2 = new PdfPCell(new Phrase("Remarks :", fontH2));
                        cell2 = new PdfPCell(new Phrase("Uncertainty levels :", fontH2));
                        cell2.Colspan = 2;
                        cell2.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell2);
                    }
                    serial_no++;
                    cell2 = new PdfPCell(new Phrase(serial_no.ToString() + ")", fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(supersedeNote, fontH1));
                    cell2.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell2);
                    cell2 = new PdfPCell(new Phrase(" ", fontH2));
                    cell2.FixedHeight = 5f;
                    cell2.Border = PdfPCell.NO_BORDER;
                    cell2.Colspan = 2;
                    table1.AddCell(cell2);
                }

                #region notes

                cell2 = new PdfPCell(new Phrase("Notes :", fontH2));
                cell2.Colspan = 2;
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("1) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[0], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("2) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[1], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase("3) ", fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                cell2 = new PdfPCell(new Phrase(notes[2], fontH3));
                cell2.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell2);
                table1.SpacingAfter = 4;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.WidthPercentage = 100;
                pdfDoc.Add(table1);

                #endregion
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_LEFT;
                paragraph.Font = fontH2;
                paragraph.Add("This report can be authenticated on our website www.durocrete.in");
                pdfDoc.Add(paragraph);

                #endregion

                //if (Action != "Email" && Action.Contains("Display") == false && Action.Contains("Email") == false)
                //if (Action != "DisplayLogoWithNABL" && Action != "DisplayLogoWithoutNABL" && Action != "Display" && Action != "Check")
                if (Action != "Check")
                {
                    PdfPTable MaindataTable1 = new PdfPTable(1);
                    MaindataTable1.SpacingBefore = 6;
                    MaindataTable1.WidthPercentage = 100;
                    PdfPCell cellbottom = new PdfPCell(new Paragraph("Authorized Signatory", fontH1));
                    cellbottom.Border = PdfPCell.NO_BORDER;
                    //MaindataTable1.SpacingAfter = 25;
                    MaindataTable1.AddCell(cellbottom);
                    pdfDoc.Add(MaindataTable1);
                    #region Signature
                    bool sign = false;
                    //byte[] bytes = null;
                    if (RemotelyAppv == true)
                    {
                        if (Approveby > 0)
                        {
                            var data = dc.Sign_View(Approveby);
                            foreach (var g in data)
                            {
                                byte[] imageBytes = g.UserSign.ToArray();
                                MemoryStream mxs1 = new MemoryStream(imageBytes);
                                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(imageBytes);
                                table1 = new PdfPTable(1);
                                table1.WidthPercentage = 100;
                                table1.SetWidths(new float[] { 1.7f });
                                PdfPCell cell = new PdfPCell(image);
                                cell.FixedHeight = 25;
                                cell.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell);

                                pdfDoc.Add(table1);
                                //bytes = memoryStream.ToArray();
                                sign = true;
                                break;
                            }
                        }
                    }
                    #endregion

                    if (sign == false)
                    {
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                        pdfDoc.Add(new Paragraph(" ", fontH1));
                    }
                    var RecNo = dc.ReportStatus_View("Non Destructive Testing", null, null, 1, 0, 0, ReferenceNo, 0, 0, 0).ToList();
                    var RecNocount = RecNo.Count();
                    for (int r = 0; r < RecNocount; r++)
                    {
                        if (RecNo[r].NDTINWD_ApprovedBy_tint != null && RecNo[r].NDTINWD_ApprovedBy_tint.ToString() != "" && RecNo[r].NDTINWD_ApprovedBy_tint > 0)
                        {
                            var User = dc.User_View(Convert.ToInt32(RecNo[r].NDTINWD_ApprovedBy_tint), -1, "", "", "").ToList();
                            var ucount = User.Count();
                            for (int userId = 0; userId < ucount; userId++)
                            {

                                pdfDoc.Add(new Paragraph(Convert.ToString(User[userId].USER_Name_var), fontH1));

                                if (User[userId].USER_Designation_var.Contains("(") == false)
                                    pdfDoc.Add(new Paragraph("(" + User[userId].USER_Designation_var + ")", fontH3));
                                else
                                    pdfDoc.Add(new Paragraph(User[userId].USER_Designation_var, fontH3));
                                if (Action == "Print" || Action == "Automail" || Action == "Email")
                                {
                                    pdfDoc.Add(new Paragraph(Convert.ToString(ApproveDt.ToString("dd/MM/yy")), fontH3));
                                }
                                else
                                {
                                    pdfDoc.Add(new Paragraph("", fontH3));
                                }
                            }
                        }

                        PdfPTable MaindataTable2 = new PdfPTable(2);
                        MaindataTable2.WidthPercentage = 100;
                        if (RecNo[r].NDTINWD_WitnessBy_var != string.Empty)
                        {
                            cellbottom = new PdfPCell(new Paragraph("Witness by :  " + RecNo[r].NDTINWD_WitnessBy_var, fontH1));
                            cellbottom.Border = PdfPCell.NO_BORDER;
                            cellbottom.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom);
                        }
                        else
                        {
                            cellbottom = new PdfPCell(new Paragraph(" ", fontH1));
                            cellbottom.Border = PdfPCell.NO_BORDER;
                            cellbottom.HorizontalAlignment = Element.ALIGN_LEFT;
                            MaindataTable2.AddCell(cellbottom);
                        }
                        if (RecNo[r].NDTINWD_CheckedBy_tint != null && RecNo[r].NDTINWD_CheckedBy_tint.ToString() != "" && RecNo[r].NDTINWD_CheckedBy_tint > 0)
                        {
                            var lgin = dc.User_View(Convert.ToInt32(RecNo[r].NDTINWD_CheckedBy_tint), -1, "", "", "").ToList();
                            var lginCount = lgin.Count();
                            for (int loginusr = 0; loginusr < lginCount; loginusr++)
                            {
                                cellbottom = new PdfPCell(new Paragraph("Checked by : " + Convert.ToString(lgin[loginusr].USER_Name_var), fontH1));
                            }
                            cellbottom.Border = PdfPCell.NO_BORDER;
                            cellbottom.HorizontalAlignment = Element.ALIGN_RIGHT;
                            MaindataTable2.AddCell(cellbottom);
                            pdfDoc.Add(MaindataTable2);
                        }

                    }
                }
                else
                {
                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);
                    //paragraph = new Paragraph();

                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);

                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact on " + tollFree + ".");
                    pdfDoc.Add(paragraph);

                    //paragraph = new Paragraph();
                    //paragraph.Font = fontH1;
                    //paragraph.Add("  ");
                    //pdfDoc.Add(paragraph);


                }
                var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                paragraph = new Paragraph();
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = blackListTextFont;
                paragraph.Add("--End of Report--");
                pdfDoc.Add(paragraph);
                pdfDoc.Add(new Paragraph("Page " + pgno.ToString() + " of " + totPages.ToString(), fontH1));
                //pdfDoc.Add(new Paragraph("REGD.ADD-1160/5, GHARPURE Colony Shivaji Nagar, Pune 411005,Maharashtra India", fontH1));
                pdfDoc.Close();
                if (Action != "Email" && Action.Contains("Email") == false)
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }

        #region Proposal
        public void ProposalApp_PDF(int EnqId, int qtyFlag, int proposalId, bool newEnqClient, bool appEnqFlag, string Action, string ProposalNo, bool notRegClient)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, 90f, 15f);
                var fileName = "Proposal" + "_" + ProposalNo.Replace("/", "_") + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Proposal";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;

                if (Action == "Email")
                {
                    fileName = "Proposal_" + ProposalNo.Replace("/", "_") + ".pdf";
                    Subfoldername1 = foldername;
                }

                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                writer.PageEvent = new clsProposalHeaderFooter(1);

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);
                paragraph = new Paragraph();

                BaseFont bfT = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, false);
                Font font7 = new Font(bfT, 10, Font.UNDERLINE | Font.BOLD, BaseColor.BLACK);
                Font fontH5 = new Font(Font.FontFamily.TIMES_ROMAN, 12f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9.5f, Font.UNDEFINED);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.5f, Font.UNDEFINED);
                Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 10f, Font.BOLD);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 8.5f, Font.BOLD);
                Font fontH6 = new Font(Font.FontFamily.TIMES_ROMAN, 8f, Font.BOLD);

                string gtDiscNote = ""; int discNotesApplicability = 0, SiteWiseRateApplied_bit = 0;
                paragraph = new Paragraph();
                //paragraph.SpacingBefore = 30;
                // paragraph.SpacingAfter = 3;
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = fontH5;
                paragraph.Add(" Proposal for Testing Services\n ");
                pdfDoc.Add(paragraph);
                #region data
                double gstAmount = 0, GrandTotal = 0, netAmount = 0;
                string email = "", meContact = "", proposalEmailId = "", meName = "", userNm = "", userDesgn = "", proposalDetailNote = "", proposalAddChargesNote = "", proposalNo = "", materialType = "";
                PdfPCell cell1;
                int SrNo = 0, mergeFrom = 0, mergeTo = 0, subTestOT = 0;
                var res = dc.Proposal_View_AppEnq(EnqId, newEnqClient, proposalId, "");
                foreach (var e in res)
                {

                    if (SrNo == 0)
                    {
                        //qtyFlag = Convert.ToInt32(e.Proposal_WithQty);
                        mergeFrom = Convert.ToInt32(e.Proposal_MergeFrom);
                        mergeTo = Convert.ToInt32(e.Proposal_MergeTo);
                        meContact = Convert.ToString(e.Proposal_MeContactNo);
                        meName = Convert.ToString(e.Proposal_MEName);
                        subTestOT = Convert.ToInt32(e.Proposal_OTSubTestId_int);
                        email = Convert.ToString(e.Proposal_NewClientMailId_var);
                        gtDiscNote = Convert.ToString(e.Proposal_DiscNoteGT_var);
                        gstAmount = Convert.ToDouble(e.Proposal_GSTAmt_dec);
                        proposalEmailId = Convert.ToString(e.Proposal_EmailTo_var);
                        GrandTotal = Convert.ToDouble(e.Proposal_NetAmountWithGST_dec);
                        netAmount = GrandTotal - gstAmount;

                        if (Convert.ToString(e.Proposal_DiscNotesVisibility_bit) != "" && Convert.ToString(e.Proposal_DiscNotesVisibility_bit) != null)
                            discNotesApplicability = Convert.ToInt32(e.Proposal_DiscNotesVisibility_bit);
                        if (Convert.ToString(e.Proposal_SiteWiseRateApplied_bit) != null)
                            SiteWiseRateApplied_bit = Convert.ToInt32(e.Proposal_SiteWiseRateApplied_bit);
                        table1 = new PdfPTable(4);
                        table1.WidthPercentage = 100;
                        table1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.SetTotalWidth(new float[] { 14f, 35f, 14f, 33f });
                        cell1 = new PdfPCell(new Phrase("To,", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.TOP_BORDER | PdfPCell.LEFT_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.TOP_BORDER | PdfPCell.RIGHT_BORDER;
                        table1.AddCell(cell1);
                        if (Convert.ToString(e.Proposal_Date) != "")
                        {
                            cell1 = new PdfPCell(new Phrase("Date   ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.TOP_BORDER | PdfPCell.LEFT_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(": " + Convert.ToDateTime(e.Proposal_Date).ToString("dd/MM/yyyy"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.TOP_BORDER | PdfPCell.RIGHT_BORDER;
                            table1.AddCell(cell1);
                        }
                        //enquiry details
                        string clientName = "", siteEmailId = "", enqContactNo = "";
                        string city = "", pin = "", add = "";
                        if (newEnqClient == false && appEnqFlag == false)
                        {
                            var data = dc.Enquiry_View_Details(EnqId, false);
                            foreach (var en in data)
                            {
                                materialType = "," + en.MATERIAL_RecordType_var.ToString() + ",";
                                clientName = en.CL_Name_var.ToString();
                                siteEmailId = en.SITE_EmailID_var;
                                enqContactNo = en.CONT_ContactNo_var;
                                if (Convert.ToString(en.CL_City_var) != null)
                                    city = Convert.ToString(en.CL_City_var);
                                if (Convert.ToString(en.CL_Pin_int) != null)
                                    pin = Convert.ToString(en.CL_Pin_int);
                                if (Convert.ToString(en.CL_OfficeAddress_var) != null)
                                    add = Convert.ToString(en.CL_OfficeAddress_var);
                            }
                        }
                        else if (appEnqFlag == false)
                        {
                            var data = dc.EnquiryNewClient_View_Details(EnqId, false);
                            foreach (var en in data)
                            {
                                materialType = "," + en.MATERIAL_RecordType_var.ToString() + ",";
                                clientName = en.ENQNEW_ClientName_var.ToString();
                                siteEmailId = email;
                                enqContactNo = en.ENQNEW_ContactNo_var;
                                if (Convert.ToString(en.ENQNEW_ClientCity_var) != null)
                                    city = Convert.ToString(en.ENQNEW_ClientCity_var);
                                if (Convert.ToString(en.ENQNEW_ClientPin_int) != null)
                                    pin = Convert.ToString(en.ENQNEW_ClientPin_int);
                                if (Convert.ToString(en.ENQNEW_ClientOfficeAddress_var) != null)
                                    add = Convert.ToString(en.ENQNEW_ClientOfficeAddress_var);

                                add += " " + city + " " + pin;
                            }
                        }
                        else
                        {
                            var enqMat = dc.EnquiryApp_Material_View(EnqId);
                            foreach (var m in enqMat)
                            {
                                //if (materialType != "")
                                //    materialType += "," + m.MATERIAL_RecordType_var + ",";
                                //else
                                materialType = "," + m.MATERIAL_RecordType_var + ",";
                            }
                            var data = dc.EnquiryApp_View(EnqId, -1);
                            foreach (var en in data)
                            {
                                //materialType = en.MATERIAL_RecordType_var.ToString();
                                clientName = en.CL_Name_var.ToString();
                                siteEmailId = en.SITE_EmailID_var;
                                enqContactNo = en.ENQ_contact_number;
                                if (Convert.ToString(en.CL_City_var) != null)
                                    city = Convert.ToString(en.CL_City_var);
                                if (Convert.ToString(en.CL_Pin_int) != null)
                                    pin = Convert.ToString(en.CL_Pin_int);
                                if (Convert.ToString(en.CL_OfficeAddress_var) != null)
                                    add = Convert.ToString(en.CL_OfficeAddress_var);
                            }
                        }
                        cell1 = new PdfPCell(new Phrase(clientName, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);
                        if (Convert.ToString(e.Proposal_No) != "")
                        {
                            cell1 = new PdfPCell(new Phrase("Ref No.   ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.LEFT_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(": " + Convert.ToString(e.Proposal_No), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.RIGHT_BORDER;
                            table1.AddCell(cell1);
                        }
                        int cntAdd = 1, flag = 0;
                        if (newEnqClient == false)
                        {

                            if (city != "")
                            {
                                add = add.ToString().Replace(city, "");
                                if (add != "")
                                {
                                    if (add.Substring(add.Length - 1).ToString().Contains(""))
                                    {
                                        if (add.Substring(add.Length - 2).ToString().Contains("-") || add.Substring(add.Length - 2).ToString().Contains("."))
                                            add = add.Remove(add.Length - 2, 1) + "";

                                    }

                                    if (add.Substring(add.Length - 1).ToString().Contains("-") || add.Substring(add.Length - 2).ToString().Contains("."))
                                        add = add.Remove(add.Length - 1, 1) + "";
                                }
                            }
                            if (pin != "")
                            {
                                add = add.ToString().Replace(pin, "");
                                if (add != "")
                                {
                                    if (add.Substring(add.Length - 1).ToString().Contains(""))
                                    {
                                        if (add.Substring(add.Length - 2).ToString().Contains("-") || add.Substring(add.Length - 2).ToString().Contains("."))
                                            add = add.Remove(add.Length - 2, 1) + "";

                                    }

                                    if (add.Substring(add.Length - 1).ToString().Contains(".") || add.Substring(add.Length - 1).ToString().Contains("-"))
                                        add = add.Remove(add.Length - 1, 1) + "";

                                }
                            }


                            if (add.Length > 60)
                                cntAdd = 2;

                            if ((add.Length - 60) < 60)
                            {
                                if (city != "")
                                {
                                    if ((city.Length) <= (add.Length - 60))
                                    {
                                        if (add.Substring(add.Length).ToString() == "")
                                            add += city;
                                        else
                                            add += " " + city;

                                    }
                                }

                                if (pin != "")
                                {
                                    if ((pin.Length + 3) <= (add.Length - 60))
                                    {
                                        if (add.Substring(add.Length).ToString() == "")
                                            add += " - " + pin + ".";
                                        else
                                            add += " - " + pin + ".";

                                    }
                                }

                                flag = 1;
                            }

                            cell1 = new PdfPCell(new Phrase(add, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            //cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER;
                            cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                            cell1.Colspan = 2;
                            if (cntAdd == 1)
                            {
                                cell1.Rowspan = 1;
                                cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER;

                            }
                            else
                                cell1.Rowspan = 2;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(add, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                            cell1.Colspan = 2;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                        }

                        cell1 = new PdfPCell(new Phrase("Email", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.LEFT_BORDER;
                        table1.AddCell(cell1);

                        if (proposalEmailId != "")
                            cell1 = new PdfPCell(new Phrase(": " + proposalEmailId, fontH1));
                        else
                            cell1 = new PdfPCell(new Phrase(": " + proposalEmailId, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.RIGHT_BORDER;
                        table1.AddCell(cell1);

                        if (newEnqClient == false)
                        {
                            if (cntAdd == 1)
                            {
                                string str = "";
                                if (city != "")
                                    str += city;
                                if (pin != "")
                                    str += " - " + pin + ".";

                                if (str != "")
                                {
                                    cell1 = new PdfPCell(new Phrase(str, fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                    cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                                    cell1.Colspan = 2;
                                    table1.AddCell(cell1);

                                }
                                else
                                {
                                    cell1 = new PdfPCell(new Phrase("", fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                    cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                                    cell1.Colspan = 2;
                                    table1.AddCell(cell1);
                                }
                            }

                        }


                        cell1 = new PdfPCell(new Phrase("Mobile", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.BOTTOM_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(": " + enqContactNo, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                        table1.AddCell(cell1);

                        if (newEnqClient == false)
                        {
                            if (cntAdd == 2)
                            {
                                if (flag == 0)
                                {
                                    string str = "";
                                    if (city != "")
                                        str += city;
                                    if (pin != "")
                                        str += " - " + pin + ".";

                                    if (str != "")
                                    {
                                        cell1 = new PdfPCell(new Phrase(str, fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                        cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                                        cell1.Colspan = 2;
                                        table1.AddCell(cell1);

                                        cell1 = new PdfPCell(new Phrase(" ", fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                        cell1.Border = PdfPCell.LEFT_BORDER;
                                        cell1.Colspan = 2;
                                        table1.AddCell(cell1);
                                    }

                                }
                            }
                        }
                        //end

                        if (Convert.ToString(e.Proposal_KindAttention) != "")
                        {
                            cell1 = new PdfPCell(new Phrase("Kind Attention", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.BOTTOM_BORDER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(":  " + Convert.ToString(e.Proposal_KindAttention), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                            cell1.Colspan = 3;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                        }

                        if (Convert.ToString(e.Proposal_Subject) != "")
                        {
                            cell1 = new PdfPCell(new Phrase("Subject ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.BOTTOM_BORDER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(":  " + Convert.ToString(e.Proposal_Subject), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                            cell1.Colspan = 3;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                        }

                        pdfDoc.Add(table1);

                        table1 = new PdfPTable(1);
                        table1.WidthPercentage = 100;
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.SetTotalWidth(new float[] { 70f });
                        cell1 = new PdfPCell(new Phrase("\n\nDear Sir/Madam,\n\n", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(e.Proposal_Description, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        pdfDoc.Add(table1);


                        userNm = e.USER_Name_var;
                        userDesgn = e.USER_Designation_var;


                        proposalNo = e.Proposal_No;
                        proposalDetailNote = e.Proposal_Notes;
                        proposalAddChargesNote = e.Proposal_AddChargesForGT;

                    }
                    break;
                }
                #endregion

                clsData obj = new clsData();

                #region proposaldetails
                int SNo = 1, SnoRecType = 1; double subTotal = 0.00;
                ;
                string testName = "";
                if (subTestOT > 0)
                {
                    var rslt = dc.Test_View(0, subTestOT, "", 0, 0, 0).ToList();
                    testName = rslt.FirstOrDefault().TEST_Name_var;
                }
                if (materialType.Contains(",GT,") || testName.Equals("SBC by SPT") || testName.Equals("Water Test for Drinking/Domestic Purpose"))
                {
                    int i = 1, rowSpan = 0;
                    rowSpan = mergeTo - mergeFrom + 1;
                    //rowSpan = mergeTo - mergeFrom;
                    string[] headers;

                    if (testName.Equals("Water Test for Drinking/Domestic Purpose"))
                    {
                        if (qtyFlag == 0)//print without qty
                            headers = new string[] { "Sr.No", "Particular", "Test Method", "Unit Rate", "Discounted Rate", "Amount" };
                        else
                            headers = new string[] { "Sr.No", "Particular", "Test Method", "Unit Rate", "Discounted Rate", "Qty", "Amount" };

                    }
                    else
                    {
                        if (qtyFlag == 0)//print without qty
                            headers = new string[] { "Sr.No", "Particular", "Unit", "Unit Rate", "Discounted Rate", "Amount" };
                        else
                            headers = new string[] { "Sr.No", "Particular", "Unit", "Unit Rate", "Discounted Rate", "Qty", "Amount" };

                    }


                    var details = dc.ProposalDetail_View(proposalNo);
                    foreach (var e in details)
                    {
                        if (i == 1)
                        {
                            if (qtyFlag == 0)//print without qty
                                table1 = new PdfPTable(6);
                            else
                                table1 = new PdfPTable(7);

                            table1.WidthPercentage = 100;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;

                            if (qtyFlag == 0)//print without qty
                                table1.SetTotalWidth(new float[] { 8f, 50f, 20f, 15f, 18f, 13f });
                            else
                                table1.SetTotalWidth(new float[] { 8f, 50f, 20f, 15f, 18f, 12f, 13f });
                            //}

                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_LEFT;
                            //paragraph.SpacingBefore = 4;
                            paragraph.Font = font7;
                            string recType = e.ProposalDetail_RecType.ToString();
                            if (recType == "OTHER")
                                recType = "OT";
                            string inwardTypeValue = obj.getInwardTypeName(recType);
                            if (testName.Equals("SBC by SPT") || testName.Equals("Water Test for Drinking/Domestic Purpose"))
                                paragraph.Add(SnoRecType + ")" + testName + " :");
                            else
                                paragraph.Add(SnoRecType + ")" + inwardTypeValue + " :");
                            paragraph.SpacingAfter = 5;
                            pdfDoc.Add(paragraph);

                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                        }

                        if (i >= mergeFrom && i <= mergeTo)
                        {


                            cell1 = new PdfPCell(new Phrase((i).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);


                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Particular, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            if (i == mergeFrom)
                            {
                                if (!testName.Equals("Water Test for Drinking/Domestic Purpose"))
                                    cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Unit.ToString(), fontH1));
                                else
                                    cell1 = new PdfPCell(new Phrase(e.ProposalDetail_TestMethod.ToString(), fontH1));

                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                cell1.Rowspan = rowSpan;
                                table1.AddCell(cell1);



                                cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Rate).ToString(), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                cell1.Rowspan = rowSpan;
                                table1.AddCell(cell1);


                                cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_DiscountedRate).ToString(), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                cell1.Rowspan = rowSpan;
                                table1.AddCell(cell1);

                                if (qtyFlag == 1)//print with qty
                                {
                                    cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Quanity.ToString(), fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                    cell1.Rowspan = rowSpan;
                                    table1.AddCell(cell1);
                                }

                                cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Amount).ToString(), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                cell1.Rowspan = rowSpan;
                                table1.AddCell(cell1);
                                subTotal += Convert.ToDouble(e.ProposalDetail_Amount);
                            }
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase((i).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Particular, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            if (!testName.Equals("Water Test for Drinking/Domestic Purpose"))
                                cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Unit.ToString(), fontH1));
                            else
                                cell1 = new PdfPCell(new Phrase(e.ProposalDetail_TestMethod.ToString(), fontH1));

                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Rate).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_DiscountedRate).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            if (qtyFlag == 1)//print with qty
                            {
                                cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Quanity.ToString(), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Amount).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            subTotal += Convert.ToDouble(e.ProposalDetail_Amount);
                        }
                        i++;
                    }
                    cell1 = new PdfPCell(new Phrase("Net Total ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    if (qtyFlag == 1)//print with qty
                        cell1.Colspan = 6;
                    else
                        cell1.Colspan = 5;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(netAmount.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("GST(18%) ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    if (qtyFlag == 1)//print with qty
                        cell1.Colspan = 6;
                    else
                        cell1.Colspan = 5;
                    table1.AddCell(cell1);

                    //gstAmount = subTotal * (0.18);
                    cell1 = new PdfPCell(new Phrase(gstAmount.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Total ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    if (qtyFlag == 1)//print with qty
                        cell1.Colspan = 6;
                    else
                        cell1.Colspan = 5;
                    table1.AddCell(cell1);

                    //GrandTotal = subTotal + gstAmount;
                    cell1 = new PdfPCell(new Phrase(GrandTotal.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);


                    if (materialType.Contains(",GT,"))
                    {
                        if (gtDiscNote != "")
                        {
                            cell1 = new PdfPCell(new Phrase(gtDiscNote.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            if (qtyFlag == 1)//print with qty
                                cell1.Colspan = 7;
                            else
                                cell1.Colspan = 6;
                            table1.AddCell(cell1);
                        }
                    }
                }
                else if (qtyFlag == 0)
                {
                    string[] headers = { "Sr.No", "Particular", "Test Method", "Unit Rate", "Discounted Rate" };
                    string prvRecType = "";

                    var details = dc.ProposalDetail_View(proposalNo);
                    foreach (var e in details)
                    {
                        if (SNo == 1)
                        {
                            table1 = new PdfPTable(5);
                            table1.WidthPercentage = 100;
                            //table1.SpacingBefore = 4;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.SetTotalWidth(new float[] { 8f, 35f, 28f, 15f, 15f });

                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_LEFT;
                            paragraph.Font = font7;
                            string recType = e.ProposalDetail_RecType.ToString();
                            if (recType == "OTHER")
                                recType = "OT";
                            string inwardTypeValue = obj.getInwardTypeName(recType);

                            if (!testName.Equals(""))
                                paragraph.Add(SnoRecType + ")" + testName + " :");
                            else
                            {
                                if (recType.Equals("Coupon"))
                                    paragraph.Add(SnoRecType + ")Concrete Cube Testing Coupons :");
                                else if (recType.Equals("WT"))
                                    paragraph.Add(SnoRecType + ")Water Testing Construction Purpose :");
                                else
                                    paragraph.Add(SnoRecType + ")" + inwardTypeValue + " :");
                            }

                            paragraph.SpacingAfter = 5;
                            pdfDoc.Add(paragraph);

                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                        }


                        if (e.ProposalDetail_RecType != prvRecType && prvRecType != "")
                        {
                            SnoRecType++;
                            pdfDoc.Add(table1);


                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_LEFT;
                            paragraph.Font = font7;
                            string recType = e.ProposalDetail_RecType.ToString();
                            if (recType == "OTHER")
                                recType = "OT";
                            string inwardTypeValue = obj.getInwardTypeName(recType);
                            if (!testName.Equals(""))
                                paragraph.Add(SnoRecType + ")" + testName + " :");
                            else
                            {
                                if (recType.Equals("Coupon"))
                                    paragraph.Add(SnoRecType + ")Concrete Cube Testing Coupons :");
                                else if (recType.Equals("WT"))
                                    paragraph.Add(SnoRecType + ")Water Testing Construction Purpose :");
                                else
                                    paragraph.Add(SnoRecType + ")" + inwardTypeValue + " :");
                            }
                            paragraph.SpacingAfter = 5;
                            pdfDoc.Add(paragraph);

                            SNo = 1;
                            table1 = new PdfPTable(5);
                            table1.WidthPercentage = 100;
                            //table1.SpacingBefore =1;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.SetTotalWidth(new float[] { 8f, 35f, 28f, 15f, 15f });

                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                        }
                        cell1 = new PdfPCell(new Phrase((SNo).ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Particular, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(e.ProposalDetail_TestMethod, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                        if (Convert.ToDecimal(e.ProposalDetail_Rate) > 0)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Rate).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Rate.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (Convert.ToDecimal(e.ProposalDetail_DiscountedRate) > 0)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_DiscountedRate).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_DiscountedRate.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        prvRecType = e.ProposalDetail_RecType;
                        SNo++;
                    }


                }
                else //if we want to print qty
                {
                    string[] headers = { "Sr.No", "Particular", "Test Method", "Unit Rate", "Discounted Rate", "Qty", "Amount" };
                    string prvRecType = "";

                    var details = dc.ProposalDetail_View(proposalNo);
                    foreach (var e in details)
                    {
                        if (SNo == 1)
                        {
                            table1 = new PdfPTable(7);
                            table1.WidthPercentage = 100;
                            //table1.SpacingBefore = 4;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.SetTotalWidth(new float[] { 8f, 32f, 30f, 12f, 15f, 7f, 10f });

                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_LEFT;
                            paragraph.Font = font7;
                            string recType = e.ProposalDetail_RecType.ToString();
                            if (recType == "OTHER")
                                recType = "OT";
                            string inwardTypeValue = obj.getInwardTypeName(recType);
                            if (!testName.Equals(""))
                                paragraph.Add(SnoRecType + ")" + testName + " :");
                            else
                            {
                                if (recType.Equals("Coupon"))
                                    paragraph.Add(SnoRecType + ")Concrete Cube Testing Coupons :");
                                else if (recType.Equals("WT"))
                                    paragraph.Add(SnoRecType + ")Water Testing Construction Purpose :");
                                else
                                    paragraph.Add(SnoRecType + ")" + inwardTypeValue + " :");
                            }
                            paragraph.SpacingAfter = 5;
                            pdfDoc.Add(paragraph);

                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                        }

                        if (e.ProposalDetail_RecType != prvRecType && prvRecType != "")
                        {
                            SnoRecType++;
                            cell1 = new PdfPCell(new Phrase("Total ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            cell1.Colspan = 6;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(subTotal.ToString("0.00"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            pdfDoc.Add(table1);

                            subTotal = 0.00;
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_LEFT;
                            paragraph.Font = font7;
                            string recType = e.ProposalDetail_RecType.ToString();
                            if (recType == "OTHER")
                                recType = "OT";
                            string inwardTypeValue = obj.getInwardTypeName(recType);
                            if (!testName.Equals(""))
                                paragraph.Add(SnoRecType + ")" + testName + " :");
                            else
                            {
                                if (recType.Equals("Coupon"))
                                    paragraph.Add(SnoRecType + ")Concrete Cube Testing Coupons :");
                                else if (recType.Equals("WT"))
                                    paragraph.Add(SnoRecType + ")Water Testing Construction Purpose :");
                                else
                                    paragraph.Add(SnoRecType + ")" + inwardTypeValue + " :");
                            }
                            paragraph.SpacingBefore = 2;
                            paragraph.SpacingAfter = 5;
                            pdfDoc.Add(paragraph);

                            SNo = 1;
                            table1 = new PdfPTable(7);
                            table1.WidthPercentage = 100;
                            //table1.SpacingBefore = 1;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.SetTotalWidth(new float[] { 8f, 32f, 30f, 12f, 15f, 7f, 10f });
                            ///table1.SetTotalWidth(new float[] { 8f, 40f, 15f, 12f, 15f, 7f, 10f });

                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }


                        }

                        cell1 = new PdfPCell(new Phrase((SNo).ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Particular, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(e.ProposalDetail_TestMethod, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                        if (Convert.ToDecimal(e.ProposalDetail_Rate) > 0)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Rate).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Rate.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (Convert.ToDecimal(e.ProposalDetail_DiscountedRate) > 0)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_DiscountedRate).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_DiscountedRate.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }

                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Quanity).ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        if (Convert.ToDecimal(e.ProposalDetail_Amount) > 0)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Amount).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Amount.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        subTotal += Convert.ToDouble(e.ProposalDetail_Amount);
                        prvRecType = e.ProposalDetail_RecType;
                        SNo++;
                    }
                    cell1 = new PdfPCell(new Phrase("Net Total ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = 6;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(netAmount.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("GST(18%) ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = 6;
                    table1.AddCell(cell1);
                    //gstAmount = subTotal * (0.18);
                    cell1 = new PdfPCell(new Phrase(gstAmount.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Total ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = 6;
                    table1.AddCell(cell1);
                    // GrandTotal = gstAmount + subTotal;
                    cell1 = new PdfPCell(new Phrase(GrandTotal.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                }

                pdfDoc.Add(table1);

                #region MF table
                if (materialType.Contains(",MF,"))
                {
                    table1 = new PdfPTable(3);
                    table1.WidthPercentage = 60;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetTotalWidth(new float[] { 8f, 35f, 20f });
                    //table1.SpacingBefore = 2;
                    //table1.SpacingAfter = 2;
                    cell1 = new PdfPCell(new Phrase("\n", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 3;
                    table1.AddCell(cell1); cell1 = new PdfPCell(new Phrase("Sample requirements for Mix Design is as below :", font7));
                    cell1.FixedHeight = 18f;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 3;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Material Requirements for one Mix Design", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1.Colspan = 3;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Sr. No", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Material", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Qty.(Bag/Kg)", fontH2));
                    cell1.FixedHeight = 14f;
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("1", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Cement", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("50kg - 1 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("2", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Crushed Sand", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("30kg - 3 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("3", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("River Sand", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("30kg - 3 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("4", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("10mm", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("30kg - 3 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("5", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("20mm", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("30kg - 4 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("6", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Fly Ash", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("30kg - 1 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("7", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("GGBS", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("30kg - 1 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("8", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Admixture", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("2 Ltr", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    pdfDoc.Add(table1);
                }
                #endregion

                #endregion
                int tableRowsCount = table1.Rows.Count;


                it.List list = new it.List(it.List.UNORDERED, 7f);
                list.SetListSymbol("\u2022");
                list.IndentationLeft = 25;


                table1 = new PdfPTable(2);
                table1.WidthPercentage = 100;
                table1.SpacingBefore = 4;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SetTotalWidth(new float[] { 3.5f, 96.5f });

                //only for GT
                #region GT
                if (materialType.Contains(",GT,") || materialType.Contains(",RWH,") || testName.Equals("Plate Load Testing") || testName.Equals("Earth Resistivity Test") || testName.Equals("SBC by SPT"))
                {
                    if (proposalAddChargesNote != "")
                    {
                        cell1 = new PdfPCell(new Phrase("Additional Charges :", font7));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        //cell1.BackgroundColor = BaseColor.ORANGE;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Following additional charges are applicable :", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);


                        int cnt = 1;
                        string[] notedata = proposalAddChargesNote.Split('|');
                        foreach (string note in notedata)
                        {
                            if (note != "")
                            {
                                cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                                cell1.PaddingRight = 0;
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(note, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.PaddingLeft = 1;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cnt++;

                            }
                        }
                    }


                    cell1 = new PdfPCell(new Phrase("\nTerms & Conditions :", font7));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);


                    if (proposalDetailNote != "")
                    {
                        int cnt = 1;
                        string[] notedata = proposalDetailNote.Split('|');
                        foreach (string note in notedata)
                        {
                            if (note != "" && !note.Equals("GST @ 18% will be applicable extra."))
                            {
                                cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                                cell1.PaddingRight = 0;
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(note, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.PaddingLeft = 1;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cnt++;

                            }
                        }
                        cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                        cell1.PaddingRight = 0;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("This is not GST Tax Invoice. To avail GST credit, Please ask for GST Tax Invoice.", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.PaddingLeft = 1;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                    }


                    cell1 = new PdfPCell(new Phrase("Payment Terms :", font7));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);
                    //cell1 = new PdfPCell(new Phrase("1)", fontH1));
                    //cell1.PaddingRight = 0;
                    //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    //cell1.Border = PdfPCell.NO_BORDER;
                    //table1.AddCell(cell1);
                    //cell1 = new PdfPCell(new Phrase("GST @ 18% will be applicable extra.", fontH1));
                    //cell1.PaddingLeft = 1;
                    //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    //cell1.Border = PdfPCell.NO_BORDER;
                    //table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("1)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.PaddingRight = 0;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("The proposal is valid for 30 days from the date of proposal submission.", fontH1));
                    cell1.PaddingLeft = 1;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("2)", fontH1));
                    cell1.PaddingRight = 0;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Delay of payment beyond 30 days from the date of billing shall attract an interest of 2% per month on the outstanding amount.", fontH1));
                    cell1.PaddingLeft = 1;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("3)", fontH1));
                    cell1.PaddingRight = 0;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("All payments shall be made by Online payment or Demand Draft or Cheque,payable at Pune", fontH1));
                    cell1.PaddingLeft = 1;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("4)", fontH1));
                    cell1.PaddingRight = 0;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("No Security Deposite shall be deducted from our bills. Any deductions made shall be released along with our final payment in full.", fontH1));
                    cell1.PaddingLeft = 1;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                }
                #endregion
                else
                {

                    cell1 = new PdfPCell(new Phrase("\nTerms & Conditions :", font7));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Colspan = 2;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);


                    int cnt = 1;
                    if (proposalDetailNote != "")
                    {

                        string[] notedata = proposalDetailNote.Split('|');
                        foreach (string note in notedata)
                        {
                            if (note != "" && !note.Equals("GST @ 18% will be applicable extra."))
                            {
                                cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.PaddingRight = 0;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(note, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.PaddingLeft = 1;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cnt++;
                            }
                        }

                        //add new discounted termms if site rate are not applicable
                        if (SiteWiseRateApplied_bit == 0)
                        {
                            cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                            cell1.PaddingRight = 0;
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell1);
                            cell1 = new PdfPCell(new Phrase("Following additional discounts will be applicable for tests other than Geotechnical investigation.", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.PaddingLeft = 1;
                            cell1.Border = PdfPCell.NO_BORDER;
                            table1.AddCell(cell1);
                            pdfDoc.Add(table1);
                            cnt++;
                            list.Add(new it.ListItem("5% for  bill value above Rs 50000/- and 10 % for bill value above 100000/-.", fontH1));
                            list.Add(new it.ListItem("5% for advance payment of 50 % of the bill value.", fontH1));
                            list.Add(new it.ListItem("5% for placing the order through Durocrete APP by filling the test request form on the mobile.", fontH1));
                            paragraph = new Paragraph();
                            paragraph.Add(list);
                            pdfDoc.Add(paragraph);
                            table1 = new PdfPTable(2);
                            table1.WidthPercentage = 100;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.SetTotalWidth(new float[] { 3.5f, 96.5f });

                        }

                        cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                        cell1.PaddingRight = 0;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("This is not GST Tax Invoice. To avail GST credit, Please ask for GST Tax Invoice.", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.PaddingLeft = 1;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        //if (materialType.Equals("ST"))
                        //{
                        //    cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                        //    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //    cell1.PaddingRight = 0;
                        //    cell1.Border = PdfPCell.NO_BORDER;
                        //    table1.AddCell(cell1);
                        //    cell1 = new PdfPCell(new Phrase("Required 3 pieces of 1400mm for steel bar dia up to 25mm and 1600mm for 32mm diameter.", fontH1));
                        //    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //    cell1.PaddingLeft = 1;
                        //    cell1.Border = PdfPCell.NO_BORDER;
                        //    table1.AddCell(cell1);
                        //}
                    }

                    #region CR,ND,CoRe
                    //only for CR,CoreCut,NDT
                    if (materialType.Contains(",CR,") || materialType.Contains(",CORECUT,") || materialType.Contains(",NDT,"))
                    {

                        cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.PaddingLeft = 7;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Client Scope - ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        pdfDoc.Add(table1);


                        list.Add(new it.ListItem("Client has to provide two labours for help, water, electricity & scaffolding etc.", fontH1));
                        list.Add(new it.ListItem("Chiselling of plaster to expose the concrete if required.", fontH1));
                        list.Add(new it.ListItem("Providing safe access and safe working conditions for our team at site.", fontH1));

                        paragraph = new Paragraph();
                        paragraph.Add(list);
                        pdfDoc.Add(paragraph);


                        table1 = new PdfPTable(2);
                        table1.WidthPercentage = 100;
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.SetTotalWidth(new float[] { 3.5f, 96.5f });
                        cnt++;
                        cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Minimum Billing  - If the work scope is reduced for any reason  not attributed to Durocrete.", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Following minimum per day charges shall apply -", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        pdfDoc.Add(table1);

                        it.List list1 = new it.List(it.List.UNORDERED, 7f);
                        list1.SetListSymbol("\u2022");
                        list1.IndentationLeft = 25;

                        if (materialType.Contains(",CR,"))
                            list1.Add(new it.ListItem("Local   Sites   - Rs 12000/-", fontH1));
                        else
                            list1.Add(new it.ListItem("Local   Sites   - Rs 10000/-", fontH1));

                        list1.Add(new it.ListItem("Outstation  Sites - Rs 20000/-", fontH1));

                        paragraph = new Paragraph();
                        paragraph.Add(list1);
                        pdfDoc.Add(paragraph);

                        table1 = new PdfPTable(2);
                        table1.WidthPercentage = 100;
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.SetTotalWidth(new float[] { 3.5f, 96.5f });

                        cnt++;
                        cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("For testing carried out at sites with outstation locations the travelling lodging and boarding costs of our team will be charged extra.", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);


                    }
                    #endregion
                }
                #region Applicability of Discount & Additional Discount apllied to al  expect all GT formats
                if (discNotesApplicability == 1)
                {
                    if (materialType.Contains(",GT,") == false && materialType.Contains(",RWH,") == false && !testName.Equals("Earth Resistivity Test") && !testName.Equals("SBC by SPT") && !testName.Equals("Plate Load Testing"))
                    {

                        cell1 = new PdfPCell(new Phrase("\nApplicability of Discounts :", font7));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);


                        cell1 = new PdfPCell(new Phrase("The above discounts are calculated from our system based on following parameters : ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Colspan = 2;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);


                        cell1 = new PdfPCell(new Phrase("1)", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.PaddingRight = 0;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Business Volume received with payments in last 6 months.", fontH1));
                        cell1.PaddingLeft = 1;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);



                        cell1 = new PdfPCell(new Phrase("2)", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.PaddingRight = 0;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Timely payment based on the average no of days of outstanding bills.", fontH1));
                        cell1.PaddingLeft = 1;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);


                        cell1 = new PdfPCell(new Phrase("3)", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.PaddingRight = 0;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Customer Loyalty based on last 2 years billing.", fontH1));
                        cell1.PaddingLeft = 1;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);



                        //cell1 = new PdfPCell(new Phrase("\nAdditional Discounts :", font7));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Colspan = 2;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);

                        //cell1 = new PdfPCell(new Phrase("Following additional discounts are applicable on the above discounted rate :", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Colspan = 2;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);


                        //cell1 = new PdfPCell(new Phrase("1)", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.PaddingRight = 0;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Discount for value for individual bills", fontH1));
                        //cell1.PaddingLeft = 1;
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //pdfDoc.Add(table1);


                        //table1 = new PdfPTable(3);
                        //table1.WidthPercentage = 60;
                        //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //table1.SetTotalWidth(new float[] { 8f, 50f, 20f });
                        //table1.SpacingBefore = 2;
                        //table1.SpacingAfter = 2;
                        //cell1 = new PdfPCell(new Phrase("Sr. No", fontH2));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Bill Value", fontH2));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Discount", fontH2));
                        //cell1.FixedHeight = 14f;
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("1", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Rs. 50000 to Rs. 100000", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("5%", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("2", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Rs. 100000 to Rs. 200000", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("10%", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("3", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Rs. 200000 to Rs. 500000", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("15%", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("4", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Above Rs. 500000", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("20%", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //pdfDoc.Add(table1);

                        //table1 = new PdfPTable(2);
                        //table1.WidthPercentage = 100;
                        //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //table1.SetTotalWidth(new float[] { 3.5f, 96.5f });

                        //cell1 = new PdfPCell(new Phrase("2)", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.PaddingRight = 0;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Discount for payment of advance before generating bill", fontH1));
                        //cell1.PaddingLeft = 1;
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //pdfDoc.Add(table1);


                        //table1 = new PdfPTable(3);
                        //table1.WidthPercentage = 60;
                        //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //table1.SetTotalWidth(new float[] { 8f, 50f, 20f });
                        //table1.SpacingBefore = 2;
                        //table1.SpacingAfter = 2;

                        //cell1 = new PdfPCell(new Phrase("Sr. No", fontH2));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Advance Payment Received", fontH2));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Discount", fontH2));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //cell1.FixedHeight = 14f;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("1", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("50% of bill value or running advance of Rs. 1 lakh", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("5%", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("2", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("100% of bill value or running advance of Rs. 2 lakh", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("10%", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //pdfDoc.Add(table1);


                        //table1 = new PdfPTable(2);
                        //table1.WidthPercentage = 100;
                        //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //table1.SetTotalWidth(new float[] { 3.5f, 96.5f });
                        //cell1 = new PdfPCell(new Phrase("3)", fontH1));
                        //cell1.PaddingRight = 0;
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Filling Test Request Form through Durocrete Mobile Application. -  5%", fontH1));
                        //cell1.PaddingLeft = 1;
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);

                        //cell1 = new PdfPCell(new Phrase("4)", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.PaddingRight = 0;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("The above discounts are subject to following maximum discounts applicable to each category.", fontH1));
                        //cell1.PaddingLeft = 1;
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //pdfDoc.Add(table1);

                        //table1 = new PdfPTable(3);
                        //table1.WidthPercentage = 60;
                        //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //table1.SetTotalWidth(new float[] { 8f, 50f, 20f });
                        //table1.SpacingBefore = 2;
                        //table1.SpacingAfter = 2;

                        //cell1 = new PdfPCell(new Phrase("Sr. No", fontH2));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Material", fontH2));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Discount", fontH2));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //cell1.FixedHeight = 14f;
                        //table1.AddCell(cell1);

                        //cell1 = new PdfPCell(new Phrase("1", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Steel and Mix Design", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("40%", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("2", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("All other tests", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("30%", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //pdfDoc.Add(table1);

                        //table1 = new PdfPTable(2);
                        //table1.WidthPercentage = 100;
                        //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //table1.SetTotalWidth(new float[] { 3.5f, 96.5f });
                        //cell1 = new PdfPCell(new Phrase("5)", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.PaddingRight = 0;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("No discounts shall be applicable if average days outstanding exceed 90 days.", fontH1));
                        //cell1.PaddingLeft = 1;
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);

                        //cell1 = new PdfPCell(new Phrase("6)", fontH1));
                        //cell1.PaddingRight = 0;
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("In case you need any clarification please refer to our discount policy.", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.PaddingLeft = 1;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                    }
                }
                #endregion

                pdfDoc.Add(table1);

                table1 = new PdfPTable(1);
                table1.WidthPercentage = 100;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SetTotalWidth(new float[] { 60f });

                cell1 = new PdfPCell(new Phrase("\n\nBank Details (For on line Payment) : ", font7));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Account Name : Durocrete Engineering Services Pvt. Ltd.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Bank Name : HDFC Bank Ltd.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                if (cnStr.ToLower().Contains("mumbai") == true)
                {
                    cell1 = new PdfPCell(new Phrase("Branch : Sector 17, Vashi", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Account Type : Current", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Account No : 05402000024568", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("IFSC Code : HDFC0000540", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                }
                else if (cnStr.ToLower().Contains("nashik") == true)
                {


                    cell1 = new PdfPCell(new Phrase("Branch : Bhandarkar Road, Pune", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Account Type : Current", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Account No : 50200023762951", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("IFSC Code : HDFC0000007", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                }
                else
                {

                    cell1 = new PdfPCell(new Phrase("Branch : Hingne Khurd,Pune", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Account Type : Current", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Account No : 08252000000218", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("IFSC Code : HDFC0000825", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);


                }

                cell1 = new PdfPCell(new Phrase("GST No. of Service Provider : 27AABCD2992C2ZS", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                string sacCode = "998346";
                if (materialType.Contains(",GT,") || materialType.Contains(",SO,"))
                    sacCode = "998341";
                cell1 = new PdfPCell(new Phrase("SAC Code : " + sacCode + " \n ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("We are a Leading Construction Material testing laboratory in Western Maharashtra. We have testing infrastructure in Mumbai,Pune & Nashik. Our Pune & Mumbai Labs are accredited under NABL(ISO 17025) covering more than 150 tests in Building Construction", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("\nWe provide testing services in following areas : ", font7));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                pdfDoc.Add(table1);

                table1 = new PdfPTable(2);
                table1.WidthPercentage = 100;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SetTotalWidth(new float[] { 3.5f, 96.5f });
                cell1 = new PdfPCell(new Phrase("1)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Geotechnical Investigation and soil testing.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);


                cell1 = new PdfPCell(new Phrase("2)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Contour Survey( Land Survey ).", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);


                cell1 = new PdfPCell(new Phrase("3)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Rain Water Harvesting.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);


                cell1 = new PdfPCell(new Phrase("4)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Pile Integrity and Pile Dynamic test on pile foundations using state of the art testing equipment.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);


                cell1 = new PdfPCell(new Phrase("5)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Concrete Mix design and onsite support for concrete mix designs.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("6)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Testing of concrete and other building materials as per IS and other relevant standards.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("7)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Non Destructive Test of Concrete & Structural Steel.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("8)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Concrete Core Test on RCC Structure.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("9)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Slab deflection test(Slab Load Test).", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("10)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Chemical analysis of Cement, Water, Concrete, Steel and Construction Chemicals.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("11)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Testing of all type of Finishing items - Tile, Door, Plywood, POP, Gypsum & Paint.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("12)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Structural Stability for Commercial, Residential Industrial projects.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("We would be pleased to add value to your project through above services. \n ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                cell1.Colspan = 2;
                table1.AddCell(cell1);

                if (notRegClient)
                {
                    cell1 = new PdfPCell(new Phrase("You are requested to login, to get applicable discounted rate.", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);

                }

                if (Action == "Email")
                {
                    cell1 = new PdfPCell(new Phrase("Thanking You,", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Colspan = 2;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("For Durocrete Engineering Services Pvt. Ltd. \n \n ", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Colspan = 2;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase(userNm, fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Colspan = 2;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    if (Convert.ToString(userDesgn) != null && Convert.ToString(userDesgn) != "")
                        cell1 = new PdfPCell(new Phrase("(" + Convert.ToString(userDesgn).Replace("(", "").Replace(")", "") + ")", fontH2));
                    else
                        cell1 = new PdfPCell(new Phrase(""));
                    cell1.Colspan = 2;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    string tollFree = "";
                    if (cnStr.ToLower().Contains("mumbai") == true)
                        tollFree = " 9850500013";
                    else if (cnStr.ToLower().Contains("nashik") == true)
                        tollFree = "";
                    else
                        tollFree = "18001206465";
                    cell1 = new PdfPCell(new Phrase("(" + tollFree + ")", fontH2));
                    cell1.Colspan = 2;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("\nFor further classification you may contact :", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Colspan = 2;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Name : " + meName, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Colspan = 2;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Contact No : " + meContact, fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Colspan = 2;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    pdfDoc.Add(table1);
                }
                else
                {
                    pdfDoc.Add(table1);
                    paragraph = new Paragraph();
                    paragraph.Alignment = Element.ALIGN_LEFT;
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("This is electronically generated report hence does not require signature. ");
                    pdfDoc.Add(paragraph);


                    paragraph = new Paragraph();
                    paragraph.Font = fontH1;
                    paragraph.SpacingBefore = 5;
                    paragraph.Add("For all technical queries contact (020)24348027.");
                    pdfDoc.Add(paragraph);



                }
                //var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                //paragraph = new Paragraph();
                //paragraph.Alignment = Element.ALIGN_CENTER;
                //paragraph.Font = blackListTextFont;
                //paragraph.Add("--End of Report--");
                //pdfDoc.Add(paragraph);
                pdfDoc.Close();
                if (Action != "Email")
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }

            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void Proposal_PDF_old03082020(int EnqId, int qtyFlag, int proposalId, bool newEnqClient, string Action, string ProposalNo)
        {
            try
            {
                Paragraph paragraph = new Paragraph();
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, 90f, 15f);
                var fileName = "Proposal" + "_" + ProposalNo.Replace("/", "_") + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Proposal";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;

                if (Action == "Email")
                {
                    fileName = "Proposal_" + ProposalNo.Replace("/", "_") + ".pdf";
                    Subfoldername1 = foldername;
                }

                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                writer.PageEvent = new clsProposalHeaderFooter(1);

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);
                paragraph = new Paragraph();

                BaseFont bfT = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, false);
                Font font7 = new Font(bfT, 10, Font.UNDERLINE | Font.BOLD, BaseColor.BLACK);
                Font fontH5 = new Font(Font.FontFamily.TIMES_ROMAN, 12f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9.5f, Font.UNDEFINED);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.5f, Font.UNDEFINED);
                Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 10f, Font.BOLD);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 8.5f, Font.BOLD);
                Font fontH6 = new Font(Font.FontFamily.TIMES_ROMAN, 8f, Font.BOLD);

                string gtDiscNote = ""; int discNotesApplicability = 0, SiteWiseRateApplied_bit = 0;
                paragraph = new Paragraph();
                //paragraph.SpacingBefore = 30;
                // paragraph.SpacingAfter = 3;
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = fontH5;
                paragraph.Add(" Proposal for Testing Services\n ");
                pdfDoc.Add(paragraph);
                #region data
                double gstAmount = 0, GrandTotal = 0, netAmount = 0;
                string email = "", proposalEmailId = "", meContact = "", meName = "", userNm = "", userDesgn = "", proposalDetailNote = "", proposalAddChargesNote = "", proposalNo = "", materialType = "", strStructAudDetails = "";
                PdfPCell cell1;
                int SrNo = 0, mergeFrom = 0, mergeTo = 0, subTestOT = 0;
                var res = dc.Proposal_View(EnqId, newEnqClient, proposalId, "");
                foreach (var e in res)
                {

                    if (SrNo == 0)
                    {
                        qtyFlag = Convert.ToInt32(e.Proposal_WithQty);
                        mergeFrom = Convert.ToInt32(e.Proposal_MergeFrom);
                        mergeTo = Convert.ToInt32(e.Proposal_MergeTo);
                        meContact = Convert.ToString(e.Proposal_MeContactNo);
                        meName = Convert.ToString(e.Proposal_MEName);
                        subTestOT = Convert.ToInt32(e.Proposal_OTSubTestId_int);
                        email = Convert.ToString(e.Proposal_NewClientMailId_var);
                        gtDiscNote = Convert.ToString(e.Proposal_DiscNoteGT_var);
                        gstAmount = Convert.ToDouble(e.Proposal_GSTAmt_dec);
                        GrandTotal = Convert.ToDouble(e.Proposal_NetAmountWithGST_dec);
                        netAmount = GrandTotal - gstAmount;
                        proposalEmailId = Convert.ToString(e.Proposal_EmailTo_var);
                        if (Convert.ToString(e.Proposal_DiscNotesVisibility_bit) != "" && Convert.ToString(e.Proposal_DiscNotesVisibility_bit) != null)
                            discNotesApplicability = Convert.ToInt32(e.Proposal_DiscNotesVisibility_bit);
                        if (Convert.ToString(e.Proposal_SiteWiseRateApplied_bit) != null)
                            SiteWiseRateApplied_bit = Convert.ToInt32(e.Proposal_SiteWiseRateApplied_bit);
                        table1 = new PdfPTable(4);
                        table1.WidthPercentage = 100;
                        table1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.SetTotalWidth(new float[] { 14f, 35f, 14f, 33f });
                        cell1 = new PdfPCell(new Phrase("To,", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.TOP_BORDER | PdfPCell.LEFT_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.TOP_BORDER | PdfPCell.RIGHT_BORDER;
                        table1.AddCell(cell1);
                        if (Convert.ToString(e.Proposal_Date) != "")
                        {
                            cell1 = new PdfPCell(new Phrase("Date   ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.TOP_BORDER | PdfPCell.LEFT_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(": " + Convert.ToDateTime(e.Proposal_Date).ToString("dd/MM/yyyy"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.TOP_BORDER | PdfPCell.RIGHT_BORDER;
                            table1.AddCell(cell1);
                        }
                        strStructAudDetails = Convert.ToString(e.Proposal_StructAuditDetails_var);
                        //enquiry details
                        string clientName = "", siteEmailId = "", enqContactNo = "";
                        string city = "", pin = "", add = "";
                        if (newEnqClient == false)
                        {
                            var data = dc.Enquiry_View_Details(EnqId, false);
                            foreach (var en in data)
                            {
                                materialType = en.MATERIAL_RecordType_var.ToString();
                                clientName = en.CL_Name_var.ToString();
                                siteEmailId = en.SITE_EmailID_var;
                                enqContactNo = en.CONT_ContactNo_var;
                                if (Convert.ToString(en.CL_City_var) != null)
                                    city = Convert.ToString(en.CL_City_var);
                                if (Convert.ToString(en.CL_Pin_int) != null)
                                    pin = Convert.ToString(en.CL_Pin_int);
                                if (Convert.ToString(en.CL_OfficeAddress_var) != null)
                                    add = Convert.ToString(en.CL_OfficeAddress_var);
                            }
                        }
                        else
                        {
                            var data = dc.EnquiryNewClient_View_Details(EnqId, false);
                            foreach (var en in data)
                            {
                                materialType = en.MATERIAL_RecordType_var.ToString();
                                clientName = en.ENQNEW_ClientName_var.ToString();
                                siteEmailId = email;
                                enqContactNo = en.ENQNEW_ContactNo_var;
                                if (Convert.ToString(en.ENQNEW_ClientCity_var) != null)
                                    city = Convert.ToString(en.ENQNEW_ClientCity_var);
                                if (Convert.ToString(en.ENQNEW_ClientPin_int) != null)
                                    pin = Convert.ToString(en.ENQNEW_ClientPin_int);
                                if (Convert.ToString(en.ENQNEW_SiteAddress_var) != null)
                                    add = Convert.ToString(en.ENQNEW_ClientOfficeAddress_var);//Convert.ToString(en.ENQNEW_SiteAddress_var);//

                                add += " " + city + " " + pin;
                            }
                        }
                        cell1 = new PdfPCell(new Phrase(clientName, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);
                        if (Convert.ToString(e.Proposal_No) != "")
                        {
                            cell1 = new PdfPCell(new Phrase("Ref No.   ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.LEFT_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(": " + Convert.ToString(e.Proposal_No), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.RIGHT_BORDER;
                            table1.AddCell(cell1);
                        }
                        int cntAdd = 1, flag = 0;
                        if (newEnqClient == false)
                        {

                            if (city != "")
                            {
                                add = add.ToString().Replace(city, "");
                                if (add != "")
                                {
                                    if (add.Substring(add.Length - 1).ToString().Contains(""))
                                    {
                                        if (add.Substring(add.Length - 2).ToString().Contains("-") || add.Substring(add.Length - 2).ToString().Contains("."))
                                            add = add.Remove(add.Length - 2, 1) + "";

                                    }

                                    if (add.Substring(add.Length - 1).ToString().Contains("-") || add.Substring(add.Length - 2).ToString().Contains("."))
                                        add = add.Remove(add.Length - 1, 1) + "";
                                }
                            }
                            if (pin != "")
                            {
                                add = add.ToString().Replace(pin, "");
                                if (add != "" && add != " ")
                                {
                                    if (add.Substring(add.Length - 1).ToString().Contains(""))
                                    {
                                        if (add.Substring(add.Length - 2).ToString().Contains("-") || add.Substring(add.Length - 2).ToString().Contains("."))
                                            add = add.Remove(add.Length - 2, 1) + "";

                                    }

                                    if (add.Substring(add.Length - 1).ToString().Contains(".") || add.Substring(add.Length - 1).ToString().Contains("-"))
                                        add = add.Remove(add.Length - 1, 1) + "";

                                }
                            }


                            if (add.Length > 60)
                                cntAdd = 2;

                            if ((add.Length - 60) < 60)
                            {
                                if (city != "")
                                {
                                    if ((city.Length) <= (add.Length - 60))
                                    {
                                        if (add.Substring(add.Length).ToString() == "")
                                            add += city;
                                        else
                                            add += " " + city;

                                    }
                                }

                                if (pin != "")
                                {
                                    if ((pin.Length + 3) <= (add.Length - 60))
                                    {
                                        if (add.Substring(add.Length).ToString() == "")
                                            add += " - " + pin + ".";
                                        else
                                            add += " - " + pin + ".";

                                    }
                                }

                                flag = 1;
                            }

                            cell1 = new PdfPCell(new Phrase(add, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            //cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER;
                            cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                            cell1.Colspan = 2;
                            if (cntAdd == 1)
                            {
                                cell1.Rowspan = 1;
                                cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER;

                            }
                            else
                                cell1.Rowspan = 2;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(add, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                            cell1.Colspan = 2;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                        }

                        cell1 = new PdfPCell(new Phrase("Email", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.LEFT_BORDER;
                        table1.AddCell(cell1);

                        if (proposalEmailId != "")
                            cell1 = new PdfPCell(new Phrase(": " + proposalEmailId, fontH1));
                        else
                            cell1 = new PdfPCell(new Phrase(": " + siteEmailId, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.RIGHT_BORDER;
                        table1.AddCell(cell1);

                        if (newEnqClient == false)
                        {
                            if (cntAdd == 1)
                            {
                                string str = "";
                                if (city != "")
                                    str += city;
                                if (pin != "")
                                    str += " - " + pin + ".";

                                if (str != "")
                                {
                                    cell1 = new PdfPCell(new Phrase(str, fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                    cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                                    cell1.Colspan = 2;
                                    table1.AddCell(cell1);

                                }
                                else
                                {
                                    cell1 = new PdfPCell(new Phrase("", fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                    cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                                    cell1.Colspan = 2;
                                    table1.AddCell(cell1);
                                }
                            }

                        }


                        cell1 = new PdfPCell(new Phrase("Mobile", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.BOTTOM_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(": " + enqContactNo, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                        table1.AddCell(cell1);

                        if (newEnqClient == false)
                        {
                            if (cntAdd == 2)
                            {
                                if (flag == 0)
                                {
                                    string str = "";
                                    if (city != "")
                                        str += city;
                                    if (pin != "")
                                        str += " - " + pin + ".";

                                    if (str != "")
                                    {
                                        cell1 = new PdfPCell(new Phrase(str, fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                        cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                                        cell1.Colspan = 2;
                                        table1.AddCell(cell1);

                                        cell1 = new PdfPCell(new Phrase(" ", fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                        cell1.Border = PdfPCell.LEFT_BORDER;
                                        cell1.Colspan = 2;
                                        table1.AddCell(cell1);
                                    }

                                }
                            }
                        }
                        //end

                        if (Convert.ToString(e.Proposal_KindAttention) != "")
                        {
                            cell1 = new PdfPCell(new Phrase("Kind Attention", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.BOTTOM_BORDER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(":  " + Convert.ToString(e.Proposal_KindAttention), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                            cell1.Colspan = 3;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                        }

                        if (Convert.ToString(e.Proposal_Subject) != "")
                        {
                            cell1 = new PdfPCell(new Phrase("Subject ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.BOTTOM_BORDER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(":  " + Convert.ToString(e.Proposal_Subject), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                            cell1.Colspan = 3;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                        }

                        pdfDoc.Add(table1);

                        table1 = new PdfPTable(1);
                        table1.WidthPercentage = 100;
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.SetTotalWidth(new float[] { 70f });
                        cell1 = new PdfPCell(new Phrase("\n\nDear Sir/Madam,\n\n", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(e.Proposal_Description, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        pdfDoc.Add(table1);


                        userNm = e.USER_Name_var;
                        userDesgn = e.USER_Designation_var;


                        proposalNo = e.Proposal_No;
                        proposalDetailNote = e.Proposal_Notes;
                        proposalAddChargesNote = e.Proposal_AddChargesForGT;

                    }
                    break;
                }
                #endregion

                clsData obj = new clsData();

                #region proposaldetails
                int SNo = 1, SnoRecType = 1; double subTotal = 0.00;

                string testName = "";
                if (subTestOT > 0)
                {
                    var rslt = dc.Test_View(0, subTestOT, "", 0, 0, 0).ToList();
                    testName = rslt.FirstOrDefault().TEST_Name_var;
                }

                if (materialType.Equals("GT") || testName.Equals("SBC by SPT") || testName.Equals("Water Test for Drinking/Domestic Purpose"))
                {
                    int i = 1, rowSpan = 0;
                    rowSpan = mergeTo - mergeFrom + 1;
                    //rowSpan = mergeTo - mergeFrom;
                    string[] headers;

                    if (testName.Equals("Water Test for Drinking/Domestic Purpose"))
                    {
                        if (qtyFlag == 0)//print without qty
                            headers = new string[] { "Sr.No", "Particular", "Test Method", "Unit Rate", "Discounted Rate", "Amount" };
                        else
                            headers = new string[] { "Sr.No", "Particular", "Test Method", "Unit Rate", "Discounted Rate", "Qty", "Amount" };

                    }
                    else
                    {
                        if (qtyFlag == 0)//print without qty
                            headers = new string[] { "Sr.No", "Particular", "Unit", "Unit Rate", "Discounted Rate", "Amount" };
                        else
                            headers = new string[] { "Sr.No", "Particular", "Unit", "Unit Rate", "Discounted Rate", "Qty", "Amount" };

                    }

                    var details = dc.ProposalDetail_View(proposalNo);
                    foreach (var e in details)
                    {
                        if (i == 1)
                        {
                            if (qtyFlag == 0)//print without qty
                                table1 = new PdfPTable(6);
                            else
                                table1 = new PdfPTable(7);

                            table1.WidthPercentage = 100;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;

                            if (qtyFlag == 0)//print without qty
                                table1.SetTotalWidth(new float[] { 8f, 50f, 20f, 15f, 18f, 13f });
                            else
                                table1.SetTotalWidth(new float[] { 8f, 50f, 20f, 15f, 18f, 12f, 13f });
                            //}

                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_LEFT;
                            //paragraph.SpacingBefore = 4;
                            paragraph.Font = font7;
                            string recType = e.ProposalDetail_RecType.ToString();
                            if (recType == "OTHER")
                                recType = "OT";
                            string inwardTypeValue = obj.getInwardTypeName(recType);
                            if (testName.Equals("SBC by SPT") || testName.Equals("Water Test for Drinking/Domestic Purpose"))
                                paragraph.Add(SnoRecType + ")" + testName + " :");
                            else
                                paragraph.Add(SnoRecType + ")" + inwardTypeValue + " :");
                            paragraph.SpacingAfter = 5;
                            pdfDoc.Add(paragraph);

                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                        }

                        if (i >= mergeFrom && i <= mergeTo)
                        {


                            cell1 = new PdfPCell(new Phrase((i).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);


                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Particular, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            if (i == mergeFrom)
                            {
                                if (!testName.Equals("Water Test for Drinking/Domestic Purpose"))
                                    cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Unit.ToString(), fontH1));
                                else
                                    cell1 = new PdfPCell(new Phrase(e.ProposalDetail_TestMethod.ToString(), fontH1));

                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                cell1.Rowspan = rowSpan;
                                table1.AddCell(cell1);



                                cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Rate).ToString(), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                cell1.Rowspan = rowSpan;
                                table1.AddCell(cell1);


                                cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_DiscountedRate).ToString(), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                cell1.Rowspan = rowSpan;
                                table1.AddCell(cell1);

                                if (qtyFlag == 1)//print with qty
                                {
                                    cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Quanity.ToString(), fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                    cell1.Rowspan = rowSpan;
                                    table1.AddCell(cell1);
                                }

                                cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Amount).ToString(), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                cell1.Rowspan = rowSpan;
                                table1.AddCell(cell1);
                                subTotal += Convert.ToDouble(e.ProposalDetail_Amount);
                            }
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase((i).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Particular, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            if (!testName.Equals("Water Test for Drinking/Domestic Purpose"))
                                cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Unit.ToString(), fontH1));
                            else
                                cell1 = new PdfPCell(new Phrase(e.ProposalDetail_TestMethod.ToString(), fontH1));

                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Rate).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_DiscountedRate).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            if (qtyFlag == 1)//print with qty
                            {
                                cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Quanity.ToString(), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Amount).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            subTotal += Convert.ToDouble(e.ProposalDetail_Amount);
                        }
                        i++;
                    }
                    cell1 = new PdfPCell(new Phrase("Net Total ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    if (qtyFlag == 1)//print with qty
                        cell1.Colspan = 6;
                    else
                        cell1.Colspan = 5;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(netAmount.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("GST(18%) ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    if (qtyFlag == 1)//print with qty
                        cell1.Colspan = 6;
                    else
                        cell1.Colspan = 5;
                    table1.AddCell(cell1);

                    //gstAmount = subTotal * (0.18);
                    cell1 = new PdfPCell(new Phrase(gstAmount.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Total ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    if (qtyFlag == 1)//print with qty
                        cell1.Colspan = 6;
                    else
                        cell1.Colspan = 5;
                    table1.AddCell(cell1);

                    //GrandTotal = subTotal + gstAmount;
                    cell1 = new PdfPCell(new Phrase(GrandTotal.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);


                    if (materialType.Equals("GT"))
                    {
                        if (gtDiscNote != "")
                        {
                            cell1 = new PdfPCell(new Phrase(gtDiscNote.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            if (qtyFlag == 1)//print with qty
                                cell1.Colspan = 7;
                            else
                                cell1.Colspan = 6;
                            table1.AddCell(cell1);
                        }
                    }
                }
                else if (qtyFlag == 0)
                {

                    string[] headers;
                    string prvRecType = "";
                    if (testName.Equals("Structural Audit"))
                    {
                        headers = new string[] { "Sr.No", "Members", "Samples", "Unit Rate", "Discounted Rate", "Amount" };
                    }
                    else
                    {
                        headers = new string[] { "Sr.No", "Particular", "Test Method", "Unit Rate", "Discounted Rate" };
                    }
                    var details = dc.ProposalDetail_View(proposalNo);
                    foreach (var e in details)
                    {
                        if (SNo == 1)
                        {
                            table1 = new PdfPTable(5);
                            table1.WidthPercentage = 100;
                            //table1.SpacingBefore = 4;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.SetTotalWidth(new float[] { 8f, 35f, 28f, 15f, 15f });

                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_LEFT;
                            paragraph.Font = font7;
                            string recType = e.ProposalDetail_RecType.ToString();
                            if (recType == "OTHER")
                                recType = "OT";
                            string inwardTypeValue = obj.getInwardTypeName(recType);

                            if (!testName.Equals(""))
                                paragraph.Add(SnoRecType + ")" + testName + " :");
                            else
                            {
                                if (recType.Equals("Coupon"))
                                    paragraph.Add(SnoRecType + ")Concrete Cube Testing Coupons :");
                                else if (recType.Equals("WT"))
                                    paragraph.Add(SnoRecType + ")Water Testing Construction Purpose :");
                                else
                                    paragraph.Add(SnoRecType + ")" + inwardTypeValue + " :");
                            }

                            paragraph.SpacingAfter = 5;
                            pdfDoc.Add(paragraph);

                            if (testName == "Structural Audit" && strStructAudDetails != "")
                            {
                                string[] strDetails = strStructAudDetails.Split('~');
                                float[] widths = new float[] { 22f, 1f, 28f, 37f, 1f, 12f };
                                PdfPTable table2 = new PdfPTable(6);  //tbl
                                table2.WidthPercentage = 100;
                                table2.SetWidths(widths);
                                PdfPCell Cust_Namecell;
                                table2.SpacingBefore = 1;

                                Cust_Namecell = new PdfPCell(new Phrase("Name of Apartment / Society", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[0], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase("Builtup Area of Society", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[2], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                Cust_Namecell = new PdfPCell(new Phrase("Address", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[1], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase("No of buildings in Society", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[3], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                Cust_Namecell = new PdfPCell(new Phrase("Age of Building", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[4], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase("All buildings constructed with in 5 years range ?", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[5], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                Cust_Namecell = new PdfPCell(new Phrase("Location", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[6], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase("Any additional loads expected on building", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[7], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                Cust_Namecell = new PdfPCell(new Phrase("Any Distress Observed - Cracks wider than 1mm, more than 1 m length  and growing in last one year by 25% ", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                Cust_Namecell.Colspan = 4;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[8], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                pdfDoc.Add(table2);
                            }

                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                        }


                        if (e.ProposalDetail_RecType != prvRecType && prvRecType != "")
                        {
                            SnoRecType++;
                            pdfDoc.Add(table1);


                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_LEFT;
                            paragraph.Font = font7;
                            string recType = e.ProposalDetail_RecType.ToString();
                            if (recType == "OTHER")
                                recType = "OT";
                            string inwardTypeValue = obj.getInwardTypeName(recType);
                            if (!testName.Equals(""))
                                paragraph.Add(SnoRecType + ")" + testName + " :");
                            else
                            {
                                if (recType.Equals("Coupon"))
                                    paragraph.Add(SnoRecType + ")Concrete Cube Testing Coupons :");
                                else if (recType.Equals("WT"))
                                    paragraph.Add(SnoRecType + ")Water Testing Construction Purpose :");
                                else
                                    paragraph.Add(SnoRecType + ")" + inwardTypeValue + " :");
                            }
                            paragraph.SpacingAfter = 5;
                            pdfDoc.Add(paragraph);

                            SNo = 1;
                            table1 = new PdfPTable(5);
                            table1.WidthPercentage = 100;
                            //table1.SpacingBefore =1;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.SetTotalWidth(new float[] { 8f, 35f, 28f, 15f, 15f });

                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                        }
                        cell1 = new PdfPCell(new Phrase((SNo).ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Particular, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(e.ProposalDetail_TestMethod, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                        if (Convert.ToDecimal(e.ProposalDetail_Rate) > 0)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Rate).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Rate.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (Convert.ToDecimal(e.ProposalDetail_DiscountedRate) > 0)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_DiscountedRate).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_DiscountedRate.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        prvRecType = e.ProposalDetail_RecType;
                        SNo++;
                    }


                }
                else //if we want to print qty
                {
                    string[] headers;
                    string prvRecType = "";
                    if (testName.Equals("Structural Audit"))
                    {
                        headers = new string[] { "Sr.No", "Members", "Samples", "Unit Rate", "Discounted Rate", "Qty", "Amount" };
                    }
                    else
                    {
                        headers = new string[] { "Sr.No", "Particular", "Test Method", "Unit Rate", "Discounted Rate", "Qty", "Amount" };
                    }
                    var details = dc.ProposalDetail_View(proposalNo);
                    foreach (var e in details)
                    {
                        if (SNo == 1)
                        {
                            table1 = new PdfPTable(7);
                            table1.WidthPercentage = 100;
                            //table1.SpacingBefore = 4;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.SetTotalWidth(new float[] { 8f, 32f, 30f, 12f, 15f, 7f, 10f });

                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_LEFT;
                            paragraph.Font = font7;
                            string recType = e.ProposalDetail_RecType.ToString();
                            if (recType == "OTHER")
                                recType = "OT";
                            string inwardTypeValue = obj.getInwardTypeName(recType);
                            if (!testName.Equals(""))
                                paragraph.Add(SnoRecType + ")" + testName + " :");
                            else
                            {
                                if (recType.Equals("Coupon"))
                                    paragraph.Add(SnoRecType + ")Concrete Cube Testing Coupons :");
                                else if (recType.Equals("WT"))
                                    paragraph.Add(SnoRecType + ")Water Testing Construction Purpose :");
                                else
                                    paragraph.Add(SnoRecType + ")" + inwardTypeValue + " :");
                            }
                            paragraph.SpacingAfter = 5;
                            pdfDoc.Add(paragraph);

                            if (testName == "Structural Audit" && strStructAudDetails != "")
                            {
                                string[] strDetails = strStructAudDetails.Split('~');
                                float[] widths = new float[] { 22f, 1f, 28f, 37f, 1f, 12f };
                                PdfPTable table2 = new PdfPTable(6);  //tbl
                                table2.WidthPercentage = 100;
                                table2.SetWidths(widths);
                                PdfPCell Cust_Namecell;
                                table2.SpacingBefore = 1;

                                Cust_Namecell = new PdfPCell(new Phrase("Name of Apartment / Society", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[0], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase("Builtup Area of Society", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[2], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                Cust_Namecell = new PdfPCell(new Phrase("Address", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[1], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase("No of buildings in Society", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[3], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                Cust_Namecell = new PdfPCell(new Phrase("Age of Building", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[4], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase("All buildings constructed with in 5 years range ?", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[5], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                Cust_Namecell = new PdfPCell(new Phrase("Location", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[6], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase("Any additional loads expected on building", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[7], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                Cust_Namecell = new PdfPCell(new Phrase("Any Distress Observed - Cracks wider than 1mm, more than 1 m length  and growing in last one year by 25% ", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                Cust_Namecell.Colspan = 4;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[8], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                pdfDoc.Add(table2);
                            }

                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                        }

                        if (e.ProposalDetail_RecType != prvRecType && prvRecType != "")
                        {
                            SnoRecType++;
                            cell1 = new PdfPCell(new Phrase("Total ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            cell1.Colspan = 6;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(subTotal.ToString("0.00"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            pdfDoc.Add(table1);




                            subTotal = 0.00;
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_LEFT;
                            paragraph.Font = font7;
                            string recType = e.ProposalDetail_RecType.ToString();
                            if (recType == "OTHER")
                                recType = "OT";
                            string inwardTypeValue = obj.getInwardTypeName(recType);
                            if (!testName.Equals(""))
                                paragraph.Add(SnoRecType + ")" + testName + " :");
                            else
                            {
                                if (recType.Equals("Coupon"))
                                    paragraph.Add(SnoRecType + ")Concrete Cube Testing Coupons :");
                                else if (recType.Equals("WT"))
                                    paragraph.Add(SnoRecType + ")Water Testing Construction Purpose :");
                                else
                                    paragraph.Add(SnoRecType + ")" + inwardTypeValue + " :");
                            }
                            paragraph.SpacingBefore = 2;
                            paragraph.SpacingAfter = 5;
                            pdfDoc.Add(paragraph);

                            SNo = 1;
                            table1 = new PdfPTable(7);
                            table1.WidthPercentage = 100;
                            //table1.SpacingBefore = 1;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.SetTotalWidth(new float[] { 8f, 32f, 30f, 12f, 15f, 7f, 10f });
                            ///table1.SetTotalWidth(new float[] { 8f, 40f, 15f, 12f, 15f, 7f, 10f });

                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }


                        }

                        cell1 = new PdfPCell(new Phrase((SNo).ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Particular, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(e.ProposalDetail_TestMethod, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                        if (Convert.ToDecimal(e.ProposalDetail_Rate) > 0)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Rate).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Rate.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (Convert.ToDecimal(e.ProposalDetail_DiscountedRate) > 0)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_DiscountedRate).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_DiscountedRate.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }

                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Quanity).ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        if (Convert.ToDecimal(e.ProposalDetail_Amount) > 0)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Amount).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Amount.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        subTotal += Convert.ToDouble(e.ProposalDetail_Amount);
                        prvRecType = e.ProposalDetail_RecType;
                        SNo++;
                    }
                    if (SnoRecType > 1)
                    {
                        cell1 = new PdfPCell(new Phrase("Total ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        cell1.Colspan = 6;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(subTotal.ToString("0.00"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }


                    cell1 = new PdfPCell(new Phrase("Net Total ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = 6;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(netAmount.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("GST(18%) ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = 6;
                    table1.AddCell(cell1);
                    //gstAmount = subTotal * (0.18);
                    cell1 = new PdfPCell(new Phrase(gstAmount.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Grand Total ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = 6;
                    table1.AddCell(cell1);
                    // GrandTotal = gstAmount + subTotal;
                    cell1 = new PdfPCell(new Phrase(GrandTotal.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                }

                pdfDoc.Add(table1);


                #region MF table
                if (materialType.Equals("MF"))
                {
                    table1 = new PdfPTable(3);
                    table1.WidthPercentage = 60;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetTotalWidth(new float[] { 8f, 35f, 20f });
                    //table1.SpacingBefore = 2;
                    //table1.SpacingAfter = 2;
                    cell1 = new PdfPCell(new Phrase("\n", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 3;
                    table1.AddCell(cell1); cell1 = new PdfPCell(new Phrase("Sample requirements for Mix Design is as below :", font7));
                    cell1.FixedHeight = 18f;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 3;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Material Requirements for one Mix Design", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1.Colspan = 3;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Sr. No", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Material", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Qty.(Bag/Kg)", fontH2));
                    cell1.FixedHeight = 14f;
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("1", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Cement", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("50kg - 1 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("2", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Crushed Sand", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("30kg - 3 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("3", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("River Sand", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("30kg - 3 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("4", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("10mm", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("30kg - 3 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("5", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("20mm", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("30kg - 4 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("6", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Fly Ash", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("30kg - 1 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("7", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("GGBS", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("30kg - 1 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("8", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Admixture", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("2 Ltr", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    pdfDoc.Add(table1);
                }
                #endregion

                #endregion
                int tableRowsCount = table1.Rows.Count;


                it.List list = new it.List(it.List.UNORDERED, 7f);
                list.SetListSymbol("\u2022");
                list.IndentationLeft = 25;

                it.List listTerms = new it.List(it.List.UNORDERED, 7f);
                listTerms.SetListSymbol("\u2022");
                listTerms.IndentationLeft = 25;


                table1 = new PdfPTable(2);
                table1.WidthPercentage = 100;
                table1.SpacingBefore = 4;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SetTotalWidth(new float[] { 3.5f, 96.5f });

                //only for GT
                #region GT
                if (materialType.Equals("GT") || materialType.Equals("RWH") || testName.Equals("Plate Load Testing") || testName.Equals("Earth Resistivity Test") || testName.Equals("SBC by SPT"))
                {
                    if (proposalAddChargesNote != "")
                    {
                        cell1 = new PdfPCell(new Phrase("Additional Charges :", font7));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        //cell1.BackgroundColor = BaseColor.ORANGE;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Following additional charges are applicable :", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);


                        int cnt = 1;
                        string[] notedata = proposalAddChargesNote.Split('|');
                        foreach (string note in notedata)
                        {
                            if (note != "")
                            {
                                cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                                cell1.PaddingRight = 0;
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(note, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.PaddingLeft = 1;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cnt++;

                            }
                        }
                    }


                    cell1 = new PdfPCell(new Phrase("\nTerms & Conditions :", font7));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);


                    if (proposalDetailNote != "")
                    {
                        int cnt = 1;
                        string[] notedata = proposalDetailNote.Split('|');
                        foreach (string note in notedata)
                        {
                            if (note != "" && !note.Equals("GST @ 18% will be applicable extra."))
                            {
                                cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                                cell1.PaddingRight = 0;
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(note, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.PaddingLeft = 1;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cnt++;

                            }
                        }
                        cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                        cell1.PaddingRight = 0;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("This is not GST Tax Invoice. To avail GST credit, Please ask for GST Tax Invoice.", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.PaddingLeft = 1;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                    }


                    cell1 = new PdfPCell(new Phrase("Payment Terms :", font7));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);
                    //cell1 = new PdfPCell(new Phrase("1)", fontH1));
                    //cell1.PaddingRight = 0;
                    //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    //cell1.Border = PdfPCell.NO_BORDER;
                    //table1.AddCell(cell1);
                    //cell1 = new PdfPCell(new Phrase("GST @ 18% will be applicable extra.", fontH1));
                    //cell1.PaddingLeft = 1;
                    //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    //cell1.Border = PdfPCell.NO_BORDER;
                    //table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("1)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.PaddingRight = 0;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    //cell1 = new PdfPCell(new Phrase("The proposal is valid for 30 days from the date of proposal submission.", fontH1));
                    cell1 = new PdfPCell(new Phrase("Mobilization charges and 50% advance to be paid before mobilization of equipment at site.", fontH1));
                    cell1.PaddingLeft = 1;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("2)", fontH1));
                    cell1.PaddingRight = 0;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    //cell1 = new PdfPCell(new Phrase("Delay of payment beyond 30 days from the date of billing shall attract an interest of 2% per month on the outstanding amount.", fontH1));
                    cell1 = new PdfPCell(new Phrase("25% of bill value to be paid after submission of provisional report.", fontH1));
                    cell1.PaddingLeft = 1;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("3)", fontH1));
                    cell1.PaddingRight = 0;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    //cell1 = new PdfPCell(new Phrase("All payments shall be made by Online payment or Demand Draft or Cheque,payable at Pune", fontH1));
                    cell1 = new PdfPCell(new Phrase("Balanced 25% of bill value to be paid within two weeks of submission of final report.", fontH1));
                    cell1.PaddingLeft = 1;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("4)", fontH1));
                    cell1.PaddingRight = 0;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Visit of our competent Technical Officer after conducting the geotechnical investigation or during site exploration for inspection or verification will be charged extra as below:-", fontH1));
                    cell1.PaddingLeft = 1;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("   ", fontH1));
                    cell1.PaddingRight = 0;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("   a)    PMC & PCMC - Rs. 5000 (Travelling & GST Extra).", fontH1));
                    cell1.PaddingLeft = 1;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);


                    cell1 = new PdfPCell(new Phrase("   ", fontH1));
                    cell1.PaddingRight = 0;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("   b)    Out of Pune – Rs. 7500 (Travelling & GST Extra).", fontH1));
                    cell1.PaddingLeft = 1;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                }
                #endregion
                else
                {

                    cell1 = new PdfPCell(new Phrase("\nTerms & Conditions :", font7));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Colspan = 2;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);


                    int cnt = 1;
                    if (proposalDetailNote != "")
                    {

                        string[] notedata = proposalDetailNote.Split('|');
                        foreach (string note in notedata)
                        {
                            if (note != "" && !note.Equals("GST @ 18% will be applicable extra."))
                            {
                                cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.PaddingRight = 0;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(note, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.PaddingLeft = 1;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cnt++;
                            }
                        }

                        //add new discounted termms if site rate are not applicable
                        if (SiteWiseRateApplied_bit == 0)
                        {
                            //cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                            //cell1.PaddingRight = 0;
                            //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            //cell1.Border = PdfPCell.NO_BORDER;
                            //table1.AddCell(cell1);
                            //cell1 = new PdfPCell(new Phrase("Following additional discounts will be applicable for tests other than Geotechnical investigation.", fontH1));
                            //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            //cell1.PaddingLeft = 1;
                            //cell1.Border = PdfPCell.NO_BORDER;
                            //table1.AddCell(cell1);
                            //pdfDoc.Add(table1);
                            //cnt++;
                            //list.Add(new it.ListItem("5% for  bill value above Rs 50000/- and 10 % for bill value above 100000/-.", fontH1));
                            //list.Add(new it.ListItem("5% for advance payment of 50 % of the bill value.", fontH1));
                            //list.Add(new it.ListItem("5% for placing the order through Durocrete APP by filling the test request form on the mobile.", fontH1));
                            //paragraph = new Paragraph();
                            //paragraph.Add(list);
                            //pdfDoc.Add(paragraph);
                            //table1 = new PdfPTable(2);
                            //table1.WidthPercentage = 100;
                            //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            //table1.SetTotalWidth(new float[] { 3.5f, 96.5f });

                        }

                        cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                        cell1.PaddingRight = 0;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("This is not GST Tax Invoice. To avail GST credit, Please ask for GST Tax Invoice.", fontH6));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.PaddingLeft = 1;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cnt++;
                        table1.AddCell(cell1);

                        //cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                        //cell1.PaddingRight = 0;
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("5 % discount will be applicable for placing the order through Durocrete APP by filling the test request form on the mobile.", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.PaddingLeft = 1;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //cnt++;
                        //table1.AddCell(cell1);



                    }
                    #region CR,ND,CoRe
                    //only for CR,CoreCut,NDT
                    if (materialType.Equals("CR") || materialType.Equals("CORECUT") || materialType.Equals("NDT"))
                    {

                        cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.PaddingLeft = 7;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Client Scope - ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        pdfDoc.Add(table1);

                        list.Items.Clear();
                        //list.Add(new it.ListItem("5% for  bill value above Rs 50000/- and 10 % for bill value above 100000/-.", fontH1));
                        //list.Add(new it.ListItem("5% for advance payment of 50 % of the bill value.", fontH1));
                        //list.Add(new it.ListItem("5% discount will be applicable for placing the order through Durocrete APP by filling the test request form on the mobile.", fontH1));
                        list.Add(new it.ListItem("Client has to provide two labours for help, water, electricity & scaffolding etc.", fontH1));
                        list.Add(new it.ListItem("Chiselling of plaster to expose the concrete if required.", fontH1));
                        list.Add(new it.ListItem("Providing safe access and safe working conditions for our team at site.", fontH1));

                        paragraph = new Paragraph();
                        paragraph.Add(list);
                        pdfDoc.Add(paragraph);


                        table1 = new PdfPTable(2);
                        table1.WidthPercentage = 100;
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.SetTotalWidth(new float[] { 3.5f, 96.5f });
                        cnt++;
                        cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Minimum Billing  - If the work scope is reduced for any reason  not attributed to Durocrete.", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        //cell1 = new PdfPCell(new Phrase("Following minimum per day charges shall apply -", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        pdfDoc.Add(table1);

                        //it.List list1 = new it.List(it.List.UNORDERED, 7f);
                        //list1.SetListSymbol("\u2022");
                        //list1.IndentationLeft = 25;

                        //if (materialType.Equals("CR"))
                        //    list1.Add(new it.ListItem("Local   Sites   - Rs 12000/-", fontH1));
                        //else
                        //    list1.Add(new it.ListItem("Local   Sites   - Rs 10000/-", fontH1));

                        //list1.Add(new it.ListItem("Outstation  Sites - Rs 20000/-", fontH1));

                        //paragraph = new Paragraph();
                        //paragraph.Add(list1);
                        //pdfDoc.Add(paragraph);

                        table1 = new PdfPTable(2);
                        table1.WidthPercentage = 100;
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.SetTotalWidth(new float[] { 3.5f, 96.5f });

                        cnt++;
                        cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("For testing carried out at sites with outstation locations the travelling lodging and boarding costs of our team will be charged extra.", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);


                    }
                    #endregion
                }
                #region Applicability of Discount & Additional Discount apllied to al  expect all GT formats
                if (discNotesApplicability == 1)
                {
                    if (materialType != "GT" && materialType != "RWH" && !testName.Equals("Earth Resistivity Test") && !testName.Equals("SBC by SPT") && !testName.Equals("Plate Load Testing"))
                    {
                        #region Commentted
                        //cell1 = new PdfPCell(new Phrase("\nApplicability of Discounts :", font7));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //cell1.Colspan = 2;
                        //table1.AddCell(cell1);


                        //cell1 = new PdfPCell(new Phrase("The above discounts are calculated from our system based on following parameters : ", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Colspan = 2;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);


                        //cell1 = new PdfPCell(new Phrase("1)", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.PaddingRight = 0;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Business Volume received with payments in last 6 months.", fontH1));
                        //cell1.PaddingLeft = 1;
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);



                        //cell1 = new PdfPCell(new Phrase("2)", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.PaddingRight = 0;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Timely payment based on the average no of days of outstanding bills.", fontH1));
                        //cell1.PaddingLeft = 1;
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);


                        //cell1 = new PdfPCell(new Phrase("3)", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.PaddingRight = 0;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Customer Loyalty based on last 2 years billing.", fontH1));
                        //cell1.PaddingLeft = 1;
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);



                        //cell1 = new PdfPCell(new Phrase("\nAdditional Discounts :", font7));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Colspan = 2;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);

                        //cell1 = new PdfPCell(new Phrase("Following additional discounts are applicable on the above discounted rate :", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Colspan = 2;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);


                        //cell1 = new PdfPCell(new Phrase("1)", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.PaddingRight = 0;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Discount for value for individual bills", fontH1));
                        //cell1.PaddingLeft = 1;
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //pdfDoc.Add(table1);


                        //table1 = new PdfPTable(3);
                        //table1.WidthPercentage = 60;
                        //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //table1.SetTotalWidth(new float[] { 8f, 50f, 20f });
                        //table1.SpacingBefore = 2;
                        //table1.SpacingAfter = 2;
                        //cell1 = new PdfPCell(new Phrase("Sr. No", fontH2));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Bill Value", fontH2));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Discount", fontH2));
                        //cell1.FixedHeight = 14f;
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("1", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Rs. 50000 to Rs. 100000", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("5%", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("2", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Rs. 100000 to Rs. 200000", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("10%", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("3", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Rs. 200000 to Rs. 500000", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("15%", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("4", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Above Rs. 500000", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("20%", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //pdfDoc.Add(table1);

                        //table1 = new PdfPTable(2);
                        //table1.WidthPercentage = 100;
                        //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //table1.SetTotalWidth(new float[] { 3.5f, 96.5f });

                        //cell1 = new PdfPCell(new Phrase("2)", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.PaddingRight = 0;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Discount for payment of advance before generating bill", fontH1));
                        //cell1.PaddingLeft = 1;
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //pdfDoc.Add(table1);


                        //table1 = new PdfPTable(3);
                        //table1.WidthPercentage = 60;
                        //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //table1.SetTotalWidth(new float[] { 8f, 50f, 20f });
                        //table1.SpacingBefore = 2;
                        //table1.SpacingAfter = 2;

                        //cell1 = new PdfPCell(new Phrase("Sr. No", fontH2));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Advance Payment Received", fontH2));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Discount", fontH2));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //cell1.FixedHeight = 14f;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("1", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("50% of bill value or running advance of Rs. 1 lakh", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("5%", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("2", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("100% of bill value or running advance of Rs. 2 lakh", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("10%", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //pdfDoc.Add(table1);


                        //table1 = new PdfPTable(2);
                        //table1.WidthPercentage = 100;
                        //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //table1.SetTotalWidth(new float[] { 3.5f, 96.5f });
                        //cell1 = new PdfPCell(new Phrase("1)", fontH1));
                        //cell1.PaddingRight = 0;
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Filling Test Request Form through Durocrete Mobile Application. -  5%", fontH1));
                        //cell1.PaddingLeft = 1;
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);

                        //cell1 = new PdfPCell(new Phrase("2)", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.PaddingRight = 0;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("The above discounts are subject to following maximum discounts applicable to each category.", fontH1));
                        //cell1.PaddingLeft = 1;
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //pdfDoc.Add(table1);

                        //table1 = new PdfPTable(3);
                        //table1.WidthPercentage = 60;
                        //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //table1.SetTotalWidth(new float[] { 8f, 50f, 20f });
                        //table1.SpacingBefore = 2;
                        //table1.SpacingAfter = 2;

                        //cell1 = new PdfPCell(new Phrase("Sr. No", fontH2));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Material", fontH2));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Discount", fontH2));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //cell1.FixedHeight = 14f;
                        //table1.AddCell(cell1);

                        //cell1 = new PdfPCell(new Phrase("1", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("Steel and Mix Design", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("40%", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("2", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("All other tests", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("30%", fontH3));
                        //cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        //table1.AddCell(cell1);
                        //pdfDoc.Add(table1);

                        //table1 = new PdfPTable(2);
                        //table1.WidthPercentage = 100;
                        //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //table1.SetTotalWidth(new float[] { 3.5f, 96.5f });
                        //cell1 = new PdfPCell(new Phrase("3)", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.PaddingRight = 0;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("No discounts shall be applicable if average days outstanding exceed 90 days.", fontH1));
                        //cell1.PaddingLeft = 1;
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);

                        //cell1 = new PdfPCell(new Phrase("4)", fontH1));
                        //cell1.PaddingRight = 0;
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        //cell1 = new PdfPCell(new Phrase("In case you need any clarification please refer to our discount policy.", fontH1));
                        //cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        //cell1.PaddingLeft = 1;
                        //cell1.Border = PdfPCell.NO_BORDER;
                        //table1.AddCell(cell1);
                        #endregion
                    }
                }
                #endregion

                pdfDoc.Add(table1);

                table1 = new PdfPTable(1);
                table1.WidthPercentage = 100;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SetTotalWidth(new float[] { 60f });

                cell1 = new PdfPCell(new Phrase("\n\nBank Details (For on line Payment) : ", font7));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Account Name : Durocrete Engineering Services Pvt. Ltd.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Bank Name : HDFC Bank Ltd.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                if (cnStr.ToLower().Contains("mumbai") == true)
                {
                    cell1 = new PdfPCell(new Phrase("Branch : Sector 17, Vashi", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Account Type : Current", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Account No : 05402000024568", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("IFSC Code : HDFC0000540", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                }
                else if (cnStr.ToLower().Contains("nashik") == true)
                {


                    cell1 = new PdfPCell(new Phrase("Branch : Bhandarkar Road, Pune", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Account Type : Current", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Account No : 50200023762951", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("IFSC Code : HDFC0000007", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                }
                else
                {

                    cell1 = new PdfPCell(new Phrase("Branch : Hingne Khurd,Pune", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Account Type : Current", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Account No : 08252000000218", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("IFSC Code : HDFC0000825", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);


                }

                cell1 = new PdfPCell(new Phrase("GST No. of Service Provider : 27AABCD2992C2ZS", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                string sacCode = "998346";
                if (materialType.Contains("GT") || materialType.Contains("SO"))
                    sacCode = "998341";
                cell1 = new PdfPCell(new Phrase("SAC Code : " + sacCode + " \n ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("We are a Leading Construction Material testing laboratory in Western Maharashtra. We have testing infrastructure in Mumbai,Pune & Nashik. Our Pune & Mumbai Labs are accredited under NABL(ISO 17025) covering more than 150 tests in Building Construction", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("\nWe provide testing services in following areas : ", font7));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                pdfDoc.Add(table1);

                table1 = new PdfPTable(2);
                table1.WidthPercentage = 100;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SetTotalWidth(new float[] { 3.5f, 96.5f });
                cell1 = new PdfPCell(new Phrase("1)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Geotechnical Investigation and soil testing.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);


                cell1 = new PdfPCell(new Phrase("2)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Contour Survey( Land Survey ).", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);


                cell1 = new PdfPCell(new Phrase("3)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Rain Water Harvesting.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);


                cell1 = new PdfPCell(new Phrase("4)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Pile Integrity and Pile Dynamic test on pile foundations using state of the art testing equipment.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);


                cell1 = new PdfPCell(new Phrase("5)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Concrete Mix design and onsite support for concrete mix designs.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("6)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Testing of concrete and other building materials as per IS and other relevant standards.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("7)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Non Destructive Test of Concrete & Structural Steel.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("8)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Concrete Core Test on RCC Structure.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("9)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Slab deflection test(Slab Load Test).", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("10)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Chemical analysis of Cement, Water, Concrete, Steel and Construction Chemicals.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("11)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Testing of all type of Finishing items - Tile, Door, Plywood, POP, Gypsum & Paint.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("12)", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Structural Stability for Commercial, Residential Industrial projects.", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("We would be pleased to add value to your project through above services. \n ", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                cell1.Colspan = 2;
                table1.AddCell(cell1);

                //if (Action != "Email")
                //{
                cell1 = new PdfPCell(new Phrase("Thanking You,", fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Colspan = 2;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("For Durocrete Engineering Services Pvt. Ltd. \n \n ", fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Colspan = 2;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase(userNm, fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Colspan = 2;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("(" + userDesgn.Replace("(", "").Replace(")", "") + ")", fontH2));
                cell1.Colspan = 2;
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                string tollFree = "";
                if (cnStr.ToLower().Contains("mumbai") == true)
                    tollFree = " 9850500013";
                else if (cnStr.ToLower().Contains("nashik") == true)
                    tollFree = "";
                else
                    tollFree = "18001206465";
                cell1 = new PdfPCell(new Phrase("(" + tollFree + ")", fontH2));
                cell1.Colspan = 2;
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("\nFor further classification you may contact :", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Colspan = 2;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Name : " + meName, fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Colspan = 2;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                cell1 = new PdfPCell(new Phrase("Contact No : " + meContact, fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Colspan = 2;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                pdfDoc.Add(table1);
                //}
                //else
                //{
                //    pdfDoc.Add(table1);
                //    paragraph = new Paragraph();
                //    paragraph.Alignment = Element.ALIGN_LEFT;
                //    paragraph.Font = fontH1;
                //    paragraph.SpacingBefore = 5;
                //    paragraph.Add("This is electronically generated report hence does not require signature. ");
                //    pdfDoc.Add(paragraph);


                //    paragraph = new Paragraph();
                //    paragraph.Font = fontH1;
                //    paragraph.SpacingBefore = 5;
                //    paragraph.Add("For all technical queries contact (020)24348027.");
                //    pdfDoc.Add(paragraph);



                //}
                //var blackListTextFont = FontFactory.GetFont("Verdana", 4);
                //paragraph = new Paragraph();
                //paragraph.Alignment = Element.ALIGN_CENTER;
                //paragraph.Font = blackListTextFont;
                //paragraph.Add("--End of Report--");
                //pdfDoc.Add(paragraph);
                pdfDoc.Close();
                #region for gt send payment note
                //            if (materialType.Equals("GT")) //|| materialType.Equals("RWH") || testName.Equals("Plate Load Testing") || testName.Equals("Earth Resistivity Test") || testName.Equals("SBC by SPT"))
                //            {
                //                #region  concatenate another sheet
                //                //string fileName2 = "Proposal" + "_" + ProposalNo.Replace("/", "_") + "_1_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                //                //Document pdfDoc2 = new Document(PageSize.A4, 55f, 25f, 90f, 15f);
                //                //PdfWriter writer2 = PdfWriter.GetInstance(pdfDoc2, new FileStream(@Subfoldername1 + "/" + fileName2, FileMode.Create));
                //                //pdfDoc2.Open();
                //                //paragraph = new Paragraph();
                //                //paragraph.Add(" Proposal for Testing Services\n ");
                //                //pdfDoc2.Add(paragraph);
                //                //pdfDoc2.Close();
                //                //string sourcePdfPath1="", sourcePdfPath2="", outputPdfPath = "";
                //                //sourcePdfPath1 = @Subfoldername1 + "/" + fileName;
                //                //outputPdfPath = @Subfoldername1 + "/" + fileName2;
                //                //sourcePdfPath2 = System.Web.HttpContext.Current.Server.MapPath(".") + "/Images/PaymentTerms.pdf";
                //                //string[] strFiles = { sourcePdfPath1, sourcePdfPath2 };
                //                //CombineMultiplePDFs(strFiles, outputPdfPath);
                //                //File.Delete(sourcePdfPath1);
                //                //fileName = fileName2;
                //                //if (Action == "Email")
                //                //{
                //                //    string ToFileName = "Proposal_" + ProposalNo.Replace("/", "_") + ".pdf";
                //                //    File.Move(@Subfoldername1 + "/" + fileName2, @Subfoldername1 + "/" + ToFileName);
                //                //    fileName = ToFileName;
                //                //}
                //                #endregion
                //                pdfDoc.NewPage();

                //                paragraph = new Paragraph();
                //                paragraph.SpacingBefore = 30;
                //                paragraph.SpacingAfter = 3;
                //                paragraph.Alignment = Element.ALIGN_LEFT;
                //                paragraph.Font = fontH1;
                //                string strPaymentTerms = @"
                //Dear Customer,

                //This is with reference to our proposal for soil investigation for your project. As you are 
                //aware that we operate through Soil Operators who use rigs provided by us. We need to make 
                //payments to them on weekly basis. In addition GST payments and equipment 
                //mobilization charges have to be paid on monthly basis. This puts pressure on our 
                //cash flows and affects our operations. As such we have decided to work with 50% 
                //advance for all Geotechnical Works wef from 1st Jan 20. We request you to cooperate on  
                //the same. We are committed to maintain highest technical standards of services. 


                //Best Regards,
                //Team Durocrete";
                //                paragraph.Add(strPaymentTerms);
                //                pdfDoc.Add(paragraph);
                //            }
                #endregion
                if (Action != "Email")
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }

            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        public void Proposal_PDF(int EnqId, int qtyFlag, int proposalId, bool newEnqClient, string Action, string ProposalNo)
        {
            try
            {
                var proposal = dc.Proposal_View(EnqId, newEnqClient, proposalId, "");
                foreach (var p in proposal)
                {
                    if (Convert.ToDateTime(p.Proposal_Date) <= DateTime.ParseExact("03/08/2020", "dd/MM/yyyy", null))
                    {
                        Proposal_PDF_old03082020(EnqId, qtyFlag, proposalId, newEnqClient, Action, ProposalNo);
                        return;
                    }
                }
                string strRegion = "";
                var master = dc.MasterSetting_View(0);
                foreach (var mst in master)
                {
                    strRegion = mst.MASTER_Region_var;
                }
                Paragraph paragraph = new Paragraph();
                Document pdfDoc = new Document(PageSize.A4, 55f, 25f, 90f, 15f);
                var fileName = "Proposal" + "_" + ProposalNo.Replace("/", "_") + "_" + DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss") + ".pdf";
                if (!Directory.Exists(@foldername))
                    Directory.CreateDirectory(@foldername);
                string Subfoldername = foldername + "/Proposal";
                if (!Directory.Exists(@Subfoldername))
                    Directory.CreateDirectory(@Subfoldername);
                string Subfoldername1 = Subfoldername;

                if (Action == "Email")
                {
                    fileName = "Proposal_" + ProposalNo.Replace("/", "_") + ".pdf";
                    Subfoldername1 = foldername;
                }

                PdfWriter writer = PdfWriter.GetInstance(pdfDoc, new FileStream(@Subfoldername1 + "/" + fileName, FileMode.Create));
                writer.PageEvent = new clsProposalHeaderFooter(1);

                pdfDoc.Open();
                PdfPTable table1 = new PdfPTable(7);
                paragraph = new Paragraph();

                BaseFont bfT = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, false);
                Font font7 = new Font(bfT, 10, Font.UNDERLINE | Font.BOLD, BaseColor.BLACK);
                Font fontH5 = new Font(Font.FontFamily.TIMES_ROMAN, 12f, Font.BOLD);
                Font fontH3 = new Font(Font.FontFamily.TIMES_ROMAN, 9.5f, Font.UNDEFINED);
                Font fontH1 = new Font(Font.FontFamily.TIMES_ROMAN, 9.5f, Font.UNDEFINED);
                Font fontH4 = new Font(Font.FontFamily.TIMES_ROMAN, 10f, Font.BOLD);
                Font fontH2 = new Font(Font.FontFamily.TIMES_ROMAN, 8.5f, Font.BOLD);
                Font fontH6 = new Font(Font.FontFamily.TIMES_ROMAN, 8f, Font.BOLD);

                string gtDiscNote = ""; int discNotesApplicability = 0, SiteWiseRateApplied_bit = 0;
                paragraph = new Paragraph();
                //paragraph.SpacingBefore = 30;
                // paragraph.SpacingAfter = 3;
                paragraph.Alignment = Element.ALIGN_CENTER;
                paragraph.Font = fontH5;
                paragraph.Add(" Proposal for Testing Services\n ");
                pdfDoc.Add(paragraph);
                #region data
                double gstAmount = 0, GrandTotal = 0, netAmount = 0, roundOffAmount = 0;
                string email = "", proposalEmailId = "", meContact = "", meName = "", userNm = "", userDesgn = "", proposalDetailNote = "", proposalAddChargesNote = "", proposalNo = "", materialType = "", strStructAudDetails = "", clientScope = "", paymentTerm = "";
                PdfPCell cell1;
                int SrNo = 0, mergeFrom = 0, mergeTo = 0, subTestOT = 0;
                var res = dc.Proposal_View(EnqId, newEnqClient, proposalId, "");
                foreach (var e in res)
                {

                    if (SrNo == 0)
                    {
                        qtyFlag = Convert.ToInt32(e.Proposal_WithQty);
                        mergeFrom = Convert.ToInt32(e.Proposal_MergeFrom);
                        mergeTo = Convert.ToInt32(e.Proposal_MergeTo);
                        meContact = Convert.ToString(e.Proposal_MeContactNo);
                        meName = Convert.ToString(e.Proposal_MEName);
                        subTestOT = Convert.ToInt32(e.Proposal_OTSubTestId_int);
                        email = Convert.ToString(e.Proposal_NewClientMailId_var);
                        gtDiscNote = Convert.ToString(e.Proposal_DiscNoteGT_var);
                        gstAmount = Convert.ToDouble(e.Proposal_GSTAmt_dec);
                        GrandTotal = Convert.ToDouble(e.Proposal_NetAmountWithGST_dec);
                        //netAmount = GrandTotal - gstAmount;
                        netAmount = Convert.ToDouble(e.Proposal_NetAmount);
                        roundOffAmount = GrandTotal - (netAmount + gstAmount);

                        proposalEmailId = Convert.ToString(e.Proposal_EmailTo_var);
                        if (Convert.ToString(e.Proposal_DiscNotesVisibility_bit) != "" && Convert.ToString(e.Proposal_DiscNotesVisibility_bit) != null)
                            discNotesApplicability = Convert.ToInt32(e.Proposal_DiscNotesVisibility_bit);
                        if (Convert.ToString(e.Proposal_SiteWiseRateApplied_bit) != null)
                            SiteWiseRateApplied_bit = Convert.ToInt32(e.Proposal_SiteWiseRateApplied_bit);
                        table1 = new PdfPTable(4);
                        table1.WidthPercentage = 100;
                        table1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.SetTotalWidth(new float[] { 14f, 35f, 14f, 33f });
                        cell1 = new PdfPCell(new Phrase("To,", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.TOP_BORDER | PdfPCell.LEFT_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.TOP_BORDER | PdfPCell.RIGHT_BORDER;
                        table1.AddCell(cell1);
                        if (Convert.ToString(e.Proposal_Date) != "")
                        {
                            cell1 = new PdfPCell(new Phrase("Date   ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.TOP_BORDER | PdfPCell.LEFT_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(": " + Convert.ToDateTime(e.Proposal_Date).ToString("dd/MM/yyyy"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.TOP_BORDER | PdfPCell.RIGHT_BORDER;
                            table1.AddCell(cell1);
                        }
                        strStructAudDetails = Convert.ToString(e.Proposal_StructAuditDetails_var);
                        //enquiry details
                        string clientName = "", siteEmailId = "", enqContactNo = "";
                        string city = "", pin = "", add = "";
                        if (newEnqClient == false)
                        {
                            var data = dc.Enquiry_View_Details(EnqId, false);
                            foreach (var en in data)
                            {
                                materialType = en.MATERIAL_RecordType_var.ToString();
                                clientName = en.CL_Name_var.ToString();
                                siteEmailId = en.SITE_EmailID_var;
                                enqContactNo = en.CONT_ContactNo_var;
                                if (Convert.ToString(en.CL_City_var) != null)
                                    city = Convert.ToString(en.CL_City_var);
                                if (Convert.ToString(en.CL_Pin_int) != null)
                                    pin = Convert.ToString(en.CL_Pin_int);
                                if (Convert.ToString(en.CL_OfficeAddress_var) != null)
                                    add = Convert.ToString(en.CL_OfficeAddress_var);
                            }
                        }
                        else
                        {
                            var data = dc.EnquiryNewClient_View_Details(EnqId, false);
                            foreach (var en in data)
                            {
                                materialType = en.MATERIAL_RecordType_var.ToString();
                                clientName = en.ENQNEW_ClientName_var.ToString();
                                siteEmailId = email;
                                enqContactNo = en.ENQNEW_ContactNo_var;
                                if (Convert.ToString(en.ENQNEW_ClientCity_var) != null)
                                    city = Convert.ToString(en.ENQNEW_ClientCity_var);
                                if (Convert.ToString(en.ENQNEW_ClientPin_int) != null)
                                    pin = Convert.ToString(en.ENQNEW_ClientPin_int);
                                if (Convert.ToString(en.ENQNEW_SiteAddress_var) != null)
                                    add = Convert.ToString(en.ENQNEW_ClientOfficeAddress_var);//Convert.ToString(en.ENQNEW_SiteAddress_var);//

                                add += " " + city + " " + pin;
                            }
                        }
                        cell1 = new PdfPCell(new Phrase(clientName, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);
                        if (Convert.ToString(e.Proposal_No) != "")
                        {
                            cell1 = new PdfPCell(new Phrase("Ref No.   ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.LEFT_BORDER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(": " + Convert.ToString(e.Proposal_No), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.RIGHT_BORDER;
                            table1.AddCell(cell1);
                        }
                        int cntAdd = 1, flag = 0;
                        if (newEnqClient == false)
                        {

                            if (city != "")
                            {
                                add = add.ToString().Replace(city, "");
                                if (add != "")
                                {
                                    if (add.Substring(add.Length - 1).ToString().Contains(""))
                                    {
                                        if (add.Substring(add.Length - 2).ToString().Contains("-") || add.Substring(add.Length - 2).ToString().Contains("."))
                                            add = add.Remove(add.Length - 2, 1) + "";

                                    }

                                    if (add.Substring(add.Length - 1).ToString().Contains("-") || add.Substring(add.Length - 2).ToString().Contains("."))
                                        add = add.Remove(add.Length - 1, 1) + "";
                                }
                            }
                            if (pin != "")
                            {
                                add = add.ToString().Replace(pin, "");
                                if (add != "" && add != " ")
                                {
                                    if (add.Substring(add.Length - 1).ToString().Contains(""))
                                    {
                                        if (add.Substring(add.Length - 2).ToString().Contains("-") || add.Substring(add.Length - 2).ToString().Contains("."))
                                            add = add.Remove(add.Length - 2, 1) + "";

                                    }

                                    if (add.Substring(add.Length - 1).ToString().Contains(".") || add.Substring(add.Length - 1).ToString().Contains("-"))
                                        add = add.Remove(add.Length - 1, 1) + "";

                                }
                            }


                            if (add.Length > 60)
                                cntAdd = 2;

                            if ((add.Length - 60) < 60)
                            {
                                if (city != "")
                                {
                                    if ((city.Length) <= (add.Length - 60))
                                    {
                                        if (add.Substring(add.Length).ToString() == "")
                                            add += city;
                                        else
                                            add += " " + city;

                                    }
                                }

                                if (pin != "")
                                {
                                    if ((pin.Length + 3) <= (add.Length - 60))
                                    {
                                        if (add.Substring(add.Length).ToString() == "")
                                            add += " - " + pin + ".";
                                        else
                                            add += " - " + pin + ".";

                                    }
                                }

                                flag = 1;
                            }

                            cell1 = new PdfPCell(new Phrase(add, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            //cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER;
                            cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                            cell1.Colspan = 2;
                            if (cntAdd == 1)
                            {
                                cell1.Rowspan = 1;
                                cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER;

                            }
                            else
                                cell1.Rowspan = 2;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(add, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                            cell1.Colspan = 2;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                        }

                        cell1 = new PdfPCell(new Phrase("Email", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.LEFT_BORDER;
                        table1.AddCell(cell1);

                        if (proposalEmailId != "")
                            cell1 = new PdfPCell(new Phrase(": " + proposalEmailId, fontH1));
                        else
                            cell1 = new PdfPCell(new Phrase(": " + siteEmailId, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.RIGHT_BORDER;
                        table1.AddCell(cell1);

                        if (newEnqClient == false)
                        {
                            if (cntAdd == 1)
                            {
                                string str = "";
                                if (city != "")
                                    str += city;
                                if (pin != "")
                                    str += " - " + pin + ".";

                                if (str != "")
                                {
                                    cell1 = new PdfPCell(new Phrase(str, fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                    cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                                    cell1.Colspan = 2;
                                    table1.AddCell(cell1);

                                }
                                else
                                {
                                    cell1 = new PdfPCell(new Phrase("", fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                    cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                                    cell1.Colspan = 2;
                                    table1.AddCell(cell1);
                                }
                            }

                        }


                        cell1 = new PdfPCell(new Phrase("Mobile", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.BOTTOM_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(": " + enqContactNo, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                        table1.AddCell(cell1);

                        if (newEnqClient == false)
                        {
                            if (cntAdd == 2)
                            {
                                if (flag == 0)
                                {
                                    string str = "";
                                    if (city != "")
                                        str += city;
                                    if (pin != "")
                                        str += " - " + pin + ".";

                                    if (str != "")
                                    {
                                        cell1 = new PdfPCell(new Phrase(str, fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                        cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                                        cell1.Colspan = 2;
                                        table1.AddCell(cell1);

                                        cell1 = new PdfPCell(new Phrase(" ", fontH1));
                                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                        cell1.Border = PdfPCell.LEFT_BORDER;
                                        cell1.Colspan = 2;
                                        table1.AddCell(cell1);
                                    }

                                }
                            }
                        }
                        //end

                        if (Convert.ToString(e.Proposal_KindAttention) != "")
                        {
                            cell1 = new PdfPCell(new Phrase("Kind Attention", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.BOTTOM_BORDER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(":  " + Convert.ToString(e.Proposal_KindAttention), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                            cell1.Colspan = 3;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                        }

                        if (Convert.ToString(e.Proposal_Subject) != "")
                        {
                            cell1 = new PdfPCell(new Phrase("Subject ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.LEFT_BORDER | PdfPCell.BOTTOM_BORDER;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(":  " + Convert.ToString(e.Proposal_Subject), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            cell1.Border = PdfPCell.RIGHT_BORDER | PdfPCell.BOTTOM_BORDER;
                            cell1.Colspan = 3;
                            cell1.Rowspan = 2;
                            table1.AddCell(cell1);

                        }

                        pdfDoc.Add(table1);

                        table1 = new PdfPTable(1);
                        table1.WidthPercentage = 100;
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.SetTotalWidth(new float[] { 70f });
                        cell1 = new PdfPCell(new Phrase("\n\nDear Sir/Madam,\n\n", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(e.Proposal_Description, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        pdfDoc.Add(table1);


                        userNm = e.USER_Name_var;
                        userDesgn = e.USER_Designation_var;

                        proposalNo = e.Proposal_No;
                        proposalDetailNote = e.Proposal_Notes;
                        proposalAddChargesNote = e.Proposal_AddChargesForGT;
                        clientScope = e.Proposal_ClientScope_var;
                        paymentTerm = e.Proposal_PaymentTerm_var;
                    }
                    break;
                }
                #endregion

                clsData obj = new clsData();

                #region proposaldetails
                int SNo = 1, SnoRecType = 1; double subTotal = 0.00;

                string testName = "";
                if (subTestOT > 0)
                {
                    var rslt = dc.Test_View(0, subTestOT, "", 0, 0, 0).ToList();
                    testName = rslt.FirstOrDefault().TEST_Name_var;
                }

                if (materialType.Equals("GT") || testName.Equals("SBC by SPT") || testName.Equals("Water Test for Drinking/Domestic Purpose"))
                {
                    int i = 1, rowSpan = 0;
                    rowSpan = mergeTo - mergeFrom + 1;
                    //rowSpan = mergeTo - mergeFrom;
                    string[] headers;

                    if (testName.Equals("Water Test for Drinking/Domestic Purpose"))
                    {
                        if (qtyFlag == 0)//print without qty
                            headers = new string[] { "Sr.No", "Particular", "Test Method", "Unit Rate", "Discounted Rate", "Amount" };
                        else
                            headers = new string[] { "Sr.No", "Particular", "Test Method", "Unit Rate", "Discounted Rate", "Qty", "Amount" };

                    }
                    else
                    {
                        if (qtyFlag == 0)//print without qty
                            headers = new string[] { "Sr.No", "Particular", "Unit", "Unit Rate", "Discounted Rate", "Amount" };
                        else
                            headers = new string[] { "Sr.No", "Particular", "Unit", "Unit Rate", "Discounted Rate", "Qty", "Amount" };

                    }

                    var details = dc.ProposalDetail_View(proposalNo);
                    foreach (var e in details)
                    {
                        if (i == 1)
                        {
                            if (qtyFlag == 0)//print without qty
                                table1 = new PdfPTable(6);
                            else
                                table1 = new PdfPTable(7);

                            table1.WidthPercentage = 100;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;

                            if (qtyFlag == 0)//print without qty
                                table1.SetTotalWidth(new float[] { 8f, 50f, 20f, 15f, 18f, 13f });
                            else
                                table1.SetTotalWidth(new float[] { 8f, 50f, 20f, 15f, 18f, 12f, 13f });
                            //}

                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_LEFT;
                            //paragraph.SpacingBefore = 4;
                            paragraph.Font = font7;
                            string recType = e.ProposalDetail_RecType.ToString();
                            if (recType == "OTHER")
                                recType = "OT";
                            string inwardTypeValue = obj.getInwardTypeName(recType);
                            if (testName.Equals("SBC by SPT") || testName.Equals("Water Test for Drinking/Domestic Purpose"))
                                paragraph.Add(SnoRecType + ")" + testName + " :");
                            else
                                paragraph.Add(SnoRecType + ")" + inwardTypeValue + " :");
                            paragraph.SpacingAfter = 5;
                            pdfDoc.Add(paragraph);

                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                        }

                        if (i >= mergeFrom && i <= mergeTo)
                        {


                            cell1 = new PdfPCell(new Phrase((i).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);


                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Particular, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            if (i == mergeFrom)
                            {
                                if (!testName.Equals("Water Test for Drinking/Domestic Purpose"))
                                    cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Unit.ToString(), fontH1));
                                else
                                    cell1 = new PdfPCell(new Phrase(e.ProposalDetail_TestMethod.ToString(), fontH1));

                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                cell1.Rowspan = rowSpan;
                                table1.AddCell(cell1);



                                cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Rate).ToString(), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                cell1.Rowspan = rowSpan;
                                table1.AddCell(cell1);


                                cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_DiscountedRate).ToString(), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                cell1.Rowspan = rowSpan;
                                table1.AddCell(cell1);

                                if (qtyFlag == 1)//print with qty
                                {
                                    cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Quanity.ToString(), fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                    cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                    cell1.Rowspan = rowSpan;
                                    table1.AddCell(cell1);
                                }

                                cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Amount).ToString(), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                cell1.VerticalAlignment = Element.ALIGN_MIDDLE;
                                cell1.Rowspan = rowSpan;
                                table1.AddCell(cell1);
                                subTotal += Convert.ToDouble(e.ProposalDetail_Amount);
                            }
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase((i).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Particular, fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.AddCell(cell1);

                            if (!testName.Equals("Water Test for Drinking/Domestic Purpose"))
                                cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Unit.ToString(), fontH1));
                            else
                                cell1 = new PdfPCell(new Phrase(e.ProposalDetail_TestMethod.ToString(), fontH1));

                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Rate).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_DiscountedRate).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            if (qtyFlag == 1)//print with qty
                            {
                                cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Quanity.ToString(), fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Amount).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                            subTotal += Convert.ToDouble(e.ProposalDetail_Amount);
                        }
                        i++;
                    }
                    cell1 = new PdfPCell(new Phrase("Net Total ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    if (qtyFlag == 1)//print with qty
                        cell1.Colspan = 6;
                    else
                        cell1.Colspan = 5;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(netAmount.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("GST(18%) ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    if (qtyFlag == 1)//print with qty
                        cell1.Colspan = 6;
                    else
                        cell1.Colspan = 5;
                    table1.AddCell(cell1);
                    //gstAmount = subTotal * (0.18);
                    cell1 = new PdfPCell(new Phrase(gstAmount.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    if (roundOffAmount != 0)
                    {
                        cell1 = new PdfPCell(new Phrase("Round Off ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        if (qtyFlag == 1)//print with qty
                            cell1.Colspan = 6;
                        else
                            cell1.Colspan = 5;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(roundOffAmount.ToString("0.00"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }

                    cell1 = new PdfPCell(new Phrase("Total ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    if (qtyFlag == 1)//print with qty
                        cell1.Colspan = 6;
                    else
                        cell1.Colspan = 5;
                    table1.AddCell(cell1);
                    //GrandTotal = subTotal + gstAmount;
                    cell1 = new PdfPCell(new Phrase(GrandTotal.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);


                    if (materialType.Equals("GT"))
                    {
                        if (gtDiscNote != "")
                        {
                            cell1 = new PdfPCell(new Phrase(gtDiscNote.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                            if (qtyFlag == 1)//print with qty
                                cell1.Colspan = 7;
                            else
                                cell1.Colspan = 6;
                            table1.AddCell(cell1);
                        }
                    }
                }
                else if (qtyFlag == 0)
                {

                    string[] headers;
                    string prvRecType = "";
                    if (testName.Equals("Structural Audit"))
                    {
                        headers = new string[] { "Sr.No", "Members", "Samples", "Unit Rate", "Discounted Rate", "Amount" };
                    }
                    else
                    {
                        headers = new string[] { "Sr.No", "Particular", "Test Method", "Unit Rate", "Discounted Rate" };
                    }
                    var details = dc.ProposalDetail_View(proposalNo);
                    foreach (var e in details)
                    {
                        if (SNo == 1)
                        {
                            table1 = new PdfPTable(5);
                            table1.WidthPercentage = 100;
                            //table1.SpacingBefore = 4;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.SetTotalWidth(new float[] { 8f, 35f, 28f, 15f, 15f });

                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_LEFT;
                            paragraph.Font = font7;
                            string recType = e.ProposalDetail_RecType.ToString();
                            if (recType == "OTHER")
                                recType = "OT";
                            string inwardTypeValue = obj.getInwardTypeName(recType);

                            if (!testName.Equals(""))
                                paragraph.Add(SnoRecType + ")" + testName + " :");
                            else
                            {
                                if (recType.Equals("Coupon"))
                                    paragraph.Add(SnoRecType + ")Concrete Cube Testing Coupons :");
                                else if (recType.Equals("WT"))
                                    paragraph.Add(SnoRecType + ")Water Testing Construction Purpose :");
                                else
                                    paragraph.Add(SnoRecType + ")" + inwardTypeValue + " :");
                            }

                            paragraph.SpacingAfter = 5;
                            pdfDoc.Add(paragraph);

                            if (testName == "Structural Audit" && strStructAudDetails != "")
                            {
                                string[] strDetails = strStructAudDetails.Split('~');
                                float[] widths = new float[] { 22f, 1f, 28f, 37f, 1f, 12f };
                                PdfPTable table2 = new PdfPTable(6);  //tbl
                                table2.WidthPercentage = 100;
                                table2.SetWidths(widths);
                                PdfPCell Cust_Namecell;
                                table2.SpacingBefore = 1;

                                Cust_Namecell = new PdfPCell(new Phrase("Name of Apartment / Society", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[0], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase("Builtup Area of Society", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[2], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                Cust_Namecell = new PdfPCell(new Phrase("Address", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[1], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase("No of buildings in Society", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[3], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                Cust_Namecell = new PdfPCell(new Phrase("Age of Building", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[4], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase("All buildings constructed with in 5 years range ?", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[5], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                Cust_Namecell = new PdfPCell(new Phrase("Location", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[6], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase("Any additional loads expected on building", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[7], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                Cust_Namecell = new PdfPCell(new Phrase("Any Distress Observed - Cracks wider than 1mm, more than 1 m length  and growing in last one year by 25% ", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                Cust_Namecell.Colspan = 4;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[8], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                pdfDoc.Add(table2);
                            }

                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                        }


                        if (e.ProposalDetail_RecType != prvRecType && prvRecType != "")
                        {
                            SnoRecType++;
                            pdfDoc.Add(table1);


                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_LEFT;
                            paragraph.Font = font7;
                            string recType = e.ProposalDetail_RecType.ToString();
                            if (recType == "OTHER")
                                recType = "OT";
                            string inwardTypeValue = obj.getInwardTypeName(recType);
                            if (!testName.Equals(""))
                                paragraph.Add(SnoRecType + ")" + testName + " :");
                            else
                            {
                                if (recType.Equals("Coupon"))
                                    paragraph.Add(SnoRecType + ")Concrete Cube Testing Coupons :");
                                else if (recType.Equals("WT"))
                                    paragraph.Add(SnoRecType + ")Water Testing Construction Purpose :");
                                else
                                    paragraph.Add(SnoRecType + ")" + inwardTypeValue + " :");
                            }
                            paragraph.SpacingAfter = 5;
                            pdfDoc.Add(paragraph);

                            SNo = 1;
                            table1 = new PdfPTable(5);
                            table1.WidthPercentage = 100;
                            //table1.SpacingBefore =1;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.SetTotalWidth(new float[] { 8f, 35f, 28f, 15f, 15f });

                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                        }
                        cell1 = new PdfPCell(new Phrase((SNo).ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Particular, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(e.ProposalDetail_TestMethod, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                        if (Convert.ToDecimal(e.ProposalDetail_Rate) > 0)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Rate).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Rate.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (Convert.ToDecimal(e.ProposalDetail_DiscountedRate) > 0)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_DiscountedRate).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_DiscountedRate.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        prvRecType = e.ProposalDetail_RecType;
                        SNo++;
                    }


                }
                else //if we want to print qty
                {
                    string[] headers;
                    string prvRecType = "";
                    if (testName.Equals("Structural Audit"))
                    {
                        headers = new string[] { "Sr.No", "Members", "Samples", "Unit Rate", "Discounted Rate", "Qty", "Amount" };
                    }
                    else
                    {
                        headers = new string[] { "Sr.No", "Particular", "Test Method", "Unit Rate", "Discounted Rate", "Qty", "Amount" };
                    }
                    var details = dc.ProposalDetail_View(proposalNo);
                    foreach (var e in details)
                    {
                        if (SNo == 1)
                        {
                            table1 = new PdfPTable(7);
                            table1.WidthPercentage = 100;
                            //table1.SpacingBefore = 4;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.SetTotalWidth(new float[] { 8f, 32f, 30f, 12f, 15f, 7f, 10f });

                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_LEFT;
                            paragraph.Font = font7;
                            string recType = e.ProposalDetail_RecType.ToString();
                            if (recType == "OTHER")
                                recType = "OT";
                            string inwardTypeValue = obj.getInwardTypeName(recType);
                            if (!testName.Equals(""))
                                paragraph.Add(SnoRecType + ")" + testName + " :");
                            else
                            {
                                if (recType.Equals("Coupon"))
                                    paragraph.Add(SnoRecType + ")Concrete Cube Testing Coupons :");
                                else if (recType.Equals("WT"))
                                    paragraph.Add(SnoRecType + ")Water Testing Construction Purpose :");
                                else
                                    paragraph.Add(SnoRecType + ")" + inwardTypeValue + " :");
                            }
                            paragraph.SpacingAfter = 5;
                            pdfDoc.Add(paragraph);

                            if (testName == "Structural Audit" && strStructAudDetails != "")
                            {
                                string[] strDetails = strStructAudDetails.Split('~');
                                float[] widths = new float[] { 22f, 1f, 28f, 37f, 1f, 12f };
                                PdfPTable table2 = new PdfPTable(6);  //tbl
                                table2.WidthPercentage = 100;
                                table2.SetWidths(widths);
                                PdfPCell Cust_Namecell;
                                table2.SpacingBefore = 1;

                                Cust_Namecell = new PdfPCell(new Phrase("Name of Apartment / Society", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[0], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase("Builtup Area of Society", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[2], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                Cust_Namecell = new PdfPCell(new Phrase("Address", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[1], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase("No of buildings in Society", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[3], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                Cust_Namecell = new PdfPCell(new Phrase("Age of Building", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[4], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase("All buildings constructed with in 5 years range ?", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[5], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                Cust_Namecell = new PdfPCell(new Phrase("Location", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[6], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase("Any additional loads expected on building", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[7], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                Cust_Namecell = new PdfPCell(new Phrase("Any Distress Observed - Cracks wider than 1mm, more than 1 m length  and growing in last one year by 25% ", fontH2));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                Cust_Namecell.Colspan = 4;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(":", fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);
                                Cust_Namecell = new PdfPCell(new Phrase(strDetails[8], fontH1));
                                Cust_Namecell.Border = PdfPCell.NO_BORDER;
                                table2.AddCell(Cust_Namecell);

                                pdfDoc.Add(table2);
                            }

                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }

                        }

                        if (e.ProposalDetail_RecType != prvRecType && prvRecType != "")
                        {
                            SnoRecType++;
                            cell1 = new PdfPCell(new Phrase("Total ", fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                            cell1.Colspan = 6;
                            table1.AddCell(cell1);

                            cell1 = new PdfPCell(new Phrase(subTotal.ToString("0.00"), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                            pdfDoc.Add(table1);




                            subTotal = 0.00;
                            paragraph = new Paragraph();
                            paragraph.Alignment = Element.ALIGN_LEFT;
                            paragraph.Font = font7;
                            string recType = e.ProposalDetail_RecType.ToString();
                            if (recType == "OTHER")
                                recType = "OT";
                            string inwardTypeValue = obj.getInwardTypeName(recType);
                            if (!testName.Equals(""))
                                paragraph.Add(SnoRecType + ")" + testName + " :");
                            else
                            {
                                if (recType.Equals("Coupon"))
                                    paragraph.Add(SnoRecType + ")Concrete Cube Testing Coupons :");
                                else if (recType.Equals("WT"))
                                    paragraph.Add(SnoRecType + ")Water Testing Construction Purpose :");
                                else
                                    paragraph.Add(SnoRecType + ")" + inwardTypeValue + " :");
                            }
                            paragraph.SpacingBefore = 2;
                            paragraph.SpacingAfter = 5;
                            pdfDoc.Add(paragraph);

                            SNo = 1;
                            table1 = new PdfPTable(7);
                            table1.WidthPercentage = 100;
                            //table1.SpacingBefore = 1;
                            table1.HorizontalAlignment = Element.ALIGN_LEFT;
                            table1.SetTotalWidth(new float[] { 8f, 32f, 30f, 12f, 15f, 7f, 10f });
                            ///table1.SetTotalWidth(new float[] { 8f, 40f, 15f, 12f, 15f, 7f, 10f });

                            for (int h = 0; h < headers.Count(); h++)
                            {
                                cell1 = new PdfPCell(new Phrase(headers[h], fontH2));
                                cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                                table1.AddCell(cell1);
                            }


                        }

                        cell1 = new PdfPCell(new Phrase((SNo).ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Particular, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(e.ProposalDetail_TestMethod, fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.AddCell(cell1);

                        if (Convert.ToDecimal(e.ProposalDetail_Rate) > 0)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Rate).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Rate.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        if (Convert.ToDecimal(e.ProposalDetail_DiscountedRate) > 0)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_DiscountedRate).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_DiscountedRate.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }

                        cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Quanity).ToString(), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);

                        if (Convert.ToDecimal(e.ProposalDetail_Amount) > 0)
                        {
                            cell1 = new PdfPCell(new Phrase(Convert.ToDecimal(e.ProposalDetail_Amount).ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);

                        }
                        else
                        {
                            cell1 = new PdfPCell(new Phrase(e.ProposalDetail_Amount.ToString(), fontH1));
                            cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            table1.AddCell(cell1);
                        }
                        subTotal += Convert.ToDouble(e.ProposalDetail_Amount);
                        prvRecType = e.ProposalDetail_RecType;
                        SNo++;
                    }
                    if (SnoRecType > 1)
                    {
                        cell1 = new PdfPCell(new Phrase("Total ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        cell1.Colspan = 6;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase(subTotal.ToString("0.00"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }


                    cell1 = new PdfPCell(new Phrase("Net Total ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = 6;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase(netAmount.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("GST(18%) ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = 6;
                    table1.AddCell(cell1);
                    //gstAmount = subTotal * (0.18);
                    cell1 = new PdfPCell(new Phrase(gstAmount.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                    if (roundOffAmount != 0)
                    {
                        cell1 = new PdfPCell(new Phrase("Round Off ", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                        cell1.Colspan = 6;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(roundOffAmount.ToString("0.00"), fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                        table1.AddCell(cell1);
                    }
                    cell1 = new PdfPCell(new Phrase("Grand Total ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_RIGHT;
                    cell1.Colspan = 6;
                    table1.AddCell(cell1);
                    // GrandTotal = gstAmount + subTotal;
                    cell1 = new PdfPCell(new Phrase(GrandTotal.ToString("0.00"), fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);

                }

                pdfDoc.Add(table1);


                #region MF table
                if (materialType.Equals("MF"))
                {
                    table1 = new PdfPTable(3);
                    table1.WidthPercentage = 60;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetTotalWidth(new float[] { 8f, 35f, 20f });
                    //table1.SpacingBefore = 2;
                    //table1.SpacingAfter = 2;
                    cell1 = new PdfPCell(new Phrase("\n", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 3;
                    table1.AddCell(cell1); cell1 = new PdfPCell(new Phrase("Sample requirements for Mix Design is as below :", font7));
                    cell1.FixedHeight = 18f;
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 3;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Material Requirements for one Mix Design", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    cell1.Colspan = 3;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Sr. No", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Material", fontH2));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Qty.(Bag/Kg)", fontH2));
                    cell1.FixedHeight = 14f;
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("1", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Cement", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("50kg - 1 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("2", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Crushed Sand", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("30kg - 3 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("3", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("River Sand", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("30kg - 3 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("4", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("10mm", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("30kg - 3 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("5", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("20mm", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("30kg - 4 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("6", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Fly Ash", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("30kg - 1 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("7", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("GGBS", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("30kg - 1 Bag", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("8", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Admixture", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("2 Ltr", fontH3));
                    cell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    table1.AddCell(cell1);
                    pdfDoc.Add(table1);
                }
                #endregion

                #endregion
                int tableRowsCount = table1.Rows.Count;

                it.List list = new it.List(it.List.UNORDERED, 7f);
                list.SetListSymbol("\u2022");
                list.IndentationLeft = 25;

                it.List listTerms = new it.List(it.List.UNORDERED, 7f);
                listTerms.SetListSymbol("\u2022");
                listTerms.IndentationLeft = 25;

                //only for GT
                #region GT
                if (materialType.Equals("GT") || materialType.Equals("RWH") || testName.Equals("Plate Load Testing") || testName.Equals("Earth Resistivity Test") || testName.Equals("SBC by SPT"))
                {

                    #region Additional Charges
                    if (proposalAddChargesNote != "")
                    {
                        table1 = new PdfPTable(2);
                        table1.WidthPercentage = 100;
                        table1.SpacingBefore = 4;
                        table1.HorizontalAlignment = Element.ALIGN_LEFT;
                        table1.SetTotalWidth(new float[] { 3.5f, 96.5f });

                        cell1 = new PdfPCell(new Phrase("\nAdditional Charges :", font7));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Following additional charges are applicable :", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        int cnt = 1;
                        string[] notedata = proposalAddChargesNote.Split('|');
                        foreach (string note in notedata)
                        {
                            if (note != "")
                            {
                                cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                                cell1.PaddingRight = 0;
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(note, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.PaddingLeft = 1;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cnt++;

                            }
                        }
                        pdfDoc.Add(table1);
                    }
                    #endregion

                    #region Payment Terms 

                    pdfDoc.NewPage();

                    table1 = new PdfPTable(2);
                    table1.WidthPercentage = 100;
                    table1.SpacingBefore = 4;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetTotalWidth(new float[] { 3.5f, 96.5f });

                    cell1 = new PdfPCell(new Phrase("Payment Terms :", font7));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);

                    if (paymentTerm != "")
                    {
                        int cnt = 1;
                        bool belowFlagFound = false;
                        string[] notedata = paymentTerm.Split('|');
                        foreach (string note in notedata)
                        {
                            if (note != "")
                            {
                                if (belowFlagFound == true)
                                    cell1 = new PdfPCell(new Phrase("", fontH1));
                                else
                                    cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));

                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.PaddingRight = 0;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(note, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.PaddingLeft = 1;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cnt++;
                                if (note.ToLower().Contains("below") == true)
                                {
                                    belowFlagFound = true;
                                }
                            }
                        }

                    }
                    else
                    {
                        cell1 = new PdfPCell(new Phrase("1)", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.PaddingRight = 0;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Mobilization charges and 50% advance to be paid before mobilization of equipment at site.", fontH1));
                        cell1.PaddingLeft = 1;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("2)", fontH1));
                        cell1.PaddingRight = 0;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("25% of bill value to be paid after submission of provisional report.", fontH1));
                        cell1.PaddingLeft = 1;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("3)", fontH1));
                        cell1.PaddingRight = 0;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Balanced 25% of bill value to be paid within two weeks of submission of final report.", fontH1));
                        cell1.PaddingLeft = 1;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("4)", fontH1));
                        cell1.PaddingRight = 0;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("Visit of our competent Technical Officer after conducting the geotechnical investigation or during site exploration for inspection or verification will be charged extra as below:-", fontH1));
                        cell1.PaddingLeft = 1;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("   ", fontH1));
                        cell1.PaddingRight = 0;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("   a)    PMC & PCMC - Rs. 5000 (Travelling & GST Extra).", fontH1));
                        cell1.PaddingLeft = 1;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("   ", fontH1));
                        cell1.PaddingRight = 0;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("   b)    Out of Pune – Rs. 7500 (Travelling & GST Extra).", fontH1));
                        cell1.PaddingLeft = 1;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                    }
                    #endregion

                    #region bank details 

                    //table1 = new PdfPTable(1);
                    //table1.WidthPercentage = 100;
                    //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    //table1.SetTotalWidth(new float[] { 60f });

                    cell1 = new PdfPCell(new Phrase("\nBank Details (For on line Payment) : ", font7));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Account Name : Durocrete Engineering Services Pvt. Ltd.", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Bank Name : HDFC Bank Ltd.", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);

                    //if (cnStr.ToLower().Contains("mumbai") == true)
                    if (strRegion == "MUM")
                    {
                        cell1 = new PdfPCell(new Phrase("Branch : Sector 17, Vashi", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Account Type : Current", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Account No : 05402000024568", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("IFSC Code : HDFC0000540", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                    }
                    //else if (cnStr.ToLower().Contains("nashik") == true)
                    else if (strRegion == "NSK")
                    {

                        cell1 = new PdfPCell(new Phrase("Branch : Bhandarkar Road, Pune", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Account Type : Current", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Account No : 50200023762951", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("IFSC Code : HDFC0000007", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                    }
                    else
                    {

                        cell1 = new PdfPCell(new Phrase("Branch : Hingne Khurd,Pune", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Account Type : Current", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Account No : 08252000000218", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("IFSC Code : HDFC0000825", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                    }

                    cell1 = new PdfPCell(new Phrase("GST No. of Service Provider : 27AABCD2992C2ZS", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);

                    string sacCode = "998346";
                    if (materialType.Contains("GT") || materialType.Contains("SO"))
                        sacCode = "998341";
                    cell1 = new PdfPCell(new Phrase("SAC Code : " + sacCode + " \n ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);

                    //pdfDoc.Add(table1);
                    #endregion

                    #region Terms & Conditions
                    cell1 = new PdfPCell(new Phrase("\nTerms & Conditions :", font7));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);

                    if (proposalDetailNote != "")
                    {
                        int cnt = 1;
                        string[] notedata = proposalDetailNote.Split('|');
                        foreach (string note in notedata)
                        {
                            if (note != "" && !note.Equals("GST @ 18% will be applicable extra."))
                            {
                                cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                                cell1.PaddingRight = 0;
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(note, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.PaddingLeft = 1;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cnt++;

                            }
                        }
                        cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                        cell1.PaddingRight = 0;
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("This is not GST Tax Invoice. To avail GST credit, Please ask for GST Tax Invoice.", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.PaddingLeft = 1;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                    }
                    #endregion

                    //pdfDoc.Add(table1);                    

                    #region services
                    //table1 = new PdfPTable(2);
                    //table1.WidthPercentage = 100;
                    //table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    //table1.SetTotalWidth(new float[] { 3.5f, 96.5f });

                    cell1 = new PdfPCell(new Phrase("We are a Leading Construction Material testing laboratory in Western Maharashtra. We have testing infrastructure in Mumbai,Pune & Nashik. Our Pune & Mumbai Labs are accredited under NABL(ISO 17025) covering more than 150 tests in Building Construction", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("\nWe provide testing services in following areas : ", font7));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("1)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Geotechnical Investigation and soil testing.", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("2)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Contour Survey( Land Survey ).", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("3)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Rain Water Harvesting.", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("4)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Pile Integrity and Pile Dynamic test on pile foundations using state of the art testing equipment.", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("5)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Concrete Mix design and onsite support for concrete mix designs.", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("6)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Testing of concrete and other building materials as per IS and other relevant standards.", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("7)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Non Destructive Test of Concrete & Structural Steel.", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("8)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Concrete Core Test on RCC Structure.", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("9)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Slab deflection test(Slab Load Test).", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("10)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Chemical analysis of Cement, Water, Concrete, Steel and Construction Chemicals.", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("11)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Testing of all type of Finishing items - Tile, Door, Plywood, POP, Gypsum & Paint.", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("12)", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("Structural Stability for Commercial, Residential Industrial projects.", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);
                    cell1 = new PdfPCell(new Phrase("We would be pleased to add value to your project through above services. \n ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);
                    #endregion

                    pdfDoc.Add(table1);

                }
                #endregion
                else
                {
                    table1 = new PdfPTable(2);
                    table1.WidthPercentage = 100;
                    table1.SpacingBefore = 4;
                    table1.HorizontalAlignment = Element.ALIGN_LEFT;
                    table1.SetTotalWidth(new float[] { 3.5f, 96.5f });

                    #region Payment Terms
                    cell1 = new PdfPCell(new Phrase("\nPayment Terms  :", font7));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Colspan = 2;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    string[] arrPayTerm = { "You shall issue us a firm work order/email confirmation from company mail ID in favour of ' Durocrete Engineering Services Pvt. Ltd '.",
                        "Payment- Provide 100% advance along with work order/email confirmation.",
                        "You can place order by filling the Test Request Form on Durocrete APP to get additional 5% discount.",
                        "Delay of payment beyond 30 days from the date of billing shall charge an interest of 2% per month on the outstanding amount.",
                        "This is not GST Tax Invoice. To avail GST credit, please ask for GST Tax Invoice.",
                        "All payments shall be made by Demand Draft ,Cheque or NEFT payable at Pune/Mumbai/Nashik."  };
                    if (paymentTerm != "")
                    {
                        arrPayTerm[1] = paymentTerm;
                    }
                    for (int i = 0; i < arrPayTerm.Length; i++)
                    {
                        cell1 = new PdfPCell(new Phrase((i + 1) + ")", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.PaddingRight = 0;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(arrPayTerm[i], fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.PaddingLeft = 1;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                    }

                    #endregion


                    #region note mix design
                    if (materialType.Equals("MF"))
                    {
                        cell1 = new PdfPCell(new Phrase("\n Note: ", font7));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Site Trial charges for mix design", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("a) For 4 hours visit- Within PMC & PCMC - Rs. 5000 (GST Extra).", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("b) For 8 hours visit- Within PMC & PCMC - Rs. 7500 (GST Extra) .", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase("c) Out of Pune- Rs. 15000 per day (Travelling & GST Extra).", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                    }

                    #endregion
                    #region bank details                     
                    cell1 = new PdfPCell(new Phrase("\nBank Details (For on line Payment) : ", font7));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Account Name : Durocrete Engineering Services Pvt. Ltd.", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("Bank Name : HDFC Bank Ltd.", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);

                    //if (cnStr.ToLower().Contains("mumbai") == true)
                    if (strRegion == "MUM")
                    {
                        cell1 = new PdfPCell(new Phrase("Branch : Sector 17, Vashi", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Account Type : Current", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Account No : 05402000024568", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("IFSC Code : HDFC0000540", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                    }
                    //else if (cnStr.ToLower().Contains("nashik") == true)
                    else if (strRegion == "NSK")
                    {

                        cell1 = new PdfPCell(new Phrase("Branch : Bhandarkar Road, Pune", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Account Type : Current", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Account No : 50200023762951", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("IFSC Code : HDFC0000007", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                    }
                    else
                    {

                        cell1 = new PdfPCell(new Phrase("Branch : Hingne Khurd,Pune", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Account Type : Current", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("Account No : 08252000000218", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                        cell1 = new PdfPCell(new Phrase("IFSC Code : HDFC0000825", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Border = PdfPCell.NO_BORDER;
                        cell1.Colspan = 2;
                        table1.AddCell(cell1);

                    }

                    cell1 = new PdfPCell(new Phrase("GST No. of Service Provider : 27AABCD2992C2ZS", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);

                    string sacCode = "998346";
                    if (materialType.Contains("GT") || materialType.Contains("SO"))
                        sacCode = "998341";
                    cell1 = new PdfPCell(new Phrase("SAC Code : " + sacCode + " \n ", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);

                    #endregion

                    #region Terms & Conditions
                    if (proposalDetailNote != "")
                    {
                        cell1 = new PdfPCell(new Phrase("\nGeneral Terms & Conditions :", font7));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.Colspan = 2;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);

                        int cnt = 1;
                        string[] notedata = proposalDetailNote.Split('|');
                        foreach (string note in notedata)
                        {
                            if (note != "")
                            {
                                cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.PaddingRight = 0;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cell1 = new PdfPCell(new Phrase(note, fontH1));
                                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                cell1.PaddingLeft = 1;
                                cell1.Border = PdfPCell.NO_BORDER;
                                table1.AddCell(cell1);
                                cnt++;
                                if (cnt == 2 && clientScope != "")
                                {
                                    cell1 = new PdfPCell(new Phrase(cnt + ")", fontH1));
                                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                    cell1.Border = PdfPCell.NO_BORDER;
                                    table1.AddCell(cell1);

                                    cell1 = new PdfPCell(new Phrase("Client Scope :", fontH4));
                                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                    cell1.Border = PdfPCell.NO_BORDER;
                                    table1.AddCell(cell1);
                                    cnt++;

                                    int csCnt = 1;
                                    string[] clScope = clientScope.Split('|');
                                    foreach (string csNote in clScope)
                                    {
                                        if (csNote != "")
                                        {
                                            cell1 = new PdfPCell(new Phrase("", fontH1));
                                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                            cell1.Border = PdfPCell.NO_BORDER;
                                            table1.AddCell(cell1);
                                            cell1 = new PdfPCell(new Phrase(csCnt + ") " + csNote, fontH1));
                                            cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                                            //cell1.PaddingLeft = 10;
                                            cell1.Border = PdfPCell.NO_BORDER;
                                            table1.AddCell(cell1);
                                            csCnt++;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    #endregion

                    #region Value Addition Services   
                    cell1 = new PdfPCell(new Phrase("\nWe are a Leading Construction Material testing laboratory in Western Maharashtra. We have testing infrastructure in Mumbai,Pune & Nashik. Our Pune & Mumbai Labs are accredited under NABL(ISO 17025) covering more than 150 tests in Building Construction", fontH1));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Border = PdfPCell.NO_BORDER;
                    cell1.Colspan = 2;
                    table1.AddCell(cell1);

                    cell1 = new PdfPCell(new Phrase("\nValue Addition Services  :", font7));
                    cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                    cell1.Colspan = 2;
                    cell1.Border = PdfPCell.NO_BORDER;
                    table1.AddCell(cell1);

                    string[] arrNote = { "Land Survey - Contour Survey, Plane Table and Boundry Marking by Total Station/Drone.",
                    "Geo technical Investigations & Geo Engineering.",
                    "Rain Water Harvesting & Electrical Resistivity Test.",
                    "Pile Integrity, Pile Dynamic Test and Footing Load Test.",
                    "Concrete Mix design & On site technical support.",
                    "Technical  training for good concreting (Construction) practices.",
                    "Testing of concrete & other building material.",
                    "Concrete Permeability & Durability Test.",
                    "Non Destructive Test of Concrete & Structural members.",
                    "Concrete Core Test on RCC structure.",
                    "Slab Deflection Test.",
                    "Pull Out Test for Plaster, Rebar & Rock Anchors.",
                    "Testing of all types of finishing items – Tile, Door, Plywood, POP, Morter, Gypsum & Paint.",
                    "Chemical analysis of Cement, Fly Ash, Gypsum, GGBS, Water, Concrete, Steel, Paint & Construction Chemicals.",
                    "Structural Assessment for Commercial, Residential & Industrial projects.",
                    "Retrofitting Design Scheme & Repair measures." };

                    for (int i = 0; i < arrNote.Length; i++)
                    {
                        cell1 = new PdfPCell(new Phrase((i + 1) + ")", fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.PaddingRight = 0;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                        cell1 = new PdfPCell(new Phrase(arrNote[i], fontH1));
                        cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                        cell1.PaddingLeft = 1;
                        cell1.Border = PdfPCell.NO_BORDER;
                        table1.AddCell(cell1);
                    }
                    #endregion

                    pdfDoc.Add(table1);
                }

                table1 = new PdfPTable(1);
                table1.SpacingBefore = 10;
                table1.WidthPercentage = 100;
                table1.HorizontalAlignment = Element.ALIGN_LEFT;
                table1.SetTotalWidth(new float[] { 100f });

                cell1 = new PdfPCell(new Phrase("Thanking You,", fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("For Durocrete Engineering Services Pvt. Ltd. \n \n ", fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase(userNm, fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("(" + userDesgn.Replace("(", "").Replace(")", "") + ")", fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                string tollFree = "";
                //if (cnStr.ToLower().Contains("mumbai") == true)
                if (strRegion == "MUM")
                    tollFree = " 9850500013";
                //else if (cnStr.ToLower().Contains("nashik") == true)
                else if (strRegion == "NSK")
                    tollFree = "";
                else
                    tollFree = "18001206465";
                cell1 = new PdfPCell(new Phrase("(" + tollFree + ")", fontH2));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("\nFor further clarification you may contact :", fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Name : " + meName, fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);

                cell1 = new PdfPCell(new Phrase("Contact No : " + meContact, fontH1));
                cell1.HorizontalAlignment = Element.ALIGN_LEFT;
                cell1.Border = PdfPCell.NO_BORDER;
                table1.AddCell(cell1);
                pdfDoc.Add(table1);

                pdfDoc.Close();

                if (Action != "Email")
                {
                    string pdfPath = @Subfoldername1 + "/" + fileName;
                    DownloadReport(fileName, pdfPath);
                }
                //lblFound:
                //    { }
            }
            catch (Exception ex)
            {
                string s = ex.Message;
            }
        }
        #endregion
    }
}